
017_1_STM32_GLCD_RFID_READER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e88  08015e88  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08015e88  08015e88  00025e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e90  08015e90  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e90  08015e90  00025e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e94  08015e94  00025e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08015e98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005654  2000018c  08016024  0003018c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200057e0  08016024  000357e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013578  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d7  00000000  00000000  00043732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00046910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00047aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265d4  00000000  00000000  00048a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a4c  00000000  00000000  0006f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8cf3  00000000  00000000  00085ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0015e7ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005474  00000000  00000000  0015e880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00163cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00163dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013a30 	.word	0x08013a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08013a30 	.word	0x08013a30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000588:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <GUI_X_Config+0x18>)
 800058e:	f00e fe2b 	bl	800f1e8 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <GUI_X_Config+0x1c>)
 8000594:	f00d f9da 	bl	800d94c <GUI_SetDefaultFont>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200001a8 	.word	0x200001a8
 80005a0:	08014120 	.word	0x08014120

080005a4 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LcdWriteReg+0x3c>)
 80005c4:	f002 fa0c 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <LcdWriteReg+0x3c>)
 80005ce:	f002 fa07 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2301      	movs	r3, #1
 80005d6:	2201      	movs	r2, #1
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <LcdWriteReg+0x40>)
 80005da:	f002 ff5a 	bl	8003492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2102      	movs	r1, #2
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <LcdWriteReg+0x3c>)
 80005e4:	f002 f9fc 	bl	80029e0 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020800 	.word	0x40020800
 80005f4:	200052ac 	.word	0x200052ac

080005f8 <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <LcdWriteData+0x3c>)
 8000618:	f002 f9e2 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <LcdWriteData+0x3c>)
 8000622:	f002 f9dd 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2301      	movs	r3, #1
 800062a:	2201      	movs	r2, #1
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LcdWriteData+0x40>)
 800062e:	f002 ff30 	bl	8003492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2102      	movs	r1, #2
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <LcdWriteData+0x3c>)
 8000638:	f002 f9d2 	bl	80029e0 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020800 	.word	0x40020800
 8000648:	200052ac 	.word	0x200052ac

0800064c <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 8000656:	e011      	b.n	800067c <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LcdWriteDataMultiple+0x44>)
 800065e:	f002 f9bf 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <LcdWriteDataMultiple+0x44>)
 8000668:	f002 f9ba 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	1c4b      	adds	r3, r1, #1
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	2301      	movs	r3, #1
 8000674:	2201      	movs	r2, #1
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <LcdWriteDataMultiple+0x48>)
 8000678:	f002 ff0b 	bl	8003492 <HAL_SPI_Transmit>
	while (NumItems--)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	603a      	str	r2, [r7, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e8      	bne.n	8000658 <LcdWriteDataMultiple+0xc>
  }
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020800 	.word	0x40020800
 8000694:	200052ac 	.word	0x200052ac

08000698 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 80006a2:	bf00      	nop
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	603a      	str	r2, [r7, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1fa      	bne.n	80006a4 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <LcdInit>:

void LcdInit(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	489a      	ldr	r0, [pc, #616]	; (8000930 <LcdInit+0x274>)
 80006c8:	f002 f98a 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	4897      	ldr	r0, [pc, #604]	; (8000930 <LcdInit+0x274>)
 80006d2:	f002 f985 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	4895      	ldr	r0, [pc, #596]	; (8000930 <LcdInit+0x274>)
 80006dc:	f002 f980 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 80006e0:	2002      	movs	r0, #2
 80006e2:	f001 febf 	bl	8002464 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	4891      	ldr	r0, [pc, #580]	; (8000930 <LcdInit+0x274>)
 80006ec:	f002 f978 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	488e      	ldr	r0, [pc, #568]	; (8000930 <LcdInit+0x274>)
 80006f6:	f002 f973 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	488c      	ldr	r0, [pc, #560]	; (8000930 <LcdInit+0x274>)
 8000700:	f002 f96e 	bl	80029e0 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	e005      	b.n	8000716 <LcdInit+0x5a>
		LcdWriteReg(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ff52 	bl	80005b4 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d9f6      	bls.n	800070a <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4883      	ldr	r0, [pc, #524]	; (8000930 <LcdInit+0x274>)
 8000722:	f002 f95d 	bl	80029e0 <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff44 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f001 fe98 	bl	8002464 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000734:	20cb      	movs	r0, #203	; 0xcb
 8000736:	f7ff ff3d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x39);
 800073a:	2039      	movs	r0, #57	; 0x39
 800073c:	f7ff ff64 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2C);
 8000740:	202c      	movs	r0, #44	; 0x2c
 8000742:	f7ff ff61 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff ff5e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x34);
 800074c:	2034      	movs	r0, #52	; 0x34
 800074e:	f7ff ff5b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x02);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff58 	bl	8000608 <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 8000758:	20cf      	movs	r0, #207	; 0xcf
 800075a:	f7ff ff2b 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff52 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 8000764:	20c1      	movs	r0, #193	; 0xc1
 8000766:	f7ff ff4f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x30);
 800076a:	2030      	movs	r0, #48	; 0x30
 800076c:	f7ff ff4c 	bl	8000608 <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 8000770:	20e8      	movs	r0, #232	; 0xe8
 8000772:	f7ff ff1f 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x85);
 8000776:	2085      	movs	r0, #133	; 0x85
 8000778:	f7ff ff46 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff43 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x78);
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f7ff ff40 	bl	8000608 <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 8000788:	20ea      	movs	r0, #234	; 0xea
 800078a:	f7ff ff13 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff3a 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff37 	bl	8000608 <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 800079a:	20ed      	movs	r0, #237	; 0xed
 800079c:	f7ff ff0a 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x64);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f7ff ff31 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff ff2e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x12);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f7ff ff2b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x81);
 80007b2:	2081      	movs	r0, #129	; 0x81
 80007b4:	f7ff ff28 	bl	8000608 <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80007b8:	20f7      	movs	r0, #247	; 0xf7
 80007ba:	f7ff fefb 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x20);
 80007be:	2020      	movs	r0, #32
 80007c0:	f7ff ff22 	bl	8000608 <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80007c4:	20c0      	movs	r0, #192	; 0xc0
 80007c6:	f7ff fef5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x23);
 80007ca:	2023      	movs	r0, #35	; 0x23
 80007cc:	f7ff ff1c 	bl	8000608 <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80007d0:	20c1      	movs	r0, #193	; 0xc1
 80007d2:	f7ff feef 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x10);
 80007d6:	2010      	movs	r0, #16
 80007d8:	f7ff ff16 	bl	8000608 <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80007dc:	20c5      	movs	r0, #197	; 0xc5
 80007de:	f7ff fee9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x3E);
 80007e2:	203e      	movs	r0, #62	; 0x3e
 80007e4:	f7ff ff10 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x28);
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f7ff ff0d 	bl	8000608 <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80007ee:	20c7      	movs	r0, #199	; 0xc7
 80007f0:	f7ff fee0 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x86);
 80007f4:	2086      	movs	r0, #134	; 0x86
 80007f6:	f7ff ff07 	bl	8000608 <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 80007fa:	2036      	movs	r0, #54	; 0x36
 80007fc:	f7ff feda 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x48);
 8000800:	2048      	movs	r0, #72	; 0x48
 8000802:	f7ff ff01 	bl	8000608 <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 8000806:	203a      	movs	r0, #58	; 0x3a
 8000808:	f7ff fed4 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x55);
 800080c:	2055      	movs	r0, #85	; 0x55
 800080e:	f7ff fefb 	bl	8000608 <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 8000812:	20b1      	movs	r0, #177	; 0xb1
 8000814:	f7ff fece 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fef5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x18);
 800081e:	2018      	movs	r0, #24
 8000820:	f7ff fef2 	bl	8000608 <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000824:	20b6      	movs	r0, #182	; 0xb6
 8000826:	f7ff fec5 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x08);
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff feec 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x82);
 8000830:	2082      	movs	r0, #130	; 0x82
 8000832:	f7ff fee9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x27);
 8000836:	2027      	movs	r0, #39	; 0x27
 8000838:	f7ff fee6 	bl	8000608 <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 800083c:	20f2      	movs	r0, #242	; 0xf2
 800083e:	f7ff feb9 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fee0 	bl	8000608 <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f7ff feb3 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x01);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff feda 	bl	8000608 <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000854:	20e0      	movs	r0, #224	; 0xe0
 8000856:	f7ff fead 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x0F);
 800085a:	200f      	movs	r0, #15
 800085c:	f7ff fed4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000860:	2031      	movs	r0, #49	; 0x31
 8000862:	f7ff fed1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x2B);
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f7ff fece 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 800086c:	200c      	movs	r0, #12
 800086e:	f7ff fecb 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 8000872:	200e      	movs	r0, #14
 8000874:	f7ff fec8 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 8000878:	2008      	movs	r0, #8
 800087a:	f7ff fec5 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x4E);
 800087e:	204e      	movs	r0, #78	; 0x4e
 8000880:	f7ff fec2 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xF1);
 8000884:	20f1      	movs	r0, #241	; 0xf1
 8000886:	f7ff febf 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x37);
 800088a:	2037      	movs	r0, #55	; 0x37
 800088c:	f7ff febc 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 8000890:	2007      	movs	r0, #7
 8000892:	f7ff feb9 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x10);
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff feb6 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff feb3 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008a2:	200e      	movs	r0, #14
 80008a4:	f7ff feb0 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x09);
 80008a8:	2009      	movs	r0, #9
 80008aa:	f7ff fead 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x00);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff feaa 	bl	8000608 <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80008b4:	20e1      	movs	r0, #225	; 0xe1
 80008b6:	f7ff fe7d 	bl	80005b4 <LcdWriteReg>
	LcdWriteData(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fea4 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0E);
 80008c0:	200e      	movs	r0, #14
 80008c2:	f7ff fea1 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x14);
 80008c6:	2014      	movs	r0, #20
 80008c8:	f7ff fe9e 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x03);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff fe9b 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x11);
 80008d2:	2011      	movs	r0, #17
 80008d4:	f7ff fe98 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fe95 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 80008de:	2031      	movs	r0, #49	; 0x31
 80008e0:	f7ff fe92 	bl	8000608 <LcdWriteData>
	LcdWriteData(0xC1);
 80008e4:	20c1      	movs	r0, #193	; 0xc1
 80008e6:	f7ff fe8f 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x48);
 80008ea:	2048      	movs	r0, #72	; 0x48
 80008ec:	f7ff fe8c 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x08);
 80008f0:	2008      	movs	r0, #8
 80008f2:	f7ff fe89 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f7ff fe86 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0C);
 80008fc:	200c      	movs	r0, #12
 80008fe:	f7ff fe83 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x31);
 8000902:	2031      	movs	r0, #49	; 0x31
 8000904:	f7ff fe80 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x36);
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f7ff fe7d 	bl	8000608 <LcdWriteData>
	LcdWriteData(0x0F);
 800090e:	200f      	movs	r0, #15
 8000910:	f7ff fe7a 	bl	8000608 <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000914:	2011      	movs	r0, #17
 8000916:	f7ff fe4d 	bl	80005b4 <LcdWriteReg>
	HAL_Delay(120);
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f001 fda2 	bl	8002464 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8000920:	2029      	movs	r0, #41	; 0x29
 8000922:	f7ff fe47 	bl	80005b4 <LcdWriteReg>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020800 	.word	0x40020800

08000934 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a0      	sub	sp, #128	; 0x80
 8000938:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800093a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2268      	movs	r2, #104	; 0x68
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f011 fddf 	bl	8012514 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	4916      	ldr	r1, [pc, #88]	; (80009b4 <LCD_X_Config+0x80>)
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <LCD_X_Config+0x84>)
 800095e:	f00c ff77 	bl	800d850 <GUI_DEVICE_CreateAndLink>
 8000962:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8000964:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	2000      	movs	r0, #0
 800096c:	f00b fc44 	bl	800c1f8 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8000970:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000974:	21f0      	movs	r1, #240	; 0xf0
 8000976:	2000      	movs	r0, #0
 8000978:	f00b fc26 	bl	800c1c8 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_ROTATION_180;
 800097c:	2307      	movs	r3, #7
 800097e:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8000980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000984:	4619      	mov	r1, r3
 8000986:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000988:	f00b fbbd 	bl	800c106 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_X_Config+0x88>)
 800098e:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LCD_X_Config+0x8c>)
 8000992:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_X_Config+0x90>)
 8000996:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LCD_X_Config+0x94>)
 800099a:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_X_Config+0x98>)
 800099e:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 80009a0:	4639      	mov	r1, r7
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LCD_X_Config+0x9c>)
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LCD_X_Config+0xa0>)
 80009a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80009a8:	f00b fbcb 	bl	800c142 <GUIDRV_FlexColor_SetFunc>
}
 80009ac:	bf00      	nop
 80009ae:	3780      	adds	r7, #128	; 0x80
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	080151f4 	.word	0x080151f4
 80009b8:	08015094 	.word	0x08015094
 80009bc:	080005b5 	.word	0x080005b5
 80009c0:	08000609 	.word	0x08000609
 80009c4:	0800064d 	.word	0x0800064d
 80009c8:	080005f9 	.word	0x080005f9
 80009cc:	08000699 	.word	0x08000699
 80009d0:	0800bac9 	.word	0x0800bac9
 80009d4:	0800b3c5 	.word	0x0800b3c5

080009d8 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d103      	bne.n	80009f2 <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80009ea:	f7ff fe67 	bl	80006bc <LcdInit>
    return 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e003      	b.n	80009fa <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80009f8:	697b      	ldr	r3, [r7, #20]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]

  switch (pMsg->MsgId) {
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f009 fa0e 	bl	8009e2c <WM_DefaultProc>
    break;
 8000a10:	bf00      	nop
  }
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <CreatePersonelGecis>:
/*********************************************************************
*
*       CreatePersonelGecis
*/
WM_HWIN CreatePersonelGecis(void);
WM_HWIN CreatePersonelGecis(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8000a22:	f007 fe07 	bl	8008634 <WM_GetDesktopWindow>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2200      	movs	r2, #0
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	9200      	str	r2, [sp, #0]
 8000a30:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <CreatePersonelGecis+0x2c>)
 8000a32:	2109      	movs	r1, #9
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <CreatePersonelGecis+0x30>)
 8000a36:	f007 fa9d 	bl	8007f74 <GUI_CreateDialogBox>
 8000a3a:	6078      	str	r0, [r7, #4]
  return hWin;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08000a03 	.word	0x08000a03
 8000a4c:	08013b44 	.word	0x08013b44

08000a50 <RFID_Card_Check_ID>:

// USER START (Optionally insert additional public code)
char RFID_Card_Check_ID(char *CardID)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(MFRC522_Check(CardID) == MI_OK)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f001 f8af 	bl	8001bbc <MFRC522_Check>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <RFID_Card_Check_ID+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <RFID_Card_Check_ID+0x3c>)
 8000a6c:	f001 ffb8 	bl	80029e0 <HAL_GPIO_WritePin>
		return MI_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e006      	b.n	8000a82 <RFID_Card_Check_ID+0x32>
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <RFID_Card_Check_ID+0x3c>)
 8000a7c:	f001 ffb0 	bl	80029e0 <HAL_GPIO_WritePin>

	return MI_NOK;
 8000a80:	2303      	movs	r3, #3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020c00 	.word	0x40020c00

08000a90 <CheckDataBase>:


char CheckDataBase(char *CardID)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	6078      	str	r0, [r7, #4]
	sprintf(strCardID, "%03d%03d%03d%03d%03d",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461c      	mov	r4, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	9101      	str	r1, [sp, #4]
 8000ac0:	9200      	str	r2, [sp, #0]
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	493f      	ldr	r1, [pc, #252]	; (8000bc4 <CheckDataBase+0x134>)
 8000ac8:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <CheckDataBase+0x138>)
 8000aca:	f011 fd2b 	bl	8012524 <siprintf>

	res = f_open(&file, "liste.txt", FA_READ);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	493e      	ldr	r1, [pc, #248]	; (8000bcc <CheckDataBase+0x13c>)
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <CheckDataBase+0x140>)
 8000ad4:	f005 fdbe 	bl	8006654 <f_open>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <CheckDataBase+0x144>)
 8000ade:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <CheckDataBase+0x144>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d160      	bne.n	8000baa <CheckDataBase+0x11a>
	{
		res = f_read(&file, buffer, sizeof(buffer), &br);
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <CheckDataBase+0x148>)
 8000aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aee:	493b      	ldr	r1, [pc, #236]	; (8000bdc <CheckDataBase+0x14c>)
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <CheckDataBase+0x140>)
 8000af2:	f006 f877 	bl	8006be4 <f_read>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <CheckDataBase+0x144>)
 8000afc:	701a      	strb	r2, [r3, #0]
		if(res == FR_OK)
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <CheckDataBase+0x144>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d14c      	bne.n	8000ba0 <CheckDataBase+0x110>
		{
			ptr = strstr(buffer, strCardID);
 8000b06:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <CheckDataBase+0x138>)
 8000b08:	4834      	ldr	r0, [pc, #208]	; (8000bdc <CheckDataBase+0x14c>)
 8000b0a:	f011 fd40 	bl	801258e <strstr>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <CheckDataBase+0x150>)
 8000b12:	6013      	str	r3, [r2, #0]
			if(ptr)
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <CheckDataBase+0x150>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d04b      	beq.n	8000bb4 <CheckDataBase+0x124>
			{
				token = strtok(ptr, "\t");
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <CheckDataBase+0x150>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4930      	ldr	r1, [pc, #192]	; (8000be4 <CheckDataBase+0x154>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 fd4a 	bl	80125bc <strtok>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <CheckDataBase+0x158>)
 8000b2e:	601a      	str	r2, [r3, #0]
				i=0;
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <CheckDataBase+0x15c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	801a      	strh	r2, [r3, #0]
				while(token != NULL)
 8000b36:	e021      	b.n	8000b7c <CheckDataBase+0xec>
				{
					sprintf(&PersonelInfo[i++][0], token);
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <CheckDataBase+0x15c>)
 8000b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b3e:	b293      	uxth	r3, r2
 8000b40:	3301      	adds	r3, #1
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b219      	sxth	r1, r3
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <CheckDataBase+0x15c>)
 8000b48:	8019      	strh	r1, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <CheckDataBase+0x160>)
 8000b54:	4413      	add	r3, r2
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <CheckDataBase+0x158>)
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f011 fce1 	bl	8012524 <siprintf>
					if(i==5) break;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <CheckDataBase+0x15c>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	d00c      	beq.n	8000b86 <CheckDataBase+0xf6>
					token = strtok(NULL, "\t");
 8000b6c:	491d      	ldr	r1, [pc, #116]	; (8000be4 <CheckDataBase+0x154>)
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f011 fd24 	bl	80125bc <strtok>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <CheckDataBase+0x158>)
 8000b7a:	601a      	str	r2, [r3, #0]
				while(token != NULL)
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <CheckDataBase+0x158>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1d9      	bne.n	8000b38 <CheckDataBase+0xa8>
 8000b84:	e000      	b.n	8000b88 <CheckDataBase+0xf8>
					if(i==5) break;
 8000b86:	bf00      	nop
				}
				ptr = strchr(&PersonelInfo[4][0], '\r');
 8000b88:	210d      	movs	r1, #13
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <CheckDataBase+0x164>)
 8000b8c:	f011 fcea 	bl	8012564 <strchr>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <CheckDataBase+0x150>)
 8000b94:	6013      	str	r3, [r2, #0]
				*ptr = 0;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <CheckDataBase+0x150>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e009      	b.n	8000bb4 <CheckDataBase+0x124>
			}
		}
		else
		{
			f_close(&file);
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <CheckDataBase+0x140>)
 8000ba2:	f006 f9fc 	bl	8006f9e <f_close>
			return 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e008      	b.n	8000bbc <CheckDataBase+0x12c>
		}
	}
	else
	{
		f_close(&file);
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <CheckDataBase+0x140>)
 8000bac:	f006 f9f7 	bl	8006f9e <f_close>
		return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e003      	b.n	8000bbc <CheckDataBase+0x12c>
	}
	f_close(&file);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <CheckDataBase+0x140>)
 8000bb6:	f006 f9f2 	bl	8006f9e <f_close>

	return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	08013a88 	.word	0x08013a88
 8000bc8:	20004e24 	.word	0x20004e24
 8000bcc:	08013aa0 	.word	0x08013aa0
 8000bd0:	200039ec 	.word	0x200039ec
 8000bd4:	200039e8 	.word	0x200039e8
 8000bd8:	20004a1c 	.word	0x20004a1c
 8000bdc:	20004a20 	.word	0x20004a20
 8000be0:	20004e20 	.word	0x20004e20
 8000be4:	08013aac 	.word	0x08013aac
 8000be8:	20004e34 	.word	0x20004e34
 8000bec:	20004a1e 	.word	0x20004a1e
 8000bf0:	20004e38 	.word	0x20004e38
 8000bf4:	20004e88 	.word	0x20004e88

08000bf8 <_GetData>:

char _acBuffer[1024];
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 8000c06:	6839      	ldr	r1, [r7, #0]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f006 f9f2 	bl	8006ff2 <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4905      	ldr	r1, [pc, #20]	; (8000c2c <_GetData+0x34>)
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f005 ffe4 	bl	8006be4 <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <_GetData+0x34>)
 8000c20:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8000c22:	697b      	ldr	r3, [r7, #20]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20004e9c 	.word	0x20004e9c

08000c30 <RFID_Reader>:


void RFID_Reader()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
	WM_HWIN hWin;
	TEXT_Handle		hText4,hText5,hText6,hText7;

	ret = f_mount(&fs, "", 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	4932      	ldr	r1, [pc, #200]	; (8000d04 <RFID_Reader+0xd4>)
 8000c3a:	4833      	ldr	r0, [pc, #204]	; (8000d08 <RFID_Reader+0xd8>)
 8000c3c:	f005 fcc4 	bl	80065c8 <f_mount>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <RFID_Reader+0xdc>)
 8000c46:	701a      	strb	r2, [r3, #0]
	if(ret != FR_OK)
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <RFID_Reader+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d000      	beq.n	8000c52 <RFID_Reader+0x22>
	{
		while(1);
 8000c50:	e7fe      	b.n	8000c50 <RFID_Reader+0x20>
	}

	hWin = CreatePersonelGecis();
 8000c52:	f7ff fee3 	bl	8000a1c <CreatePersonelGecis>
 8000c56:	6178      	str	r0, [r7, #20]

	hText4 = WM_GetDialogItem(hWin, ID_TEXT_4);
 8000c58:	f640 0106 	movw	r1, #2054	; 0x806
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f007 fd39 	bl	80086d4 <WM_GetDialogItem>
 8000c62:	6138      	str	r0, [r7, #16]
	hText5 = WM_GetDialogItem(hWin, ID_TEXT_5);
 8000c64:	f640 0107 	movw	r1, #2055	; 0x807
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f007 fd33 	bl	80086d4 <WM_GetDialogItem>
 8000c6e:	60f8      	str	r0, [r7, #12]
	hText6 = WM_GetDialogItem(hWin, ID_TEXT_6);
 8000c70:	f640 0108 	movw	r1, #2056	; 0x808
 8000c74:	6978      	ldr	r0, [r7, #20]
 8000c76:	f007 fd2d 	bl	80086d4 <WM_GetDialogItem>
 8000c7a:	60b8      	str	r0, [r7, #8]
	hText7 = WM_GetDialogItem(hWin, ID_TEXT_7);
 8000c7c:	f640 0109 	movw	r1, #2057	; 0x809
 8000c80:	6978      	ldr	r0, [r7, #20]
 8000c82:	f007 fd27 	bl	80086d4 <WM_GetDialogItem>
 8000c86:	6078      	str	r0, [r7, #4]

	while(1)
	{

		ret = RFID_Card_Check_ID(CardID);
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <RFID_Reader+0xe0>)
 8000c8a:	f7ff fee1 	bl	8000a50 <RFID_Card_Check_ID>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <RFID_Reader+0xdc>)
 8000c94:	701a      	strb	r2, [r3, #0]
		if(ret == MI_OK)
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <RFID_Reader+0xdc>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d12b      	bne.n	8000cf6 <RFID_Reader+0xc6>
		{
			if(CheckDataBase(CardID))
 8000c9e:	481c      	ldr	r0, [pc, #112]	; (8000d10 <RFID_Reader+0xe0>)
 8000ca0:	f7ff fef6 	bl	8000a90 <CheckDataBase>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d025      	beq.n	8000cf6 <RFID_Reader+0xc6>
			{
				TEXT_SetText(hText4, &PersonelInfo[1][0]);
 8000caa:	491a      	ldr	r1, [pc, #104]	; (8000d14 <RFID_Reader+0xe4>)
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f006 fdac 	bl	800780a <TEXT_SetText>
				TEXT_SetText(hText5, &PersonelInfo[2][0]);
 8000cb2:	4919      	ldr	r1, [pc, #100]	; (8000d18 <RFID_Reader+0xe8>)
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f006 fda8 	bl	800780a <TEXT_SetText>
				TEXT_SetText(hText6, &PersonelInfo[3][0]);
 8000cba:	4918      	ldr	r1, [pc, #96]	; (8000d1c <RFID_Reader+0xec>)
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f006 fda4 	bl	800780a <TEXT_SetText>
				TEXT_SetText(hText7, &PersonelInfo[0][0]);
 8000cc2:	4917      	ldr	r1, [pc, #92]	; (8000d20 <RFID_Reader+0xf0>)
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f006 fda0 	bl	800780a <TEXT_SetText>

				res = f_open(&file, &PersonelInfo[4][0], FA_OPEN_EXISTING | FA_READ);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4915      	ldr	r1, [pc, #84]	; (8000d24 <RFID_Reader+0xf4>)
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <RFID_Reader+0xf8>)
 8000cd0:	f005 fcc0 	bl	8006654 <f_open>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <RFID_Reader+0xfc>)
 8000cda:	701a      	strb	r2, [r3, #0]
				if (res == FR_OK)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <RFID_Reader+0xfc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <RFID_Reader+0xc0>
					GUI_BMP_DrawEx(_GetData, &file, 14, 30);
 8000ce4:	231e      	movs	r3, #30
 8000ce6:	220e      	movs	r2, #14
 8000ce8:	490f      	ldr	r1, [pc, #60]	; (8000d28 <RFID_Reader+0xf8>)
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <RFID_Reader+0x100>)
 8000cec:	f00d ff22 	bl	800eb34 <GUI_BMP_DrawEx>
				f_close(&file);
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <RFID_Reader+0xf8>)
 8000cf2:	f006 f954 	bl	8006f9e <f_close>
			}
		}

		HAL_Delay(500);
 8000cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfa:	f001 fbb3 	bl	8002464 <HAL_Delay>
		GUI_Exec();
 8000cfe:	f00c ffa1 	bl	800dc44 <GUI_Exec>
		ret = RFID_Card_Check_ID(CardID);
 8000d02:	e7c1      	b.n	8000c88 <RFID_Reader+0x58>
 8000d04:	08013ab0 	.word	0x08013ab0
 8000d08:	200029b0 	.word	0x200029b0
 8000d0c:	200029ad 	.word	0x200029ad
 8000d10:	200029a8 	.word	0x200029a8
 8000d14:	20004e4c 	.word	0x20004e4c
 8000d18:	20004e60 	.word	0x20004e60
 8000d1c:	20004e74 	.word	0x20004e74
 8000d20:	20004e38 	.word	0x20004e38
 8000d24:	20004e88 	.word	0x20004e88
 8000d28:	200039ec 	.word	0x200039ec
 8000d2c:	200039e8 	.word	0x200039e8
 8000d30:	08000bf9 	.word	0x08000bf9

08000d34 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <SELECT+0x1c>)
 8000d40:	f001 fe4e 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f001 fb8d 	bl	8002464 <HAL_Delay>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40020400 	.word	0x40020400

08000d54 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <DESELECT+0x1c>)
 8000d60:	f001 fe3e 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 fb7d 	bl	8002464 <HAL_Delay>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020400 	.word	0x40020400

08000d74 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d7e:	bf00      	nop
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <SPI_TxByte+0x30>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d1f8      	bne.n	8000d80 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d8e:	1df9      	adds	r1, r7, #7
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <SPI_TxByte+0x30>)
 8000d96:	f002 fb7c 	bl	8003492 <HAL_SPI_Transmit>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20005304 	.word	0x20005304

08000da8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000db4:	bf00      	nop
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SPI_TxBuffer+0x30>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d1f8      	bne.n	8000db6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <SPI_TxBuffer+0x30>)
 8000dcc:	f002 fb61 	bl	8003492 <HAL_SPI_Transmit>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20005304 	.word	0x20005304

08000ddc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000de2:	23ff      	movs	r3, #255	; 0xff
 8000de4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000de6:	bf00      	nop
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <SPI_RxByte+0x34>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d1f8      	bne.n	8000de8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000df6:	1dba      	adds	r2, r7, #6
 8000df8:	1df9      	adds	r1, r7, #7
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <SPI_RxByte+0x34>)
 8000e02:	f002 fc82 	bl	800370a <HAL_SPI_TransmitReceive>

	return data;
 8000e06:	79bb      	ldrb	r3, [r7, #6]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20005304 	.word	0x20005304

08000e14 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e1c:	f7ff ffde 	bl	8000ddc <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <SD_ReadyWait+0x30>)
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e3e:	f7ff ffcd 	bl	8000ddc <SPI_RxByte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <SD_ReadyWait+0x24>
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SD_ReadyWait+0x30>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f4      	bne.n	8000e3e <SD_ReadyWait+0xe>

	return res;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000529e 	.word	0x2000529e

08000e64 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e6a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e6e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e70:	f7ff ff70 	bl	8000d54 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	e005      	b.n	8000e86 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e7a:	20ff      	movs	r0, #255	; 0xff
 8000e7c:	f7ff ff7a 	bl	8000d74 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	ddf6      	ble.n	8000e7a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e8c:	f7ff ff52 	bl	8000d34 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ea4:	2395      	movs	r3, #149	; 0x95
 8000ea6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2106      	movs	r1, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff7b 	bl	8000da8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eb2:	e002      	b.n	8000eba <SD_PowerOn+0x56>
	{
		cnt--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eba:	f7ff ff8f 	bl	8000ddc <SPI_RxByte>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <SD_PowerOn+0x66>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f4      	bne.n	8000eb4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000eca:	f7ff ff43 	bl	8000d54 <DESELECT>
	SPI_TxByte(0XFF);
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	f7ff ff50 	bl	8000d74 <SPI_TxByte>

	PowerFlag = 1;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <SD_PowerOn+0x80>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200052a1 	.word	0x200052a1

08000ee8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <SD_PowerOff+0x14>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	200052a1 	.word	0x200052a1

08000f00 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SD_CheckPower+0x14>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200052a1 	.word	0x200052a1

08000f18 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <SD_RxDataBlock+0x58>)
 8000f24:	22c8      	movs	r2, #200	; 0xc8
 8000f26:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f28:	f7ff ff58 	bl	8000ddc <SPI_RxByte>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d103      	bne.n	8000f3e <SD_RxDataBlock+0x26>
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <SD_RxDataBlock+0x58>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f4      	bne.n	8000f28 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2bfe      	cmp	r3, #254	; 0xfe
 8000f42:	d001      	beq.n	8000f48 <SD_RxDataBlock+0x30>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e00f      	b.n	8000f68 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff60 	bl	8000e14 <SPI_RxBytePtr>
	} while(len--);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	603a      	str	r2, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f4      	bne.n	8000f48 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f5e:	f7ff ff3d 	bl	8000ddc <SPI_RxByte>
	SPI_RxByte();
 8000f62:	f7ff ff3b 	bl	8000ddc <SPI_RxByte>

	return TRUE;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000529c 	.word	0x2000529c

08000f74 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f84:	f7ff ff54 	bl	8000e30 <SD_ReadyWait>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bff      	cmp	r3, #255	; 0xff
 8000f8c:	d001      	beq.n	8000f92 <SD_TxDataBlock+0x1e>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e02f      	b.n	8000ff2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff feed 	bl	8000d74 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	2bfd      	cmp	r3, #253	; 0xfd
 8000f9e:	d020      	beq.n	8000fe2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff feff 	bl	8000da8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000faa:	f7ff ff17 	bl	8000ddc <SPI_RxByte>
		SPI_RxByte();
 8000fae:	f7ff ff15 	bl	8000ddc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fb2:	e00b      	b.n	8000fcc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fb4:	f7ff ff12 	bl	8000ddc <SPI_RxByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d006      	beq.n	8000fd4 <SD_TxDataBlock+0x60>
			i++;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	2b40      	cmp	r3, #64	; 0x40
 8000fd0:	d9f0      	bls.n	8000fb4 <SD_TxDataBlock+0x40>
 8000fd2:	e000      	b.n	8000fd6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000fd4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ff00 	bl	8000ddc <SPI_RxByte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0fa      	beq.n	8000fd8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d101      	bne.n	8000ff0 <SD_TxDataBlock+0x7c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	6039      	str	r1, [r7, #0]
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001006:	f7ff ff13 	bl	8000e30 <SD_ReadyWait>
 800100a:	4603      	mov	r3, r0
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	d001      	beq.n	8001014 <SD_SendCmd+0x1a>
 8001010:	23ff      	movs	r3, #255	; 0xff
 8001012:	e042      	b.n	800109a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feac 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	0e1b      	lsrs	r3, r3, #24
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fea6 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fea0 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe9a 	bl	8000d74 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe95 	bl	8000d74 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b40      	cmp	r3, #64	; 0x40
 800104e:	d102      	bne.n	8001056 <SD_SendCmd+0x5c>
 8001050:	2395      	movs	r3, #149	; 0x95
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e007      	b.n	8001066 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b48      	cmp	r3, #72	; 0x48
 800105a:	d102      	bne.n	8001062 <SD_SendCmd+0x68>
 800105c:	2387      	movs	r3, #135	; 0x87
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <SD_SendCmd+0x6c>
	else crc = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe83 	bl	8000d74 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b4c      	cmp	r3, #76	; 0x4c
 8001072:	d101      	bne.n	8001078 <SD_SendCmd+0x7e>
 8001074:	f7ff feb2 	bl	8000ddc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001078:	230a      	movs	r3, #10
 800107a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800107c:	f7ff feae 	bl	8000ddc <SPI_RxByte>
 8001080:	4603      	mov	r3, r0
 8001082:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001084:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001088:	2b00      	cmp	r3, #0
 800108a:	da05      	bge.n	8001098 <SD_SendCmd+0x9e>
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	3b01      	subs	r3, #1
 8001090:	73bb      	strb	r3, [r7, #14]
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f1      	bne.n	800107c <SD_SendCmd+0x82>

	return res;
 8001098:	7b7b      	ldrb	r3, [r7, #13]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SD_disk_initialize+0x14>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0d1      	b.n	800125c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <SD_disk_initialize+0x1c0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <SD_disk_initialize+0x2a>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <SD_disk_initialize+0x1c0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	e0c6      	b.n	800125c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010ce:	f7ff fec9 	bl	8000e64 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010d2:	f7ff fe2f 	bl	8000d34 <SELECT>

	/* check disk type */
	type = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010da:	2100      	movs	r1, #0
 80010dc:	2040      	movs	r0, #64	; 0x40
 80010de:	f7ff ff8c 	bl	8000ffa <SD_SendCmd>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 80a1 	bne.w	800122c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80010ea:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <SD_disk_initialize+0x1c4>)
 80010ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f6:	2048      	movs	r0, #72	; 0x48
 80010f8:	f7ff ff7f 	bl	8000ffa <SD_SendCmd>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d155      	bne.n	80011ae <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e00c      	b.n	8001122 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001108:	7bfc      	ldrb	r4, [r7, #15]
 800110a:	f7ff fe67 	bl	8000ddc <SPI_RxByte>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f104 0310 	add.w	r3, r4, #16
 8001116:	443b      	add	r3, r7
 8001118:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d9ef      	bls.n	8001108 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d17e      	bne.n	800122c <SD_disk_initialize+0x188>
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	2baa      	cmp	r3, #170	; 0xaa
 8001132:	d17b      	bne.n	800122c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001134:	2100      	movs	r1, #0
 8001136:	2077      	movs	r0, #119	; 0x77
 8001138:	f7ff ff5f 	bl	8000ffa <SD_SendCmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d807      	bhi.n	8001152 <SD_disk_initialize+0xae>
 8001142:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001146:	2069      	movs	r0, #105	; 0x69
 8001148:	f7ff ff57 	bl	8000ffa <SD_SendCmd>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1ec      	bne.n	8001134 <SD_disk_initialize+0x90>
 800115a:	e000      	b.n	800115e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800115c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d062      	beq.n	800122c <SD_disk_initialize+0x188>
 8001166:	2100      	movs	r1, #0
 8001168:	207a      	movs	r0, #122	; 0x7a
 800116a:	f7ff ff46 	bl	8000ffa <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d15b      	bne.n	800122c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e00c      	b.n	8001194 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800117a:	7bfc      	ldrb	r4, [r7, #15]
 800117c:	f7ff fe2e 	bl	8000ddc <SPI_RxByte>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	f104 0310 	add.w	r3, r4, #16
 8001188:	443b      	add	r3, r7
 800118a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d9ef      	bls.n	800117a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SD_disk_initialize+0x104>
 80011a4:	230c      	movs	r3, #12
 80011a6:	e000      	b.n	80011aa <SD_disk_initialize+0x106>
 80011a8:	2304      	movs	r3, #4
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	e03e      	b.n	800122c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011ae:	2100      	movs	r1, #0
 80011b0:	2077      	movs	r0, #119	; 0x77
 80011b2:	f7ff ff22 	bl	8000ffa <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d808      	bhi.n	80011ce <SD_disk_initialize+0x12a>
 80011bc:	2100      	movs	r1, #0
 80011be:	2069      	movs	r0, #105	; 0x69
 80011c0:	f7ff ff1b 	bl	8000ffa <SD_SendCmd>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d801      	bhi.n	80011ce <SD_disk_initialize+0x12a>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e000      	b.n	80011d0 <SD_disk_initialize+0x12c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d10e      	bne.n	80011f6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011d8:	2100      	movs	r1, #0
 80011da:	2077      	movs	r0, #119	; 0x77
 80011dc:	f7ff ff0d 	bl	8000ffa <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d80e      	bhi.n	8001204 <SD_disk_initialize+0x160>
 80011e6:	2100      	movs	r1, #0
 80011e8:	2069      	movs	r0, #105	; 0x69
 80011ea:	f7ff ff06 	bl	8000ffa <SD_SendCmd>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <SD_disk_initialize+0x160>
 80011f4:	e00c      	b.n	8001210 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011f6:	2100      	movs	r1, #0
 80011f8:	2041      	movs	r0, #65	; 0x41
 80011fa:	f7ff fefe 	bl	8000ffa <SD_SendCmd>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e2      	bne.n	80011d2 <SD_disk_initialize+0x12e>
 800120c:	e000      	b.n	8001210 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800120e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <SD_disk_initialize+0x1c4>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <SD_disk_initialize+0x184>
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	2050      	movs	r0, #80	; 0x50
 800121e:	f7ff feec 	bl	8000ffa <SD_SendCmd>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_initialize+0x188>
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <SD_disk_initialize+0x1c8>)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001232:	f7ff fd8f 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001236:	f7ff fdd1 	bl	8000ddc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <SD_disk_initialize+0x1c0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SD_disk_initialize+0x1c0>)
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e001      	b.n	8001256 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001252:	f7ff fe49 	bl	8000ee8 <SD_PowerOff>
	}

	return Stat;
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SD_disk_initialize+0x1c0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	2000529c 	.word	0x2000529c
 800126c:	200052a0 	.word	0x200052a0

08001270 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SD_disk_status+0x14>
 8001280:	2301      	movs	r3, #1
 8001282:	e002      	b.n	800128a <SD_disk_status+0x1a>
	return Stat;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SD_disk_status+0x28>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000

0800129c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <SD_disk_read+0x1c>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <SD_disk_read+0x20>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e051      	b.n	8001360 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <SD_disk_read+0xcc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SD_disk_read+0x32>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e048      	b.n	8001360 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <SD_disk_read+0xd0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <SD_disk_read+0x44>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	607b      	str	r3, [r7, #4]

	SELECT();
 80012e0:	f7ff fd28 	bl	8000d34 <SELECT>

	if (count == 1)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d111      	bne.n	800130e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	2051      	movs	r0, #81	; 0x51
 80012ee:	f7ff fe84 	bl	8000ffa <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d129      	bne.n	800134c <SD_disk_read+0xb0>
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f7ff fe0b 	bl	8000f18 <SD_RxDataBlock>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <SD_disk_read+0xb0>
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	e01e      	b.n	800134c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2052      	movs	r0, #82	; 0x52
 8001312:	f7ff fe72 	bl	8000ffa <SD_SendCmd>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d117      	bne.n	800134c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800131c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f7ff fdf9 	bl	8000f18 <SD_RxDataBlock>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <SD_disk_read+0xa6>
				buff += 512;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001332:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3b01      	subs	r3, #1
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ed      	bne.n	800131c <SD_disk_read+0x80>
 8001340:	e000      	b.n	8001344 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001342:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	204c      	movs	r0, #76	; 0x4c
 8001348:	f7ff fe57 	bl	8000ffa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800134c:	f7ff fd02 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001350:	f7ff fd44 	bl	8000ddc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	200052a0 	.word	0x200052a0

08001370 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <SD_disk_write+0x1c>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <SD_disk_write+0x20>
 800138c:	2304      	movs	r3, #4
 800138e:	e06b      	b.n	8001468 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <SD_disk_write+0x100>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SD_disk_write+0x32>
 800139e:	2303      	movs	r3, #3
 80013a0:	e062      	b.n	8001468 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <SD_disk_write+0x100>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SD_disk_write+0x44>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e059      	b.n	8001468 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <SD_disk_write+0x104>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <SD_disk_write+0x56>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80013c6:	f7ff fcb5 	bl	8000d34 <SELECT>

	if (count == 1)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d110      	bne.n	80013f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	2058      	movs	r0, #88	; 0x58
 80013d4:	f7ff fe11 	bl	8000ffa <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d13a      	bne.n	8001454 <SD_disk_write+0xe4>
 80013de:	21fe      	movs	r1, #254	; 0xfe
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f7ff fdc7 	bl	8000f74 <SD_TxDataBlock>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d033      	beq.n	8001454 <SD_disk_write+0xe4>
			count = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	e030      	b.n	8001454 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <SD_disk_write+0x104>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2077      	movs	r0, #119	; 0x77
 8001402:	f7ff fdfa 	bl	8000ffa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	2057      	movs	r0, #87	; 0x57
 800140a:	f7ff fdf6 	bl	8000ffa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2059      	movs	r0, #89	; 0x59
 8001412:	f7ff fdf2 	bl	8000ffa <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800141c:	21fc      	movs	r1, #252	; 0xfc
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fda8 	bl	8000f74 <SD_TxDataBlock>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <SD_disk_write+0xd0>
				buff += 512;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001430:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ee      	bne.n	800141c <SD_disk_write+0xac>
 800143e:	e000      	b.n	8001442 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001440:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001442:	21fd      	movs	r1, #253	; 0xfd
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fd95 	bl	8000f74 <SD_TxDataBlock>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <SD_disk_write+0xe4>
			{
				count = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001454:	f7ff fc7e 	bl	8000d54 <DESELECT>
	SPI_RxByte();
 8001458:	f7ff fcc0 	bl	8000ddc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	200052a0 	.word	0x200052a0

08001478 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	603a      	str	r2, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	460b      	mov	r3, r1
 8001486:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SD_disk_ioctl+0x1e>
 8001492:	2304      	movs	r3, #4
 8001494:	e115      	b.n	80016c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d124      	bne.n	80014ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d012      	beq.n	80014d0 <SD_disk_ioctl+0x58>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	dc1a      	bgt.n	80014e4 <SD_disk_ioctl+0x6c>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <SD_disk_ioctl+0x40>
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d006      	beq.n	80014c4 <SD_disk_ioctl+0x4c>
 80014b6:	e015      	b.n	80014e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014b8:	f7ff fd16 	bl	8000ee8 <SD_PowerOff>
			res = RES_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014c2:	e0fc      	b.n	80016be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80014c4:	f7ff fcce 	bl	8000e64 <SD_PowerOn>
			res = RES_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ce:	e0f6      	b.n	80016be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	1c5c      	adds	r4, r3, #1
 80014d4:	f7ff fd14 	bl	8000f00 <SD_CheckPower>
 80014d8:	4603      	mov	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014e2:	e0ec      	b.n	80016be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ea:	e0e8      	b.n	80016be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <SD_disk_ioctl+0x254>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SD_disk_ioctl+0x86>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0e1      	b.n	80016c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80014fe:	f7ff fc19 	bl	8000d34 <SELECT>

		switch (ctrl)
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b0d      	cmp	r3, #13
 8001506:	f200 80cb 	bhi.w	80016a0 <SD_disk_ioctl+0x228>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <SD_disk_ioctl+0x98>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800160b 	.word	0x0800160b
 8001514:	08001549 	.word	0x08001549
 8001518:	080015fb 	.word	0x080015fb
 800151c:	080016a1 	.word	0x080016a1
 8001520:	080016a1 	.word	0x080016a1
 8001524:	080016a1 	.word	0x080016a1
 8001528:	080016a1 	.word	0x080016a1
 800152c:	080016a1 	.word	0x080016a1
 8001530:	080016a1 	.word	0x080016a1
 8001534:	080016a1 	.word	0x080016a1
 8001538:	080016a1 	.word	0x080016a1
 800153c:	0800161d 	.word	0x0800161d
 8001540:	08001641 	.word	0x08001641
 8001544:	08001665 	.word	0x08001665
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001548:	2100      	movs	r1, #0
 800154a:	2049      	movs	r0, #73	; 0x49
 800154c:	f7ff fd55 	bl	8000ffa <SD_SendCmd>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80a8 	bne.w	80016a8 <SD_disk_ioctl+0x230>
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2110      	movs	r1, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fcda 	bl	8000f18 <SD_RxDataBlock>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 809e 	beq.w	80016a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800156c:	7b3b      	ldrb	r3, [r7, #12]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10e      	bne.n	8001594 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001576:	7d7b      	ldrb	r3, [r7, #21]
 8001578:	b29a      	uxth	r2, r3
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	b29b      	uxth	r3, r3
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b29b      	uxth	r3, r3
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800158a:	8bfb      	ldrh	r3, [r7, #30]
 800158c:	029a      	lsls	r2, r3, #10
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e02e      	b.n	80015f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001594:	7c7b      	ldrb	r3, [r7, #17]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b2da      	uxtb	r2, r3
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	09db      	lsrs	r3, r3, #7
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	7d7b      	ldrb	r3, [r7, #21]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0306 	and.w	r3, r3, #6
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3302      	adds	r3, #2
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015bc:	7d3b      	ldrb	r3, [r7, #20]
 80015be:	099b      	lsrs	r3, r3, #6
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	7cfb      	ldrb	r3, [r7, #19]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	7cbb      	ldrb	r3, [r7, #18]
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015e4:	8bfa      	ldrh	r2, [r7, #30]
 80015e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ea:	3b09      	subs	r3, #9
 80015ec:	409a      	lsls	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015f8:	e056      	b.n	80016a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001608:	e055      	b.n	80016b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800160a:	f7ff fc11 	bl	8000e30 <SD_ReadyWait>
 800160e:	4603      	mov	r3, r0
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d14b      	bne.n	80016ac <SD_disk_ioctl+0x234>
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161a:	e047      	b.n	80016ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800161c:	2100      	movs	r1, #0
 800161e:	2049      	movs	r0, #73	; 0x49
 8001620:	f7ff fceb 	bl	8000ffa <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d142      	bne.n	80016b0 <SD_disk_ioctl+0x238>
 800162a:	2110      	movs	r1, #16
 800162c:	6a38      	ldr	r0, [r7, #32]
 800162e:	f7ff fc73 	bl	8000f18 <SD_RxDataBlock>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d03b      	beq.n	80016b0 <SD_disk_ioctl+0x238>
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163e:	e037      	b.n	80016b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001640:	2100      	movs	r1, #0
 8001642:	204a      	movs	r0, #74	; 0x4a
 8001644:	f7ff fcd9 	bl	8000ffa <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d132      	bne.n	80016b4 <SD_disk_ioctl+0x23c>
 800164e:	2110      	movs	r1, #16
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f7ff fc61 	bl	8000f18 <SD_RxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02b      	beq.n	80016b4 <SD_disk_ioctl+0x23c>
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e027      	b.n	80016b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001664:	2100      	movs	r1, #0
 8001666:	207a      	movs	r0, #122	; 0x7a
 8001668:	f7ff fcc7 	bl	8000ffa <SD_SendCmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001678:	e00b      	b.n	8001692 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800167a:	6a3c      	ldr	r4, [r7, #32]
 800167c:	1c63      	adds	r3, r4, #1
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	f7ff fbac 	bl	8000ddc <SPI_RxByte>
 8001684:	4603      	mov	r3, r0
 8001686:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800168c:	3301      	adds	r3, #1
 800168e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001696:	2b03      	cmp	r3, #3
 8001698:	d9ef      	bls.n	800167a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80016a0:	2304      	movs	r3, #4
 80016a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a6:	e006      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016a8:	bf00      	nop
 80016aa:	e004      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016ac:	bf00      	nop
 80016ae:	e002      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <SD_disk_ioctl+0x23e>
			break;
 80016b4:	bf00      	nop
		}

		DESELECT();
 80016b6:	f7ff fb4d 	bl	8000d54 <DESELECT>
		SPI_RxByte();
 80016ba:	f7ff fb8f 	bl	8000ddc <SPI_RxByte>
	}

	return res;
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	372c      	adds	r7, #44	; 0x2c
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fe84 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f814 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f000 f932 	bl	8001944 <MX_GPIO_Init>
  MX_CRC_Init();
 80016e0:	f000 f87a 	bl	80017d8 <MX_CRC_Init>
  MX_SPI1_Init();
 80016e4:	f000 f88c 	bl	8001800 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016e8:	f000 f8c0 	bl	800186c <MX_SPI2_Init>
  MX_SPI3_Init();
 80016ec:	f000 f8f4 	bl	80018d8 <MX_SPI3_Init>
  MX_FATFS_Init();
 80016f0:	f002 fd26 	bl	8004140 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80016f4:	f000 fc2d 	bl	8001f52 <MFRC522_Init>
  GUI_Init();
 80016f8:	f00c f99a 	bl	800da30 <GUI_Init>
  RFID_Reader();
 80016fc:	f7ff fa98 	bl	8000c30 <RFID_Reader>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x30>
	...

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2230      	movs	r2, #48	; 0x30
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f010 fefe 	bl	8012514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <SystemClock_Config+0xcc>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <SystemClock_Config+0xcc>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <SystemClock_Config+0xcc>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <SystemClock_Config+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <SystemClock_Config+0xd0>)
 800174e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <SystemClock_Config+0xd0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001778:	23a8      	movs	r3, #168	; 0xa8
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001780:	2304      	movs	r3, #4
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	4618      	mov	r0, r3
 800178a:	f001 f943 	bl	8002a14 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001794:	f000 f982 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2105      	movs	r1, #5
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fba4 	bl	8002f04 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017c2:	f000 f96b 	bl	8001a9c <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	; 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_CRC_Init+0x20>)
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <MX_CRC_Init+0x24>)
 80017e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_CRC_Init+0x20>)
 80017e4:	f000 ff44 	bl	8002670 <HAL_CRC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ee:	f000 f955 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200052a4 	.word	0x200052a4
 80017fc:	40023000 	.word	0x40023000

08001800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_SPI1_Init+0x64>)
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <MX_SPI1_Init+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SPI1_Init+0x64>)
 800180c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_SPI1_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_SPI1_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_SPI1_Init+0x64>)
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_SPI1_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_SPI1_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_SPI1_Init+0x64>)
 800184c:	220a      	movs	r2, #10
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_SPI1_Init+0x64>)
 8001852:	f001 fd95 	bl	8003380 <HAL_SPI_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800185c:	f000 f91e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200052ac 	.word	0x200052ac
 8001868:	40013000 	.word	0x40013000

0800186c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <MX_SPI2_Init+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800187c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_SPI2_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_SPI2_Init+0x64>)
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018a0:	2210      	movs	r2, #16
 80018a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018b8:	220a      	movs	r2, #10
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_SPI2_Init+0x64>)
 80018be:	f001 fd5f 	bl	8003380 <HAL_SPI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018c8:	f000 f8e8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20005304 	.word	0x20005304
 80018d4:	40003800 	.word	0x40003800

080018d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI3_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <MX_SPI3_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SPI3_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SPI3_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SPI3_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI3_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SPI3_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI3_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI3_Init+0x64>)
 800190c:	2210      	movs	r2, #16
 800190e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SPI3_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI3_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SPI3_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI3_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SPI3_Init+0x64>)
 800192a:	f001 fd29 	bl	8003380 <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 f8b2 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000535c 	.word	0x2000535c
 8001940:	40003c00 	.word	0x40003c00

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <MX_GPIO_Init+0x124>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <MX_GPIO_Init+0x124>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <MX_GPIO_Init+0x124>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <MX_GPIO_Init+0x124>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <MX_GPIO_Init+0x124>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210e      	movs	r1, #14
 80019ea:	4820      	ldr	r0, [pc, #128]	; (8001a6c <MX_GPIO_Init+0x128>)
 80019ec:	f000 fff8 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	481e      	ldr	r0, [pc, #120]	; (8001a70 <MX_GPIO_Init+0x12c>)
 80019f8:	f000 fff2 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f24c 0101 	movw	r1, #49153	; 0xc001
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <MX_GPIO_Init+0x130>)
 8001a04:	f000 ffec 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001a08:	230e      	movs	r3, #14
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_GPIO_Init+0x128>)
 8001a20:	f000 fe42 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_GPIO_Init+0x12c>)
 8001a3e:	f000 fe33 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001a42:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_GPIO_Init+0x130>)
 8001a5c:	f000 fe24 	bl	80026a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020c00 	.word	0x40020c00

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8a:	f000 fccb 	bl	8002424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <SPI1SendByte>:
#include "rc522.h"

extern SPI_HandleTypeDef hspi3;


uint8_t SPI1SendByte(uint8_t data) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001ab6:	f107 0208 	add.w	r2, r7, #8
 8001aba:	f107 010c 	add.w	r1, r7, #12
 8001abe:	230a      	movs	r3, #10
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <SPI1SendByte+0x2c>)
 8001ac6:	f001 fe20 	bl	800370a <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001aca:	7a3b      	ldrb	r3, [r7, #8]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000535c 	.word	0x2000535c

08001ad8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2101      	movs	r1, #1
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <SPI1_WriteReg+0x3c>)
 8001aee:	f000 ff77 	bl	80029e0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffd7 	bl	8001aa8 <SPI1SendByte>
	SPI1SendByte(value);
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ffd3 	bl	8001aa8 <SPI1SendByte>
	cs_set();
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <SPI1_WriteReg+0x3c>)
 8001b08:	f000 ff6a 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	480b      	ldr	r0, [pc, #44]	; (8001b54 <SPI1_ReadReg+0x3c>)
 8001b28:	f000 ff5a 	bl	80029e0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffba 	bl	8001aa8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff ffb7 	bl	8001aa8 <SPI1SendByte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <SPI1_ReadReg+0x3c>)
 8001b44:	f000 ff4c 	bl	80029e0 <HAL_GPIO_WritePin>
	return val;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b72:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001b74:	79ba      	ldrb	r2, [r7, #6]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffac 	bl	8001ad8 <SPI1_WriteReg>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ffb5 	bl	8001b18 <SPI1_ReadReg>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]
	return val;	
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	2026      	movs	r0, #38	; 0x26
 8001bc8:	f000 f849 	bl	8001c5e <MFRC522_Request>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <MFRC522_Check+0x24>
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f935 	bl	8001e46 <MFRC522_Anticoll>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8001be0:	f000 f9f8 	bl	8001fd4 <MFRC522_Halt>
	return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460a      	mov	r2, r1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffc1 	bl	8001b88 <MFRC522_ReadRegister>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff9f 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ffa7 	bl	8001b88 <MFRC522_ReadRegister>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4013      	ands	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff81 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	4603      	mov	r3, r0
 8001c66:	6039      	str	r1, [r7, #0]
 8001c68:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	200d      	movs	r0, #13
 8001c6e:	f7ff ff73 	bl	8001b58 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	79fa      	ldrb	r2, [r7, #7]
 8001c76:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	200c      	movs	r0, #12
 8001c86:	f000 f80f 	bl	8001ca8 <MFRC522_ToCard>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <MFRC522_Request+0x3c>
 8001c94:	89bb      	ldrh	r3, [r7, #12]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d001      	beq.n	8001c9e <MFRC522_Request+0x40>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	73fb      	strb	r3, [r7, #15]
	return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d006      	beq.n	8001cda <MFRC522_ToCard+0x32>
 8001ccc:	2b0e      	cmp	r3, #14
 8001cce:	d109      	bne.n	8001ce4 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001cd0:	2312      	movs	r3, #18
 8001cd2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	757b      	strb	r3, [r7, #21]
			break;
 8001cd8:	e005      	b.n	8001ce6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001cda:	2377      	movs	r3, #119	; 0x77
 8001cdc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001cde:	2330      	movs	r3, #48	; 0x30
 8001ce0:	757b      	strb	r3, [r7, #21]
			break;
 8001ce2:	e000      	b.n	8001ce6 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001ce4:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff ff31 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f7ff ff92 	bl	8001c22 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	200a      	movs	r0, #10
 8001d02:	f7ff ff74 	bl	8001bee <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001d06:	2100      	movs	r1, #0
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff ff25 	bl	8001b58 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	827b      	strh	r3, [r7, #18]
 8001d12:	e00a      	b.n	8001d2a <MFRC522_ToCard+0x82>
 8001d14:	8a7b      	ldrh	r3, [r7, #18]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2009      	movs	r0, #9
 8001d20:	f7ff ff1a 	bl	8001b58 <MFRC522_WriteRegister>
 8001d24:	8a7b      	ldrh	r3, [r7, #18]
 8001d26:	3301      	adds	r3, #1
 8001d28:	827b      	strh	r3, [r7, #18]
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8a7a      	ldrh	r2, [r7, #18]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3ef      	bcc.n	8001d14 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	4619      	mov	r1, r3
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff ff0d 	bl	8001b58 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d103      	bne.n	8001d4c <MFRC522_ToCard+0xa4>
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	200d      	movs	r0, #13
 8001d48:	f7ff ff51 	bl	8001bee <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001d4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d50:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001d52:	2004      	movs	r0, #4
 8001d54:	f7ff ff18 	bl	8001b88 <MFRC522_ReadRegister>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	753b      	strb	r3, [r7, #20]
		i--;
 8001d5c:	8a7b      	ldrh	r3, [r7, #18]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <MFRC522_ToCard+0xd6>
 8001d68:	7d3b      	ldrb	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <MFRC522_ToCard+0xd6>
 8001d72:	7d3a      	ldrb	r2, [r7, #20]
 8001d74:	7d7b      	ldrb	r3, [r7, #21]
 8001d76:	4013      	ands	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0e9      	beq.n	8001d52 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	200d      	movs	r0, #13
 8001d82:	f7ff ff4e 	bl	8001c22 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001d86:	8a7b      	ldrh	r3, [r7, #18]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d057      	beq.n	8001e3c <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001d8c:	2006      	movs	r0, #6
 8001d8e:	f7ff fefb 	bl	8001b88 <MFRC522_ReadRegister>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f003 031b 	and.w	r3, r3, #27
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d14d      	bne.n	8001e38 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001da0:	7d3a      	ldrb	r2, [r7, #20]
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	4013      	ands	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MFRC522_ToCard+0x10c>
 8001db0:	2301      	movs	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d140      	bne.n	8001e3c <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001dba:	200a      	movs	r0, #10
 8001dbc:	f7ff fee4 	bl	8001b88 <MFRC522_ReadRegister>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f7ff fedf 	bl	8001b88 <MFRC522_ReadRegister>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001dd2:	7c7b      	ldrb	r3, [r7, #17]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <MFRC522_ToCard+0x148>
 8001dd8:	7d3b      	ldrb	r3, [r7, #20]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	7c7b      	ldrb	r3, [r7, #17]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	e005      	b.n	8001dfc <MFRC522_ToCard+0x154>
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001dfc:	7d3b      	ldrb	r3, [r7, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <MFRC522_ToCard+0x15e>
 8001e02:	2301      	movs	r3, #1
 8001e04:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001e06:	7d3b      	ldrb	r3, [r7, #20]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d901      	bls.n	8001e10 <MFRC522_ToCard+0x168>
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001e10:	2300      	movs	r3, #0
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	e00a      	b.n	8001e2c <MFRC522_ToCard+0x184>
 8001e16:	8a7b      	ldrh	r3, [r7, #18]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	18d4      	adds	r4, r2, r3
 8001e1c:	2009      	movs	r0, #9
 8001e1e:	f7ff feb3 	bl	8001b88 <MFRC522_ReadRegister>
 8001e22:	4603      	mov	r3, r0
 8001e24:	7023      	strb	r3, [r4, #0]
 8001e26:	8a7b      	ldrh	r3, [r7, #18]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	827b      	strh	r3, [r7, #18]
 8001e2c:	7d3b      	ldrb	r3, [r7, #20]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	8a7a      	ldrh	r2, [r7, #18]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3ef      	bcc.n	8001e16 <MFRC522_ToCard+0x16e>
 8001e36:	e001      	b.n	8001e3c <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af02      	add	r7, sp, #8
 8001e4c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	200d      	movs	r0, #13
 8001e56:	f7ff fe7f 	bl	8001b58 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2293      	movs	r2, #147	; 0x93
 8001e5e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	2220      	movs	r2, #32
 8001e66:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e68:	f107 030a 	add.w	r3, r7, #10
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	200c      	movs	r0, #12
 8001e76:	f7ff ff17 	bl	8001ca8 <MFRC522_ToCard>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d118      	bne.n	8001eb6 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001e84:	2300      	movs	r3, #0
 8001e86:	73bb      	strb	r3, [r7, #14]
 8001e88:	e009      	b.n	8001e9e <MFRC522_Anticoll+0x58>
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	7b7b      	ldrb	r3, [r7, #13]
 8001e94:	4053      	eors	r3, r2
 8001e96:	737b      	strb	r3, [r7, #13]
 8001e98:	7bbb      	ldrb	r3, [r7, #14]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	73bb      	strb	r3, [r7, #14]
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d9f2      	bls.n	8001e8a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	7b7a      	ldrb	r2, [r7, #13]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <MFRC522_Anticoll+0x70>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001ece:	2104      	movs	r1, #4
 8001ed0:	2005      	movs	r0, #5
 8001ed2:	f7ff fea6 	bl	8001c22 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f7ff fe88 	bl	8001bee <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
 8001ee2:	e00a      	b.n	8001efa <MFRC522_CalculateCRC+0x3a>
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	2009      	movs	r0, #9
 8001ef0:	f7ff fe32 	bl	8001b58 <MFRC522_WriteRegister>
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
 8001efa:	7dfa      	ldrb	r2, [r7, #23]
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3f0      	bcc.n	8001ee4 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001f02:	2103      	movs	r1, #3
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fe27 	bl	8001b58 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f7ff fe3a 	bl	8001b88 <MFRC522_ReadRegister>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75bb      	strb	r3, [r7, #22]
		i--;
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <MFRC522_CalculateCRC+0x6e>
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ef      	beq.n	8001f0e <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001f2e:	2022      	movs	r0, #34	; 0x22
 8001f30:	f7ff fe2a 	bl	8001b88 <MFRC522_ReadRegister>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1c5c      	adds	r4, r3, #1
 8001f40:	2021      	movs	r0, #33	; 0x21
 8001f42:	f7ff fe21 	bl	8001b88 <MFRC522_ReadRegister>
 8001f46:	4603      	mov	r3, r0
 8001f48:	7023      	strb	r3, [r4, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}

08001f52 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001f56:	f000 f820 	bl	8001f9a <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001f5a:	218d      	movs	r1, #141	; 0x8d
 8001f5c:	202a      	movs	r0, #42	; 0x2a
 8001f5e:	f7ff fdfb 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001f62:	213e      	movs	r1, #62	; 0x3e
 8001f64:	202b      	movs	r0, #43	; 0x2b
 8001f66:	f7ff fdf7 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001f6a:	211e      	movs	r1, #30
 8001f6c:	202d      	movs	r0, #45	; 0x2d
 8001f6e:	f7ff fdf3 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001f72:	2100      	movs	r1, #0
 8001f74:	202c      	movs	r0, #44	; 0x2c
 8001f76:	f7ff fdef 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001f7a:	2170      	movs	r1, #112	; 0x70
 8001f7c:	2026      	movs	r0, #38	; 0x26
 8001f7e:	f7ff fdeb 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001f82:	2140      	movs	r1, #64	; 0x40
 8001f84:	2015      	movs	r0, #21
 8001f86:	f7ff fde7 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001f8a:	213d      	movs	r1, #61	; 0x3d
 8001f8c:	2011      	movs	r0, #17
 8001f8e:	f7ff fde3 	bl	8001b58 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8001f92:	f000 f80a 	bl	8001faa <MFRC522_AntennaOn>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fdd9 	bl	8001b58 <MFRC522_WriteRegister>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001fb0:	2014      	movs	r0, #20
 8001fb2:	f7ff fde9 	bl	8001b88 <MFRC522_ReadRegister>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <MFRC522_AntennaOn+0x22>
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	2014      	movs	r0, #20
 8001fc8:	f7ff fe11 	bl	8001bee <MFRC522_SetBitMask>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001fda:	2350      	movs	r3, #80	; 0x50
 8001fdc:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff68 	bl	8001ec0 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	4639      	mov	r1, r7
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	200c      	movs	r0, #12
 8001ffe:	f7ff fe53 	bl	8001ca8 <MFRC522_ToCard>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_CRC_MspInit+0x3c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10d      	bne.n	800208a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_CRC_MspInit+0x40>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023000 	.word	0x40023000
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_SPI_MspInit+0x150>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12c      	bne.n	800211c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23e0      	movs	r3, #224	; 0xe0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210a:	2305      	movs	r3, #5
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	4838      	ldr	r0, [pc, #224]	; (80021f8 <HAL_SPI_MspInit+0x158>)
 8002116:	f000 fac7 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800211a:	e064      	b.n	80021e6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <HAL_SPI_MspInit+0x15c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12d      	bne.n	8002182 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800215e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002170:	2305      	movs	r3, #5
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	4821      	ldr	r0, [pc, #132]	; (8002200 <HAL_SPI_MspInit+0x160>)
 800217c:	f000 fa94 	bl	80026a8 <HAL_GPIO_Init>
}
 8002180:	e031      	b.n	80021e6 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_SPI_MspInit+0x164>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d12c      	bne.n	80021e6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_SPI_MspInit+0x154>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d6:	2306      	movs	r3, #6
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_SPI_MspInit+0x168>)
 80021e2:	f000 fa61 	bl	80026a8 <HAL_GPIO_Init>
}
 80021e6:	bf00      	nop
 80021e8:	3738      	adds	r7, #56	; 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40013000 	.word	0x40013000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40003800 	.word	0x40003800
 8002200:	40020400 	.word	0x40020400
 8002204:	40003c00 	.word	0x40003c00
 8002208:	40020800 	.word	0x40020800

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_InitTick+0xd4>)
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <HAL_InitTick+0xd4>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6453      	str	r3, [r2, #68]	; 0x44
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_InitTick+0xd4>)
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002238:	f107 020c 	add.w	r2, r7, #12
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f86a 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002248:	f001 f854 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 800224c:	4603      	mov	r3, r0
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_InitTick+0xd8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3b01      	subs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_InitTick+0xdc>)
 8002262:	4a22      	ldr	r2, [pc, #136]	; (80022ec <HAL_InitTick+0xe0>)
 8002264:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_InitTick+0xdc>)
 8002268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_InitTick+0xdc>)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_InitTick+0xdc>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_InitTick+0xdc>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_InitTick+0xdc>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <HAL_InitTick+0xdc>)
 8002288:	f001 fcac 	bl	8003be4 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11b      	bne.n	80022d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800229a:	4813      	ldr	r0, [pc, #76]	; (80022e8 <HAL_InitTick+0xdc>)
 800229c:	f001 fcfc 	bl	8003c98 <HAL_TIM_Base_Start_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80022a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d111      	bne.n	80022d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022ae:	2019      	movs	r0, #25
 80022b0:	f000 f9d0 	bl	8002654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	d808      	bhi.n	80022cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80022ba:	2200      	movs	r2, #0
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	2019      	movs	r0, #25
 80022c0:	f000 f9ac 	bl	800261c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_InitTick+0xe4>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e002      	b.n	80022d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3730      	adds	r7, #48	; 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	200053b4 	.word	0x200053b4
 80022ec:	40010000 	.word	0x40010000
 80022f0:	20000008 	.word	0x20000008

080022f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <NMI_Handler+0x4>

080022fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <HardFault_Handler+0x4>

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <MemManage_Handler+0x4>

08002306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <BusFault_Handler+0x4>

0800230c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <UsageFault_Handler+0x4>

08002312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002352:	f001 fd11 	bl	8003d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200053b4 	.word	0x200053b4

08002360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <SystemInit+0x28>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <SystemInit+0x28>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SystemInit+0x28>)
 8002376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237a:	609a      	str	r2, [r3, #8]
#endif
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002390:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002392:	e003      	b.n	800239c <LoopCopyDataInit>

08002394 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002396:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002398:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800239a:	3104      	adds	r1, #4

0800239c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023a4:	d3f6      	bcc.n	8002394 <CopyDataInit>
  ldr  r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023a8:	e002      	b.n	80023b0 <LoopFillZerobss>

080023aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023ac:	f842 3b04 	str.w	r3, [r2], #4

080023b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023b4:	d3f9      	bcc.n	80023aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023b6:	f7ff ffd3 	bl	8002360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f010 f85f 	bl	801247c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7ff f987 	bl	80016d0 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023c8:	08015e98 	.word	0x08015e98
  ldr  r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023d0:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 80023d4:	2000018c 	.word	0x2000018c
  ldr  r3, = _ebss
 80023d8:	200057e0 	.word	0x200057e0

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_Init+0x40>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_Init+0x40>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <HAL_Init+0x40>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 f8fc 	bl	8002606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff fefc 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7ff fdfa 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000000c 	.word	0x2000000c
 8002448:	200053fc 	.word	0x200053fc

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200053fc 	.word	0x200053fc

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff ffee 	bl	800244c <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d005      	beq.n	800248a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Delay+0x44>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248a:	bf00      	nop
 800248c:	f7ff ffde 	bl	800244c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f7      	bhi.n	800248c <HAL_Delay+0x28>
  {
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000000c 	.word	0x2000000c

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	; (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ff4c 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262e:	f7ff ff61 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	6978      	ldr	r0, [r7, #20]
 800263a:	f7ff ffb1 	bl	80025a0 <NVIC_EncodePriority>
 800263e:	4602      	mov	r2, r0
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff80 	bl	800254c <__NVIC_SetPriority>
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff54 	bl	8002510 <__NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	795b      	ldrb	r3, [r3, #5]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fce2 	bl	800205c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e16b      	b.n	800299c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 815a 	bne.w	8002996 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80b4 	beq.w	8002996 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_GPIO_Init+0x30c>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_GPIO_Init+0x310>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_GPIO_Init+0x314>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02b      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <HAL_GPIO_Init+0x318>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d025      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x31c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01f      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x320>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x21a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_GPIO_Init+0x324>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x216>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_GPIO_Init+0x328>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x212>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x330>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x20a>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00e      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b2:	2308      	movs	r3, #8
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x228>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	; (80029b8 <HAL_GPIO_Init+0x310>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_GPIO_Init+0x334>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_GPIO_Init+0x334>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_GPIO_Init+0x334>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_GPIO_Init+0x334>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_GPIO_Init+0x334>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae90 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40021c00 	.word	0x40021c00
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e267      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d075      	beq.n	8002b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d00c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d05b      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d157      	bne.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e242      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x74>
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a75      	ldr	r2, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6c      	ldr	r2, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xb0>
 8002aac:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a68      	ldr	r2, [pc, #416]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff fcbe 	bl	800244c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fcba 	bl	800244c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e207      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff fcaa 	bl	800244c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afc:	f7ff fca6 	bl	800244c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1f3      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1c7      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4937      	ldr	r1, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x244>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7ff fc5f 	bl	800244c <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7ff fc5b 	bl	800244c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1a8      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4925      	ldr	r1, [pc, #148]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x244>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fc3e 	bl	800244c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7ff fc3a 	bl	800244c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e187      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d036      	beq.n	8002c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x248>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7ff fc1e 	bl	800244c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7ff fc1a 	bl	800244c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e167      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x240>)
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x200>
 8002c32:	e01b      	b.n	8002c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x248>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7ff fc07 	bl	800244c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	e00e      	b.n	8002c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c42:	f7ff fc03 	bl	800244c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d907      	bls.n	8002c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e150      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ea      	bne.n	8002c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8097 	beq.w	8002da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a7c      	ldr	r2, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a73      	ldr	r2, [pc, #460]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fbc3 	bl	800244c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7ff fbbf 	bl	800244c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e10c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x474>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2ea>
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCC_OscConfig+0x324>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x30c>
 8002d06:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a5e      	ldr	r2, [pc, #376]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0x324>
 8002d20:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 0304 	bic.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7ff fb84 	bl	800244c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7ff fb80 	bl	800244c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0cb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ee      	beq.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff fb6e 	bl	800244c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7ff fb6a 	bl	800244c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0b5      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ee      	bne.n	8002d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a38      	ldr	r2, [pc, #224]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a1 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d05c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d141      	bne.n	8002e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff fb3e 	bl	800244c <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7ff fb3a 	bl	800244c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e087      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	491b      	ldr	r1, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fb13 	bl	800244c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7ff fb0f 	bl	800244c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e05c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x416>
 8002e48:	e054      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x478>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fafc 	bl	800244c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7ff faf8 	bl	800244c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e045      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
 8002e76:	e03d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e038      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x4ec>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d121      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d90c      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d044      	beq.n	8003024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e067      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7ff fa2a 	bl	800244c <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7ff fa26 	bl	800244c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d20c      	bcs.n	800304c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f8ae 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08013c40 	.word	0x08013c40
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000008 	.word	0x20000008

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b094      	sub	sp, #80	; 0x50
 80030d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	647b      	str	r3, [r7, #68]	; 0x44
 80030dc:	2300      	movs	r3, #0
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	2300      	movs	r3, #0
 80030e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e8:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d00d      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x40>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	f200 80e1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d003      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x3a>
 8003102:	e0db      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003108:	e0db      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310e:	e0d8      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d063      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	2200      	movs	r2, #0
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003130:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003138:	633b      	str	r3, [r7, #48]	; 0x30
 800313a:	2300      	movs	r3, #0
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
 800313e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003142:	4622      	mov	r2, r4
 8003144:	462b      	mov	r3, r5
 8003146:	f04f 0000 	mov.w	r0, #0
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	0159      	lsls	r1, r3, #5
 8003150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003154:	0150      	lsls	r0, r2, #5
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4621      	mov	r1, r4
 800315c:	1a51      	subs	r1, r2, r1
 800315e:	6139      	str	r1, [r7, #16]
 8003160:	4629      	mov	r1, r5
 8003162:	eb63 0301 	sbc.w	r3, r3, r1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003174:	4659      	mov	r1, fp
 8003176:	018b      	lsls	r3, r1, #6
 8003178:	4651      	mov	r1, sl
 800317a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800317e:	4651      	mov	r1, sl
 8003180:	018a      	lsls	r2, r1, #6
 8003182:	4651      	mov	r1, sl
 8003184:	ebb2 0801 	subs.w	r8, r2, r1
 8003188:	4659      	mov	r1, fp
 800318a:	eb63 0901 	sbc.w	r9, r3, r1
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800319a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800319e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a2:	4690      	mov	r8, r2
 80031a4:	4699      	mov	r9, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	eb18 0303 	adds.w	r3, r8, r3
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	462b      	mov	r3, r5
 80031b0:	eb49 0303 	adc.w	r3, r9, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031c2:	4629      	mov	r1, r5
 80031c4:	024b      	lsls	r3, r1, #9
 80031c6:	4621      	mov	r1, r4
 80031c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031cc:	4621      	mov	r1, r4
 80031ce:	024a      	lsls	r2, r1, #9
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d6:	2200      	movs	r2, #0
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e0:	f7fd f84e 	bl	8000280 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4613      	mov	r3, r2
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ec:	e058      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	4611      	mov	r1, r2
 80031fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031fe:	623b      	str	r3, [r7, #32]
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
 8003204:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	f04f 0000 	mov.w	r0, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	0159      	lsls	r1, r3, #5
 8003216:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321a:	0150      	lsls	r0, r2, #5
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4641      	mov	r1, r8
 8003222:	ebb2 0a01 	subs.w	sl, r2, r1
 8003226:	4649      	mov	r1, r9
 8003228:	eb63 0b01 	sbc.w	fp, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003238:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800323c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003240:	ebb2 040a 	subs.w	r4, r2, sl
 8003244:	eb63 050b 	sbc.w	r5, r3, fp
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00eb      	lsls	r3, r5, #3
 8003252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003256:	00e2      	lsls	r2, r4, #3
 8003258:	4614      	mov	r4, r2
 800325a:	461d      	mov	r5, r3
 800325c:	4643      	mov	r3, r8
 800325e:	18e3      	adds	r3, r4, r3
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	464b      	mov	r3, r9
 8003264:	eb45 0303 	adc.w	r3, r5, r3
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003276:	4629      	mov	r1, r5
 8003278:	028b      	lsls	r3, r1, #10
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003280:	4621      	mov	r1, r4
 8003282:	028a      	lsls	r2, r1, #10
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	61fa      	str	r2, [r7, #28]
 8003290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003294:	f7fc fff4 	bl	8000280 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3750      	adds	r7, #80	; 0x50
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000004 	.word	0x20000004

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0b5b      	lsrs	r3, r3, #13
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08013c50 	.word	0x08013c50

0800331c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	220f      	movs	r2, #15
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <HAL_RCC_GetClockConfig+0x60>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07b      	b.n	800348a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a2:	d009      	beq.n	80033b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fe64 	bl	80020a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	ea42 0103 	orr.w	r1, r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0104 	and.w	r1, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0210 	and.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_SPI_Transmit+0x22>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e126      	b.n	8003702 <HAL_SPI_Transmit+0x270>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034bc:	f7fe ffc6 	bl	800244c <HAL_GetTick>
 80034c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034d6:	e10b      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Transmit+0x52>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034e8:	e102      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d10f      	bne.n	8003552 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003578:	d14b      	bne.n	8003612 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_SPI_Transmit+0xf6>
 8003582:	8afb      	ldrh	r3, [r7, #22]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d13e      	bne.n	8003606 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035ac:	e02b      	b.n	8003606 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d112      	bne.n	80035e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
 80035e0:	e011      	b.n	8003606 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e2:	f7fe ff33 	bl	800244c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d803      	bhi.n	80035fa <HAL_SPI_Transmit+0x168>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Transmit+0x16e>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003604:	e074      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ce      	bne.n	80035ae <HAL_SPI_Transmit+0x11c>
 8003610:	e04c      	b.n	80036ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Transmit+0x18e>
 800361a:	8afb      	ldrh	r3, [r7, #22]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d140      	bne.n	80036a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003646:	e02c      	b.n	80036a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d113      	bne.n	800367e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36
 800367c:	e011      	b.n	80036a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367e:	f7fe fee5 	bl	800244c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d803      	bhi.n	8003696 <HAL_SPI_Transmit+0x204>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d102      	bne.n	800369c <HAL_SPI_Transmit+0x20a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036a0:	e026      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cd      	bne.n	8003648 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fa55 	bl	8003b60 <SPI_EndRxTxTransaction>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e000      	b.n	80036f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	7ffb      	ldrb	r3, [r7, #31]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08c      	sub	sp, #48	; 0x30
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003718:	2301      	movs	r3, #1
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x26>
 800372c:	2302      	movs	r3, #2
 800372e:	e18a      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x33c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003738:	f7fe fe88 	bl	800244c <HAL_GetTick>
 800373c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800374e:	887b      	ldrh	r3, [r7, #2]
 8003750:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003756:	2b01      	cmp	r3, #1
 8003758:	d00f      	beq.n	800377a <HAL_SPI_TransmitReceive+0x70>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003760:	d107      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x68>
 800376a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800376e:	2b04      	cmp	r3, #4
 8003770:	d003      	beq.n	800377a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003778:	e15b      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_SPI_TransmitReceive+0x82>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_SPI_TransmitReceive+0x82>
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003792:	e14e      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b04      	cmp	r3, #4
 800379e:	d003      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2205      	movs	r2, #5
 80037a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d007      	beq.n	80037fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003804:	d178      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x10a>
 800380e:	8b7b      	ldrh	r3, [r7, #26]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d166      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003838:	e053      	b.n	80038e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d11b      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x176>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x176>
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d113      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d119      	bne.n	80038c2 <HAL_SPI_TransmitReceive+0x1b8>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d014      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	b292      	uxth	r2, r2
 80038a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038be:	2301      	movs	r3, #1
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c2:	f7fe fdc3 	bl	800244c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d807      	bhi.n	80038e2 <HAL_SPI_TransmitReceive+0x1d8>
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d003      	beq.n	80038e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038e0:	e0a7      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1a6      	bne.n	800383a <HAL_SPI_TransmitReceive+0x130>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1a1      	bne.n	800383a <HAL_SPI_TransmitReceive+0x130>
 80038f6:	e07c      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x1fc>
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d16b      	bne.n	80039de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392c:	e057      	b.n	80039de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d11c      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x26c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d017      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x26c>
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d114      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d119      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x2ae>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d014      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b4:	2301      	movs	r3, #1
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b8:	f7fe fd48 	bl	800244c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_TransmitReceive+0x2c6>
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x2cc>
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039dc:	e029      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1a2      	bne.n	800392e <HAL_SPI_TransmitReceive+0x224>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d19d      	bne.n	800392e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f8b2 	bl	8003b60 <SPI_EndRxTxTransaction>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a0e:	e010      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	e000      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3730      	adds	r7, #48	; 0x30
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a60:	f7fe fcf4 	bl	800244c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a70:	f7fe fcec 	bl	800244c <HAL_GetTick>
 8003a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a86:	e054      	b.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d050      	beq.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a90:	f7fe fcdc 	bl	800244c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d902      	bls.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13d      	bne.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003abe:	d111      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d004      	beq.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d107      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d10f      	bne.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e017      	b.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d19b      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000004 	.word	0x20000004

08003b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <SPI_EndRxTxTransaction+0x7c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <SPI_EndRxTxTransaction+0x80>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0d5b      	lsrs	r3, r3, #21
 8003b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8a:	d112      	bne.n	8003bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff ff5a 	bl	8003a50 <SPI_WaitFlagStateUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d0f2      	beq.n	8003bb2 <SPI_EndRxTxTransaction+0x52>
 8003bcc:	e000      	b.n	8003bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bce:	bf00      	nop
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	165e9f81 	.word	0x165e9f81

08003be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e041      	b.n	8003c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f839 	bl	8003c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 f9d8 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04e      	b.n	8003d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d01d      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d111      	bne.n	8003d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d010      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3a:	e007      	b.n	8003d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40010400 	.word	0x40010400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40001800 	.word	0x40001800

08003d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0202 	mvn.w	r2, #2
 8003da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f8ee 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8e0 	bl	8003f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8f1 	bl	8003fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0204 	mvn.w	r2, #4
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8c4 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8b6 	bl	8003f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8c7 	bl	8003fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0208 	mvn.w	r2, #8
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f89a 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f88c 	bl	8003f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f89d 	bl	8003fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0210 	mvn.w	r2, #16
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f870 	bl	8003f9c <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f862 	bl	8003f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f873 	bl	8003fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0201 	mvn.w	r2, #1
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fdbe 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f902 	bl	800412c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f838 	bl	8003fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0220 	mvn.w	r2, #32
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8cc 	bl	8004118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a40      	ldr	r2, [pc, #256]	; (80040ec <TIM_Base_SetConfig+0x114>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3a      	ldr	r2, [pc, #232]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d108      	bne.n	800402a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <TIM_Base_SetConfig+0x114>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d027      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d023      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01f      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d017      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <TIM_Base_SetConfig+0x128>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <TIM_Base_SetConfig+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a26      	ldr	r2, [pc, #152]	; (8004108 <TIM_Base_SetConfig+0x130>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <TIM_Base_SetConfig+0x134>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a24      	ldr	r2, [pc, #144]	; (8004110 <TIM_Base_SetConfig+0x138>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <TIM_Base_SetConfig+0x13c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <TIM_Base_SetConfig+0x114>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <TIM_Base_SetConfig+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40010400 	.word	0x40010400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800
 800410c:	40001800 	.word	0x40001800
 8004110:	40001c00 	.word	0x40001c00
 8004114:	40002000 	.word	0x40002000

08004118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <MX_FATFS_Init+0x18>)
 8004146:	4805      	ldr	r0, [pc, #20]	; (800415c <MX_FATFS_Init+0x1c>)
 8004148:	f003 f9c4 	bl	80074d4 <FATFS_LinkDriver>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <MX_FATFS_Init+0x20>)
 8004152:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20005404 	.word	0x20005404
 800415c:	20000010 	.word	0x20000010
 8004160:	20005400 	.word	0x20005400

08004164 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004168:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc ff8f 	bl	80010a4 <SD_disk_initialize>
 8004186:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd f867 	bl	8001270 <SD_disk_status>
 80041a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80041bc:	7bf8      	ldrb	r0, [r7, #15]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	f7fd f86a 	bl	800129c <SD_disk_read>
 80041c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80041e2:	7bf8      	ldrb	r0, [r7, #15]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	f7fd f8c1 	bl	8001370 <SD_disk_write>
 80041ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	603a      	str	r2, [r7, #0]
 8004202:	71fb      	strb	r3, [r7, #7]
 8004204:	460b      	mov	r3, r1
 8004206:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004208:	79b9      	ldrb	r1, [r7, #6]
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd f932 	bl	8001478 <SD_disk_ioctl>
 8004214:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <disk_status+0x30>)
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	79fa      	ldrb	r2, [r7, #7]
 8004238:	4905      	ldr	r1, [pc, #20]	; (8004250 <disk_status+0x30>)
 800423a:	440a      	add	r2, r1
 800423c:	7a12      	ldrb	r2, [r2, #8]
 800423e:	4610      	mov	r0, r2
 8004240:	4798      	blx	r3
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20005430 	.word	0x20005430

08004254 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	4a0d      	ldr	r2, [pc, #52]	; (800429c <disk_initialize+0x48>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	4a0b      	ldr	r2, [pc, #44]	; (800429c <disk_initialize+0x48>)
 8004270:	2101      	movs	r1, #1
 8004272:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <disk_initialize+0x48>)
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	79fa      	ldrb	r2, [r7, #7]
 8004282:	4906      	ldr	r1, [pc, #24]	; (800429c <disk_initialize+0x48>)
 8004284:	440a      	add	r2, r1
 8004286:	7a12      	ldrb	r2, [r2, #8]
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20005430 	.word	0x20005430

080042a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <disk_read+0x3c>)
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	689c      	ldr	r4, [r3, #8]
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <disk_read+0x3c>)
 80042c0:	4413      	add	r3, r2
 80042c2:	7a18      	ldrb	r0, [r3, #8]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	47a0      	blx	r4
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	bf00      	nop
 80042dc:	20005430 	.word	0x20005430

080042e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <disk_write+0x3c>)
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68dc      	ldr	r4, [r3, #12]
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4a07      	ldr	r2, [pc, #28]	; (800431c <disk_write+0x3c>)
 8004300:	4413      	add	r3, r2
 8004302:	7a18      	ldrb	r0, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	47a0      	blx	r4
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
}
 8004312:	4618      	mov	r0, r3
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd90      	pop	{r4, r7, pc}
 800431a:	bf00      	nop
 800431c:	20005430 	.word	0x20005430

08004320 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	603a      	str	r2, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
 800432c:	460b      	mov	r3, r1
 800432e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <disk_ioctl+0x38>)
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	79fa      	ldrb	r2, [r7, #7]
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <disk_ioctl+0x38>)
 8004340:	440a      	add	r2, r1
 8004342:	7a10      	ldrb	r0, [r2, #8]
 8004344:	79b9      	ldrb	r1, [r7, #6]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	4798      	blx	r3
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]
  return res;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20005430 	.word	0x20005430

0800435c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3301      	adds	r3, #1
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	b21a      	sxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b21b      	sxth	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b21b      	sxth	r3, r3
 800437c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800437e:	89fb      	ldrh	r3, [r7, #14]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3303      	adds	r3, #3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	3202      	adds	r2, #2
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	3201      	adds	r2, #1
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	887a      	ldrh	r2, [r7, #2]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	887b      	ldrh	r3, [r7, #2]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	1c53      	adds	r3, r2, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1c59      	adds	r1, r3, #1
 8004484:	6179      	str	r1, [r7, #20]
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3b01      	subs	r3, #1
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f1      	bne.n	800447a <mem_cpy+0x1a>
	}
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80044a2:	b480      	push	{r7}
 80044a4:	b087      	sub	sp, #28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	617a      	str	r2, [r7, #20]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f3      	bne.n	80044b2 <mem_set+0x10>
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	61fa      	str	r2, [r7, #28]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	61ba      	str	r2, [r7, #24]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	1acb      	subs	r3, r1, r3
 8004504:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3b01      	subs	r3, #1
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <mem_cmp+0x40>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0eb      	beq.n	80044f0 <mem_cmp+0x18>

	return r;
 8004518:	697b      	ldr	r3, [r7, #20]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004530:	e002      	b.n	8004538 <chk_chr+0x12>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3301      	adds	r3, #1
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <chk_chr+0x26>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4293      	cmp	r3, r2
 800454a:	d1f2      	bne.n	8004532 <chk_chr+0xc>
	return *str;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	781b      	ldrb	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e029      	b.n	80045c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004570:	4a27      	ldr	r2, [pc, #156]	; (8004610 <chk_lock+0xb4>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	4413      	add	r3, r2
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01d      	beq.n	80045ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800457e:	4a24      	ldr	r2, [pc, #144]	; (8004610 <chk_lock+0xb4>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	4413      	add	r3, r2
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d116      	bne.n	80045be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <chk_lock+0xb4>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d10c      	bne.n	80045be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045a4:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <chk_lock+0xb4>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4413      	add	r3, r2
 80045ac:	3308      	adds	r3, #8
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d102      	bne.n	80045be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045b8:	e007      	b.n	80045ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d9d2      	bls.n	8004570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d109      	bne.n	80045e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <chk_lock+0x80>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d101      	bne.n	80045e0 <chk_lock+0x84>
 80045dc:	2300      	movs	r3, #0
 80045de:	e010      	b.n	8004602 <chk_lock+0xa6>
 80045e0:	2312      	movs	r3, #18
 80045e2:	e00e      	b.n	8004602 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <chk_lock+0xa0>
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <chk_lock+0xb4>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4413      	add	r3, r2
 80045f2:	330c      	adds	r3, #12
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d101      	bne.n	8004600 <chk_lock+0xa4>
 80045fc:	2310      	movs	r3, #16
 80045fe:	e000      	b.n	8004602 <chk_lock+0xa6>
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20005410 	.word	0x20005410

08004614 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	e002      	b.n	8004626 <enq_lock+0x12>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3301      	adds	r3, #1
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d806      	bhi.n	800463a <enq_lock+0x26>
 800462c:	4a09      	ldr	r2, [pc, #36]	; (8004654 <enq_lock+0x40>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4413      	add	r3, r2
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f2      	bne.n	8004620 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b02      	cmp	r3, #2
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20005410 	.word	0x20005410

08004658 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e01f      	b.n	80046a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <inc_lock+0x118>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	4413      	add	r3, r2
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d113      	bne.n	80046a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800467a:	4a3d      	ldr	r2, [pc, #244]	; (8004770 <inc_lock+0x118>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800468a:	429a      	cmp	r2, r3
 800468c:	d109      	bne.n	80046a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800468e:	4a38      	ldr	r2, [pc, #224]	; (8004770 <inc_lock+0x118>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	4413      	add	r3, r2
 8004696:	3308      	adds	r3, #8
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800469e:	429a      	cmp	r2, r3
 80046a0:	d006      	beq.n	80046b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d9dc      	bls.n	8004668 <inc_lock+0x10>
 80046ae:	e000      	b.n	80046b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80046b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d132      	bne.n	800471e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e002      	b.n	80046c4 <inc_lock+0x6c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d806      	bhi.n	80046d8 <inc_lock+0x80>
 80046ca:	4a29      	ldr	r2, [pc, #164]	; (8004770 <inc_lock+0x118>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f2      	bne.n	80046be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d101      	bne.n	80046e2 <inc_lock+0x8a>
 80046de:	2300      	movs	r3, #0
 80046e0:	e040      	b.n	8004764 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4922      	ldr	r1, [pc, #136]	; (8004770 <inc_lock+0x118>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	440b      	add	r3, r1
 80046ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	491e      	ldr	r1, [pc, #120]	; (8004770 <inc_lock+0x118>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	440b      	add	r3, r1
 80046fc:	3304      	adds	r3, #4
 80046fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	491a      	ldr	r1, [pc, #104]	; (8004770 <inc_lock+0x118>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	440b      	add	r3, r1
 800470c:	3308      	adds	r3, #8
 800470e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <inc_lock+0x118>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	4413      	add	r3, r2
 8004718:	330c      	adds	r3, #12
 800471a:	2200      	movs	r2, #0
 800471c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <inc_lock+0xe0>
 8004724:	4a12      	ldr	r2, [pc, #72]	; (8004770 <inc_lock+0x118>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	4413      	add	r3, r2
 800472c:	330c      	adds	r3, #12
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <inc_lock+0xe0>
 8004734:	2300      	movs	r3, #0
 8004736:	e015      	b.n	8004764 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d108      	bne.n	8004750 <inc_lock+0xf8>
 800473e:	4a0c      	ldr	r2, [pc, #48]	; (8004770 <inc_lock+0x118>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	4413      	add	r3, r2
 8004746:	330c      	adds	r3, #12
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	e001      	b.n	8004754 <inc_lock+0xfc>
 8004750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004754:	4906      	ldr	r1, [pc, #24]	; (8004770 <inc_lock+0x118>)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	440b      	add	r3, r1
 800475c:	330c      	adds	r3, #12
 800475e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20005410 	.word	0x20005410

08004774 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d825      	bhi.n	80047d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <dec_lock+0x74>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	4413      	add	r3, r2
 8004790:	330c      	adds	r3, #12
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479c:	d101      	bne.n	80047a2 <dec_lock+0x2e>
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <dec_lock+0x3a>
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80047ae:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <dec_lock+0x74>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	4413      	add	r3, r2
 80047b6:	330c      	adds	r3, #12
 80047b8:	89fa      	ldrh	r2, [r7, #14]
 80047ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047bc:	89fb      	ldrh	r3, [r7, #14]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <dec_lock+0x5a>
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <dec_lock+0x74>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	4413      	add	r3, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	737b      	strb	r3, [r7, #13]
 80047d2:	e001      	b.n	80047d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047d4:	2302      	movs	r3, #2
 80047d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80047d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20005410 	.word	0x20005410

080047ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e010      	b.n	800481c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80047fa:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <clear_lock+0x44>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d105      	bne.n	8004816 <clear_lock+0x2a>
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <clear_lock+0x44>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	4413      	add	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d9eb      	bls.n	80047fa <clear_lock+0xe>
	}
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20005410 	.word	0x20005410

08004834 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d034      	beq.n	80048b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7858      	ldrb	r0, [r3, #1]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004858:	2301      	movs	r3, #1
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	f7ff fd40 	bl	80042e0 <disk_write>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	e022      	b.n	80048b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	429a      	cmp	r2, r3
 8004880:	d217      	bcs.n	80048b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e010      	b.n	80048ac <sync_window+0x78>
					wsect += fs->fsize;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7858      	ldrb	r0, [r3, #1]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800489e:	2301      	movs	r3, #1
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	f7ff fd1d 	bl	80042e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d8eb      	bhi.n	800488a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d01b      	beq.n	800490c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffad 	bl	8004834 <sync_window>
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d113      	bne.n	800490c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7858      	ldrb	r0, [r3, #1]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048ee:	2301      	movs	r3, #1
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	f7ff fcd5 	bl	80042a0 <disk_read>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004900:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff87 	bl	8004834 <sync_window>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d159      	bne.n	80049e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d149      	bne.n	80049cc <sync_fs+0xb4>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d145      	bne.n	80049cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	899b      	ldrh	r3, [r3, #12]
 800494a:	461a      	mov	r2, r3
 800494c:	2100      	movs	r1, #0
 800494e:	f7ff fda8 	bl	80044a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800495a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fd37 	bl	80043d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3338      	adds	r3, #56	; 0x38
 8004968:	4921      	ldr	r1, [pc, #132]	; (80049f0 <sync_fs+0xd8>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fd4c 	bl	8004408 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3338      	adds	r3, #56	; 0x38
 8004974:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004978:	491e      	ldr	r1, [pc, #120]	; (80049f4 <sync_fs+0xdc>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd44 	bl	8004408 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3338      	adds	r3, #56	; 0x38
 8004984:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7ff fd3a 	bl	8004408 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3338      	adds	r3, #56	; 0x38
 8004998:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f7ff fd30 	bl	8004408 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7858      	ldrb	r0, [r3, #1]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	2301      	movs	r3, #1
 80049c2:	f7ff fc8d 	bl	80042e0 <disk_write>
			fs->fsi_flag = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fca3 	bl	8004320 <disk_ioctl>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <sync_fs+0xcc>
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	41615252 	.word	0x41615252
 80049f4:	61417272 	.word	0x61417272

080049f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	3b02      	subs	r3, #2
 8004a06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	3b02      	subs	r3, #2
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d301      	bcc.n	8004a18 <clust2sect+0x20>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e008      	b.n	8004a2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	895b      	ldrh	r3, [r3, #10]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	fb03 f202 	mul.w	r2, r3, r2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	4413      	add	r3, r2
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d904      	bls.n	8004a56 <get_fat+0x20>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004a56:	2301      	movs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e0bb      	b.n	8004bd4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	f000 8083 	beq.w	8004b72 <get_fat+0x13c>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	f300 80a7 	bgt.w	8004bc0 <get_fat+0x18a>
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d002      	beq.n	8004a7c <get_fat+0x46>
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d056      	beq.n	8004b28 <get_fat+0xf2>
 8004a7a:	e0a1      	b.n	8004bc0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	899b      	ldrh	r3, [r3, #12]
 8004a92:	4619      	mov	r1, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6938      	ldr	r0, [r7, #16]
 8004aa0:	f7ff ff0c 	bl	80048bc <move_window>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 808d 	bne.w	8004bc6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	60fa      	str	r2, [r7, #12]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	8992      	ldrh	r2, [r2, #12]
 8004ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aba:	fb01 f202 	mul.w	r2, r1, r2
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ac8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	899b      	ldrh	r3, [r3, #12]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ada:	4413      	add	r3, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	6938      	ldr	r0, [r7, #16]
 8004ae0:	f7ff feec 	bl	80048bc <move_window>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d16f      	bne.n	8004bca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	899b      	ldrh	r3, [r3, #12]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004af6:	fb01 f202 	mul.w	r2, r1, r2
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <get_fat+0xe8>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	e002      	b.n	8004b24 <get_fat+0xee>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	617b      	str	r3, [r7, #20]
			break;
 8004b26:	e055      	b.n	8004bd4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	899b      	ldrh	r3, [r3, #12]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6938      	ldr	r0, [r7, #16]
 8004b42:	f7ff febb 	bl	80048bc <move_window>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d140      	bne.n	8004bce <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	8992      	ldrh	r2, [r2, #12]
 8004b5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b5e:	fb00 f202 	mul.w	r2, r0, r2
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	440b      	add	r3, r1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fbf8 	bl	800435c <ld_word>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	617b      	str	r3, [r7, #20]
			break;
 8004b70:	e030      	b.n	8004bd4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	899b      	ldrh	r3, [r3, #12]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	4619      	mov	r1, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b86:	4413      	add	r3, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6938      	ldr	r0, [r7, #16]
 8004b8c:	f7ff fe96 	bl	80048bc <move_window>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d11d      	bne.n	8004bd2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	8992      	ldrh	r2, [r2, #12]
 8004ba4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ba8:	fb00 f202 	mul.w	r2, r0, r2
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fbeb 	bl	800438c <ld_dword>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	617b      	str	r3, [r7, #20]
			break;
 8004bbe:	e009      	b.n	8004bd4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e006      	b.n	8004bd4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bd2:	bf00      	nop
		}
	}

	return val;
 8004bd4:	697b      	ldr	r3, [r7, #20]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004bde:	b590      	push	{r4, r7, lr}
 8004be0:	b089      	sub	sp, #36	; 0x24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f240 8102 	bls.w	8004dfa <put_fat+0x21c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	f080 80fc 	bcs.w	8004dfa <put_fat+0x21c>
		switch (fs->fs_type) {
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	f000 80b6 	beq.w	8004d78 <put_fat+0x19a>
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	f300 80fd 	bgt.w	8004e0c <put_fat+0x22e>
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d003      	beq.n	8004c1e <put_fat+0x40>
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	f000 8083 	beq.w	8004d22 <put_fat+0x144>
 8004c1c:	e0f6      	b.n	8004e0c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	899b      	ldrh	r3, [r3, #12]
 8004c34:	4619      	mov	r1, r3
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fe3b 	bl	80048bc <move_window>
 8004c46:	4603      	mov	r3, r0
 8004c48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c4a:	7ffb      	ldrb	r3, [r7, #31]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f040 80d6 	bne.w	8004dfe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	61ba      	str	r2, [r7, #24]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	8992      	ldrh	r2, [r2, #12]
 8004c62:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c66:	fb00 f202 	mul.w	r2, r0, r2
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <put_fat+0xb8>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	b25a      	sxtb	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b25b      	sxtb	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	e001      	b.n	8004c9a <put_fat+0xbc>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	899b      	ldrh	r3, [r3, #12]
 8004cac:	4619      	mov	r1, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fdff 	bl	80048bc <move_window>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 809c 	bne.w	8004e02 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	899b      	ldrh	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cdc:	fb00 f202 	mul.w	r2, r0, r2
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <put_fat+0x11a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e00e      	b.n	8004d16 <put_fat+0x138>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	f023 030f 	bic.w	r3, r3, #15
 8004d02:	b25a      	sxtb	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b25b      	sxtb	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	70da      	strb	r2, [r3, #3]
			break;
 8004d20:	e074      	b.n	8004e0c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	899b      	ldrh	r3, [r3, #12]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d36:	4413      	add	r3, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fdbe 	bl	80048bc <move_window>
 8004d40:	4603      	mov	r3, r0
 8004d42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d15d      	bne.n	8004e06 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	8992      	ldrh	r2, [r2, #12]
 8004d58:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d5c:	fb00 f202 	mul.w	r2, r0, r2
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	440b      	add	r3, r1
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	b292      	uxth	r2, r2
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fb31 	bl	80043d2 <st_word>
			fs->wflag = 1;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	70da      	strb	r2, [r3, #3]
			break;
 8004d76:	e049      	b.n	8004e0c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	899b      	ldrh	r3, [r3, #12]
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fd93 	bl	80048bc <move_window>
 8004d96:	4603      	mov	r3, r0
 8004d98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d134      	bne.n	8004e0a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	8992      	ldrh	r2, [r2, #12]
 8004db4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004db8:	fb00 f202 	mul.w	r2, r0, r2
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fae3 	bl	800438c <ld_dword>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dcc:	4323      	orrs	r3, r4
 8004dce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	8992      	ldrh	r2, [r2, #12]
 8004dde:	fbb3 f0f2 	udiv	r0, r3, r2
 8004de2:	fb00 f202 	mul.w	r2, r0, r2
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	440b      	add	r3, r1
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fb0b 	bl	8004408 <st_dword>
			fs->wflag = 1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	70da      	strb	r2, [r3, #3]
			break;
 8004df8:	e008      	b.n	8004e0c <put_fat+0x22e>
		}
	}
 8004dfa:	bf00      	nop
 8004dfc:	e006      	b.n	8004e0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004dfe:	bf00      	nop
 8004e00:	e004      	b.n	8004e0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e0a:	bf00      	nop
	return res;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}

08004e16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d904      	bls.n	8004e3c <remove_chain+0x26>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d301      	bcc.n	8004e40 <remove_chain+0x2a>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e04b      	b.n	8004ed8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	69b8      	ldr	r0, [r7, #24]
 8004e4e:	f7ff fec6 	bl	8004bde <put_fat>
 8004e52:	4603      	mov	r3, r0
 8004e54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004e56:	7ffb      	ldrb	r3, [r7, #31]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <remove_chain+0x4a>
 8004e5c:	7ffb      	ldrb	r3, [r7, #31]
 8004e5e:	e03b      	b.n	8004ed8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fde7 	bl	8004a36 <get_fat>
 8004e68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d031      	beq.n	8004ed4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <remove_chain+0x64>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e02e      	b.n	8004ed8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d101      	bne.n	8004e86 <remove_chain+0x70>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e028      	b.n	8004ed8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e86:	2200      	movs	r2, #0
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	69b8      	ldr	r0, [r7, #24]
 8004e8c:	f7ff fea7 	bl	8004bde <put_fat>
 8004e90:	4603      	mov	r3, r0
 8004e92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <remove_chain+0x88>
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	e01c      	b.n	8004ed8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	3b02      	subs	r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d20b      	bcs.n	8004ec4 <remove_chain+0xae>
			fs->free_clst++;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	791b      	ldrb	r3, [r3, #4]
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3c6      	bcc.n	8004e60 <remove_chain+0x4a>
 8004ed2:	e000      	b.n	8004ed6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ed4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <create_chain+0x2c>
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d31b      	bcc.n	8004f44 <create_chain+0x64>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e018      	b.n	8004f44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fd8e 	bl	8004a36 <get_fat>
 8004f1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d801      	bhi.n	8004f26 <create_chain+0x46>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e070      	b.n	8005008 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d101      	bne.n	8004f32 <create_chain+0x52>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	e06a      	b.n	8005008 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d201      	bcs.n	8004f40 <create_chain+0x60>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	e063      	b.n	8005008 <create_chain+0x128>
		scl = clst;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d307      	bcc.n	8004f68 <create_chain+0x88>
				ncl = 2;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d901      	bls.n	8004f68 <create_chain+0x88>
 8004f64:	2300      	movs	r3, #0
 8004f66:	e04f      	b.n	8005008 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f68:	69f9      	ldr	r1, [r7, #28]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fd63 	bl	8004a36 <get_fat>
 8004f70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00e      	beq.n	8004f96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d003      	beq.n	8004f86 <create_chain+0xa6>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d101      	bne.n	8004f8a <create_chain+0xaa>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	e03e      	b.n	8005008 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d1da      	bne.n	8004f48 <create_chain+0x68>
 8004f92:	2300      	movs	r3, #0
 8004f94:	e038      	b.n	8005008 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004f96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	69f9      	ldr	r1, [r7, #28]
 8004f9e:	6938      	ldr	r0, [r7, #16]
 8004fa0:	f7ff fe1d 	bl	8004bde <put_fat>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <create_chain+0xe2>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6938      	ldr	r0, [r7, #16]
 8004fba:	f7ff fe10 	bl	8004bde <put_fat>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d116      	bne.n	8004ff6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	3b02      	subs	r3, #2
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d804      	bhi.n	8004fe6 <create_chain+0x106>
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	711a      	strb	r2, [r3, #4]
 8004ff4:	e007      	b.n	8005006 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <create_chain+0x122>
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e000      	b.n	8005004 <create_chain+0x124>
 8005002:	2301      	movs	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	3304      	adds	r3, #4
 8005026:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	899b      	ldrh	r3, [r3, #12]
 800502c:	461a      	mov	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	fbb3 f3f2 	udiv	r3, r3, r2
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	8952      	ldrh	r2, [r2, #10]
 8005038:	fbb3 f3f2 	udiv	r3, r3, r2
 800503c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	613a      	str	r2, [r7, #16]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <clmt_clust+0x42>
 800504e:	2300      	movs	r3, #0
 8005050:	e010      	b.n	8005074 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d307      	bcc.n	800506a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3304      	adds	r3, #4
 8005066:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005068:	e7e9      	b.n	800503e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800506a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005096:	d204      	bcs.n	80050a2 <dir_sdi+0x22>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80050a2:	2302      	movs	r3, #2
 80050a4:	e071      	b.n	800518a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <dir_sdi+0x46>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d902      	bls.n	80050c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	8912      	ldrh	r2, [r2, #8]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d301      	bcc.n	80050dc <dir_sdi+0x5c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e056      	b.n	800518a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	61da      	str	r2, [r3, #28]
 80050e4:	e02d      	b.n	8005142 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	895b      	ldrh	r3, [r3, #10]
 80050ea:	461a      	mov	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	899b      	ldrh	r3, [r3, #12]
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050f6:	e019      	b.n	800512c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fc9a 	bl	8004a36 <get_fat>
 8005102:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d101      	bne.n	8005110 <dir_sdi+0x90>
 800510c:	2301      	movs	r3, #1
 800510e:	e03c      	b.n	800518a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d904      	bls.n	8005120 <dir_sdi+0xa0>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	d301      	bcc.n	8005124 <dir_sdi+0xa4>
 8005120:	2302      	movs	r3, #2
 8005122:	e032      	b.n	800518a <dir_sdi+0x10a>
			ofs -= csz;
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d2e1      	bcs.n	80050f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005134:	6979      	ldr	r1, [r7, #20]
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f7ff fc5e 	bl	80049f8 <clust2sect>
 800513c:	4602      	mov	r2, r0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <dir_sdi+0xd4>
 8005150:	2302      	movs	r3, #2
 8005152:	e01a      	b.n	800518a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	899b      	ldrh	r3, [r3, #12]
 800515c:	4619      	mov	r1, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	fbb3 f3f1 	udiv	r3, r3, r1
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	899b      	ldrh	r3, [r3, #12]
 8005174:	461a      	mov	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	fbb3 f0f2 	udiv	r0, r3, r2
 800517c:	fb00 f202 	mul.w	r2, r0, r2
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	18ca      	adds	r2, r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	3320      	adds	r3, #32
 80051a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <dir_next+0x28>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b8:	d301      	bcc.n	80051be <dir_next+0x2c>
 80051ba:	2304      	movs	r3, #4
 80051bc:	e0bb      	b.n	8005336 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	899b      	ldrh	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ca:	fb01 f202 	mul.w	r2, r1, r2
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 809d 	bne.w	8005310 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	8912      	ldrh	r2, [r2, #8]
 80051f0:	4293      	cmp	r3, r2
 80051f2:	f0c0 808d 	bcc.w	8005310 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	61da      	str	r2, [r3, #28]
 80051fc:	2304      	movs	r3, #4
 80051fe:	e09a      	b.n	8005336 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	899b      	ldrh	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	fbb3 f3f2 	udiv	r3, r3, r2
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	8952      	ldrh	r2, [r2, #10]
 8005210:	3a01      	subs	r2, #1
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d17b      	bne.n	8005310 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff fc08 	bl	8004a36 <get_fat>
 8005226:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d801      	bhi.n	8005232 <dir_next+0xa0>
 800522e:	2302      	movs	r3, #2
 8005230:	e081      	b.n	8005336 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d101      	bne.n	800523e <dir_next+0xac>
 800523a:	2301      	movs	r3, #1
 800523c:	e07b      	b.n	8005336 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	429a      	cmp	r2, r3
 8005246:	d359      	bcc.n	80052fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	61da      	str	r2, [r3, #28]
 8005254:	2304      	movs	r3, #4
 8005256:	e06e      	b.n	8005336 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7ff fe3d 	bl	8004ee0 <create_chain>
 8005266:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <dir_next+0xe0>
 800526e:	2307      	movs	r3, #7
 8005270:	e061      	b.n	8005336 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <dir_next+0xea>
 8005278:	2302      	movs	r3, #2
 800527a:	e05c      	b.n	8005336 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d101      	bne.n	8005288 <dir_next+0xf6>
 8005284:	2301      	movs	r3, #1
 8005286:	e056      	b.n	8005336 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fad3 	bl	8004834 <sync_window>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <dir_next+0x106>
 8005294:	2301      	movs	r3, #1
 8005296:	e04e      	b.n	8005336 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	899b      	ldrh	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	2100      	movs	r1, #0
 80052a6:	f7ff f8fc 	bl	80044a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fba1 	bl	80049f8 <clust2sect>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34
 80052bc:	e012      	b.n	80052e4 <dir_next+0x152>
						fs->wflag = 1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fab5 	bl	8004834 <sync_window>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <dir_next+0x142>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e030      	b.n	8005336 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3301      	adds	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	635a      	str	r2, [r3, #52]	; 0x34
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	895b      	ldrh	r3, [r3, #10]
 80052e8:	461a      	mov	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d3e6      	bcc.n	80052be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005302:	6979      	ldr	r1, [r7, #20]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff fb77 	bl	80049f8 <clust2sect>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	899b      	ldrh	r3, [r3, #12]
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	fbb3 f0f2 	udiv	r0, r3, r2
 8005328:	fb00 f202 	mul.w	r2, r0, r2
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	18ca      	adds	r2, r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800534e:	2100      	movs	r1, #0
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fe95 	bl	8005080 <dir_sdi>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d12b      	bne.n	80053b8 <dir_alloc+0x7a>
		n = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4619      	mov	r1, r3
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff faa6 	bl	80048bc <move_window>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11d      	bne.n	80053b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2be5      	cmp	r3, #229	; 0xe5
 8005382:	d004      	beq.n	800538e <dir_alloc+0x50>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3301      	adds	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <dir_alloc+0x64>
 800539c:	e00c      	b.n	80053b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80053a2:	2101      	movs	r1, #1
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fef4 	bl	8005192 <dir_next>
 80053aa:	4603      	mov	r3, r0
 80053ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0d7      	beq.n	8005364 <dir_alloc+0x26>
 80053b4:	e000      	b.n	80053b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80053b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d101      	bne.n	80053c2 <dir_alloc+0x84>
 80053be:	2307      	movs	r3, #7
 80053c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	331a      	adds	r3, #26
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe ffbe 	bl	800435c <ld_word>
 80053e0:	4603      	mov	r3, r0
 80053e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d109      	bne.n	8005400 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe ffb3 	bl	800435c <ld_word>
 80053f6:	4603      	mov	r3, r0
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	331a      	adds	r3, #26
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	b292      	uxth	r2, r2
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe ffd6 	bl	80043d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d109      	bne.n	8005442 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f103 0214 	add.w	r2, r3, #20
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	b29b      	uxth	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7fe ffc8 	bl	80043d2 <st_word>
	}
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	331a      	adds	r3, #26
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe ff7e 	bl	800435c <ld_word>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <cmp_lfn+0x1e>
 8005466:	2300      	movs	r3, #0
 8005468:	e059      	b.n	800551e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005480:	2301      	movs	r3, #1
 8005482:	81fb      	strh	r3, [r7, #14]
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	e033      	b.n	80054f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800548a:	4a27      	ldr	r2, [pc, #156]	; (8005528 <cmp_lfn+0xdc>)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4413      	add	r3, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe ff5f 	bl	800435c <ld_word>
 800549e:	4603      	mov	r3, r0
 80054a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2bfe      	cmp	r3, #254	; 0xfe
 80054ac:	d812      	bhi.n	80054d4 <cmp_lfn+0x88>
 80054ae:	89bb      	ldrh	r3, [r7, #12]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f002 f85b 	bl	800756c <ff_wtoupper>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461c      	mov	r4, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	617a      	str	r2, [r7, #20]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 f84f 	bl	800756c <ff_wtoupper>
 80054ce:	4603      	mov	r3, r0
 80054d0:	429c      	cmp	r4, r3
 80054d2:	d001      	beq.n	80054d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80054d4:	2300      	movs	r3, #0
 80054d6:	e022      	b.n	800551e <cmp_lfn+0xd2>
			}
			wc = uc;
 80054d8:	89bb      	ldrh	r3, [r7, #12]
 80054da:	81fb      	strh	r3, [r7, #14]
 80054dc:	e006      	b.n	80054ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80054de:	89bb      	ldrh	r3, [r7, #12]
 80054e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d001      	beq.n	80054ec <cmp_lfn+0xa0>
 80054e8:	2300      	movs	r3, #0
 80054ea:	e018      	b.n	800551e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d9c8      	bls.n	800548a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <cmp_lfn+0xd0>
 8005504:	89fb      	ldrh	r3, [r7, #14]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <cmp_lfn+0xd0>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <cmp_lfn+0xd0>
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800551c:	2301      	movs	r3, #1
}
 800551e:	4618      	mov	r0, r3
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd90      	pop	{r4, r7, pc}
 8005526:	bf00      	nop
 8005528:	08013cd8 	.word	0x08013cd8

0800552c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	460b      	mov	r3, r1
 800553c:	71fb      	strb	r3, [r7, #7]
 800553e:	4613      	mov	r3, r2
 8005540:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	330d      	adds	r3, #13
 8005546:	79ba      	ldrb	r2, [r7, #6]
 8005548:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	330b      	adds	r3, #11
 800554e:	220f      	movs	r2, #15
 8005550:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	330c      	adds	r3, #12
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	331a      	adds	r3, #26
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ff36 	bl	80043d2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	82fb      	strh	r3, [r7, #22]
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800557e:	8afb      	ldrh	r3, [r7, #22]
 8005580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <put_lfn+0x6c>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005598:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <put_lfn+0xcc>)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	4413      	add	r3, r2
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	8afa      	ldrh	r2, [r7, #22]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe ff11 	bl	80043d2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80055b0:	8afb      	ldrh	r3, [r7, #22]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <put_lfn+0x90>
 80055b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	3301      	adds	r3, #1
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d9da      	bls.n	800557e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80055c8:	8afb      	ldrh	r3, [r7, #22]
 80055ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d006      	beq.n	80055e0 <put_lfn+0xb4>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <put_lfn+0xbc>
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	79fa      	ldrb	r2, [r7, #7]
 80055ec:	701a      	strb	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	08013cd8 	.word	0x08013cd8

080055fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800560a:	220b      	movs	r2, #11
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7fe ff26 	bl	8004460 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b05      	cmp	r3, #5
 8005618:	d92b      	bls.n	8005672 <gen_numname+0x76>
		sr = seq;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800561e:	e022      	b.n	8005666 <gen_numname+0x6a>
			wc = *lfn++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800562a:	2300      	movs	r3, #0
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
 800562e:	e017      	b.n	8005660 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	005a      	lsls	r2, r3, #1
 8005634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800563e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <gen_numname+0x5e>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005654:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005658:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	3301      	adds	r3, #1
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2b0f      	cmp	r3, #15
 8005664:	d9e4      	bls.n	8005630 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d8      	bne.n	8005620 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005672:	2307      	movs	r3, #7
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	b2db      	uxtb	r3, r3
 8005680:	3330      	adds	r3, #48	; 0x30
 8005682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800568a:	2b39      	cmp	r3, #57	; 0x39
 800568c:	d904      	bls.n	8005698 <gen_numname+0x9c>
 800568e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005692:	3307      	adds	r3, #7
 8005694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	62ba      	str	r2, [r7, #40]	; 0x28
 800569e:	3330      	adds	r3, #48	; 0x30
 80056a0:	443b      	add	r3, r7
 80056a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80056a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1df      	bne.n	8005676 <gen_numname+0x7a>
	ns[i] = '~';
 80056b6:	f107 0214 	add.w	r2, r7, #20
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	4413      	add	r3, r2
 80056be:	227e      	movs	r2, #126	; 0x7e
 80056c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	e002      	b.n	80056ce <gen_numname+0xd2>
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	3301      	adds	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d205      	bcs.n	80056e2 <gen_numname+0xe6>
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	4413      	add	r3, r2
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d1f2      	bne.n	80056c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d807      	bhi.n	80056f8 <gen_numname+0xfc>
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80056ee:	3330      	adds	r3, #48	; 0x30
 80056f0:	443b      	add	r3, r7
 80056f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80056f6:	e000      	b.n	80056fa <gen_numname+0xfe>
 80056f8:	2120      	movs	r1, #32
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	460a      	mov	r2, r1
 8005706:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2b07      	cmp	r3, #7
 800570c:	d9e9      	bls.n	80056e2 <gen_numname+0xe6>
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	3730      	adds	r7, #48	; 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005724:	230b      	movs	r3, #11
 8005726:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	0852      	lsrs	r2, r2, #1
 800572e:	01db      	lsls	r3, r3, #7
 8005730:	4313      	orrs	r3, r2
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	6079      	str	r1, [r7, #4]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	4413      	add	r3, r2
 800573e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	3b01      	subs	r3, #1
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ed      	bne.n	8005728 <sum_sfn+0x10>
	return sum;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005768:	2100      	movs	r1, #0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fc88 	bl	8005080 <dir_sdi>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <dir_find+0x24>
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	e0a9      	b.n	80058d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800577e:	23ff      	movs	r3, #255	; 0xff
 8005780:	753b      	strb	r3, [r7, #20]
 8005782:	7d3b      	ldrb	r3, [r7, #20]
 8005784:	757b      	strb	r3, [r7, #21]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	4619      	mov	r1, r3
 8005794:	6938      	ldr	r0, [r7, #16]
 8005796:	f7ff f891 	bl	80048bc <move_window>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 8090 	bne.w	80058c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80057ae:	7dbb      	ldrb	r3, [r7, #22]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <dir_find+0x60>
 80057b4:	2304      	movs	r3, #4
 80057b6:	75fb      	strb	r3, [r7, #23]
 80057b8:	e08a      	b.n	80058d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	330b      	adds	r3, #11
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80057ce:	7dbb      	ldrb	r3, [r7, #22]
 80057d0:	2be5      	cmp	r3, #229	; 0xe5
 80057d2:	d007      	beq.n	80057e4 <dir_find+0x8a>
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <dir_find+0x98>
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b0f      	cmp	r3, #15
 80057e2:	d006      	beq.n	80057f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80057e4:	23ff      	movs	r3, #255	; 0xff
 80057e6:	757b      	strb	r3, [r7, #21]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
 80057f0:	e05e      	b.n	80058b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b0f      	cmp	r3, #15
 80057f6:	d136      	bne.n	8005866 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d154      	bne.n	80058b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005806:	7dbb      	ldrb	r3, [r7, #22]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00d      	beq.n	800582c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	7b5b      	ldrb	r3, [r3, #13]
 8005816:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581e:	75bb      	strb	r3, [r7, #22]
 8005820:	7dbb      	ldrb	r3, [r7, #22]
 8005822:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800582c:	7dba      	ldrb	r2, [r7, #22]
 800582e:	7d7b      	ldrb	r3, [r7, #21]
 8005830:	429a      	cmp	r2, r3
 8005832:	d115      	bne.n	8005860 <dir_find+0x106>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	330d      	adds	r3, #13
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	7d3a      	ldrb	r2, [r7, #20]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10e      	bne.n	8005860 <dir_find+0x106>
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f7ff fdfd 	bl	800544c <cmp_lfn>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <dir_find+0x106>
 8005858:	7d7b      	ldrb	r3, [r7, #21]
 800585a:	3b01      	subs	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e000      	b.n	8005862 <dir_find+0x108>
 8005860:	23ff      	movs	r3, #255	; 0xff
 8005862:	757b      	strb	r3, [r7, #21]
 8005864:	e024      	b.n	80058b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005866:	7d7b      	ldrb	r3, [r7, #21]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <dir_find+0x126>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff51 	bl	8005718 <sum_sfn>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	7d3b      	ldrb	r3, [r7, #20]
 800587c:	4293      	cmp	r3, r2
 800587e:	d024      	beq.n	80058ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <dir_find+0x14a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a18      	ldr	r0, [r3, #32]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	220b      	movs	r2, #11
 8005898:	4619      	mov	r1, r3
 800589a:	f7fe fe1d 	bl	80044d8 <mem_cmp>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d014      	beq.n	80058ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80058a4:	23ff      	movs	r3, #255	; 0xff
 80058a6:	757b      	strb	r3, [r7, #21]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fc6d 	bl	8005192 <dir_next>
 80058b8:	4603      	mov	r3, r0
 80058ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f43f af65 	beq.w	800578e <dir_find+0x34>
 80058c4:	e004      	b.n	80058d0 <dir_find+0x176>
		if (res != FR_OK) break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80058ce:	bf00      	nop

	return res;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	; 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <dir_register+0x20>
 80058f8:	2306      	movs	r3, #6
 80058fa:	e0e0      	b.n	8005abe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e002      	b.n	8005908 <dir_register+0x2c>
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	3301      	adds	r3, #1
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f4      	bne.n	8005902 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800591e:	f107 030c 	add.w	r3, r7, #12
 8005922:	220c      	movs	r2, #12
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe fd9b 	bl	8004460 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d032      	beq.n	800599a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2240      	movs	r2, #64	; 0x40
 8005938:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800593c:	2301      	movs	r3, #1
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005940:	e016      	b.n	8005970 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	f107 010c 	add.w	r1, r7, #12
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	f7ff fe53 	bl	80055fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff feff 	bl	800575a <dir_find>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	3301      	adds	r3, #1
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b63      	cmp	r3, #99	; 0x63
 8005974:	d9e5      	bls.n	8005942 <dir_register+0x66>
 8005976:	e000      	b.n	800597a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005978:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	2b64      	cmp	r3, #100	; 0x64
 800597e:	d101      	bne.n	8005984 <dir_register+0xa8>
 8005980:	2307      	movs	r3, #7
 8005982:	e09c      	b.n	8005abe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005988:	2b04      	cmp	r3, #4
 800598a:	d002      	beq.n	8005992 <dir_register+0xb6>
 800598c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005990:	e095      	b.n	8005abe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005992:	7dfa      	ldrb	r2, [r7, #23]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <dir_register+0xd8>
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	330c      	adds	r3, #12
 80059a8:	4a47      	ldr	r2, [pc, #284]	; (8005ac8 <dir_register+0x1ec>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	3301      	adds	r3, #1
 80059b2:	e000      	b.n	80059b6 <dir_register+0xda>
 80059b4:	2301      	movs	r3, #1
 80059b6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80059b8:	6a39      	ldr	r1, [r7, #32]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fcbf 	bl	800533e <dir_alloc>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80059c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d148      	bne.n	8005a60 <dir_register+0x184>
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	623b      	str	r3, [r7, #32]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d042      	beq.n	8005a60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	015b      	lsls	r3, r3, #5
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fb4a 	bl	8005080 <dir_sdi>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80059f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d132      	bne.n	8005a60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3324      	adds	r3, #36	; 0x24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fe8a 	bl	8005718 <sum_sfn>
 8005a04:	4603      	mov	r3, r0
 8005a06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	69f8      	ldr	r0, [r7, #28]
 8005a10:	f7fe ff54 	bl	80048bc <move_window>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11d      	bne.n	8005a5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	6918      	ldr	r0, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a19      	ldr	r1, [r3, #32]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	f7ff fd7c 	bl	800552c <put_lfn>
				fs->wflag = 1;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2201      	movs	r2, #1
 8005a38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fba8 	bl	8005192 <dir_next>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <dir_register+0x184>
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1d5      	bne.n	8005a08 <dir_register+0x12c>
 8005a5c:	e000      	b.n	8005a60 <dir_register+0x184>
				if (res != FR_OK) break;
 8005a5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d128      	bne.n	8005aba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	69f8      	ldr	r0, [r7, #28]
 8005a70:	f7fe ff24 	bl	80048bc <move_window>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11b      	bne.n	8005aba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2220      	movs	r2, #32
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fd09 	bl	80044a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a18      	ldr	r0, [r3, #32]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	220b      	movs	r2, #11
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f7fe fce0 	bl	8004460 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	f002 0218 	and.w	r2, r2, #24
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3730      	adds	r7, #48	; 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	4ec4ec4f 	.word	0x4ec4ec4f

08005acc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	61ba      	str	r2, [r7, #24]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005afc:	2b1f      	cmp	r3, #31
 8005afe:	d940      	bls.n	8005b82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b02:	2b2f      	cmp	r3, #47	; 0x2f
 8005b04:	d006      	beq.n	8005b14 <create_name+0x48>
 8005b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b08:	2b5c      	cmp	r3, #92	; 0x5c
 8005b0a:	d110      	bne.n	8005b2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b0c:	e002      	b.n	8005b14 <create_name+0x48>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	4413      	add	r3, r2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005b1e:	d0f6      	beq.n	8005b0e <create_name+0x42>
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b5c      	cmp	r3, #92	; 0x5c
 8005b2a:	d0f0      	beq.n	8005b0e <create_name+0x42>
			break;
 8005b2c:	e02a      	b.n	8005b84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2bfe      	cmp	r3, #254	; 0xfe
 8005b32:	d901      	bls.n	8005b38 <create_name+0x6c>
 8005b34:	2306      	movs	r3, #6
 8005b36:	e17d      	b.n	8005e34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fcd6 	bl	80074f4 <ff_convert>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <create_name+0x8a>
 8005b52:	2306      	movs	r3, #6
 8005b54:	e16e      	b.n	8005e34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b58:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5a:	d809      	bhi.n	8005b70 <create_name+0xa4>
 8005b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b5e:	4619      	mov	r1, r3
 8005b60:	488d      	ldr	r0, [pc, #564]	; (8005d98 <create_name+0x2cc>)
 8005b62:	f7fe fce0 	bl	8004526 <chk_chr>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <create_name+0xa4>
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	e161      	b.n	8005e34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	617a      	str	r2, [r7, #20]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b80:	e7b4      	b.n	8005aec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005b82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	441a      	add	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b90:	2b1f      	cmp	r3, #31
 8005b92:	d801      	bhi.n	8005b98 <create_name+0xcc>
 8005b94:	2304      	movs	r3, #4
 8005b96:	e000      	b.n	8005b9a <create_name+0xce>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b9e:	e011      	b.n	8005bc4 <create_name+0xf8>
		w = lfn[di - 1];
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d002      	beq.n	8005bbe <create_name+0xf2>
 8005bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bba:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbc:	d106      	bne.n	8005bcc <create_name+0x100>
		di--;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ea      	bne.n	8005ba0 <create_name+0xd4>
 8005bca:	e000      	b.n	8005bce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005bcc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <create_name+0x118>
 8005be0:	2306      	movs	r3, #6
 8005be2:	e127      	b.n	8005e34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3324      	adds	r3, #36	; 0x24
 8005be8:	220b      	movs	r2, #11
 8005bea:	2120      	movs	r1, #32
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fc58 	bl	80044a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e002      	b.n	8005bfe <create_name+0x132>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d0f5      	beq.n	8005bf8 <create_name+0x12c>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d0ee      	beq.n	8005bf8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <create_name+0x168>
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	f043 0303 	orr.w	r3, r3, #3
 8005c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005c2c:	e002      	b.n	8005c34 <create_name+0x168>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <create_name+0x182>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c40:	3b01      	subs	r3, #1
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4c:	d1ef      	bne.n	8005c2e <create_name+0x162>

	i = b = 0; ni = 8;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	2308      	movs	r3, #8
 8005c5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	61ba      	str	r2, [r7, #24]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8090 	beq.w	8005d94 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d006      	beq.n	8005c88 <create_name+0x1bc>
 8005c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7e:	d10a      	bne.n	8005c96 <create_name+0x1ca>
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d006      	beq.n	8005c96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c8c:	f043 0303 	orr.w	r3, r3, #3
 8005c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c94:	e07d      	b.n	8005d92 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d203      	bcs.n	8005ca6 <create_name+0x1da>
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d123      	bne.n	8005cee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	2b0b      	cmp	r3, #11
 8005caa:	d106      	bne.n	8005cba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb0:	f043 0303 	orr.w	r3, r3, #3
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cb8:	e075      	b.n	8005da6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d005      	beq.n	8005cce <create_name+0x202>
 8005cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc6:	f043 0303 	orr.w	r3, r3, #3
 8005cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d866      	bhi.n	8005da4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	2308      	movs	r3, #8
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	230b      	movs	r3, #11
 8005ce0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005cec:	e051      	b.n	8005d92 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf2:	d914      	bls.n	8005d1e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 fbfb 	bl	80074f4 <ff_convert>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <create_name+0x246>
 8005d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d0a:	3b80      	subs	r3, #128	; 0x80
 8005d0c:	4a23      	ldr	r2, [pc, #140]	; (8005d9c <create_name+0x2d0>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d16:	f043 0302 	orr.w	r3, r3, #2
 8005d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <create_name+0x268>
 8005d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d26:	4619      	mov	r1, r3
 8005d28:	481d      	ldr	r0, [pc, #116]	; (8005da0 <create_name+0x2d4>)
 8005d2a:	f7fe fbfc 	bl	8004526 <chk_chr>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005d34:	235f      	movs	r3, #95	; 0x5f
 8005d36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3c:	f043 0303 	orr.w	r3, r3, #3
 8005d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d44:	e01b      	b.n	8005d7e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d909      	bls.n	8005d60 <create_name+0x294>
 8005d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d4e:	2b5a      	cmp	r3, #90	; 0x5a
 8005d50:	d806      	bhi.n	8005d60 <create_name+0x294>
					b |= 2;
 8005d52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d56:	f043 0302 	orr.w	r3, r3, #2
 8005d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d5e:	e00e      	b.n	8005d7e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d90b      	bls.n	8005d7e <create_name+0x2b2>
 8005d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d68:	2b7a      	cmp	r3, #122	; 0x7a
 8005d6a:	d808      	bhi.n	8005d7e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d7a:	3b20      	subs	r3, #32
 8005d7c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	623a      	str	r2, [r7, #32]
 8005d84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d86:	b2d1      	uxtb	r1, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005d92:	e763      	b.n	8005c5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005d94:	bf00      	nop
 8005d96:	e006      	b.n	8005da6 <create_name+0x2da>
 8005d98:	08013ab4 	.word	0x08013ab4
 8005d9c:	08013c58 	.word	0x08013c58
 8005da0:	08013ac0 	.word	0x08013ac0
			if (si > di) break;			/* No extension */
 8005da4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dac:	2be5      	cmp	r3, #229	; 0xe5
 8005dae:	d103      	bne.n	8005db8 <create_name+0x2ec>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2205      	movs	r2, #5
 8005db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d104      	bne.n	8005dc8 <create_name+0x2fc>
 8005dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b0c      	cmp	r3, #12
 8005dd2:	d005      	beq.n	8005de0 <create_name+0x314>
 8005dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d105      	bne.n	8005dec <create_name+0x320>
 8005de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d117      	bne.n	8005e28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d105      	bne.n	8005e10 <create_name+0x344>
 8005e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e08:	f043 0310 	orr.w	r3, r3, #16
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d105      	bne.n	8005e28 <create_name+0x35c>
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e20:	f043 0308 	orr.w	r3, r3, #8
 8005e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005e32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005e50:	e002      	b.n	8005e58 <follow_path+0x1c>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e5e:	d0f8      	beq.n	8005e52 <follow_path+0x16>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b5c      	cmp	r3, #92	; 0x5c
 8005e66:	d0f4      	beq.n	8005e52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b1f      	cmp	r3, #31
 8005e74:	d80a      	bhi.n	8005e8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f8fd 	bl	8005080 <dir_sdi>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]
 8005e8a:	e048      	b.n	8005f1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fe1b 	bl	8005acc <create_name>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d139      	bne.n	8005f14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fc5a 	bl	800575a <dir_find>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005eb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d12c      	bne.n	8005f18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d127      	bne.n	8005f18 <follow_path+0xdc>
 8005ec8:	2305      	movs	r3, #5
 8005eca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ecc:	e024      	b.n	8005f18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d121      	bne.n	8005f1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	799b      	ldrb	r3, [r3, #6]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ee4:	2305      	movs	r3, #5
 8005ee6:	75fb      	strb	r3, [r7, #23]
 8005ee8:	e019      	b.n	8005f1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	8992      	ldrh	r2, [r2, #12]
 8005ef8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005efc:	fb00 f202 	mul.w	r2, r0, r2
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	4619      	mov	r1, r3
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff fa60 	bl	80053cc <ld_clust>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f12:	e7bb      	b.n	8005e8c <follow_path+0x50>
			if (res != FR_OK) break;
 8005f14:	bf00      	nop
 8005f16:	e002      	b.n	8005f1e <follow_path+0xe2>
				break;
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f1c:	bf00      	nop
			}
		}
	}

	return res;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d031      	beq.n	8005fa2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e002      	b.n	8005f4c <get_ldnumber+0x24>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b1f      	cmp	r3, #31
 8005f52:	d903      	bls.n	8005f5c <get_ldnumber+0x34>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b3a      	cmp	r3, #58	; 0x3a
 8005f5a:	d1f4      	bne.n	8005f46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b3a      	cmp	r3, #58	; 0x3a
 8005f62:	d11c      	bne.n	8005f9e <get_ldnumber+0x76>
			tp = *path;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	60fa      	str	r2, [r7, #12]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	3b30      	subs	r3, #48	; 0x30
 8005f74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d80e      	bhi.n	8005f9a <get_ldnumber+0x72>
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d10a      	bne.n	8005f9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <get_ldnumber+0x72>
					vol = (int)i;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3301      	adds	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	e002      	b.n	8005fa4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005fa2:	693b      	ldr	r3, [r7, #16]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	70da      	strb	r2, [r3, #3]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fe fc76 	bl	80048bc <move_window>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <check_fs+0x2a>
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	e038      	b.n	800604c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3338      	adds	r3, #56	; 0x38
 8005fde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe f9ba 	bl	800435c <ld_word>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <check_fs+0x48>
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e029      	b.n	800604c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ffe:	2be9      	cmp	r3, #233	; 0xe9
 8006000:	d009      	beq.n	8006016 <check_fs+0x66>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006008:	2beb      	cmp	r3, #235	; 0xeb
 800600a:	d11e      	bne.n	800604a <check_fs+0x9a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006012:	2b90      	cmp	r3, #144	; 0x90
 8006014:	d119      	bne.n	800604a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3338      	adds	r3, #56	; 0x38
 800601a:	3336      	adds	r3, #54	; 0x36
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe f9b5 	bl	800438c <ld_dword>
 8006022:	4603      	mov	r3, r0
 8006024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006028:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <check_fs+0xa4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <check_fs+0x82>
 800602e:	2300      	movs	r3, #0
 8006030:	e00c      	b.n	800604c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3338      	adds	r3, #56	; 0x38
 8006036:	3352      	adds	r3, #82	; 0x52
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe f9a7 	bl	800438c <ld_dword>
 800603e:	4603      	mov	r3, r0
 8006040:	4a05      	ldr	r2, [pc, #20]	; (8006058 <check_fs+0xa8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <check_fs+0x9a>
 8006046:	2300      	movs	r3, #0
 8006048:	e000      	b.n	800604c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800604a:	2302      	movs	r3, #2
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	00544146 	.word	0x00544146
 8006058:	33544146 	.word	0x33544146

0800605c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b096      	sub	sp, #88	; 0x58
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff ff59 	bl	8005f28 <get_ldnumber>
 8006076:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	da01      	bge.n	8006082 <find_volume+0x26>
 800607e:	230b      	movs	r3, #11
 8006080:	e262      	b.n	8006548 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006082:	4a9f      	ldr	r2, [pc, #636]	; (8006300 <find_volume+0x2a4>)
 8006084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <find_volume+0x3a>
 8006092:	230c      	movs	r3, #12
 8006094:	e258      	b.n	8006548 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01a      	beq.n	80060e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe f8b5 	bl	8004220 <disk_status>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10c      	bne.n	80060e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <find_volume+0x82>
 80060ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80060da:	230a      	movs	r3, #10
 80060dc:	e234      	b.n	8006548 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80060de:	2300      	movs	r3, #0
 80060e0:	e232      	b.n	8006548 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe f8ad 	bl	8004254 <disk_initialize>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800610c:	2303      	movs	r3, #3
 800610e:	e21b      	b.n	8006548 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <find_volume+0xca>
 8006116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006122:	230a      	movs	r3, #10
 8006124:	e210      	b.n	8006548 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	7858      	ldrb	r0, [r3, #1]
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	330c      	adds	r3, #12
 800612e:	461a      	mov	r2, r3
 8006130:	2102      	movs	r1, #2
 8006132:	f7fe f8f5 	bl	8004320 <disk_ioctl>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <find_volume+0xe4>
 800613c:	2301      	movs	r3, #1
 800613e:	e203      	b.n	8006548 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	899b      	ldrh	r3, [r3, #12]
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006148:	d80d      	bhi.n	8006166 <find_volume+0x10a>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	899b      	ldrh	r3, [r3, #12]
 800614e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006152:	d308      	bcc.n	8006166 <find_volume+0x10a>
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	899b      	ldrh	r3, [r3, #12]
 8006158:	461a      	mov	r2, r3
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	899b      	ldrh	r3, [r3, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <find_volume+0x10e>
 8006166:	2301      	movs	r3, #1
 8006168:	e1ee      	b.n	8006548 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800616e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006172:	f7ff ff1d 	bl	8005fb0 <check_fs>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800617c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006180:	2b02      	cmp	r3, #2
 8006182:	d149      	bne.n	8006218 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006184:	2300      	movs	r3, #0
 8006186:	643b      	str	r3, [r7, #64]	; 0x40
 8006188:	e01e      	b.n	80061c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006198:	4413      	add	r3, r2
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	3304      	adds	r3, #4
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <find_volume+0x158>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	3308      	adds	r3, #8
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe f8ee 	bl	800438c <ld_dword>
 80061b0:	4602      	mov	r2, r0
 80061b2:	e000      	b.n	80061b6 <find_volume+0x15a>
 80061b4:	2200      	movs	r2, #0
 80061b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	3358      	adds	r3, #88	; 0x58
 80061bc:	443b      	add	r3, r7
 80061be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	3301      	adds	r3, #1
 80061c6:	643b      	str	r3, [r7, #64]	; 0x40
 80061c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d9dd      	bls.n	800618a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80061ce:	2300      	movs	r3, #0
 80061d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80061d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <find_volume+0x182>
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	3b01      	subs	r3, #1
 80061dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80061de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3358      	adds	r3, #88	; 0x58
 80061e4:	443b      	add	r3, r7
 80061e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80061ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <find_volume+0x1a2>
 80061f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061f6:	f7ff fedb 	bl	8005fb0 <check_fs>
 80061fa:	4603      	mov	r3, r0
 80061fc:	e000      	b.n	8006200 <find_volume+0x1a4>
 80061fe:	2303      	movs	r3, #3
 8006200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006208:	2b01      	cmp	r3, #1
 800620a:	d905      	bls.n	8006218 <find_volume+0x1bc>
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	3301      	adds	r3, #1
 8006210:	643b      	str	r3, [r7, #64]	; 0x40
 8006212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006214:	2b03      	cmp	r3, #3
 8006216:	d9e2      	bls.n	80061de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800621c:	2b04      	cmp	r3, #4
 800621e:	d101      	bne.n	8006224 <find_volume+0x1c8>
 8006220:	2301      	movs	r3, #1
 8006222:	e191      	b.n	8006548 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006228:	2b01      	cmp	r3, #1
 800622a:	d901      	bls.n	8006230 <find_volume+0x1d4>
 800622c:	230d      	movs	r3, #13
 800622e:	e18b      	b.n	8006548 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	330b      	adds	r3, #11
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe f890 	bl	800435c <ld_word>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	899b      	ldrh	r3, [r3, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <find_volume+0x1f0>
 8006248:	230d      	movs	r3, #13
 800624a:	e17d      	b.n	8006548 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	3338      	adds	r3, #56	; 0x38
 8006250:	3316      	adds	r3, #22
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe f882 	bl	800435c <ld_word>
 8006258:	4603      	mov	r3, r0
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <find_volume+0x214>
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	3338      	adds	r3, #56	; 0x38
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe f88f 	bl	800438c <ld_dword>
 800626e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006274:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	789b      	ldrb	r3, [r3, #2]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d005      	beq.n	8006294 <find_volume+0x238>
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	789b      	ldrb	r3, [r3, #2]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d001      	beq.n	8006294 <find_volume+0x238>
 8006290:	230d      	movs	r3, #13
 8006292:	e159      	b.n	8006548 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	789b      	ldrb	r3, [r3, #2]
 8006298:	461a      	mov	r2, r3
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	fb02 f303 	mul.w	r3, r2, r3
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	895b      	ldrh	r3, [r3, #10]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <find_volume+0x26c>
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	895b      	ldrh	r3, [r3, #10]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	895b      	ldrh	r3, [r3, #10]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <find_volume+0x270>
 80062c8:	230d      	movs	r3, #13
 80062ca:	e13d      	b.n	8006548 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	3338      	adds	r3, #56	; 0x38
 80062d0:	3311      	adds	r3, #17
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe f842 	bl	800435c <ld_word>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	891b      	ldrh	r3, [r3, #8]
 80062e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062e6:	8992      	ldrh	r2, [r2, #12]
 80062e8:	0952      	lsrs	r2, r2, #5
 80062ea:	b292      	uxth	r2, r2
 80062ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80062f0:	fb01 f202 	mul.w	r2, r1, r2
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <find_volume+0x2a8>
 80062fc:	230d      	movs	r3, #13
 80062fe:	e123      	b.n	8006548 <find_volume+0x4ec>
 8006300:	20005408 	.word	0x20005408

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	3338      	adds	r3, #56	; 0x38
 8006308:	3313      	adds	r3, #19
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe f826 	bl	800435c <ld_word>
 8006310:	4603      	mov	r3, r0
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <find_volume+0x2cc>
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	3338      	adds	r3, #56	; 0x38
 800631e:	3320      	adds	r3, #32
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe f833 	bl	800438c <ld_dword>
 8006326:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	3338      	adds	r3, #56	; 0x38
 800632c:	330e      	adds	r3, #14
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe f814 	bl	800435c <ld_word>
 8006334:	4603      	mov	r3, r0
 8006336:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006338:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <find_volume+0x2e6>
 800633e:	230d      	movs	r3, #13
 8006340:	e102      	b.n	8006548 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006342:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	4413      	add	r3, r2
 8006348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634a:	8911      	ldrh	r1, [r2, #8]
 800634c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634e:	8992      	ldrh	r2, [r2, #12]
 8006350:	0952      	lsrs	r2, r2, #5
 8006352:	b292      	uxth	r2, r2
 8006354:	fbb1 f2f2 	udiv	r2, r1, r2
 8006358:	b292      	uxth	r2, r2
 800635a:	4413      	add	r3, r2
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800635e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	429a      	cmp	r2, r3
 8006364:	d201      	bcs.n	800636a <find_volume+0x30e>
 8006366:	230d      	movs	r3, #13
 8006368:	e0ee      	b.n	8006548 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800636a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006372:	8952      	ldrh	r2, [r2, #10]
 8006374:	fbb3 f3f2 	udiv	r3, r3, r2
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <find_volume+0x328>
 8006380:	230d      	movs	r3, #13
 8006382:	e0e1      	b.n	8006548 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006384:	2303      	movs	r3, #3
 8006386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006390:	4293      	cmp	r3, r2
 8006392:	d802      	bhi.n	800639a <find_volume+0x33e>
 8006394:	2302      	movs	r3, #2
 8006396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d802      	bhi.n	80063aa <find_volume+0x34e>
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	441a      	add	r2, r3
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80063c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	441a      	add	r2, r3
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80063cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d11e      	bne.n	8006412 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	3338      	adds	r3, #56	; 0x38
 80063d8:	332a      	adds	r3, #42	; 0x2a
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd ffbe 	bl	800435c <ld_word>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <find_volume+0x38e>
 80063e6:	230d      	movs	r3, #13
 80063e8:	e0ae      	b.n	8006548 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	891b      	ldrh	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <find_volume+0x39a>
 80063f2:	230d      	movs	r3, #13
 80063f4:	e0a8      	b.n	8006548 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	3338      	adds	r3, #56	; 0x38
 80063fa:	332c      	adds	r3, #44	; 0x2c
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fd ffc5 	bl	800438c <ld_dword>
 8006402:	4602      	mov	r2, r0
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	647b      	str	r3, [r7, #68]	; 0x44
 8006410:	e01f      	b.n	8006452 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	891b      	ldrh	r3, [r3, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <find_volume+0x3c2>
 800641a:	230d      	movs	r3, #13
 800641c:	e094      	b.n	8006548 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	441a      	add	r2, r3
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800642a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642e:	2b02      	cmp	r3, #2
 8006430:	d103      	bne.n	800643a <find_volume+0x3de>
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	e00a      	b.n	8006450 <find_volume+0x3f4>
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	085a      	lsrs	r2, r3, #1
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	6a1a      	ldr	r2, [r3, #32]
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	899b      	ldrh	r3, [r3, #12]
 800645a:	4619      	mov	r1, r3
 800645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645e:	440b      	add	r3, r1
 8006460:	3b01      	subs	r3, #1
 8006462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006464:	8989      	ldrh	r1, [r1, #12]
 8006466:	fbb3 f3f1 	udiv	r3, r3, r1
 800646a:	429a      	cmp	r2, r3
 800646c:	d201      	bcs.n	8006472 <find_volume+0x416>
 800646e:	230d      	movs	r3, #13
 8006470:	e06a      	b.n	8006548 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	619a      	str	r2, [r3, #24]
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800648c:	2b03      	cmp	r3, #3
 800648e:	d149      	bne.n	8006524 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	3338      	adds	r3, #56	; 0x38
 8006494:	3330      	adds	r3, #48	; 0x30
 8006496:	4618      	mov	r0, r3
 8006498:	f7fd ff60 	bl	800435c <ld_word>
 800649c:	4603      	mov	r3, r0
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d140      	bne.n	8006524 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a4:	3301      	adds	r3, #1
 80064a6:	4619      	mov	r1, r3
 80064a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064aa:	f7fe fa07 	bl	80048bc <move_window>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d137      	bne.n	8006524 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	2200      	movs	r2, #0
 80064b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	3338      	adds	r3, #56	; 0x38
 80064be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd ff4a 	bl	800435c <ld_word>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d127      	bne.n	8006524 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	3338      	adds	r3, #56	; 0x38
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd ff57 	bl	800438c <ld_dword>
 80064de:	4603      	mov	r3, r0
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <find_volume+0x4f4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d11e      	bne.n	8006524 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	3338      	adds	r3, #56	; 0x38
 80064ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd ff4c 	bl	800438c <ld_dword>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <find_volume+0x4f8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d113      	bne.n	8006524 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	3338      	adds	r3, #56	; 0x38
 8006500:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006504:	4618      	mov	r0, r3
 8006506:	f7fd ff41 	bl	800438c <ld_dword>
 800650a:	4602      	mov	r2, r0
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	3338      	adds	r3, #56	; 0x38
 8006514:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006518:	4618      	mov	r0, r3
 800651a:	f7fd ff37 	bl	800438c <ld_dword>
 800651e:	4602      	mov	r2, r0
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800652a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <find_volume+0x4fc>)
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <find_volume+0x4fc>)
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <find_volume+0x4fc>)
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006542:	f7fe f953 	bl	80047ec <clear_lock>
#endif
	return FR_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3758      	adds	r7, #88	; 0x58
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	41615252 	.word	0x41615252
 8006554:	61417272 	.word	0x61417272
 8006558:	2000540c 	.word	0x2000540c

0800655c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006566:	2309      	movs	r3, #9
 8006568:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01c      	beq.n	80065aa <validate+0x4e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <validate+0x4e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <validate+0x4e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	889a      	ldrh	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	88db      	ldrh	r3, [r3, #6]
 800658c:	429a      	cmp	r2, r3
 800658e:	d10c      	bne.n	80065aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fe42 	bl	8004220 <disk_status>
 800659c:	4603      	mov	r3, r0
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <validate+0x4e>
			res = FR_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <validate+0x5a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	e000      	b.n	80065b8 <validate+0x5c>
 80065b6:	2300      	movs	r3, #0
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	6013      	str	r3, [r2, #0]
	return res;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80065da:	f107 0310 	add.w	r3, r7, #16
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fca2 	bl	8005f28 <get_ldnumber>
 80065e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da01      	bge.n	80065f0 <f_mount+0x28>
 80065ec:	230b      	movs	r3, #11
 80065ee:	e02b      	b.n	8006648 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <f_mount+0x88>)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006600:	69b8      	ldr	r0, [r7, #24]
 8006602:	f7fe f8f3 	bl	80047ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	490d      	ldr	r1, [pc, #52]	; (8006650 <f_mount+0x88>)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <f_mount+0x66>
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d001      	beq.n	8006632 <f_mount+0x6a>
 800662e:	2300      	movs	r3, #0
 8006630:	e00a      	b.n	8006648 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006632:	f107 010c 	add.w	r1, r7, #12
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	2200      	movs	r2, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fd0d 	bl	800605c <find_volume>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20005408 	.word	0x20005408

08006654 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800665a:	af00      	add	r7, sp, #0
 800665c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006660:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800666a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800666e:	6019      	str	r1, [r3, #0]
 8006670:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006674:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006678:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800667a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800667e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <f_open+0x38>
 8006688:	2309      	movs	r3, #9
 800668a:	e2a6      	b.n	8006bda <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800668c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006690:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006694:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006698:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80066a2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80066a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066a8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fcd0 	bl	800605c <find_volume>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80066c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 827a 	bne.w	8006bc0 <f_open+0x56c>
		dj.obj.fs = fs;
 80066cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066d0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80066d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80066d8:	f107 0214 	add.w	r2, r7, #20
 80066dc:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80066de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066e2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80066ec:	4611      	mov	r1, r2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fba4 	bl	8005e3c <follow_path>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80066fa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11e      	bne.n	8006740 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006702:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8006706:	b25b      	sxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	da03      	bge.n	8006714 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800670c:	2306      	movs	r3, #6
 800670e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006712:	e015      	b.n	8006740 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006714:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006718:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7fd ff11 	bl	800455c <chk_lock>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006740:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006744:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 031c 	and.w	r3, r3, #28
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80a7 	beq.w	80068a2 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8006754:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01f      	beq.n	800679c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800675c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006760:	2b04      	cmp	r3, #4
 8006762:	d10e      	bne.n	8006782 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006764:	f7fd ff56 	bl	8004614 <enq_lock>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <f_open+0x128>
 800676e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff f8b2 	bl	80058dc <dir_register>
 8006778:	4603      	mov	r3, r0
 800677a:	e000      	b.n	800677e <f_open+0x12a>
 800677c:	2312      	movs	r3, #18
 800677e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006782:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006786:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800678a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800678e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	f042 0208 	orr.w	r2, r2, #8
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e015      	b.n	80067c8 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800679c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80067a0:	f003 0311 	and.w	r3, r3, #17
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <f_open+0x15c>
					res = FR_DENIED;
 80067a8:	2307      	movs	r3, #7
 80067aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80067ae:	e00b      	b.n	80067c8 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80067b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067b4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <f_open+0x174>
 80067c2:	2308      	movs	r3, #8
 80067c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80067c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8088 	bne.w	80068e2 <f_open+0x28e>
 80067d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067d6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d07e      	beq.n	80068e2 <f_open+0x28e>
				dw = GET_FATTIME();
 80067e4:	f7fd fcbe 	bl	8004164 <get_fattime>
 80067e8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80067ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80067f0:	330e      	adds	r3, #14
 80067f2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fd fe06 	bl	8004408 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80067fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006800:	3316      	adds	r3, #22
 8006802:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006806:	4618      	mov	r0, r3
 8006808:	f7fd fdfe 	bl	8004408 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800680c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006810:	330b      	adds	r3, #11
 8006812:	2220      	movs	r2, #32
 8006814:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006816:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800681a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fdd3 	bl	80053cc <ld_clust>
 8006826:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800682a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800682e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006832:	2200      	movs	r2, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fde8 	bl	800540a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800683a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800683e:	331c      	adds	r3, #28
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f7fd fde0 	bl	8004408 <st_dword>
					fs->wflag = 1;
 8006848:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800684c:	2201      	movs	r2, #1
 800684e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006850:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8006854:	2b00      	cmp	r3, #0
 8006856:	d044      	beq.n	80068e2 <f_open+0x28e>
						dw = fs->winsect;
 8006858:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8006862:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006866:	2200      	movs	r2, #0
 8006868:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fad2 	bl	8004e16 <remove_chain>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8006878:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800687c:	2b00      	cmp	r3, #0
 800687e:	d130      	bne.n	80068e2 <f_open+0x28e>
							res = move_window(fs, dw);
 8006880:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006884:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe f817 	bl	80048bc <move_window>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006894:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006898:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800689c:	3a01      	subs	r2, #1
 800689e:	615a      	str	r2, [r3, #20]
 80068a0:	e01f      	b.n	80068e2 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80068a2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11b      	bne.n	80068e2 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80068aa:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <f_open+0x26a>
					res = FR_NO_FILE;
 80068b6:	2304      	movs	r3, #4
 80068b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80068bc:	e011      	b.n	80068e2 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80068be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068c2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <f_open+0x28e>
 80068d0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <f_open+0x28e>
						res = FR_DENIED;
 80068dc:	2307      	movs	r3, #7
 80068de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80068e2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d14a      	bne.n	8006980 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80068ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80068ee:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 80068fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006900:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006904:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006908:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006912:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006914:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800691a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800691e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006926:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800692a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800692e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006936:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800693a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd fe7e 	bl	8004658 <inc_lock>
 800695c:	4602      	mov	r2, r0
 800695e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006962:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800696a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800696e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <f_open+0x32c>
 800697a:	2302      	movs	r3, #2
 800697c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006980:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 811b 	bne.w	8006bc0 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800698a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800698e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fd19 	bl	80053cc <ld_clust>
 800699a:	4602      	mov	r2, r0
 800699c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80069ac:	331c      	adds	r3, #28
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fd fcec 	bl	800438c <ld_dword>
 80069b4:	4602      	mov	r2, r0
 80069b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069ba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2200      	movs	r2, #0
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069d0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80069d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069e4:	88da      	ldrh	r2, [r3, #6]
 80069e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80069f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006a00:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2200      	movs	r2, #0
 8006a22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3330      	adds	r3, #48	; 0x30
 8006a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a42:	2100      	movs	r1, #0
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fd2c 	bl	80044a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a4e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80b1 	beq.w	8006bc0 <f_open+0x56c>
 8006a5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a62:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80a8 	beq.w	8006bc0 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a80:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a88:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a8c:	895b      	ldrh	r3, [r3, #10]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a94:	899b      	ldrh	r3, [r3, #12]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006aa2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006aae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ab2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006abe:	e021      	b.n	8006b04 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8006ac0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ac4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd ffb1 	bl	8004a36 <get_fat>
 8006ad4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8006ad8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d802      	bhi.n	8006ae6 <f_open+0x492>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ae6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d102      	bne.n	8006af6 <f_open+0x4a2>
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006af6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006afa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006b04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <f_open+0x4c4>
 8006b0c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006b10:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d8d3      	bhi.n	8006ac0 <f_open+0x46c>
				}
				fp->clust = clst;
 8006b18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006b1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8006b26:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d147      	bne.n	8006bc0 <f_open+0x56c>
 8006b30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b34:	899b      	ldrh	r3, [r3, #12]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b40:	fb01 f202 	mul.w	r2, r1, r2
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03a      	beq.n	8006bc0 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006b4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b4e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fd ff50 	bl	80049f8 <clust2sect>
 8006b58:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8006b5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <f_open+0x518>
						res = FR_INT_ERR;
 8006b64:	2302      	movs	r3, #2
 8006b66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006b6a:	e029      	b.n	8006bc0 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006b6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006b78:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006b80:	441a      	add	r2, r3
 8006b82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006b86:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006b8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b92:	7858      	ldrb	r0, [r3, #1]
 8006b94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006b98:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ba2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ba6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f7fd fb76 	bl	80042a0 <disk_read>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <f_open+0x56c>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006bc0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <f_open+0x582>
 8006bc8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006bcc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006bd6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08e      	sub	sp, #56	; 0x38
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f107 0214 	add.w	r2, r7, #20
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fca9 	bl	800655c <validate>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <f_read+0x44>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	7d5b      	ldrb	r3, [r3, #21]
 8006c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <f_read+0x4a>
 8006c28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c2c:	e135      	b.n	8006e9a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	7d1b      	ldrb	r3, [r3, #20]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <f_read+0x5a>
 8006c3a:	2307      	movs	r3, #7
 8006c3c:	e12d      	b.n	8006e9a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f240 811e 	bls.w	8006e90 <f_read+0x2ac>
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c58:	e11a      	b.n	8006e90 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	8992      	ldrh	r2, [r2, #12]
 8006c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c66:	fb01 f202 	mul.w	r2, r1, r2
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 80d5 	bne.w	8006e1c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	8992      	ldrh	r2, [r2, #12]
 8006c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	8952      	ldrh	r2, [r2, #10]
 8006c82:	3a01      	subs	r2, #1
 8006c84:	4013      	ands	r3, r2
 8006c86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d12f      	bne.n	8006cee <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9c:	e013      	b.n	8006cc6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7fe f9af 	bl	8005010 <clmt_clust>
 8006cb2:	6338      	str	r0, [r7, #48]	; 0x30
 8006cb4:	e007      	b.n	8006cc6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7fd feb9 	bl	8004a36 <get_fat>
 8006cc4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d804      	bhi.n	8006cd6 <f_read+0xf2>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	755a      	strb	r2, [r3, #21]
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e0e1      	b.n	8006e9a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d104      	bne.n	8006ce8 <f_read+0x104>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	755a      	strb	r2, [r3, #21]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0d8      	b.n	8006e9a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fd fe7e 	bl	80049f8 <clust2sect>
 8006cfc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <f_read+0x12a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2202      	movs	r2, #2
 8006d08:	755a      	strb	r2, [r3, #21]
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e0c5      	b.n	8006e9a <f_read+0x2b6>
			sect += csect;
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	899b      	ldrh	r3, [r3, #12]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d041      	beq.n	8006dae <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	4413      	add	r3, r2
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	8952      	ldrh	r2, [r2, #10]
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d905      	bls.n	8006d44 <f_read+0x160>
					cc = fs->csize - csect;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	895b      	ldrh	r3, [r3, #10]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	7858      	ldrb	r0, [r3, #1]
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d4e:	f7fd faa7 	bl	80042a0 <disk_read>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <f_read+0x17e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	755a      	strb	r2, [r3, #21]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e09b      	b.n	8006e9a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	7d1b      	ldrb	r3, [r3, #20]
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da18      	bge.n	8006d9e <f_read+0x1ba>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d911      	bls.n	8006d9e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	8992      	ldrh	r2, [r2, #12]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8c:	18d0      	adds	r0, r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	899b      	ldrh	r3, [r3, #12]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f7fd fb61 	bl	8004460 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	899b      	ldrh	r3, [r3, #12]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006dac:	e05c      	b.n	8006e68 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d02e      	beq.n	8006e16 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	7d1b      	ldrb	r3, [r3, #20]
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da18      	bge.n	8006df4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	7858      	ldrb	r0, [r3, #1]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f7fd fa85 	bl	80042e0 <disk_write>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <f_read+0x202>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	755a      	strb	r2, [r3, #21]
 8006de2:	2301      	movs	r3, #1
 8006de4:	e059      	b.n	8006e9a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	7d1b      	ldrb	r3, [r3, #20]
 8006dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	7858      	ldrb	r0, [r3, #1]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dfe:	2301      	movs	r3, #1
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	f7fd fa4d 	bl	80042a0 <disk_read>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <f_read+0x232>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	755a      	strb	r2, [r3, #21]
 8006e12:	2301      	movs	r3, #1
 8006e14:	e041      	b.n	8006e9a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	899b      	ldrh	r3, [r3, #12]
 8006e20:	4618      	mov	r0, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	8992      	ldrh	r2, [r2, #12]
 8006e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e2e:	fb01 f202 	mul.w	r2, r1, r2
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	1ac3      	subs	r3, r0, r3
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d901      	bls.n	8006e44 <f_read+0x260>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	8992      	ldrh	r2, [r2, #12]
 8006e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e56:	fb00 f202 	mul.w	r2, r0, r2
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e60:	4619      	mov	r1, r3
 8006e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e64:	f7fd fafc 	bl	8004460 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	441a      	add	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	619a      	str	r2, [r3, #24]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	441a      	add	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f47f aee1 	bne.w	8006c5a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3738      	adds	r7, #56	; 0x38
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f107 0208 	add.w	r2, r7, #8
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fb52 	bl	800655c <validate>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d168      	bne.n	8006f94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7d1b      	ldrb	r3, [r3, #20]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d062      	beq.n	8006f94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7d1b      	ldrb	r3, [r3, #20]
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da15      	bge.n	8006f04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	7858      	ldrb	r0, [r3, #1]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f7fd f9fa 	bl	80042e0 <disk_write>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <f_sync+0x54>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e04f      	b.n	8006f96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7d1b      	ldrb	r3, [r3, #20]
 8006efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006f04:	f7fd f92e 	bl	8004164 <get_fattime>
 8006f08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fd fcd2 	bl	80048bc <move_window>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d138      	bne.n	8006f94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	330b      	adds	r3, #11
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	330b      	adds	r3, #11
 8006f32:	f042 0220 	orr.w	r2, r2, #32
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	f7fe fa60 	bl	800540a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f103 021c 	add.w	r2, r3, #28
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fd fa56 	bl	8004408 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3316      	adds	r3, #22
 8006f60:	6939      	ldr	r1, [r7, #16]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd fa50 	bl	8004408 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3312      	adds	r3, #18
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fd fa2f 	bl	80043d2 <st_word>
					fs->wflag = 1;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2201      	movs	r2, #1
 8006f78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fd fccb 	bl	8004918 <sync_fs>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7d1b      	ldrb	r3, [r3, #20]
 8006f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff ff7b 	bl	8006ea2 <f_sync>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d118      	bne.n	8006fe8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f107 0208 	add.w	r2, r7, #8
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff facc 	bl	800655c <validate>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10c      	bne.n	8006fe8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fd fbce 	bl	8004774 <dec_lock>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b090      	sub	sp, #64	; 0x40
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f107 0208 	add.w	r2, r7, #8
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff faa9 	bl	800655c <validate>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007010:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <f_lseek+0x2e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7d5b      	ldrb	r3, [r3, #21]
 800701c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <f_lseek+0x3c>
 8007028:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800702c:	e201      	b.n	8007432 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80d9 	beq.w	80071ea <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d15a      	bne.n	80070f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	627a      	str	r2, [r7, #36]	; 0x24
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	2302      	movs	r3, #2
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d03a      	beq.n	80070d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	2300      	movs	r3, #0
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	3302      	adds	r3, #2
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	3301      	adds	r3, #1
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800707c:	4618      	mov	r0, r3
 800707e:	f7fd fcda 	bl	8004a36 <get_fat>
 8007082:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2b01      	cmp	r3, #1
 8007088:	d804      	bhi.n	8007094 <f_lseek+0xa2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2202      	movs	r2, #2
 800708e:	755a      	strb	r2, [r3, #21]
 8007090:	2302      	movs	r3, #2
 8007092:	e1ce      	b.n	8007432 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d104      	bne.n	80070a6 <f_lseek+0xb4>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	755a      	strb	r2, [r3, #21]
 80070a2:	2301      	movs	r3, #1
 80070a4:	e1c5      	b.n	8007432 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0de      	beq.n	800706e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80070b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d809      	bhi.n	80070cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	627a      	str	r2, [r7, #36]	; 0x24
 80070be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1d1a      	adds	r2, r3, #4
 80070c6:	627a      	str	r2, [r7, #36]	; 0x24
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d3c4      	bcc.n	8007060 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80070de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d803      	bhi.n	80070ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e19f      	b.n	800742e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80070ee:	2311      	movs	r3, #17
 80070f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80070f4:	e19b      	b.n	800742e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d902      	bls.n	8007106 <f_lseek+0x114>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 818d 	beq.w	800742e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fd ff78 	bl	8005010 <clmt_clust>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fd fc62 	bl	80049f8 <clust2sect>
 8007134:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <f_lseek+0x154>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	755a      	strb	r2, [r3, #21]
 8007142:	2302      	movs	r3, #2
 8007144:	e175      	b.n	8007432 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	3b01      	subs	r3, #1
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	8992      	ldrh	r2, [r2, #12]
 800714e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	8952      	ldrh	r2, [r2, #10]
 8007156:	3a01      	subs	r2, #1
 8007158:	4013      	ands	r3, r2
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4413      	add	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	8992      	ldrh	r2, [r2, #12]
 8007168:	fbb3 f1f2 	udiv	r1, r3, r2
 800716c:	fb01 f202 	mul.w	r2, r1, r2
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 815b 	beq.w	800742e <f_lseek+0x43c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	429a      	cmp	r2, r3
 8007180:	f000 8155 	beq.w	800742e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7d1b      	ldrb	r3, [r3, #20]
 8007188:	b25b      	sxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	da18      	bge.n	80071c0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7858      	ldrb	r0, [r3, #1]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	2301      	movs	r3, #1
 800719e:	f7fd f89f 	bl	80042e0 <disk_write>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <f_lseek+0x1c0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	755a      	strb	r2, [r3, #21]
 80071ae:	2301      	movs	r3, #1
 80071b0:	e13f      	b.n	8007432 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7d1b      	ldrb	r3, [r3, #20]
 80071b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	7858      	ldrb	r0, [r3, #1]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ca:	2301      	movs	r3, #1
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	f7fd f867 	bl	80042a0 <disk_read>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <f_lseek+0x1f0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	755a      	strb	r2, [r3, #21]
 80071de:	2301      	movs	r3, #1
 80071e0:	e127      	b.n	8007432 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	621a      	str	r2, [r3, #32]
 80071e8:	e121      	b.n	800742e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d908      	bls.n	8007206 <f_lseek+0x214>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7d1b      	ldrb	r3, [r3, #20]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	637b      	str	r3, [r7, #52]	; 0x34
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007214:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 80b5 	beq.w	8007388 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	895b      	ldrh	r3, [r3, #10]
 8007222:	461a      	mov	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	899b      	ldrh	r3, [r3, #12]
 8007228:	fb02 f303 	mul.w	r3, r2, r3
 800722c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01b      	beq.n	800726c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	fbb2 f2f3 	udiv	r2, r2, r3
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	1e59      	subs	r1, r3, #1
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007248:	429a      	cmp	r2, r3
 800724a:	d30f      	bcc.n	800726c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	425b      	negs	r3, r3
 8007254:	401a      	ands	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
 800726a:	e022      	b.n	80072b2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d119      	bne.n	80072ac <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f7fd fe2f 	bl	8004ee0 <create_chain>
 8007282:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	2b01      	cmp	r3, #1
 8007288:	d104      	bne.n	8007294 <f_lseek+0x2a2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	755a      	strb	r2, [r3, #21]
 8007290:	2302      	movs	r3, #2
 8007292:	e0ce      	b.n	8007432 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d104      	bne.n	80072a6 <f_lseek+0x2b4>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	755a      	strb	r2, [r3, #21]
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0c5      	b.n	8007432 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072aa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d067      	beq.n	8007388 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80072b8:	e03a      	b.n	8007330 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7d1b      	ldrb	r3, [r3, #20]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fd fdfe 	bl	8004ee0 <create_chain>
 80072e4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <f_lseek+0x30c>
							ofs = 0; break;
 80072ec:	2300      	movs	r3, #0
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	e022      	b.n	8007338 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fd fb9d 	bl	8004a36 <get_fat>
 80072fc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d104      	bne.n	8007310 <f_lseek+0x31e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	755a      	strb	r2, [r3, #21]
 800730c:	2301      	movs	r3, #1
 800730e:	e090      	b.n	8007432 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	2b01      	cmp	r3, #1
 8007314:	d904      	bls.n	8007320 <f_lseek+0x32e>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731c:	429a      	cmp	r2, r3
 800731e:	d304      	bcc.n	800732a <f_lseek+0x338>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	755a      	strb	r2, [r3, #21]
 8007326:	2302      	movs	r3, #2
 8007328:	e083      	b.n	8007432 <f_lseek+0x440>
					fp->clust = clst;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800732e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	429a      	cmp	r2, r3
 8007336:	d8c0      	bhi.n	80072ba <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699a      	ldr	r2, [r3, #24]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	441a      	add	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	899b      	ldrh	r3, [r3, #12]
 8007348:	461a      	mov	r2, r3
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007350:	fb01 f202 	mul.w	r2, r1, r2
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800735e:	4618      	mov	r0, r3
 8007360:	f7fd fb4a 	bl	80049f8 <clust2sect>
 8007364:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <f_lseek+0x384>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	755a      	strb	r2, [r3, #21]
 8007372:	2302      	movs	r3, #2
 8007374:	e05d      	b.n	8007432 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	899b      	ldrh	r3, [r3, #12]
 800737a:	461a      	mov	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	4413      	add	r3, r2
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d90a      	bls.n	80073aa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	8992      	ldrh	r2, [r2, #12]
 80073b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b6:	fb01 f202 	mul.w	r2, r1, r2
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d036      	beq.n	800742e <f_lseek+0x43c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d031      	beq.n	800742e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da18      	bge.n	8007406 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	7858      	ldrb	r0, [r3, #1]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	2301      	movs	r3, #1
 80073e4:	f7fc ff7c 	bl	80042e0 <disk_write>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <f_lseek+0x406>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	755a      	strb	r2, [r3, #21]
 80073f4:	2301      	movs	r3, #1
 80073f6:	e01c      	b.n	8007432 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	7d1b      	ldrb	r3, [r3, #20]
 80073fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	7858      	ldrb	r0, [r3, #1]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007410:	2301      	movs	r3, #1
 8007412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007414:	f7fc ff44 	bl	80042a0 <disk_read>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <f_lseek+0x436>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	755a      	strb	r2, [r3, #21]
 8007424:	2301      	movs	r3, #1
 8007426:	e004      	b.n	8007432 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800742c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800742e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007432:	4618      	mov	r0, r3
 8007434:	3740      	adds	r7, #64	; 0x40
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007452:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 8007454:	7a5b      	ldrb	r3, [r3, #9]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d131      	bne.n	80074c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 800745e:	7a5b      	ldrb	r3, [r3, #9]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 8007466:	2100      	movs	r1, #0
 8007468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 800746c:	7a5b      	ldrb	r3, [r3, #9]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800747a:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 800747c:	7a5b      	ldrb	r3, [r3, #9]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 8007484:	4413      	add	r3, r2
 8007486:	79fa      	ldrb	r2, [r7, #7]
 8007488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 800748c:	7a5b      	ldrb	r3, [r3, #9]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	b2d1      	uxtb	r1, r2
 8007494:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <FATFS_LinkDriverEx+0x94>)
 8007496:	7251      	strb	r1, [r2, #9]
 8007498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800749a:	7dbb      	ldrb	r3, [r7, #22]
 800749c:	3330      	adds	r3, #48	; 0x30
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	3301      	adds	r3, #1
 80074a8:	223a      	movs	r2, #58	; 0x3a
 80074aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	3302      	adds	r3, #2
 80074b0:	222f      	movs	r2, #47	; 0x2f
 80074b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3303      	adds	r3, #3
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20005430 	.word	0x20005430

080074d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80074de:	2200      	movs	r2, #0
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ffaa 	bl	800743c <FATFS_LinkDriverEx>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	2b7f      	cmp	r3, #127	; 0x7f
 8007504:	d802      	bhi.n	800750c <ff_convert+0x18>
		c = chr;
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	81fb      	strh	r3, [r7, #14]
 800750a:	e025      	b.n	8007558 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2bff      	cmp	r3, #255	; 0xff
 8007516:	d805      	bhi.n	8007524 <ff_convert+0x30>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	3b80      	subs	r3, #128	; 0x80
 800751c:	4a12      	ldr	r2, [pc, #72]	; (8007568 <ff_convert+0x74>)
 800751e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007522:	e000      	b.n	8007526 <ff_convert+0x32>
 8007524:	2300      	movs	r3, #0
 8007526:	81fb      	strh	r3, [r7, #14]
 8007528:	e016      	b.n	8007558 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800752a:	2300      	movs	r3, #0
 800752c:	81fb      	strh	r3, [r7, #14]
 800752e:	e009      	b.n	8007544 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <ff_convert+0x74>)
 8007534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	429a      	cmp	r2, r3
 800753c:	d006      	beq.n	800754c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800753e:	89fb      	ldrh	r3, [r7, #14]
 8007540:	3301      	adds	r3, #1
 8007542:	81fb      	strh	r3, [r7, #14]
 8007544:	89fb      	ldrh	r3, [r7, #14]
 8007546:	2b7f      	cmp	r3, #127	; 0x7f
 8007548:	d9f2      	bls.n	8007530 <ff_convert+0x3c>
 800754a:	e000      	b.n	800754e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800754c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800754e:	89fb      	ldrh	r3, [r7, #14]
 8007550:	3380      	adds	r3, #128	; 0x80
 8007552:	b29b      	uxth	r3, r3
 8007554:	b2db      	uxtb	r3, r3
 8007556:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007558:	89fb      	ldrh	r3, [r7, #14]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	08013ce8 	.word	0x08013ce8

0800756c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757c:	d201      	bcs.n	8007582 <ff_wtoupper+0x16>
 800757e:	4b3e      	ldr	r3, [pc, #248]	; (8007678 <ff_wtoupper+0x10c>)
 8007580:	e000      	b.n	8007584 <ff_wtoupper+0x18>
 8007582:	4b3e      	ldr	r3, [pc, #248]	; (800767c <ff_wtoupper+0x110>)
 8007584:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	1c9a      	adds	r2, r3, #2
 800758a:	617a      	str	r2, [r7, #20]
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007590:	8a7b      	ldrh	r3, [r7, #18]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d068      	beq.n	8007668 <ff_wtoupper+0xfc>
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	8a7b      	ldrh	r3, [r7, #18]
 800759a:	429a      	cmp	r2, r3
 800759c:	d364      	bcc.n	8007668 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	617a      	str	r2, [r7, #20]
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	823b      	strh	r3, [r7, #16]
 80075a8:	8a3b      	ldrh	r3, [r7, #16]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	81fb      	strh	r3, [r7, #14]
 80075ae:	8a3b      	ldrh	r3, [r7, #16]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	8a79      	ldrh	r1, [r7, #18]
 80075b8:	8a3b      	ldrh	r3, [r7, #16]
 80075ba:	440b      	add	r3, r1
 80075bc:	429a      	cmp	r2, r3
 80075be:	da49      	bge.n	8007654 <ff_wtoupper+0xe8>
			switch (cmd) {
 80075c0:	89fb      	ldrh	r3, [r7, #14]
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d84f      	bhi.n	8007666 <ff_wtoupper+0xfa>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <ff_wtoupper+0x60>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	08007603 	.word	0x08007603
 80075d4:	08007619 	.word	0x08007619
 80075d8:	08007621 	.word	0x08007621
 80075dc:	08007629 	.word	0x08007629
 80075e0:	08007631 	.word	0x08007631
 80075e4:	08007639 	.word	0x08007639
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007649 	.word	0x08007649
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	8a7b      	ldrh	r3, [r7, #18]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	80fb      	strh	r3, [r7, #6]
 8007600:	e027      	b.n	8007652 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	b29b      	uxth	r3, r3
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	b29b      	uxth	r3, r3
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	80fb      	strh	r3, [r7, #6]
 8007616:	e01c      	b.n	8007652 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007618:	88fb      	ldrh	r3, [r7, #6]
 800761a:	3b10      	subs	r3, #16
 800761c:	80fb      	strh	r3, [r7, #6]
 800761e:	e018      	b.n	8007652 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	3b20      	subs	r3, #32
 8007624:	80fb      	strh	r3, [r7, #6]
 8007626:	e014      	b.n	8007652 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	3b30      	subs	r3, #48	; 0x30
 800762c:	80fb      	strh	r3, [r7, #6]
 800762e:	e010      	b.n	8007652 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	3b1a      	subs	r3, #26
 8007634:	80fb      	strh	r3, [r7, #6]
 8007636:	e00c      	b.n	8007652 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	3308      	adds	r3, #8
 800763c:	80fb      	strh	r3, [r7, #6]
 800763e:	e008      	b.n	8007652 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	3b50      	subs	r3, #80	; 0x50
 8007644:	80fb      	strh	r3, [r7, #6]
 8007646:	e004      	b.n	8007652 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800764e:	80fb      	strh	r3, [r7, #6]
 8007650:	bf00      	nop
			}
			break;
 8007652:	e008      	b.n	8007666 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007654:	89fb      	ldrh	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d195      	bne.n	8007586 <ff_wtoupper+0x1a>
 800765a:	8a3b      	ldrh	r3, [r7, #16]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4413      	add	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007664:	e78f      	b.n	8007586 <ff_wtoupper+0x1a>
			break;
 8007666:	bf00      	nop
	}

	return chr;
 8007668:	88fb      	ldrh	r3, [r7, #6]
}
 800766a:	4618      	mov	r0, r3
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	08013de8 	.word	0x08013de8
 800767c:	08013fdc 	.word	0x08013fdc

08007680 <TEXT_Callback>:
 8007680:	b530      	push	{r4, r5, lr}
 8007682:	6845      	ldr	r5, [r0, #4]
 8007684:	4604      	mov	r4, r0
 8007686:	b085      	sub	sp, #20
 8007688:	4628      	mov	r0, r5
 800768a:	4621      	mov	r1, r4
 800768c:	f008 f848 	bl	800f720 <WIDGET_HandleActive>
 8007690:	2800      	cmp	r0, #0
 8007692:	d056      	beq.n	8007742 <TEXT_Callback+0xc2>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d01e      	beq.n	80076d8 <TEXT_Callback+0x58>
 800769a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800769e:	d00e      	beq.n	80076be <TEXT_Callback+0x3e>
 80076a0:	2b0b      	cmp	r3, #11
 80076a2:	d14b      	bne.n	800773c <TEXT_Callback+0xbc>
 80076a4:	4628      	mov	r0, r5
 80076a6:	f007 fd79 	bl	800f19c <GUI_ALLOC_LockH>
 80076aa:	ad04      	add	r5, sp, #16
 80076ac:	f845 0d08 	str.w	r0, [r5, #-8]!
 80076b0:	3044      	adds	r0, #68	; 0x44
 80076b2:	f007 ff43 	bl	800f53c <GUI_ALLOC_FreePtr>
 80076b6:	4628      	mov	r0, r5
 80076b8:	f007 fd7e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80076bc:	e03e      	b.n	800773c <TEXT_Callback+0xbc>
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	b12b      	cbz	r3, 80076ce <TEXT_Callback+0x4e>
 80076c2:	7a1b      	ldrb	r3, [r3, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	2102      	moveq	r1, #2
 80076ca:	2101      	movne	r1, #1
 80076cc:	e000      	b.n	80076d0 <TEXT_Callback+0x50>
 80076ce:	2103      	movs	r1, #3
 80076d0:	4628      	mov	r0, r5
 80076d2:	f001 f964 	bl	800899e <WM_NotifyParent>
 80076d6:	e031      	b.n	800773c <TEXT_Callback+0xbc>
 80076d8:	4628      	mov	r0, r5
 80076da:	f007 fd5f 	bl	800f19c <GUI_ALLOC_LockH>
 80076de:	9000      	str	r0, [sp, #0]
 80076e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076e2:	f005 fa1d 	bl	800cb20 <LCD_SetColor>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076ea:	f006 fb07 	bl	800dcfc <GUI_SetFont>
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 fdf2 	bl	80082d8 <WM_GetHasTrans>
 80076f4:	b928      	cbnz	r0, 8007702 <TEXT_Callback+0x82>
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80076fa:	f005 fa09 	bl	800cb10 <LCD_SetBkColor>
 80076fe:	f006 f95d 	bl	800d9bc <GUI_Clear>
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	b1ab      	cbz	r3, 8007734 <TEXT_Callback+0xb4>
 8007708:	2002      	movs	r0, #2
 800770a:	f006 fb2d 	bl	800dd68 <GUI_SetTextMode>
 800770e:	a802      	add	r0, sp, #8
 8007710:	f000 ff74 	bl	80085fc <WM_GetClientRect>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007718:	f007 fd40 	bl	800f19c <GUI_ALLOC_LockH>
 800771c:	9b00      	ldr	r3, [sp, #0]
 800771e:	9001      	str	r0, [sp, #4]
 8007720:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8007724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007728:	a902      	add	r1, sp, #8
 800772a:	f005 ff5e 	bl	800d5ea <GUI_DispStringInRectWrap>
 800772e:	a801      	add	r0, sp, #4
 8007730:	f007 fd42 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007734:	4668      	mov	r0, sp
 8007736:	f007 fd3f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800773a:	e002      	b.n	8007742 <TEXT_Callback+0xc2>
 800773c:	4620      	mov	r0, r4
 800773e:	f002 fb75 	bl	8009e2c <WM_DefaultProc>
 8007742:	b005      	add	sp, #20
 8007744:	bd30      	pop	{r4, r5, pc}
	...

08007748 <TEXT_CreateUser>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800774e:	9500      	str	r5, [sp, #0]
 8007750:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007752:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007754:	f045 0501 	orr.w	r5, r5, #1
 8007758:	9501      	str	r5, [sp, #4]
 800775a:	4d1a      	ldr	r5, [pc, #104]	; (80077c4 <TEXT_CreateUser+0x7c>)
 800775c:	9502      	str	r5, [sp, #8]
 800775e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007760:	3520      	adds	r5, #32
 8007762:	9503      	str	r5, [sp, #12]
 8007764:	f001 ff70 	bl	8009648 <WM_CreateWindowAsChild>
 8007768:	4605      	mov	r5, r0
 800776a:	b340      	cbz	r0, 80077be <TEXT_CreateUser+0x76>
 800776c:	b18c      	cbz	r4, 8007792 <TEXT_CreateUser+0x4a>
 800776e:	4620      	mov	r0, r4
 8007770:	f7f8 fd2e 	bl	80001d0 <strlen>
 8007774:	3001      	adds	r0, #1
 8007776:	f007 fee9 	bl	800f54c <GUI_ALLOC_AllocZero>
 800777a:	4606      	mov	r6, r0
 800777c:	b150      	cbz	r0, 8007794 <TEXT_CreateUser+0x4c>
 800777e:	f007 fd0d 	bl	800f19c <GUI_ALLOC_LockH>
 8007782:	4621      	mov	r1, r4
 8007784:	9005      	str	r0, [sp, #20]
 8007786:	f00a fefa 	bl	801257e <strcpy>
 800778a:	a805      	add	r0, sp, #20
 800778c:	f007 fd14 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007790:	e000      	b.n	8007794 <TEXT_CreateUser+0x4c>
 8007792:	4626      	mov	r6, r4
 8007794:	4628      	mov	r0, r5
 8007796:	f007 fd01 	bl	800f19c <GUI_ALLOC_LockH>
 800779a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800779c:	9005      	str	r0, [sp, #20]
 800779e:	2200      	movs	r2, #0
 80077a0:	f007 ff8e 	bl	800f6c0 <WIDGET__Init>
 80077a4:	9c05      	ldr	r4, [sp, #20]
 80077a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <TEXT_CreateUser+0x80>)
 80077ae:	6466      	str	r6, [r4, #68]	; 0x44
 80077b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077b2:	3434      	adds	r4, #52	; 0x34
 80077b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80077b8:	a805      	add	r0, sp, #20
 80077ba:	f007 fcfd 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80077be:	4628      	mov	r0, r5
 80077c0:	b006      	add	sp, #24
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	08007681 	.word	0x08007681
 80077c8:	20000024 	.word	0x20000024

080077cc <TEXT_CreateIndirect>:
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	b087      	sub	sp, #28
 80077d0:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 80077d4:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80077d8:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 80077dc:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 80077e0:	9100      	str	r1, [sp, #0]
 80077e2:	2102      	movs	r1, #2
 80077e4:	9101      	str	r1, [sp, #4]
 80077e6:	8a41      	ldrh	r1, [r0, #18]
 80077e8:	9102      	str	r1, [sp, #8]
 80077ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80077ee:	9103      	str	r1, [sp, #12]
 80077f0:	6844      	ldr	r4, [r0, #4]
 80077f2:	9404      	str	r4, [sp, #16]
 80077f4:	6984      	ldr	r4, [r0, #24]
 80077f6:	9405      	str	r4, [sp, #20]
 80077f8:	eb0e 0002 	add.w	r0, lr, r2
 80077fc:	18f9      	adds	r1, r7, r3
 80077fe:	4632      	mov	r2, r6
 8007800:	462b      	mov	r3, r5
 8007802:	f7ff ffa1 	bl	8007748 <TEXT_CreateUser>
 8007806:	b007      	add	sp, #28
 8007808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800780a <TEXT_SetText>:
 800780a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780c:	460c      	mov	r4, r1
 800780e:	4605      	mov	r5, r0
 8007810:	b300      	cbz	r0, 8007854 <TEXT_SetText+0x4a>
 8007812:	f007 fcc3 	bl	800f19c <GUI_ALLOC_LockH>
 8007816:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007818:	9000      	str	r0, [sp, #0]
 800781a:	4668      	mov	r0, sp
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f007 fccb 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007822:	4621      	mov	r1, r4
 8007824:	a801      	add	r0, sp, #4
 8007826:	f005 fa81 	bl	800cd2c <GUI__SetText>
 800782a:	f1d0 0401 	rsbs	r4, r0, #1
 800782e:	bf38      	it	cc
 8007830:	2400      	movcc	r4, #0
 8007832:	b984      	cbnz	r4, 8007856 <TEXT_SetText+0x4c>
 8007834:	4628      	mov	r0, r5
 8007836:	f007 fcb1 	bl	800f19c <GUI_ALLOC_LockH>
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800783e:	9000      	str	r0, [sp, #0]
 8007840:	4291      	cmp	r1, r2
 8007842:	bf18      	it	ne
 8007844:	6442      	strne	r2, [r0, #68]	; 0x44
 8007846:	4668      	mov	r0, sp
 8007848:	f007 fcb6 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800784c:	4628      	mov	r0, r5
 800784e:	f001 fecd 	bl	80095ec <WM_InvalidateWindow>
 8007852:	e000      	b.n	8007856 <TEXT_SetText+0x4c>
 8007854:	2401      	movs	r4, #1
 8007856:	4620      	mov	r0, r4
 8007858:	b003      	add	sp, #12
 800785a:	bd30      	pop	{r4, r5, pc}

0800785c <FRAMEWIN__GetBorderSize>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	f007 fc9a 	bl	800f19c <GUI_ALLOC_LockH>
 8007868:	ab0a      	add	r3, sp, #40	; 0x28
 800786a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800786c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8007870:	4668      	mov	r0, sp
 8007872:	6896      	ldr	r6, [r2, #8]
 8007874:	f007 fca0 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007878:	9501      	str	r5, [sp, #4]
 800787a:	2c03      	cmp	r4, #3
 800787c:	d80b      	bhi.n	8007896 <FRAMEWIN__GetBorderSize+0x3a>
 800787e:	e8df f004 	tbb	[pc, r4]
 8007882:	0402      	.short	0x0402
 8007884:	0806      	.short	0x0806
 8007886:	2318      	movs	r3, #24
 8007888:	e004      	b.n	8007894 <FRAMEWIN__GetBorderSize+0x38>
 800788a:	2316      	movs	r3, #22
 800788c:	e002      	b.n	8007894 <FRAMEWIN__GetBorderSize+0x38>
 800788e:	2315      	movs	r3, #21
 8007890:	e000      	b.n	8007894 <FRAMEWIN__GetBorderSize+0x38>
 8007892:	2317      	movs	r3, #23
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	6873      	ldr	r3, [r6, #4]
 8007898:	a801      	add	r0, sp, #4
 800789a:	4798      	blx	r3
 800789c:	b00a      	add	sp, #40	; 0x28
 800789e:	bd70      	pop	{r4, r5, r6, pc}

080078a0 <_SetActive>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	f007 fc79 	bl	800f19c <GUI_ALLOC_LockH>
 80078aa:	9001      	str	r0, [sp, #4]
 80078ac:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80078b0:	b125      	cbz	r5, 80078bc <_SetActive+0x1c>
 80078b2:	0711      	lsls	r1, r2, #28
 80078b4:	d40b      	bmi.n	80078ce <_SetActive+0x2e>
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	e003      	b.n	80078c4 <_SetActive+0x24>
 80078bc:	0713      	lsls	r3, r2, #28
 80078be:	d506      	bpl.n	80078ce <_SetActive+0x2e>
 80078c0:	f022 0208 	bic.w	r2, r2, #8
 80078c4:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 fe8f 	bl	80095ec <WM_InvalidateWindow>
 80078ce:	a801      	add	r0, sp, #4
 80078d0:	f007 fc72 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80078d4:	b003      	add	sp, #12
 80078d6:	bd30      	pop	{r4, r5, pc}

080078d8 <FRAMEWIN__cbClient>:
 80078d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078dc:	6845      	ldr	r5, [r0, #4]
 80078de:	b087      	sub	sp, #28
 80078e0:	4604      	mov	r4, r0
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 ff27 	bl	8008736 <WM_GetParent>
 80078e8:	4681      	mov	r9, r0
 80078ea:	f007 fc57 	bl	800f19c <GUI_ALLOC_LockH>
 80078ee:	4603      	mov	r3, r0
 80078f0:	a806      	add	r0, sp, #24
 80078f2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80078f4:	f840 3d14 	str.w	r3, [r0, #-20]!
 80078f8:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80078fa:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 80078fe:	f007 fc5b 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	2b17      	cmp	r3, #23
 8007906:	d053      	beq.n	80079b0 <FRAMEWIN__cbClient+0xd8>
 8007908:	dc09      	bgt.n	800791e <FRAMEWIN__cbClient+0x46>
 800790a:	2b0f      	cmp	r3, #15
 800790c:	d014      	beq.n	8007938 <FRAMEWIN__cbClient+0x60>
 800790e:	dc02      	bgt.n	8007916 <FRAMEWIN__cbClient+0x3e>
 8007910:	2b0e      	cmp	r3, #14
 8007912:	d034      	beq.n	800797e <FRAMEWIN__cbClient+0xa6>
 8007914:	e046      	b.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 8007916:	3b14      	subs	r3, #20
 8007918:	2b01      	cmp	r3, #1
 800791a:	d949      	bls.n	80079b0 <FRAMEWIN__cbClient+0xd8>
 800791c:	e042      	b.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 800791e:	2b1f      	cmp	r3, #31
 8007920:	d028      	beq.n	8007974 <FRAMEWIN__cbClient+0x9c>
 8007922:	dc02      	bgt.n	800792a <FRAMEWIN__cbClient+0x52>
 8007924:	2b1e      	cmp	r3, #30
 8007926:	d01a      	beq.n	800795e <FRAMEWIN__cbClient+0x86>
 8007928:	e03c      	b.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 800792a:	2b22      	cmp	r3, #34	; 0x22
 800792c:	d038      	beq.n	80079a0 <FRAMEWIN__cbClient+0xc8>
 800792e:	2b31      	cmp	r3, #49	; 0x31
 8007930:	d138      	bne.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 8007932:	2300      	movs	r3, #0
 8007934:	60e3      	str	r3, [r4, #12]
 8007936:	e03e      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 8007938:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800793c:	429e      	cmp	r6, r3
 800793e:	d004      	beq.n	800794a <FRAMEWIN__cbClient+0x72>
 8007940:	4630      	mov	r0, r6
 8007942:	f005 f8e5 	bl	800cb10 <LCD_SetBkColor>
 8007946:	f006 f839 	bl	800d9bc <GUI_Clear>
 800794a:	2f00      	cmp	r7, #0
 800794c:	d033      	beq.n	80079b6 <FRAMEWIN__cbClient+0xde>
 800794e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007952:	ae02      	add	r6, sp, #8
 8007954:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007958:	9503      	str	r5, [sp, #12]
 800795a:	4630      	mov	r0, r6
 800795c:	e026      	b.n	80079ac <FRAMEWIN__cbClient+0xd4>
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	b34b      	cbz	r3, 80079b6 <FRAMEWIN__cbClient+0xde>
 8007962:	f1b8 0f00 	cmp.w	r8, #0
 8007966:	d017      	beq.n	8007998 <FRAMEWIN__cbClient+0xc0>
 8007968:	45a8      	cmp	r8, r5
 800796a:	d015      	beq.n	8007998 <FRAMEWIN__cbClient+0xc0>
 800796c:	4640      	mov	r0, r8
 800796e:	f001 f821 	bl	80089b4 <WM_SetFocus>
 8007972:	e020      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 8007974:	4648      	mov	r0, r9
 8007976:	4621      	mov	r1, r4
 8007978:	f007 fed2 	bl	800f720 <WIDGET_HandleActive>
 800797c:	e01b      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	2a00      	cmp	r2, #0
 8007984:	dd0e      	ble.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b09      	cmp	r3, #9
 800798a:	d005      	beq.n	8007998 <FRAMEWIN__cbClient+0xc0>
 800798c:	2b0a      	cmp	r3, #10
 800798e:	d109      	bne.n	80079a4 <FRAMEWIN__cbClient+0xcc>
 8007990:	4628      	mov	r0, r5
 8007992:	f000 fcb9 	bl	8008308 <WM_SetFocusOnPrevChild>
 8007996:	e00e      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fce5 	bl	8008368 <WM_SetFocusOnNextChild>
 800799e:	e00a      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 80079a0:	60e6      	str	r6, [r4, #12]
 80079a2:	e008      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 80079a4:	b127      	cbz	r7, 80079b0 <FRAMEWIN__cbClient+0xd8>
 80079a6:	f8c4 9004 	str.w	r9, [r4, #4]
 80079aa:	4620      	mov	r0, r4
 80079ac:	47b8      	blx	r7
 80079ae:	e002      	b.n	80079b6 <FRAMEWIN__cbClient+0xde>
 80079b0:	4620      	mov	r0, r4
 80079b2:	f002 fa3b 	bl	8009e2c <WM_DefaultProc>
 80079b6:	b007      	add	sp, #28
 80079b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080079bc <FRAMEWIN__CalcTitleHeight>:
 80079bc:	b508      	push	{r3, lr}
 80079be:	4603      	mov	r3, r0
 80079c0:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80079c2:	f000 0020 	and.w	r0, r0, #32
 80079c6:	b280      	uxth	r0, r0
 80079c8:	b130      	cbz	r0, 80079d8 <FRAMEWIN__CalcTitleHeight+0x1c>
 80079ca:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80079ce:	b918      	cbnz	r0, 80079d8 <FRAMEWIN__CalcTitleHeight+0x1c>
 80079d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80079d2:	f006 f8d7 	bl	800db84 <GUI_GetYSizeOfFont>
 80079d6:	3002      	adds	r0, #2
 80079d8:	bd08      	pop	{r3, pc}

080079da <FRAMEWIN__GetTitleLimits>:
 80079da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80079de:	4607      	mov	r7, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	4616      	mov	r6, r2
 80079e4:	f007 fbda 	bl	800f19c <GUI_ALLOC_LockH>
 80079e8:	4603      	mov	r3, r0
 80079ea:	a802      	add	r0, sp, #8
 80079ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 80079f2:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80079f6:	f8b3 8000 	ldrh.w	r8, [r3]
 80079fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079fe:	4668      	mov	r0, sp
 8007a00:	f007 fbda 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007a04:	f8da 3000 	ldr.w	r3, [sl]
 8007a08:	4638      	mov	r0, r7
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4798      	blx	r3
 8007a0e:	4682      	mov	sl, r0
 8007a10:	4638      	mov	r0, r7
 8007a12:	f000 fe1b 	bl	800864c <WM_GetFirstChild>
 8007a16:	4604      	mov	r4, r0
 8007a18:	b340      	cbz	r0, 8007a6c <FRAMEWIN__GetTitleLimits+0x92>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f007 fbbe 	bl	800f19c <GUI_ALLOC_LockH>
 8007a20:	4603      	mov	r3, r0
 8007a22:	fa0f f289 	sxth.w	r2, r9
 8007a26:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8007a2a:	9001      	str	r0, [sp, #4]
 8007a2c:	1aba      	subs	r2, r7, r2
 8007a2e:	4552      	cmp	r2, sl
 8007a30:	8800      	ldrh	r0, [r0, #0]
 8007a32:	8899      	ldrh	r1, [r3, #4]
 8007a34:	d113      	bne.n	8007a5e <FRAMEWIN__GetTitleLimits+0x84>
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	061b      	lsls	r3, r3, #24
 8007a3a:	fa0f f288 	sxth.w	r2, r8
 8007a3e:	d507      	bpl.n	8007a50 <FRAMEWIN__GetTitleLimits+0x76>
 8007a40:	b203      	sxth	r3, r0
 8007a42:	1a9a      	subs	r2, r3, r2
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	dc09      	bgt.n	8007a5e <FRAMEWIN__GetTitleLimits+0x84>
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	6032      	str	r2, [r6, #0]
 8007a4e:	e006      	b.n	8007a5e <FRAMEWIN__GetTitleLimits+0x84>
 8007a50:	b20b      	sxth	r3, r1
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	682a      	ldr	r2, [r5, #0]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bfa4      	itt	ge
 8007a5a:	3301      	addge	r3, #1
 8007a5c:	602b      	strge	r3, [r5, #0]
 8007a5e:	a801      	add	r0, sp, #4
 8007a60:	f007 fbaa 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fe56 	bl	8008716 <WM_GetNextSibling>
 8007a6a:	e7d4      	b.n	8007a16 <FRAMEWIN__GetTitleLimits+0x3c>
 8007a6c:	b002      	add	sp, #8
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a72 <FRAMEWIN__CalcPositions>:
 8007a72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a76:	b087      	sub	sp, #28
 8007a78:	4604      	mov	r4, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f007 fb8e 	bl	800f19c <GUI_ALLOC_LockH>
 8007a80:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007a82:	9003      	str	r0, [sp, #12]
 8007a84:	6895      	ldr	r5, [r2, #8]
 8007a86:	2101      	movs	r1, #1
 8007a88:	682a      	ldr	r2, [r5, #0]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4790      	blx	r2
 8007a8e:	682a      	ldr	r2, [r5, #0]
 8007a90:	2103      	movs	r1, #3
 8007a92:	4683      	mov	fp, r0
 8007a94:	4620      	mov	r0, r4
 8007a96:	4790      	blx	r2
 8007a98:	682a      	ldr	r2, [r5, #0]
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	4681      	mov	r9, r0
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4790      	blx	r2
 8007aa2:	682a      	ldr	r2, [r5, #0]
 8007aa4:	9001      	str	r0, [sp, #4]
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	4790      	blx	r2
 8007aac:	4605      	mov	r5, r0
 8007aae:	9803      	ldr	r0, [sp, #12]
 8007ab0:	f001 f83e 	bl	8008b30 <WM__GetWindowSizeX>
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	9803      	ldr	r0, [sp, #12]
 8007ab8:	f001 f841 	bl	8008b3e <WM__GetWindowSizeY>
 8007abc:	4680      	mov	r8, r0
 8007abe:	9803      	ldr	r0, [sp, #12]
 8007ac0:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8007ac2:	f006 0620 	and.w	r6, r6, #32
 8007ac6:	b2b6      	uxth	r6, r6
 8007ac8:	b10e      	cbz	r6, 8007ace <FRAMEWIN__CalcPositions+0x5c>
 8007aca:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 8007ace:	f7ff ff75 	bl	80079bc <FRAMEWIN__CalcTitleHeight>
 8007ad2:	9903      	ldr	r1, [sp, #12]
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 8007ad8:	b118      	cbz	r0, 8007ae2 <FRAMEWIN__CalcPositions+0x70>
 8007ada:	9200      	str	r2, [sp, #0]
 8007adc:	f001 f84b 	bl	8008b76 <WM_GetWindowSizeY>
 8007ae0:	9a00      	ldr	r2, [sp, #0]
 8007ae2:	803a      	strh	r2, [r7, #0]
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	b2a9      	uxth	r1, r5
 8007ae8:	4416      	add	r6, r2
 8007aea:	440e      	add	r6, r1
 8007aec:	8078      	strh	r0, [r7, #2]
 8007aee:	4430      	add	r0, r6
 8007af0:	80f8      	strh	r0, [r7, #6]
 8007af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af6:	9801      	ldr	r0, [sp, #4]
 8007af8:	81fd      	strh	r5, [r7, #14]
 8007afa:	3901      	subs	r1, #1
 8007afc:	ebc9 090a 	rsb	r9, r9, sl
 8007b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b04:	ebc0 0308 	rsb	r3, r0, r8
 8007b08:	440a      	add	r2, r1
 8007b0a:	fa1f fb8b 	uxth.w	fp, fp
 8007b0e:	fa1f f989 	uxth.w	r9, r9
 8007b12:	817b      	strh	r3, [r7, #10]
 8007b14:	827a      	strh	r2, [r7, #18]
 8007b16:	f8a7 b004 	strh.w	fp, [r7, #4]
 8007b1a:	f8a7 9008 	strh.w	r9, [r7, #8]
 8007b1e:	f8a7 b00c 	strh.w	fp, [r7, #12]
 8007b22:	f8a7 9010 	strh.w	r9, [r7, #16]
 8007b26:	a803      	add	r0, sp, #12
 8007b28:	f007 fb46 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007b2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007b30:	9204      	str	r2, [sp, #16]
 8007b32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007b36:	9205      	str	r2, [sp, #20]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	aa05      	add	r2, sp, #20
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	f7ff ff4c 	bl	80079da <FRAMEWIN__GetTitleLimits>
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	81ba      	strh	r2, [r7, #12]
 8007b46:	9a05      	ldr	r2, [sp, #20]
 8007b48:	823a      	strh	r2, [r7, #16]
 8007b4a:	b007      	add	sp, #28
 8007b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b50 <FRAMEWIN_SetText>:
 8007b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b52:	460d      	mov	r5, r1
 8007b54:	4604      	mov	r4, r0
 8007b56:	b1c0      	cbz	r0, 8007b8a <FRAMEWIN_SetText+0x3a>
 8007b58:	f007 fb20 	bl	800f19c <GUI_ALLOC_LockH>
 8007b5c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007b5e:	9000      	str	r0, [sp, #0]
 8007b60:	4668      	mov	r0, sp
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	f007 fb28 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007b68:	a801      	add	r0, sp, #4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f005 f8de 	bl	800cd2c <GUI__SetText>
 8007b70:	b158      	cbz	r0, 8007b8a <FRAMEWIN_SetText+0x3a>
 8007b72:	4620      	mov	r0, r4
 8007b74:	f007 fb12 	bl	800f19c <GUI_ALLOC_LockH>
 8007b78:	9b01      	ldr	r3, [sp, #4]
 8007b7a:	9000      	str	r0, [sp, #0]
 8007b7c:	6703      	str	r3, [r0, #112]	; 0x70
 8007b7e:	4668      	mov	r0, sp
 8007b80:	f007 fb1a 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007b84:	4620      	mov	r0, r4
 8007b86:	f001 fd31 	bl	80095ec <WM_InvalidateWindow>
 8007b8a:	b003      	add	sp, #12
 8007b8c:	bd30      	pop	{r4, r5, pc}
	...

08007b90 <FRAMEWIN_CreateUser>:
 8007b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b94:	b08b      	sub	sp, #44	; 0x2c
 8007b96:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007b9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007b9c:	9400      	str	r4, [sp, #0]
 8007b9e:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 8007ba2:	9401      	str	r4, [sp, #4]
 8007ba4:	4c33      	ldr	r4, [pc, #204]	; (8007c74 <FRAMEWIN_CreateUser+0xe4>)
 8007ba6:	9402      	str	r4, [sp, #8]
 8007ba8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007baa:	3460      	adds	r4, #96	; 0x60
 8007bac:	9403      	str	r4, [sp, #12]
 8007bae:	f001 fd4b 	bl	8009648 <WM_CreateWindowAsChild>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d058      	beq.n	8007c6a <FRAMEWIN_CreateUser+0xda>
 8007bb8:	f007 faf0 	bl	800f19c <GUI_ALLOC_LockH>
 8007bbc:	4d2e      	ldr	r5, [pc, #184]	; (8007c78 <FRAMEWIN_CreateUser+0xe8>)
 8007bbe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007bc0:	9004      	str	r0, [sp, #16]
 8007bc2:	2230      	movs	r2, #48	; 0x30
 8007bc4:	f007 fd7c 	bl	800f6c0 <WIDGET__Init>
 8007bc8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bce:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 8007bd2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007be2:	4d26      	ldr	r5, [pc, #152]	; (8007c7c <FRAMEWIN_CreateUser+0xec>)
 8007be4:	e884 0003 	stmia.w	r4, {r0, r1}
 8007be8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8007bf0:	2400      	movs	r4, #0
 8007bf2:	682b      	ldr	r3, [r5, #0]
 8007bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8007bfa:	66fc      	str	r4, [r7, #108]	; 0x6c
 8007bfc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8007c00:	4640      	mov	r0, r8
 8007c02:	f007 fad9 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007c06:	4630      	mov	r0, r6
 8007c08:	a905      	add	r1, sp, #20
 8007c0a:	f7ff ff32 	bl	8007a72 <FRAMEWIN__CalcPositions>
 8007c0e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8007c12:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8007c16:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8007c1a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007c1e:	9403      	str	r4, [sp, #12]
 8007c20:	f241 7782 	movw	r7, #6018	; 0x1782
 8007c24:	1a5b      	subs	r3, r3, r1
 8007c26:	1a12      	subs	r2, r2, r0
 8007c28:	9701      	str	r7, [sp, #4]
 8007c2a:	4f15      	ldr	r7, [pc, #84]	; (8007c80 <FRAMEWIN_CreateUser+0xf0>)
 8007c2c:	9600      	str	r6, [sp, #0]
 8007c2e:	3201      	adds	r2, #1
 8007c30:	3301      	adds	r3, #1
 8007c32:	9702      	str	r7, [sp, #8]
 8007c34:	f001 fd08 	bl	8009648 <WM_CreateWindowAsChild>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4798      	blx	r3
 8007c42:	4630      	mov	r0, r6
 8007c44:	f007 faaa 	bl	800f19c <GUI_ALLOC_LockH>
 8007c48:	9004      	str	r0, [sp, #16]
 8007c4a:	6684      	str	r4, [r0, #104]	; 0x68
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	f007 fab3 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007c52:	f242 0304 	movw	r3, #8196	; 0x2004
 8007c56:	ea09 0303 	and.w	r3, r9, r3
 8007c5a:	b913      	cbnz	r3, 8007c62 <FRAMEWIN_CreateUser+0xd2>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 fcbf 	bl	80085e0 <WM_DisableMemdev>
 8007c62:	4630      	mov	r0, r6
 8007c64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c66:	f7ff ff73 	bl	8007b50 <FRAMEWIN_SetText>
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	b00b      	add	sp, #44	; 0x2c
 8007c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c72:	bf00      	nop
 8007c74:	08007ccf 	.word	0x08007ccf
 8007c78:	20000034 	.word	0x20000034
 8007c7c:	2000005c 	.word	0x2000005c
 8007c80:	080078d9 	.word	0x080078d9

08007c84 <FRAMEWIN_CreateIndirect>:
 8007c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8007c8c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8007c90:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8007c94:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8007c98:	9100      	str	r1, [sp, #0]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	9101      	str	r1, [sp, #4]
 8007c9e:	8a41      	ldrh	r1, [r0, #18]
 8007ca0:	9102      	str	r1, [sp, #8]
 8007ca2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	6844      	ldr	r4, [r0, #4]
 8007caa:	9404      	str	r4, [sp, #16]
 8007cac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007cae:	9405      	str	r4, [sp, #20]
 8007cb0:	6984      	ldr	r4, [r0, #24]
 8007cb2:	9406      	str	r4, [sp, #24]
 8007cb4:	eb0e 0002 	add.w	r0, lr, r2
 8007cb8:	18f9      	adds	r1, r7, r3
 8007cba:	4632      	mov	r2, r6
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	f7ff ff67 	bl	8007b90 <FRAMEWIN_CreateUser>
 8007cc2:	b009      	add	sp, #36	; 0x24
 8007cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cc6 <FRAMEWIN_SetActive>:
 8007cc6:	b108      	cbz	r0, 8007ccc <FRAMEWIN_SetActive+0x6>
 8007cc8:	f7ff bdea 	b.w	80078a0 <_SetActive>
 8007ccc:	4770      	bx	lr

08007cce <FRAMEWIN_Callback>:
 8007cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd2:	6844      	ldr	r4, [r0, #4]
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f007 fa5f 	bl	800f19c <GUI_ALLOC_LockH>
 8007cde:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007ce0:	9000      	str	r0, [sp, #0]
 8007ce2:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 8007ce6:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8007cea:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8007cee:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 8007cf2:	b113      	cbz	r3, 8007cfa <FRAMEWIN_Callback+0x2c>
 8007cf4:	f8d3 a000 	ldr.w	sl, [r3]
 8007cf8:	e000      	b.n	8007cfc <FRAMEWIN_Callback+0x2e>
 8007cfa:	469a      	mov	sl, r3
 8007cfc:	4668      	mov	r0, sp
 8007cfe:	f007 fa5b 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007d02:	b13f      	cbz	r7, 8007d14 <FRAMEWIN_Callback+0x46>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4628      	mov	r0, r5
 8007d08:	4798      	blx	r3
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f040 811d 	bne.w	8007f4a <FRAMEWIN_Callback+0x27c>
 8007d10:	683f      	ldr	r7, [r7, #0]
 8007d12:	e7f6      	b.n	8007d02 <FRAMEWIN_Callback+0x34>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	2b17      	cmp	r3, #23
 8007d18:	f000 808a 	beq.w	8007e30 <FRAMEWIN_Callback+0x162>
 8007d1c:	dc18      	bgt.n	8007d50 <FRAMEWIN_Callback+0x82>
 8007d1e:	2b0f      	cmp	r3, #15
 8007d20:	d043      	beq.n	8007daa <FRAMEWIN_Callback+0xdc>
 8007d22:	dc06      	bgt.n	8007d32 <FRAMEWIN_Callback+0x64>
 8007d24:	2b0b      	cmp	r3, #11
 8007d26:	f000 80fe 	beq.w	8007f26 <FRAMEWIN_Callback+0x258>
 8007d2a:	2b0d      	cmp	r3, #13
 8007d2c:	f000 80c0 	beq.w	8007eb0 <FRAMEWIN_Callback+0x1e2>
 8007d30:	e103      	b.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007d32:	2b11      	cmp	r3, #17
 8007d34:	d01b      	beq.n	8007d6e <FRAMEWIN_Callback+0xa0>
 8007d36:	2b14      	cmp	r3, #20
 8007d38:	f040 80ff 	bne.w	8007f3a <FRAMEWIN_Callback+0x26c>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	a901      	add	r1, sp, #4
 8007d40:	f7ff fe97 	bl	8007a72 <FRAMEWIN__CalcPositions>
 8007d44:	ab02      	add	r3, sp, #8
 8007d46:	cb03      	ldmia	r3!, {r0, r1}
 8007d48:	68ea      	ldr	r2, [r5, #12]
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	6051      	str	r1, [r2, #4]
 8007d4e:	e0fc      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007d50:	2b26      	cmp	r3, #38	; 0x26
 8007d52:	d070      	beq.n	8007e36 <FRAMEWIN_Callback+0x168>
 8007d54:	dc05      	bgt.n	8007d62 <FRAMEWIN_Callback+0x94>
 8007d56:	2b1e      	cmp	r3, #30
 8007d58:	d07b      	beq.n	8007e52 <FRAMEWIN_Callback+0x184>
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	f000 80b6 	beq.w	8007ecc <FRAMEWIN_Callback+0x1fe>
 8007d60:	e0eb      	b.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007d62:	2b2a      	cmp	r3, #42	; 0x2a
 8007d64:	d013      	beq.n	8007d8e <FRAMEWIN_Callback+0xc0>
 8007d66:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007d6a:	d025      	beq.n	8007db8 <FRAMEWIN_Callback+0xea>
 8007d6c:	e0e5      	b.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007d6e:	4620      	mov	r0, r4
 8007d70:	68ee      	ldr	r6, [r5, #12]
 8007d72:	f007 fa13 	bl	800f19c <GUI_ALLOC_LockH>
 8007d76:	9001      	str	r0, [sp, #4]
 8007d78:	8933      	ldrh	r3, [r6, #8]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d105      	bne.n	8007d8a <FRAMEWIN_Callback+0xbc>
 8007d7e:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d86:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007d8a:	a801      	add	r0, sp, #4
 8007d8c:	e0d3      	b.n	8007f36 <FRAMEWIN_Callback+0x268>
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f007 fa04 	bl	800f19c <GUI_ALLOC_LockH>
 8007d94:	68eb      	ldr	r3, [r5, #12]
 8007d96:	9000      	str	r0, [sp, #0]
 8007d98:	b113      	cbz	r3, 8007da0 <FRAMEWIN_Callback+0xd2>
 8007d9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8007d9e:	e002      	b.n	8007da6 <FRAMEWIN_Callback+0xd8>
 8007da0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007da4:	60eb      	str	r3, [r5, #12]
 8007da6:	4668      	mov	r0, sp
 8007da8:	e03f      	b.n	8007e2a <FRAMEWIN_Callback+0x15c>
 8007daa:	f1ba 0f00 	cmp.w	sl, #0
 8007dae:	f000 80c4 	beq.w	8007f3a <FRAMEWIN_Callback+0x26c>
 8007db2:	4620      	mov	r0, r4
 8007db4:	47d0      	blx	sl
 8007db6:	e0c0      	b.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007db8:	4620      	mov	r0, r4
 8007dba:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007dbe:	f007 f9ed 	bl	800f19c <GUI_ALLOC_LockH>
 8007dc2:	ae06      	add	r6, sp, #24
 8007dc4:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 8007dc8:	f846 0d14 	str.w	r0, [r6, #-20]!
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f007 f9f3 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007dd2:	68eb      	ldr	r3, [r5, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80b8 	beq.w	8007f4a <FRAMEWIN_Callback+0x27c>
 8007dda:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007dde:	b1cb      	cbz	r3, 8007e14 <FRAMEWIN_Callback+0x146>
 8007de0:	073b      	lsls	r3, r7, #28
 8007de2:	d402      	bmi.n	8007dea <FRAMEWIN_Callback+0x11c>
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fde5 	bl	80089b4 <WM_SetFocus>
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 feda 	bl	8008ba4 <WM_BringToTop>
 8007df0:	f407 7388 	and.w	r3, r7, #272	; 0x110
 8007df4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007df8:	f040 80a7 	bne.w	8007f4a <FRAMEWIN_Callback+0x27c>
 8007dfc:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007e00:	b2bb      	uxth	r3, r7
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f040 80a1 	bne.w	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	f000 fad9 	bl	80083c4 <WM_SetCaptureMove>
 8007e12:	e09a      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f007 f9c1 	bl	800f19c <GUI_ALLOC_LockH>
 8007e1a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8007e1e:	9001      	str	r0, [sp, #4]
 8007e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e24:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f007 f9c5 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007e2e:	e08c      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e30:	f8c5 800c 	str.w	r8, [r5, #12]
 8007e34:	e089      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e36:	68eb      	ldr	r3, [r5, #12]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	f040 8086 	bne.w	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e3e:	a906      	add	r1, sp, #24
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	2327      	movs	r3, #39	; 0x27
 8007e44:	f841 3d14 	str.w	r3, [r1, #-20]!
 8007e48:	68a8      	ldr	r0, [r5, #8]
 8007e4a:	9403      	str	r4, [sp, #12]
 8007e4c:	f000 f95e 	bl	800810c <WM__SendMessage>
 8007e50:	e07b      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007e52:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007e56:	f1b9 0f01 	cmp.w	r9, #1
 8007e5a:	d124      	bne.n	8007ea6 <FRAMEWIN_Callback+0x1d8>
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 fcf6 	bl	800884e <WM_IsWindow>
 8007e62:	b158      	cbz	r0, 8007e7c <FRAMEWIN_Callback+0x1ae>
 8007e64:	4630      	mov	r0, r6
 8007e66:	f000 fda5 	bl	80089b4 <WM_SetFocus>
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 fcc8 	bl	8008800 <WM_HasFocus>
 8007e70:	b188      	cbz	r0, 8007e96 <FRAMEWIN_Callback+0x1c8>
 8007e72:	4630      	mov	r0, r6
 8007e74:	4649      	mov	r1, r9
 8007e76:	f007 fc3d 	bl	800f6f4 <WIDGET_OrState>
 8007e7a:	e00c      	b.n	8007e96 <FRAMEWIN_Callback+0x1c8>
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	f000 fa73 	bl	8008368 <WM_SetFocusOnNextChild>
 8007e82:	4606      	mov	r6, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f007 f989 	bl	800f19c <GUI_ALLOC_LockH>
 8007e8a:	9000      	str	r0, [sp, #0]
 8007e8c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8007e90:	4668      	mov	r0, sp
 8007e92:	f007 f991 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007e96:	4620      	mov	r0, r4
 8007e98:	2101      	movs	r1, #1
 8007e9a:	f7ff ff14 	bl	8007cc6 <FRAMEWIN_SetActive>
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d153      	bne.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007ea2:	60ee      	str	r6, [r5, #12]
 8007ea4:	e051      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	f7ff ff0c 	bl	8007cc6 <FRAMEWIN_SetActive>
 8007eae:	e04c      	b.n	8007f4a <FRAMEWIN_Callback+0x27c>
 8007eb0:	f019 0f08 	tst.w	r9, #8
 8007eb4:	d141      	bne.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007eb6:	68eb      	ldr	r3, [r5, #12]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d03d      	beq.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007ebe:	7a1b      	ldrb	r3, [r3, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d03a      	beq.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fd75 	bl	80089b4 <WM_SetFocus>
 8007eca:	e036      	b.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007ecc:	68ee      	ldr	r6, [r5, #12]
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	d033      	beq.n	8007f3a <FRAMEWIN_Callback+0x26c>
 8007ed2:	6870      	ldr	r0, [r6, #4]
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f000 f8ed 	bl	80080b4 <WM__IsAncestorOrSelf>
 8007eda:	b180      	cbz	r0, 8007efe <FRAMEWIN_Callback+0x230>
 8007edc:	4620      	mov	r0, r4
 8007ede:	2101      	movs	r1, #1
 8007ee0:	f7ff fcde 	bl	80078a0 <_SetActive>
 8007ee4:	6870      	ldr	r0, [r6, #4]
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	f000 f8d3 	bl	8008092 <WM__IsAncestor>
 8007eec:	b328      	cbz	r0, 8007f3a <FRAMEWIN_Callback+0x26c>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f007 f954 	bl	800f19c <GUI_ALLOC_LockH>
 8007ef4:	ab06      	add	r3, sp, #24
 8007ef6:	6872      	ldr	r2, [r6, #4]
 8007ef8:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007efc:	e00f      	b.n	8007f1e <FRAMEWIN_Callback+0x250>
 8007efe:	4620      	mov	r0, r4
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7ff fccd 	bl	80078a0 <_SetActive>
 8007f06:	6830      	ldr	r0, [r6, #0]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f000 f8c2 	bl	8008092 <WM__IsAncestor>
 8007f0e:	b1a0      	cbz	r0, 8007f3a <FRAMEWIN_Callback+0x26c>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f007 f943 	bl	800f19c <GUI_ALLOC_LockH>
 8007f16:	ab06      	add	r3, sp, #24
 8007f18:	6832      	ldr	r2, [r6, #0]
 8007f1a:	f843 0d14 	str.w	r0, [r3, #-20]!
 8007f1e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8007f22:	4618      	mov	r0, r3
 8007f24:	e007      	b.n	8007f36 <FRAMEWIN_Callback+0x268>
 8007f26:	4620      	mov	r0, r4
 8007f28:	f007 f938 	bl	800f19c <GUI_ALLOC_LockH>
 8007f2c:	9000      	str	r0, [sp, #0]
 8007f2e:	3070      	adds	r0, #112	; 0x70
 8007f30:	f007 fb04 	bl	800f53c <GUI_ALLOC_FreePtr>
 8007f34:	4668      	mov	r0, sp
 8007f36:	f007 f93f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f007 fbef 	bl	800f720 <WIDGET_HandleActive>
 8007f42:	b110      	cbz	r0, 8007f4a <FRAMEWIN_Callback+0x27c>
 8007f44:	4628      	mov	r0, r5
 8007f46:	f001 ff71 	bl	8009e2c <WM_DefaultProc>
 8007f4a:	b006      	add	sp, #24
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f50 <FRAMEWIN_GetActive>:
 8007f50:	b513      	push	{r0, r1, r4, lr}
 8007f52:	4604      	mov	r4, r0
 8007f54:	b158      	cbz	r0, 8007f6e <FRAMEWIN_GetActive+0x1e>
 8007f56:	f007 f921 	bl	800f19c <GUI_ALLOC_LockH>
 8007f5a:	ab02      	add	r3, sp, #8
 8007f5c:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8007f60:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007f64:	4618      	mov	r0, r3
 8007f66:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8007f6a:	f007 f925 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	b002      	add	sp, #8
 8007f72:	bd10      	pop	{r4, pc}

08007f74 <GUI_CreateDialogBox>:
 8007f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f78:	4606      	mov	r6, r0
 8007f7a:	4688      	mov	r8, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	461d      	mov	r5, r3
 8007f80:	b913      	cbnz	r3, 8007f88 <GUI_CreateDialogBox+0x14>
 8007f82:	f000 fb57 	bl	8008634 <WM_GetDesktopWindow>
 8007f86:	4605      	mov	r5, r0
 8007f88:	9400      	str	r4, [sp, #0]
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	6834      	ldr	r4, [r6, #0]
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f92:	4629      	mov	r1, r5
 8007f94:	47a0      	blx	r4
 8007f96:	4604      	mov	r4, r0
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d039      	beq.n	8008010 <GUI_CreateDialogBox+0x9c>
 8007f9c:	f000 fb3c 	bl	8008618 <WM_GetClientWindow>
 8007fa0:	8a71      	ldrh	r1, [r6, #18]
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f007 fba5 	bl	800f6f4 <WIDGET_OrState>
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fd93 	bl	8008ad6 <WM_ShowWindow>
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fb6:	f000 fd8e 	bl	8008ad6 <WM_ShowWindow>
 8007fba:	f1b8 0f00 	cmp.w	r8, #0
 8007fbe:	dd0f      	ble.n	8007fe0 <GUI_CreateDialogBox+0x6c>
 8007fc0:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	9200      	str	r2, [sp, #0]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	4613      	mov	r3, r2
 8007fce:	47e0      	blx	ip
 8007fd0:	4681      	mov	r9, r0
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1ed      	bne.n	8007fb2 <GUI_CreateDialogBox+0x3e>
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f001 fbe0 	bl	800979c <WM_DeleteWindow>
 8007fdc:	4648      	mov	r0, r9
 8007fde:	e018      	b.n	8008012 <GUI_CreateDialogBox+0x9e>
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	211d      	movs	r1, #29
 8007fe4:	f000 fccb 	bl	800897e <WM_SendMessageNoPara>
 8007fe8:	1c6b      	adds	r3, r5, #1
 8007fea:	d011      	beq.n	8008010 <GUI_CreateDialogBox+0x9c>
 8007fec:	f000 fb36 	bl	800865c <WM_GetFocusedWindow>
 8007ff0:	b150      	cbz	r0, 8008008 <GUI_CreateDialogBox+0x94>
 8007ff2:	f007 f8c9 	bl	800f188 <GUI_ALLOC_h2p>
 8007ff6:	6980      	ldr	r0, [r0, #24]
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d00a      	beq.n	8008012 <GUI_CreateDialogBox+0x9e>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1f8      	bne.n	8007ff2 <GUI_CreateDialogBox+0x7e>
 8008000:	4620      	mov	r0, r4
 8008002:	f000 f9b1 	bl	8008368 <WM_SetFocusOnNextChild>
 8008006:	e003      	b.n	8008010 <GUI_CreateDialogBox+0x9c>
 8008008:	42a5      	cmp	r5, r4
 800800a:	d1f9      	bne.n	8008000 <GUI_CreateDialogBox+0x8c>
 800800c:	4628      	mov	r0, r5
 800800e:	e000      	b.n	8008012 <GUI_CreateDialogBox+0x9e>
 8008010:	4620      	mov	r0, r4
 8008012:	b003      	add	sp, #12
 8008014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008018 <WM__ForEachDesc>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460d      	mov	r5, r1
 800801c:	4616      	mov	r6, r2
 800801e:	f007 f8b3 	bl	800f188 <GUI_ALLOC_h2p>
 8008022:	69c4      	ldr	r4, [r0, #28]
 8008024:	b164      	cbz	r4, 8008040 <WM__ForEachDesc+0x28>
 8008026:	4620      	mov	r0, r4
 8008028:	4631      	mov	r1, r6
 800802a:	47a8      	blx	r5
 800802c:	4620      	mov	r0, r4
 800802e:	4629      	mov	r1, r5
 8008030:	4632      	mov	r2, r6
 8008032:	f7ff fff1 	bl	8008018 <WM__ForEachDesc>
 8008036:	4620      	mov	r0, r4
 8008038:	f007 f8a6 	bl	800f188 <GUI_ALLOC_h2p>
 800803c:	6a04      	ldr	r4, [r0, #32]
 800803e:	e7f1      	b.n	8008024 <WM__ForEachDesc+0xc>
 8008040:	bd70      	pop	{r4, r5, r6, pc}

08008042 <WM__GetFirstSibling>:
 8008042:	b508      	push	{r3, lr}
 8008044:	f000 fb77 	bl	8008736 <WM_GetParent>
 8008048:	b118      	cbz	r0, 8008052 <WM__GetFirstSibling+0x10>
 800804a:	f007 f89d 	bl	800f188 <GUI_ALLOC_h2p>
 800804e:	69c0      	ldr	r0, [r0, #28]
 8008050:	bd08      	pop	{r3, pc}
 8008052:	bd08      	pop	{r3, pc}

08008054 <WM__GetLastSibling>:
 8008054:	b510      	push	{r4, lr}
 8008056:	4604      	mov	r4, r0
 8008058:	b130      	cbz	r0, 8008068 <WM__GetLastSibling+0x14>
 800805a:	4620      	mov	r0, r4
 800805c:	f007 f894 	bl	800f188 <GUI_ALLOC_h2p>
 8008060:	6a03      	ldr	r3, [r0, #32]
 8008062:	b10b      	cbz	r3, 8008068 <WM__GetLastSibling+0x14>
 8008064:	461c      	mov	r4, r3
 8008066:	e7f8      	b.n	800805a <WM__GetLastSibling+0x6>
 8008068:	4620      	mov	r0, r4
 800806a:	bd10      	pop	{r4, pc}

0800806c <WM__GetPrevSibling>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4605      	mov	r5, r0
 8008070:	f7ff ffe7 	bl	8008042 <WM__GetFirstSibling>
 8008074:	4604      	mov	r4, r0
 8008076:	b154      	cbz	r4, 800808e <WM__GetPrevSibling+0x22>
 8008078:	42ac      	cmp	r4, r5
 800807a:	d007      	beq.n	800808c <WM__GetPrevSibling+0x20>
 800807c:	4620      	mov	r0, r4
 800807e:	f007 f883 	bl	800f188 <GUI_ALLOC_h2p>
 8008082:	6a03      	ldr	r3, [r0, #32]
 8008084:	42ab      	cmp	r3, r5
 8008086:	d002      	beq.n	800808e <WM__GetPrevSibling+0x22>
 8008088:	461c      	mov	r4, r3
 800808a:	e7f4      	b.n	8008076 <WM__GetPrevSibling+0xa>
 800808c:	2400      	movs	r4, #0
 800808e:	4620      	mov	r0, r4
 8008090:	bd38      	pop	{r3, r4, r5, pc}

08008092 <WM__IsAncestor>:
 8008092:	b510      	push	{r4, lr}
 8008094:	460c      	mov	r4, r1
 8008096:	b908      	cbnz	r0, 800809c <WM__IsAncestor+0xa>
 8008098:	2000      	movs	r0, #0
 800809a:	bd10      	pop	{r4, pc}
 800809c:	2900      	cmp	r1, #0
 800809e:	d0fb      	beq.n	8008098 <WM__IsAncestor+0x6>
 80080a0:	f007 f872 	bl	800f188 <GUI_ALLOC_h2p>
 80080a4:	6980      	ldr	r0, [r0, #24]
 80080a6:	42a0      	cmp	r0, r4
 80080a8:	d002      	beq.n	80080b0 <WM__IsAncestor+0x1e>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1f8      	bne.n	80080a0 <WM__IsAncestor+0xe>
 80080ae:	e7f3      	b.n	8008098 <WM__IsAncestor+0x6>
 80080b0:	2001      	movs	r0, #1
 80080b2:	bd10      	pop	{r4, pc}

080080b4 <WM__IsAncestorOrSelf>:
 80080b4:	4288      	cmp	r0, r1
 80080b6:	d001      	beq.n	80080bc <WM__IsAncestorOrSelf+0x8>
 80080b8:	f7ff bfeb 	b.w	8008092 <WM__IsAncestor>
 80080bc:	2001      	movs	r0, #1
 80080be:	4770      	bx	lr

080080c0 <WM__IsChild>:
 80080c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080c2:	460d      	mov	r5, r1
 80080c4:	4604      	mov	r4, r0
 80080c6:	b160      	cbz	r0, 80080e2 <WM__IsChild+0x22>
 80080c8:	f007 f868 	bl	800f19c <GUI_ALLOC_LockH>
 80080cc:	9001      	str	r0, [sp, #4]
 80080ce:	b120      	cbz	r0, 80080da <WM__IsChild+0x1a>
 80080d0:	6984      	ldr	r4, [r0, #24]
 80080d2:	1b63      	subs	r3, r4, r5
 80080d4:	425c      	negs	r4, r3
 80080d6:	415c      	adcs	r4, r3
 80080d8:	e000      	b.n	80080dc <WM__IsChild+0x1c>
 80080da:	4604      	mov	r4, r0
 80080dc:	a801      	add	r0, sp, #4
 80080de:	f007 f86b 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80080e2:	4620      	mov	r0, r4
 80080e4:	b003      	add	sp, #12
 80080e6:	bd30      	pop	{r4, r5, pc}

080080e8 <WM__GetFocusedChild>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <WM__GetFocusedChild+0x1c>)
 80080ec:	4c06      	ldr	r4, [pc, #24]	; (8008108 <WM__GetFocusedChild+0x20>)
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	4601      	mov	r1, r0
 80080f2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80080f6:	f7ff ffe3 	bl	80080c0 <WM__IsChild>
 80080fa:	b110      	cbz	r0, 8008102 <WM__GetFocusedChild+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20005654 	.word	0x20005654
 8008108:	20005644 	.word	0x20005644

0800810c <WM__SendMessage>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4c0d      	ldr	r4, [pc, #52]	; (8008144 <WM__SendMessage+0x38>)
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	2b13      	cmp	r3, #19
 8008114:	4606      	mov	r6, r0
 8008116:	460d      	mov	r5, r1
 8008118:	dc12      	bgt.n	8008140 <WM__SendMessage+0x34>
 800811a:	f007 f835 	bl	800f188 <GUI_ALLOC_h2p>
 800811e:	6903      	ldr	r3, [r0, #16]
 8008120:	606e      	str	r6, [r5, #4]
 8008122:	b143      	cbz	r3, 8008136 <WM__SendMessage+0x2a>
 8008124:	6822      	ldr	r2, [r4, #0]
 8008126:	4628      	mov	r0, r5
 8008128:	3201      	adds	r2, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	4798      	blx	r3
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	4628      	mov	r0, r5
 8008138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800813c:	f001 be76 	b.w	8009e2c <WM_DefaultProc>
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	bf00      	nop
 8008144:	2000543c 	.word	0x2000543c

08008148 <WM__SendMessageNoPara>:
 8008148:	b530      	push	{r4, r5, lr}
 800814a:	b085      	sub	sp, #20
 800814c:	4604      	mov	r4, r0
 800814e:	2210      	movs	r2, #16
 8008150:	460d      	mov	r5, r1
 8008152:	4668      	mov	r0, sp
 8008154:	2100      	movs	r1, #0
 8008156:	f00a f9dd 	bl	8012514 <memset>
 800815a:	4620      	mov	r0, r4
 800815c:	f007 f814 	bl	800f188 <GUI_ALLOC_h2p>
 8008160:	6903      	ldr	r3, [r0, #16]
 8008162:	b11b      	cbz	r3, 800816c <WM__SendMessageNoPara+0x24>
 8008164:	9401      	str	r4, [sp, #4]
 8008166:	9500      	str	r5, [sp, #0]
 8008168:	4668      	mov	r0, sp
 800816a:	4798      	blx	r3
 800816c:	b005      	add	sp, #20
 800816e:	bd30      	pop	{r4, r5, pc}

08008170 <WM__UpdateChildPositions>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	b087      	sub	sp, #28
 8008176:	69c4      	ldr	r4, [r0, #28]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	468a      	mov	sl, r1
 800817c:	4693      	mov	fp, r2
 800817e:	2c00      	cmp	r4, #0
 8008180:	d06d      	beq.n	800825e <WM__UpdateChildPositions+0xee>
 8008182:	4620      	mov	r0, r4
 8008184:	f007 f80a 	bl	800f19c <GUI_ALLOC_LockH>
 8008188:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800818a:	9005      	str	r0, [sp, #20]
 800818c:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8008190:	2b80      	cmp	r3, #128	; 0x80
 8008192:	f8b0 8000 	ldrh.w	r8, [r0]
 8008196:	8842      	ldrh	r2, [r0, #2]
 8008198:	8886      	ldrh	r6, [r0, #4]
 800819a:	88c5      	ldrh	r5, [r0, #6]
 800819c:	d008      	beq.n	80081b0 <WM__UpdateChildPositions+0x40>
 800819e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081a2:	d108      	bne.n	80081b6 <WM__UpdateChildPositions+0x46>
 80081a4:	eb08 090a 	add.w	r9, r8, sl
 80081a8:	fa1f f989 	uxth.w	r9, r9
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	e008      	b.n	80081c2 <WM__UpdateChildPositions+0x52>
 80081b0:	9803      	ldr	r0, [sp, #12]
 80081b2:	b283      	uxth	r3, r0
 80081b4:	e001      	b.n	80081ba <WM__UpdateChildPositions+0x4a>
 80081b6:	fa1f f38a 	uxth.w	r3, sl
 80081ba:	eb03 0908 	add.w	r9, r3, r8
 80081be:	fa1f f989 	uxth.w	r9, r9
 80081c2:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 80081c6:	4433      	add	r3, r6
 80081c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	d008      	beq.n	80081e2 <WM__UpdateChildPositions+0x72>
 80081d0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80081d4:	d108      	bne.n	80081e8 <WM__UpdateChildPositions+0x78>
 80081d6:	eb02 0c0b 	add.w	ip, r2, fp
 80081da:	fa1f fc8c 	uxth.w	ip, ip
 80081de:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80081e0:	e008      	b.n	80081f4 <WM__UpdateChildPositions+0x84>
 80081e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80081e4:	b28f      	uxth	r7, r1
 80081e6:	e001      	b.n	80081ec <WM__UpdateChildPositions+0x7c>
 80081e8:	fa1f f78b 	uxth.w	r7, fp
 80081ec:	eb07 0c02 	add.w	ip, r7, r2
 80081f0:	fa1f fc8c 	uxth.w	ip, ip
 80081f4:	fa0f f989 	sxth.w	r9, r9
 80081f8:	fa0f f888 	sxth.w	r8, r8
 80081fc:	b212      	sxth	r2, r2
 80081fe:	442f      	add	r7, r5
 8008200:	fa0f fc8c 	sxth.w	ip, ip
 8008204:	ebb9 0108 	subs.w	r1, r9, r8
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	b2bf      	uxth	r7, r7
 800820c:	ebc2 020c 	rsb	r2, r2, ip
 8008210:	d100      	bne.n	8008214 <WM__UpdateChildPositions+0xa4>
 8008212:	b142      	cbz	r2, 8008226 <WM__UpdateChildPositions+0xb6>
 8008214:	4620      	mov	r0, r4
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	f8cd c000 	str.w	ip, [sp]
 800821c:	f000 f9de 	bl	80085dc <WM_MoveWindow>
 8008220:	f8dd c000 	ldr.w	ip, [sp]
 8008224:	9b01      	ldr	r3, [sp, #4]
 8008226:	b21b      	sxth	r3, r3
 8008228:	ebc9 0903 	rsb	r9, r9, r3
 800822c:	b236      	sxth	r6, r6
 800822e:	9b02      	ldr	r3, [sp, #8]
 8008230:	ebc6 0808 	rsb	r8, r6, r8
 8008234:	b23f      	sxth	r7, r7
 8008236:	b22d      	sxth	r5, r5
 8008238:	ebcc 0c07 	rsb	ip, ip, r7
 800823c:	1b5d      	subs	r5, r3, r5
 800823e:	eb19 0108 	adds.w	r1, r9, r8
 8008242:	eb0c 0205 	add.w	r2, ip, r5
 8008246:	d100      	bne.n	800824a <WM__UpdateChildPositions+0xda>
 8008248:	b112      	cbz	r2, 8008250 <WM__UpdateChildPositions+0xe0>
 800824a:	4620      	mov	r0, r4
 800824c:	f000 fb1c 	bl	8008888 <WM_ResizeWindow>
 8008250:	a806      	add	r0, sp, #24
 8008252:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008256:	6a1c      	ldr	r4, [r3, #32]
 8008258:	f006 ffae 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800825c:	e78f      	b.n	800817e <WM__UpdateChildPositions+0xe>
 800825e:	b007      	add	sp, #28
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008264 <WM__AddCriticalHandle>:
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <WM__AddCriticalHandle+0xc>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	6002      	str	r2, [r0, #0]
 800826a:	6018      	str	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20005670 	.word	0x20005670

08008274 <WM__GetClientRectEx>:
 8008274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008276:	460d      	mov	r5, r1
 8008278:	b158      	cbz	r0, 8008292 <WM__GetClientRectEx+0x1e>
 800827a:	b151      	cbz	r1, 8008292 <WM__GetClientRectEx+0x1e>
 800827c:	f006 ff8e 	bl	800f19c <GUI_ALLOC_LockH>
 8008280:	ac02      	add	r4, sp, #8
 8008282:	4629      	mov	r1, r5
 8008284:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008288:	f001 f866 	bl	8009358 <WM__GetClientRectWin>
 800828c:	4620      	mov	r0, r4
 800828e:	f006 ff93 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008292:	b003      	add	sp, #12
 8008294:	bd30      	pop	{r4, r5, pc}
	...

08008298 <WM_SetHasTrans>:
 8008298:	b513      	push	{r0, r1, r4, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	b1b8      	cbz	r0, 80082ce <WM_SetHasTrans+0x36>
 800829e:	f006 ff7d 	bl	800f19c <GUI_ALLOC_LockH>
 80082a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082a4:	9001      	str	r0, [sp, #4]
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d40e      	bmi.n	80082c8 <WM_SetHasTrans+0x30>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fc28 	bl	8008b00 <WM_ValidateWindow>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <WM_SetHasTrans+0x3c>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4620      	mov	r0, r4
 80082c0:	3201      	adds	r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f001 f992 	bl	80095ec <WM_InvalidateWindow>
 80082c8:	a801      	add	r0, sp, #4
 80082ca:	f006 ff75 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80082ce:	b002      	add	sp, #8
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	20005684 	.word	0x20005684

080082d8 <WM_GetHasTrans>:
 80082d8:	b508      	push	{r3, lr}
 80082da:	b128      	cbz	r0, 80082e8 <WM_GetHasTrans+0x10>
 80082dc:	f006 ff54 	bl	800f188 <GUI_ALLOC_h2p>
 80082e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80082e2:	f000 0001 	and.w	r0, r0, #1
 80082e6:	bd08      	pop	{r3, pc}
 80082e8:	bd08      	pop	{r3, pc}

080082ea <_GetPrevChild>:
 80082ea:	b510      	push	{r4, lr}
 80082ec:	4604      	mov	r4, r0
 80082ee:	b918      	cbnz	r0, 80082f8 <_GetPrevChild+0xe>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f7ff feaf 	bl	8008054 <WM__GetLastSibling>
 80082f6:	e003      	b.n	8008300 <_GetPrevChild+0x16>
 80082f8:	f7ff feb8 	bl	800806c <WM__GetPrevSibling>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d0f7      	beq.n	80082f0 <_GetPrevChild+0x6>
 8008300:	42a0      	cmp	r0, r4
 8008302:	bf08      	it	eq
 8008304:	2000      	moveq	r0, #0
 8008306:	bd10      	pop	{r4, pc}

08008308 <WM_SetFocusOnPrevChild>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	b1b0      	cbz	r0, 800833c <WM_SetFocusOnPrevChild+0x34>
 800830e:	f7ff feeb 	bl	80080e8 <WM__GetFocusedChild>
 8008312:	f7ff ffea 	bl	80082ea <_GetPrevChild>
 8008316:	4605      	mov	r5, r0
 8008318:	4604      	mov	r4, r0
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fa7e 	bl	800881c <WM_IsFocusable>
 8008320:	b930      	cbnz	r0, 8008330 <WM_SetFocusOnPrevChild+0x28>
 8008322:	b12c      	cbz	r4, 8008330 <WM_SetFocusOnPrevChild+0x28>
 8008324:	4620      	mov	r0, r4
 8008326:	f7ff ffe0 	bl	80082ea <_GetPrevChild>
 800832a:	42a8      	cmp	r0, r5
 800832c:	4604      	mov	r4, r0
 800832e:	d1f4      	bne.n	800831a <WM_SetFocusOnPrevChild+0x12>
 8008330:	4620      	mov	r0, r4
 8008332:	f000 fb3f 	bl	80089b4 <WM_SetFocus>
 8008336:	2800      	cmp	r0, #0
 8008338:	bf18      	it	ne
 800833a:	2400      	movne	r4, #0
 800833c:	4620      	mov	r0, r4
 800833e:	bd38      	pop	{r3, r4, r5, pc}

08008340 <_GetNextChild>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4605      	mov	r5, r0
 8008344:	460c      	mov	r4, r1
 8008346:	b921      	cbnz	r1, 8008352 <_GetNextChild+0x12>
 8008348:	4628      	mov	r0, r5
 800834a:	f006 ff1d 	bl	800f188 <GUI_ALLOC_h2p>
 800834e:	69c0      	ldr	r0, [r0, #28]
 8008350:	e005      	b.n	800835e <_GetNextChild+0x1e>
 8008352:	4608      	mov	r0, r1
 8008354:	f006 ff18 	bl	800f188 <GUI_ALLOC_h2p>
 8008358:	6a00      	ldr	r0, [r0, #32]
 800835a:	2800      	cmp	r0, #0
 800835c:	d0f4      	beq.n	8008348 <_GetNextChild+0x8>
 800835e:	42a0      	cmp	r0, r4
 8008360:	bf08      	it	eq
 8008362:	2000      	moveq	r0, #0
 8008364:	bd38      	pop	{r3, r4, r5, pc}
	...

08008368 <WM_SetFocusOnNextChild>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4605      	mov	r5, r0
 800836c:	b328      	cbz	r0, 80083ba <WM_SetFocusOnNextChild+0x52>
 800836e:	f7ff febb 	bl	80080e8 <WM__GetFocusedChild>
 8008372:	4601      	mov	r1, r0
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff ffe3 	bl	8008340 <_GetNextChild>
 800837a:	4606      	mov	r6, r0
 800837c:	4604      	mov	r4, r0
 800837e:	4620      	mov	r0, r4
 8008380:	f000 fa4c 	bl	800881c <WM_IsFocusable>
 8008384:	b938      	cbnz	r0, 8008396 <WM_SetFocusOnNextChild+0x2e>
 8008386:	b13c      	cbz	r4, 8008398 <WM_SetFocusOnNextChild+0x30>
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f7ff ffd8 	bl	8008340 <_GetNextChild>
 8008390:	42b0      	cmp	r0, r6
 8008392:	4604      	mov	r4, r0
 8008394:	d1f3      	bne.n	800837e <WM_SetFocusOnNextChild+0x16>
 8008396:	b90c      	cbnz	r4, 800839c <WM_SetFocusOnNextChild+0x34>
 8008398:	2400      	movs	r4, #0
 800839a:	e00f      	b.n	80083bc <WM_SetFocusOnNextChild+0x54>
 800839c:	4d08      	ldr	r5, [pc, #32]	; (80083c0 <WM_SetFocusOnNextChild+0x58>)
 800839e:	4620      	mov	r0, r4
 80083a0:	682e      	ldr	r6, [r5, #0]
 80083a2:	f000 ffe5 	bl	8009370 <WM__GetTopLevelLayer>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d008      	beq.n	80083bc <WM_SetFocusOnNextChild+0x54>
 80083aa:	6028      	str	r0, [r5, #0]
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 fb01 	bl	80089b4 <WM_SetFocus>
 80083b2:	602e      	str	r6, [r5, #0]
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1ef      	bne.n	8008398 <WM_SetFocusOnNextChild+0x30>
 80083b8:	e000      	b.n	80083bc <WM_SetFocusOnNextChild+0x54>
 80083ba:	4604      	mov	r4, r0
 80083bc:	4620      	mov	r0, r4
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	20005654 	.word	0x20005654

080083c4 <WM_SetCaptureMove>:
 80083c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083c8:	b085      	sub	sp, #20
 80083ca:	4604      	mov	r4, r0
 80083cc:	460d      	mov	r5, r1
 80083ce:	4691      	mov	r9, r2
 80083d0:	4698      	mov	r8, r3
 80083d2:	f000 fa07 	bl	80087e4 <WM_HasCaptured>
 80083d6:	4e21      	ldr	r6, [pc, #132]	; (800845c <WM_SetCaptureMove+0x98>)
 80083d8:	b940      	cbnz	r0, 80083ec <WM_SetCaptureMove+0x28>
 80083da:	4620      	mov	r0, r4
 80083dc:	2101      	movs	r1, #1
 80083de:	f000 f859 	bl	8008494 <WM_SetCapture>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	8033      	strh	r3, [r6, #0]
 80083e6:	686b      	ldr	r3, [r5, #4]
 80083e8:	8073      	strh	r3, [r6, #2]
 80083ea:	e034      	b.n	8008456 <WM_SetCaptureMove+0x92>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	f9b6 7000 	ldrsh.w	r7, [r6]
 80083f2:	686d      	ldr	r5, [r5, #4]
 80083f4:	1bdf      	subs	r7, r3, r7
 80083f6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80083fa:	4620      	mov	r0, r4
 80083fc:	1aed      	subs	r5, r5, r3
 80083fe:	f1b9 0f00 	cmp.w	r9, #0
 8008402:	d102      	bne.n	800840a <WM_SetCaptureMove+0x46>
 8008404:	f1b8 0f00 	cmp.w	r8, #0
 8008408:	d021      	beq.n	800844e <WM_SetCaptureMove+0x8a>
 800840a:	4669      	mov	r1, sp
 800840c:	f000 f9de 	bl	80087cc <WM_GetWindowRectEx>
 8008410:	f1b8 0f00 	cmp.w	r8, #0
 8008414:	d005      	beq.n	8008422 <WM_SetCaptureMove+0x5e>
 8008416:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800841a:	3b01      	subs	r3, #1
 800841c:	4498      	add	r8, r3
 800841e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8008422:	4620      	mov	r0, r4
 8008424:	f000 f987 	bl	8008736 <WM_GetParent>
 8008428:	a902      	add	r1, sp, #8
 800842a:	f000 f9cf 	bl	80087cc <WM_GetWindowRectEx>
 800842e:	4668      	mov	r0, sp
 8008430:	4639      	mov	r1, r7
 8008432:	462a      	mov	r2, r5
 8008434:	f005 fbd5 	bl	800dbe2 <GUI_MoveRect>
 8008438:	a802      	add	r0, sp, #8
 800843a:	4601      	mov	r1, r0
 800843c:	464a      	mov	r2, r9
 800843e:	f004 fc20 	bl	800cc82 <GUI__ReduceRect>
 8008442:	4668      	mov	r0, sp
 8008444:	a902      	add	r1, sp, #8
 8008446:	f005 fc17 	bl	800dc78 <GUI_RectsIntersect>
 800844a:	b120      	cbz	r0, 8008456 <WM_SetCaptureMove+0x92>
 800844c:	4620      	mov	r0, r4
 800844e:	4639      	mov	r1, r7
 8008450:	462a      	mov	r2, r5
 8008452:	f000 f8c3 	bl	80085dc <WM_MoveWindow>
 8008456:	b005      	add	sp, #20
 8008458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800845c:	20005440 	.word	0x20005440

08008460 <WM__ReleaseCapture>:
 8008460:	b530      	push	{r4, r5, lr}
 8008462:	4d0a      	ldr	r5, [pc, #40]	; (800848c <WM__ReleaseCapture+0x2c>)
 8008464:	4c0a      	ldr	r4, [pc, #40]	; (8008490 <WM__ReleaseCapture+0x30>)
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800846c:	b085      	sub	sp, #20
 800846e:	b150      	cbz	r0, 8008486 <WM__ReleaseCapture+0x26>
 8008470:	a904      	add	r1, sp, #16
 8008472:	2318      	movs	r3, #24
 8008474:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008478:	4669      	mov	r1, sp
 800847a:	f7ff fe47 	bl	800810c <WM__SendMessage>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	2200      	movs	r2, #0
 8008482:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8008486:	b005      	add	sp, #20
 8008488:	bd30      	pop	{r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20005654 	.word	0x20005654
 8008490:	20005678 	.word	0x20005678

08008494 <WM_SetCapture>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <WM_SetCapture+0x28>)
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <WM_SetCapture+0x2c>)
 800849a:	4604      	mov	r4, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	460f      	mov	r7, r1
 80084a0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80084a4:	42a1      	cmp	r1, r4
 80084a6:	4615      	mov	r5, r2
 80084a8:	461e      	mov	r6, r3
 80084aa:	d001      	beq.n	80084b0 <WM_SetCapture+0x1c>
 80084ac:	f7ff ffd8 	bl	8008460 <WM__ReleaseCapture>
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 80084b6:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <WM_SetCapture+0x30>)
 80084b8:	701f      	strb	r7, [r3, #0]
 80084ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084bc:	20005654 	.word	0x20005654
 80084c0:	20005678 	.word	0x20005678
 80084c4:	20005658 	.word	0x20005658

080084c8 <_MoveDescendents>:
 80084c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084cc:	b088      	sub	sp, #32
 80084ce:	4606      	mov	r6, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	4615      	mov	r5, r2
 80084d4:	a804      	add	r0, sp, #16
 80084d6:	2100      	movs	r1, #0
 80084d8:	2210      	movs	r2, #16
 80084da:	f00a f81b 	bl	8012514 <memset>
 80084de:	b336      	cbz	r6, 800852e <_MoveDescendents+0x66>
 80084e0:	4630      	mov	r0, r6
 80084e2:	f006 fe5b 	bl	800f19c <GUI_ALLOC_LockH>
 80084e6:	4621      	mov	r1, r4
 80084e8:	462a      	mov	r2, r5
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	f005 fb79 	bl	800dbe2 <GUI_MoveRect>
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	4621      	mov	r1, r4
 80084f4:	3008      	adds	r0, #8
 80084f6:	462a      	mov	r2, r5
 80084f8:	f005 fb73 	bl	800dbe2 <GUI_MoveRect>
 80084fc:	a808      	add	r0, sp, #32
 80084fe:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8008502:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8008506:	6a17      	ldr	r7, [r2, #32]
 8008508:	f006 fe56 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800850c:	4640      	mov	r0, r8
 800850e:	4621      	mov	r1, r4
 8008510:	462a      	mov	r2, r5
 8008512:	f7ff ffd9 	bl	80084c8 <_MoveDescendents>
 8008516:	2303      	movs	r3, #3
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	4630      	mov	r0, r6
 800851c:	ab02      	add	r3, sp, #8
 800851e:	a904      	add	r1, sp, #16
 8008520:	9307      	str	r3, [sp, #28]
 8008522:	9402      	str	r4, [sp, #8]
 8008524:	9503      	str	r5, [sp, #12]
 8008526:	463e      	mov	r6, r7
 8008528:	f7ff fdf0 	bl	800810c <WM__SendMessage>
 800852c:	e7d7      	b.n	80084de <_MoveDescendents+0x16>
 800852e:	b008      	add	sp, #32
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008534 <WM__MoveWindow>:
 8008534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008538:	b08b      	sub	sp, #44	; 0x2c
 800853a:	4606      	mov	r6, r0
 800853c:	460d      	mov	r5, r1
 800853e:	4614      	mov	r4, r2
 8008540:	a806      	add	r0, sp, #24
 8008542:	2100      	movs	r1, #0
 8008544:	2210      	movs	r2, #16
 8008546:	f009 ffe5 	bl	8012514 <memset>
 800854a:	2e00      	cmp	r6, #0
 800854c:	d043      	beq.n	80085d6 <WM__MoveWindow+0xa2>
 800854e:	b90d      	cbnz	r5, 8008554 <WM__MoveWindow+0x20>
 8008550:	2c00      	cmp	r4, #0
 8008552:	d040      	beq.n	80085d6 <WM__MoveWindow+0xa2>
 8008554:	4630      	mov	r0, r6
 8008556:	f006 fe21 	bl	800f19c <GUI_ALLOC_LockH>
 800855a:	4603      	mov	r3, r0
 800855c:	9001      	str	r0, [sp, #4]
 800855e:	c803      	ldmia	r0, {r0, r1}
 8008560:	f10d 0808 	add.w	r8, sp, #8
 8008564:	e888 0003 	stmia.w	r8, {r0, r1}
 8008568:	4622      	mov	r2, r4
 800856a:	4618      	mov	r0, r3
 800856c:	4629      	mov	r1, r5
 800856e:	f005 fb38 	bl	800dbe2 <GUI_MoveRect>
 8008572:	9801      	ldr	r0, [sp, #4]
 8008574:	af0a      	add	r7, sp, #40	; 0x28
 8008576:	4629      	mov	r1, r5
 8008578:	4622      	mov	r2, r4
 800857a:	3008      	adds	r0, #8
 800857c:	f005 fb31 	bl	800dbe2 <GUI_MoveRect>
 8008580:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8008584:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8008588:	4638      	mov	r0, r7
 800858a:	f006 fe15 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800858e:	4622      	mov	r2, r4
 8008590:	4648      	mov	r0, r9
 8008592:	4629      	mov	r1, r5
 8008594:	f7ff ff98 	bl	80084c8 <_MoveDescendents>
 8008598:	4630      	mov	r0, r6
 800859a:	f006 fdff 	bl	800f19c <GUI_ALLOC_LockH>
 800859e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80085a0:	9001      	str	r0, [sp, #4]
 80085a2:	0792      	lsls	r2, r2, #30
 80085a4:	d50a      	bpl.n	80085bc <WM__MoveWindow+0x88>
 80085a6:	6981      	ldr	r1, [r0, #24]
 80085a8:	b141      	cbz	r1, 80085bc <WM__MoveWindow+0x88>
 80085aa:	6a02      	ldr	r2, [r0, #32]
 80085ac:	f000 ffb5 	bl	800951a <WM__InvalidateParent>
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	4640      	mov	r0, r8
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	f000 ffaf 	bl	800951a <WM__InvalidateParent>
 80085bc:	4638      	mov	r0, r7
 80085be:	f006 fdfb 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80085c2:	2303      	movs	r3, #3
 80085c4:	9306      	str	r3, [sp, #24]
 80085c6:	4630      	mov	r0, r6
 80085c8:	ab04      	add	r3, sp, #16
 80085ca:	a906      	add	r1, sp, #24
 80085cc:	9309      	str	r3, [sp, #36]	; 0x24
 80085ce:	9504      	str	r5, [sp, #16]
 80085d0:	9405      	str	r4, [sp, #20]
 80085d2:	f7ff fd9b 	bl	800810c <WM__SendMessage>
 80085d6:	b00b      	add	sp, #44	; 0x2c
 80085d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080085dc <WM_MoveWindow>:
 80085dc:	f7ff bfaa 	b.w	8008534 <WM__MoveWindow>

080085e0 <WM_DisableMemdev>:
 80085e0:	b508      	push	{r3, lr}
 80085e2:	b138      	cbz	r0, 80085f4 <WM_DisableMemdev+0x14>
 80085e4:	f006 fdd0 	bl	800f188 <GUI_ALLOC_h2p>
 80085e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ee:	f023 0304 	bic.w	r3, r3, #4
 80085f2:	6283      	str	r3, [r0, #40]	; 0x28
 80085f4:	bd08      	pop	{r3, pc}

080085f6 <WM_ForEachDesc>:
 80085f6:	f7ff bd0f 	b.w	8008018 <WM__ForEachDesc>
	...

080085fc <WM_GetClientRect>:
 80085fc:	4b04      	ldr	r3, [pc, #16]	; (8008610 <WM_GetClientRect+0x14>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	b910      	cbnz	r0, 800860a <WM_GetClientRect+0xe>
 8008604:	4b03      	ldr	r3, [pc, #12]	; (8008614 <WM_GetClientRect+0x18>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800860a:	f7ff be33 	b.w	8008274 <WM__GetClientRectEx>
 800860e:	bf00      	nop
 8008610:	20005630 	.word	0x20005630
 8008614:	20000084 	.word	0x20000084

08008618 <WM_GetClientWindow>:
 8008618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800861a:	2300      	movs	r3, #0
 800861c:	a904      	add	r1, sp, #16
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	2317      	movs	r3, #23
 8008622:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008626:	4669      	mov	r1, sp
 8008628:	f000 fe87 	bl	800933a <WM_SendMessage>
 800862c:	9803      	ldr	r0, [sp, #12]
 800862e:	b005      	add	sp, #20
 8008630:	f85d fb04 	ldr.w	pc, [sp], #4

08008634 <WM_GetDesktopWindow>:
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <WM_GetDesktopWindow+0x10>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	7c5a      	ldrb	r2, [r3, #17]
 800863a:	4b03      	ldr	r3, [pc, #12]	; (8008648 <WM_GetDesktopWindow+0x14>)
 800863c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000084 	.word	0x20000084
 8008648:	20005634 	.word	0x20005634

0800864c <WM_GetFirstChild>:
 800864c:	b508      	push	{r3, lr}
 800864e:	4603      	mov	r3, r0
 8008650:	b110      	cbz	r0, 8008658 <WM_GetFirstChild+0xc>
 8008652:	f006 fd99 	bl	800f188 <GUI_ALLOC_h2p>
 8008656:	69c3      	ldr	r3, [r0, #28]
 8008658:	4618      	mov	r0, r3
 800865a:	bd08      	pop	{r3, pc}

0800865c <WM_GetFocusedWindow>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <WM_GetFocusedWindow+0xc>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <WM_GetFocusedWindow+0x10>)
 8008662:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008666:	4770      	bx	lr
 8008668:	20005654 	.word	0x20005654
 800866c:	20005644 	.word	0x20005644

08008670 <WM_GetId>:
 8008670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008672:	4604      	mov	r4, r0
 8008674:	2210      	movs	r2, #16
 8008676:	4668      	mov	r0, sp
 8008678:	2100      	movs	r1, #0
 800867a:	f009 ff4b 	bl	8012514 <memset>
 800867e:	2315      	movs	r3, #21
 8008680:	4620      	mov	r0, r4
 8008682:	4669      	mov	r1, sp
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	f000 fe58 	bl	800933a <WM_SendMessage>
 800868a:	9803      	ldr	r0, [sp, #12]
 800868c:	b004      	add	sp, #16
 800868e:	bd10      	pop	{r4, pc}

08008690 <_GetDialogItem>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4606      	mov	r6, r0
 8008694:	460d      	mov	r5, r1
 8008696:	f006 fd77 	bl	800f188 <GUI_ALLOC_h2p>
 800869a:	69c4      	ldr	r4, [r0, #28]
 800869c:	b14c      	cbz	r4, 80086b2 <_GetDialogItem+0x22>
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff ffe6 	bl	8008670 <WM_GetId>
 80086a4:	42a8      	cmp	r0, r5
 80086a6:	4620      	mov	r0, r4
 80086a8:	d013      	beq.n	80086d2 <_GetDialogItem+0x42>
 80086aa:	f006 fd6d 	bl	800f188 <GUI_ALLOC_h2p>
 80086ae:	6a04      	ldr	r4, [r0, #32]
 80086b0:	e7f4      	b.n	800869c <_GetDialogItem+0xc>
 80086b2:	4630      	mov	r0, r6
 80086b4:	f006 fd68 	bl	800f188 <GUI_ALLOC_h2p>
 80086b8:	69c4      	ldr	r4, [r0, #28]
 80086ba:	4620      	mov	r0, r4
 80086bc:	b144      	cbz	r4, 80086d0 <_GetDialogItem+0x40>
 80086be:	4629      	mov	r1, r5
 80086c0:	f7ff ffe6 	bl	8008690 <_GetDialogItem>
 80086c4:	b928      	cbnz	r0, 80086d2 <_GetDialogItem+0x42>
 80086c6:	4620      	mov	r0, r4
 80086c8:	f006 fd5e 	bl	800f188 <GUI_ALLOC_h2p>
 80086cc:	6a04      	ldr	r4, [r0, #32]
 80086ce:	e7f4      	b.n	80086ba <_GetDialogItem+0x2a>
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	bd70      	pop	{r4, r5, r6, pc}

080086d4 <WM_GetDialogItem>:
 80086d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086d6:	460d      	mov	r5, r1
 80086d8:	4604      	mov	r4, r0
 80086da:	b1c8      	cbz	r0, 8008710 <WM_GetDialogItem+0x3c>
 80086dc:	f006 fd5e 	bl	800f19c <GUI_ALLOC_LockH>
 80086e0:	ab02      	add	r3, sp, #8
 80086e2:	69c4      	ldr	r4, [r0, #28]
 80086e4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80086e8:	4618      	mov	r0, r3
 80086ea:	f006 fd65 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80086ee:	b17c      	cbz	r4, 8008710 <WM_GetDialogItem+0x3c>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f7ff ffbd 	bl	8008670 <WM_GetId>
 80086f6:	42a8      	cmp	r0, r5
 80086f8:	d00a      	beq.n	8008710 <WM_GetDialogItem+0x3c>
 80086fa:	4620      	mov	r0, r4
 80086fc:	4629      	mov	r1, r5
 80086fe:	f7ff ffc7 	bl	8008690 <_GetDialogItem>
 8008702:	b920      	cbnz	r0, 800870e <WM_GetDialogItem+0x3a>
 8008704:	4620      	mov	r0, r4
 8008706:	f006 fd3f 	bl	800f188 <GUI_ALLOC_h2p>
 800870a:	6a04      	ldr	r4, [r0, #32]
 800870c:	e7ef      	b.n	80086ee <WM_GetDialogItem+0x1a>
 800870e:	4604      	mov	r4, r0
 8008710:	4620      	mov	r0, r4
 8008712:	b003      	add	sp, #12
 8008714:	bd30      	pop	{r4, r5, pc}

08008716 <WM_GetNextSibling>:
 8008716:	b508      	push	{r3, lr}
 8008718:	4603      	mov	r3, r0
 800871a:	b110      	cbz	r0, 8008722 <WM_GetNextSibling+0xc>
 800871c:	f006 fd34 	bl	800f188 <GUI_ALLOC_h2p>
 8008720:	6a03      	ldr	r3, [r0, #32]
 8008722:	4618      	mov	r0, r3
 8008724:	bd08      	pop	{r3, pc}

08008726 <WM_GetWindowOrgX>:
 8008726:	b508      	push	{r3, lr}
 8008728:	b120      	cbz	r0, 8008734 <WM_GetWindowOrgX+0xe>
 800872a:	f006 fd2d 	bl	800f188 <GUI_ALLOC_h2p>
 800872e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8008732:	bd08      	pop	{r3, pc}
 8008734:	bd08      	pop	{r3, pc}

08008736 <WM_GetParent>:
 8008736:	b508      	push	{r3, lr}
 8008738:	4603      	mov	r3, r0
 800873a:	b110      	cbz	r0, 8008742 <WM_GetParent+0xc>
 800873c:	f006 fd24 	bl	800f188 <GUI_ALLOC_h2p>
 8008740:	6983      	ldr	r3, [r0, #24]
 8008742:	4618      	mov	r0, r3
 8008744:	bd08      	pop	{r3, pc}

08008746 <WM_BringToBottom>:
 8008746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	b087      	sub	sp, #28
 800874e:	2800      	cmp	r0, #0
 8008750:	d039      	beq.n	80087c6 <WM_BringToBottom+0x80>
 8008752:	f006 fd23 	bl	800f19c <GUI_ALLOC_LockH>
 8008756:	4603      	mov	r3, r0
 8008758:	9001      	str	r0, [sp, #4]
 800875a:	c803      	ldmia	r0, {r0, r1}
 800875c:	ad04      	add	r5, sp, #16
 800875e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008762:	a801      	add	r0, sp, #4
 8008764:	6a1e      	ldr	r6, [r3, #32]
 8008766:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800876a:	f006 fd25 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fc7c 	bl	800806c <WM__GetPrevSibling>
 8008774:	4607      	mov	r7, r0
 8008776:	b330      	cbz	r0, 80087c6 <WM_BringToBottom+0x80>
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff ffdc 	bl	8008736 <WM_GetParent>
 800877e:	f019 0f02 	tst.w	r9, #2
 8008782:	4680      	mov	r8, r0
 8008784:	d004      	beq.n	8008790 <WM_BringToBottom+0x4a>
 8008786:	4628      	mov	r0, r5
 8008788:	4641      	mov	r1, r8
 800878a:	4632      	mov	r2, r6
 800878c:	f000 feda 	bl	8009544 <WM__InvalidateRectEx>
 8008790:	4620      	mov	r0, r4
 8008792:	f006 fd03 	bl	800f19c <GUI_ALLOC_LockH>
 8008796:	9001      	str	r0, [sp, #4]
 8008798:	4640      	mov	r0, r8
 800879a:	f006 fcff 	bl	800f19c <GUI_ALLOC_LockH>
 800879e:	9003      	str	r0, [sp, #12]
 80087a0:	4638      	mov	r0, r7
 80087a2:	f006 fcfb 	bl	800f19c <GUI_ALLOC_LockH>
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	9a01      	ldr	r2, [sp, #4]
 80087aa:	69d9      	ldr	r1, [r3, #28]
 80087ac:	6206      	str	r6, [r0, #32]
 80087ae:	9002      	str	r0, [sp, #8]
 80087b0:	6211      	str	r1, [r2, #32]
 80087b2:	a801      	add	r0, sp, #4
 80087b4:	61dc      	str	r4, [r3, #28]
 80087b6:	f006 fcff 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80087ba:	a803      	add	r0, sp, #12
 80087bc:	f006 fcfc 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80087c0:	a802      	add	r0, sp, #8
 80087c2:	f006 fcf9 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80087c6:	b007      	add	sp, #28
 80087c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080087cc <WM_GetWindowRectEx>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	b130      	cbz	r0, 80087e0 <WM_GetWindowRectEx+0x14>
 80087d2:	b129      	cbz	r1, 80087e0 <WM_GetWindowRectEx+0x14>
 80087d4:	f006 fcd8 	bl	800f188 <GUI_ALLOC_h2p>
 80087d8:	4603      	mov	r3, r0
 80087da:	cb03      	ldmia	r3!, {r0, r1}
 80087dc:	6020      	str	r0, [r4, #0]
 80087de:	6061      	str	r1, [r4, #4]
 80087e0:	bd10      	pop	{r4, pc}
	...

080087e4 <WM_HasCaptured>:
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <WM_HasCaptured+0x14>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <WM_HasCaptured+0x18>)
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	1ac3      	subs	r3, r0, r3
 80087f0:	4258      	negs	r0, r3
 80087f2:	4158      	adcs	r0, r3
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20005654 	.word	0x20005654
 80087fc:	20005678 	.word	0x20005678

08008800 <WM_HasFocus>:
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <WM_HasFocus+0x14>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <WM_HasFocus+0x18>)
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	1ac3      	subs	r3, r0, r3
 800880c:	4258      	negs	r0, r3
 800880e:	4158      	adcs	r0, r3
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20005654 	.word	0x20005654
 8008818:	20005644 	.word	0x20005644

0800881c <WM_IsFocusable>:
 800881c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	b908      	cbnz	r0, 8008826 <WM_IsFocusable+0xa>
 8008822:	2000      	movs	r0, #0
 8008824:	e011      	b.n	800884a <WM_IsFocusable+0x2e>
 8008826:	f006 fcaf 	bl	800f188 <GUI_ALLOC_h2p>
 800882a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800882c:	079a      	lsls	r2, r3, #30
 800882e:	d5f8      	bpl.n	8008822 <WM_IsFocusable+0x6>
 8008830:	f013 0310 	ands.w	r3, r3, #16
 8008834:	d1f5      	bne.n	8008822 <WM_IsFocusable+0x6>
 8008836:	a904      	add	r1, sp, #16
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	231f      	movs	r3, #31
 800883c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008840:	4620      	mov	r0, r4
 8008842:	4669      	mov	r1, sp
 8008844:	f000 fd79 	bl	800933a <WM_SendMessage>
 8008848:	9803      	ldr	r0, [sp, #12]
 800884a:	b004      	add	sp, #16
 800884c:	bd10      	pop	{r4, pc}

0800884e <WM_IsWindow>:
 800884e:	f000 bd2b 	b.w	80092a8 <WM__IsWindow>
	...

08008854 <WM_OnKey>:
 8008854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008856:	4a0a      	ldr	r2, [pc, #40]	; (8008880 <WM_OnKey+0x2c>)
 8008858:	4603      	mov	r3, r0
 800885a:	6810      	ldr	r0, [r2, #0]
 800885c:	4a09      	ldr	r2, [pc, #36]	; (8008884 <WM_OnKey+0x30>)
 800885e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8008862:	b148      	cbz	r0, 8008878 <WM_OnKey+0x24>
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	230e      	movs	r3, #14
 8008868:	9101      	str	r1, [sp, #4]
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	a902      	add	r1, sp, #8
 800886e:	ab00      	add	r3, sp, #0
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f7ff fc4b 	bl	800810c <WM__SendMessage>
 8008876:	2001      	movs	r0, #1
 8008878:	b007      	add	sp, #28
 800887a:	f85d fb04 	ldr.w	pc, [sp], #4
 800887e:	bf00      	nop
 8008880:	20005654 	.word	0x20005654
 8008884:	20005644 	.word	0x20005644

08008888 <WM_ResizeWindow>:
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	ea51 0302 	orrs.w	r3, r1, r2
 8008890:	b08a      	sub	sp, #40	; 0x28
 8008892:	4680      	mov	r8, r0
 8008894:	460e      	mov	r6, r1
 8008896:	4617      	mov	r7, r2
 8008898:	d06e      	beq.n	8008978 <WM_ResizeWindow+0xf0>
 800889a:	2800      	cmp	r0, #0
 800889c:	d06c      	beq.n	8008978 <WM_ResizeWindow+0xf0>
 800889e:	f006 fc7d 	bl	800f19c <GUI_ALLOC_LockH>
 80088a2:	4603      	mov	r3, r0
 80088a4:	9003      	str	r0, [sp, #12]
 80088a6:	c803      	ldmia	r0, {r0, r1}
 80088a8:	ad04      	add	r5, sp, #16
 80088aa:	ac06      	add	r4, sp, #24
 80088ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80088b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80088b4:	b17e      	cbz	r6, 80088d6 <WM_ResizeWindow+0x4e>
 80088b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b8:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80088bc:	2a80      	cmp	r2, #128	; 0x80
 80088be:	d105      	bne.n	80088cc <WM_ResizeWindow+0x44>
 80088c0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80088c4:	1b96      	subs	r6, r2, r6
 80088c6:	f8ad 6018 	strh.w	r6, [sp, #24]
 80088ca:	e004      	b.n	80088d6 <WM_ResizeWindow+0x4e>
 80088cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80088d0:	4416      	add	r6, r2
 80088d2:	f8ad 601c 	strh.w	r6, [sp, #28]
 80088d6:	b187      	cbz	r7, 80088fa <WM_ResizeWindow+0x72>
 80088d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088da:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80088de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80088e2:	d105      	bne.n	80088f0 <WM_ResizeWindow+0x68>
 80088e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80088e8:	1bd7      	subs	r7, r2, r7
 80088ea:	f8ad 701a 	strh.w	r7, [sp, #26]
 80088ee:	e004      	b.n	80088fa <WM_ResizeWindow+0x72>
 80088f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80088f4:	4417      	add	r7, r2
 80088f6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	03da      	lsls	r2, r3, #15
 80088fe:	d502      	bpl.n	8008906 <WM_ResizeWindow+0x7e>
 8008900:	4640      	mov	r0, r8
 8008902:	f000 fce1 	bl	80092c8 <WM__InvalidateDrawAndDescs>
 8008906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	d50a      	bpl.n	800892c <WM_ResizeWindow+0xa4>
 8008916:	a808      	add	r0, sp, #32
 8008918:	4629      	mov	r1, r5
 800891a:	4622      	mov	r2, r4
 800891c:	f005 f936 	bl	800db8c <GUI_MergeRect>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	a808      	add	r0, sp, #32
 8008924:	6999      	ldr	r1, [r3, #24]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	f000 fe0c 	bl	8009544 <WM__InvalidateRectEx>
 800892c:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8008930:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008934:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8008938:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800893c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8008940:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8008944:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8008948:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800894c:	1ae3      	subs	r3, r4, r3
 800894e:	1a38      	subs	r0, r7, r0
 8008950:	ac0a      	add	r4, sp, #40	; 0x28
 8008952:	1aaa      	subs	r2, r5, r2
 8008954:	9000      	str	r0, [sp, #0]
 8008956:	1a71      	subs	r1, r6, r1
 8008958:	9803      	ldr	r0, [sp, #12]
 800895a:	f7ff fc09 	bl	8008170 <WM__UpdateChildPositions>
 800895e:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8008962:	f101 0008 	add.w	r0, r1, #8
 8008966:	f004 f8f7 	bl	800cb58 <GUI__IntersectRect>
 800896a:	4640      	mov	r0, r8
 800896c:	2105      	movs	r1, #5
 800896e:	f000 fce8 	bl	8009342 <WM__SendMsgNoData>
 8008972:	4620      	mov	r0, r4
 8008974:	f006 fc20 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008978:	b00a      	add	sp, #40	; 0x28
 800897a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800897e <WM_SendMessageNoPara>:
 800897e:	f7ff bbe3 	b.w	8008148 <WM__SendMessageNoPara>

08008982 <WM_SendToParent>:
 8008982:	b538      	push	{r3, r4, r5, lr}
 8008984:	4605      	mov	r5, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b141      	cbz	r1, 800899c <WM_SendToParent+0x1a>
 800898a:	f7ff fed4 	bl	8008736 <WM_GetParent>
 800898e:	b128      	cbz	r0, 800899c <WM_SendToParent+0x1a>
 8008990:	60a5      	str	r5, [r4, #8]
 8008992:	4621      	mov	r1, r4
 8008994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008998:	f7ff bbb8 	b.w	800810c <WM__SendMessage>
 800899c:	bd38      	pop	{r3, r4, r5, pc}

0800899e <WM_NotifyParent>:
 800899e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089a0:	2326      	movs	r3, #38	; 0x26
 80089a2:	9103      	str	r1, [sp, #12]
 80089a4:	4669      	mov	r1, sp
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	f7ff ffeb 	bl	8008982 <WM_SendToParent>
 80089ac:	b005      	add	sp, #20
 80089ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080089b4 <WM_SetFocus>:
 80089b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b6:	b087      	sub	sp, #28
 80089b8:	4604      	mov	r4, r0
 80089ba:	2100      	movs	r1, #0
 80089bc:	a802      	add	r0, sp, #8
 80089be:	2210      	movs	r2, #16
 80089c0:	f009 fda8 	bl	8012514 <memset>
 80089c4:	2c00      	cmp	r4, #0
 80089c6:	d03a      	beq.n	8008a3e <WM_SetFocus+0x8a>
 80089c8:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <WM_SetFocus+0x94>)
 80089ca:	4a20      	ldr	r2, [pc, #128]	; (8008a4c <WM_SetFocus+0x98>)
 80089cc:	6819      	ldr	r1, [r3, #0]
 80089ce:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80089d2:	4284      	cmp	r4, r0
 80089d4:	4616      	mov	r6, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	d031      	beq.n	8008a3e <WM_SetFocus+0x8a>
 80089da:	231e      	movs	r3, #30
 80089dc:	e88d 0011 	stmia.w	sp, {r0, r4}
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	b110      	cbz	r0, 80089ea <WM_SetFocus+0x36>
 80089e4:	a902      	add	r1, sp, #8
 80089e6:	f7ff fb91 	bl	800810c <WM__SendMessage>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4620      	mov	r0, r4
 80089ee:	a902      	add	r1, sp, #8
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	f7ff fb8b 	bl	800810c <WM__SendMessage>
 80089f6:	9d05      	ldr	r5, [sp, #20]
 80089f8:	bb15      	cbnz	r5, 8008a40 <WM_SetFocus+0x8c>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff fe98 	bl	8008736 <WM_GetParent>
 8008a06:	4604      	mov	r4, r0
 8008a08:	b138      	cbz	r0, 8008a1a <WM_SetFocus+0x66>
 8008a0a:	2320      	movs	r3, #32
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	a902      	add	r1, sp, #8
 8008a10:	ab00      	add	r3, sp, #0
 8008a12:	9305      	str	r3, [sp, #20]
 8008a14:	f7ff fb7a 	bl	800810c <WM__SendMessage>
 8008a18:	e7f2      	b.n	8008a00 <WM_SetFocus+0x4c>
 8008a1a:	9c00      	ldr	r4, [sp, #0]
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fc43 	bl	80092a8 <WM__IsWindow>
 8008a22:	b168      	cbz	r0, 8008a40 <WM_SetFocus+0x8c>
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff fe86 	bl	8008736 <WM_GetParent>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	b140      	cbz	r0, 8008a40 <WM_SetFocus+0x8c>
 8008a2e:	2320      	movs	r3, #32
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	a902      	add	r1, sp, #8
 8008a34:	ab00      	add	r3, sp, #0
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	f7ff fb68 	bl	800810c <WM__SendMessage>
 8008a3c:	e7f2      	b.n	8008a24 <WM_SetFocus+0x70>
 8008a3e:	2501      	movs	r5, #1
 8008a40:	4628      	mov	r0, r5
 8008a42:	b007      	add	sp, #28
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20005654 	.word	0x20005654
 8008a4c:	20005644 	.word	0x20005644

08008a50 <WM_SetSize>:
 8008a50:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8008a54:	460e      	mov	r6, r1
 8008a56:	4690      	mov	r8, r2
 8008a58:	4607      	mov	r7, r0
 8008a5a:	b1d0      	cbz	r0, 8008a92 <WM_SetSize+0x42>
 8008a5c:	f006 fb9e 	bl	800f19c <GUI_ALLOC_LockH>
 8008a60:	4603      	mov	r3, r0
 8008a62:	a802      	add	r0, sp, #8
 8008a64:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008a68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a6c:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8008a70:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a78:	1a8a      	subs	r2, r1, r2
 8008a7a:	1aed      	subs	r5, r5, r3
 8008a7c:	43d2      	mvns	r2, r2
 8008a7e:	43ed      	mvns	r5, r5
 8008a80:	4416      	add	r6, r2
 8008a82:	4445      	add	r5, r8
 8008a84:	f006 fb98 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008a88:	4638      	mov	r0, r7
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	462a      	mov	r2, r5
 8008a8e:	f7ff fefb 	bl	8008888 <WM_ResizeWindow>
 8008a92:	b003      	add	sp, #12
 8008a94:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

08008a98 <WM_SetUserClipRect>:
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <WM_SetUserClipRect+0x14>)
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8008aa0:	6458      	str	r0, [r3, #68]	; 0x44
 8008aa2:	f000 fbdd 	bl	8009260 <WM__ActivateClipRect>
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000084 	.word	0x20000084

08008ab0 <WM_InvalidateWindowAndDescs>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	b170      	cbz	r0, 8008ad4 <WM_InvalidateWindowAndDescs+0x24>
 8008ab6:	f000 fd99 	bl	80095ec <WM_InvalidateWindow>
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff fdc6 	bl	800864c <WM_GetFirstChild>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	b13c      	cbz	r4, 8008ad4 <WM_InvalidateWindowAndDescs+0x24>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fff3 	bl	8008ab0 <WM_InvalidateWindowAndDescs>
 8008aca:	4620      	mov	r0, r4
 8008acc:	f006 fb5c 	bl	800f188 <GUI_ALLOC_h2p>
 8008ad0:	6a04      	ldr	r4, [r0, #32]
 8008ad2:	e7f6      	b.n	8008ac2 <WM_InvalidateWindowAndDescs+0x12>
 8008ad4:	bd10      	pop	{r4, pc}

08008ad6 <WM_ShowWindow>:
 8008ad6:	b513      	push	{r0, r1, r4, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	b170      	cbz	r0, 8008afa <WM_ShowWindow+0x24>
 8008adc:	f006 fb5e 	bl	800f19c <GUI_ALLOC_LockH>
 8008ae0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008ae2:	9001      	str	r0, [sp, #4]
 8008ae4:	0793      	lsls	r3, r2, #30
 8008ae6:	d405      	bmi.n	8008af4 <WM_ShowWindow+0x1e>
 8008ae8:	f042 0202 	orr.w	r2, r2, #2
 8008aec:	6282      	str	r2, [r0, #40]	; 0x28
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff ffde 	bl	8008ab0 <WM_InvalidateWindowAndDescs>
 8008af4:	a801      	add	r0, sp, #4
 8008af6:	f006 fb5f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008afa:	b002      	add	sp, #8
 8008afc:	bd10      	pop	{r4, pc}
	...

08008b00 <WM_ValidateWindow>:
 8008b00:	b507      	push	{r0, r1, r2, lr}
 8008b02:	b178      	cbz	r0, 8008b24 <WM_ValidateWindow+0x24>
 8008b04:	f006 fb4a 	bl	800f19c <GUI_ALLOC_LockH>
 8008b08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008b0a:	9001      	str	r0, [sp, #4]
 8008b0c:	069a      	lsls	r2, r3, #26
 8008b0e:	d506      	bpl.n	8008b1e <WM_ValidateWindow+0x1e>
 8008b10:	f023 0320 	bic.w	r3, r3, #32
 8008b14:	6283      	str	r3, [r0, #40]	; 0x28
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <WM_ValidateWindow+0x2c>)
 8008b18:	881a      	ldrh	r2, [r3, #0]
 8008b1a:	3a01      	subs	r2, #1
 8008b1c:	801a      	strh	r2, [r3, #0]
 8008b1e:	a801      	add	r0, sp, #4
 8008b20:	f006 fb4a 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008b24:	b003      	add	sp, #12
 8008b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b2a:	bf00      	nop
 8008b2c:	2000564c 	.word	0x2000564c

08008b30 <WM__GetWindowSizeX>:
 8008b30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008b34:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008b38:	1ad0      	subs	r0, r2, r3
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	4770      	bx	lr

08008b3e <WM__GetWindowSizeY>:
 8008b3e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8008b42:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008b46:	1ad0      	subs	r0, r2, r3
 8008b48:	3001      	adds	r0, #1
 8008b4a:	4770      	bx	lr

08008b4c <WM_GetWindowSizeX>:
 8008b4c:	b513      	push	{r0, r1, r4, lr}
 8008b4e:	b908      	cbnz	r0, 8008b54 <WM_GetWindowSizeX+0x8>
 8008b50:	f000 fef0 	bl	8009934 <WM_GetActiveWindow>
 8008b54:	f006 fb22 	bl	800f19c <GUI_ALLOC_LockH>
 8008b58:	ab02      	add	r3, sp, #8
 8008b5a:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008b5e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008b62:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	1aa4      	subs	r4, r4, r2
 8008b6a:	f006 fb25 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008b6e:	3401      	adds	r4, #1
 8008b70:	4620      	mov	r0, r4
 8008b72:	b002      	add	sp, #8
 8008b74:	bd10      	pop	{r4, pc}

08008b76 <WM_GetWindowSizeY>:
 8008b76:	b513      	push	{r0, r1, r4, lr}
 8008b78:	b908      	cbnz	r0, 8008b7e <WM_GetWindowSizeY+0x8>
 8008b7a:	f000 fedb 	bl	8009934 <WM_GetActiveWindow>
 8008b7e:	f006 fb0d 	bl	800f19c <GUI_ALLOC_LockH>
 8008b82:	ab02      	add	r3, sp, #8
 8008b84:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008b88:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008b8c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8008b90:	4618      	mov	r0, r3
 8008b92:	1aa4      	subs	r4, r4, r2
 8008b94:	f006 fb10 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008b98:	3401      	adds	r4, #1
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	b002      	add	sp, #8
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <_cbInvalidateOne>:
 8008ba0:	f000 bd24 	b.w	80095ec <WM_InvalidateWindow>

08008ba4 <WM_BringToTop>:
 8008ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d032      	beq.n	8008c12 <WM_BringToTop+0x6e>
 8008bac:	f006 faf6 	bl	800f19c <GUI_ALLOC_LockH>
 8008bb0:	ac02      	add	r4, sp, #8
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f844 0d08 	str.w	r0, [r4, #-8]!
 8008bb8:	6a00      	ldr	r0, [r0, #32]
 8008bba:	b908      	cbnz	r0, 8008bc0 <WM_BringToTop+0x1c>
 8008bbc:	4668      	mov	r0, sp
 8008bbe:	e00e      	b.n	8008bde <WM_BringToTop+0x3a>
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	071a      	lsls	r2, r3, #28
 8008bc4:	d411      	bmi.n	8008bea <WM_BringToTop+0x46>
 8008bc6:	f006 fae9 	bl	800f19c <GUI_ALLOC_LockH>
 8008bca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008bcc:	ae02      	add	r6, sp, #8
 8008bce:	071b      	lsls	r3, r3, #28
 8008bd0:	f846 0d04 	str.w	r0, [r6, #-4]!
 8008bd4:	d506      	bpl.n	8008be4 <WM_BringToTop+0x40>
 8008bd6:	4668      	mov	r0, sp
 8008bd8:	f006 faee 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f006 faeb 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008be2:	e016      	b.n	8008c12 <WM_BringToTop+0x6e>
 8008be4:	4630      	mov	r0, r6
 8008be6:	f006 fae7 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008bea:	9b00      	ldr	r3, [sp, #0]
 8008bec:	4668      	mov	r0, sp
 8008bee:	699e      	ldr	r6, [r3, #24]
 8008bf0:	f006 fae2 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 fae5 	bl	80091c4 <WM__RemoveWindowFromList>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f000 fa8f 	bl	8009120 <WM__InsertWindowIntoList>
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 fcf2 	bl	80095ec <WM_InvalidateWindow>
 8008c08:	4628      	mov	r0, r5
 8008c0a:	4903      	ldr	r1, [pc, #12]	; (8008c18 <WM_BringToTop+0x74>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f7ff fcf2 	bl	80085f6 <WM_ForEachDesc>
 8008c12:	b002      	add	sp, #8
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	bf00      	nop
 8008c18:	08008ba1 	.word	0x08008ba1

08008c1c <_OnExit>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <_OnExit+0x68>)
 8008c20:	4d19      	ldr	r5, [pc, #100]	; (8008c88 <_OnExit+0x6c>)
 8008c22:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <_OnExit+0x70>)
 8008c24:	481a      	ldr	r0, [pc, #104]	; (8008c90 <_OnExit+0x74>)
 8008c26:	2400      	movs	r4, #0
 8008c28:	701c      	strb	r4, [r3, #0]
 8008c2a:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <_OnExit+0x78>)
 8008c2c:	6014      	str	r4, [r2, #0]
 8008c2e:	601c      	str	r4, [r3, #0]
 8008c30:	4b19      	ldr	r3, [pc, #100]	; (8008c98 <_OnExit+0x7c>)
 8008c32:	6054      	str	r4, [r2, #4]
 8008c34:	601c      	str	r4, [r3, #0]
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <_OnExit+0x80>)
 8008c38:	601c      	str	r4, [r3, #0]
 8008c3a:	605c      	str	r4, [r3, #4]
 8008c3c:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <_OnExit+0x84>)
 8008c3e:	601c      	str	r4, [r3, #0]
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <_OnExit+0x88>)
 8008c42:	601c      	str	r4, [r3, #0]
 8008c44:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <_OnExit+0x8c>)
 8008c46:	601c      	str	r4, [r3, #0]
 8008c48:	4b18      	ldr	r3, [pc, #96]	; (8008cac <_OnExit+0x90>)
 8008c4a:	601c      	str	r4, [r3, #0]
 8008c4c:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <_OnExit+0x94>)
 8008c4e:	4621      	mov	r1, r4
 8008c50:	601c      	str	r4, [r3, #0]
 8008c52:	2218      	movs	r2, #24
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	4798      	blx	r3
 8008c58:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <_OnExit+0x98>)
 8008c5a:	4817      	ldr	r0, [pc, #92]	; (8008cb8 <_OnExit+0x9c>)
 8008c5c:	601c      	str	r4, [r3, #0]
 8008c5e:	4b17      	ldr	r3, [pc, #92]	; (8008cbc <_OnExit+0xa0>)
 8008c60:	4621      	mov	r1, r4
 8008c62:	601c      	str	r4, [r3, #0]
 8008c64:	605c      	str	r4, [r3, #4]
 8008c66:	2210      	movs	r2, #16
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	4798      	blx	r3
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	4814      	ldr	r0, [pc, #80]	; (8008cc0 <_OnExit+0xa4>)
 8008c70:	4621      	mov	r1, r4
 8008c72:	2210      	movs	r2, #16
 8008c74:	4798      	blx	r3
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	4812      	ldr	r0, [pc, #72]	; (8008cc4 <_OnExit+0xa8>)
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	4798      	blx	r3
 8008c80:	bd38      	pop	{r3, r4, r5, pc}
 8008c82:	bf00      	nop
 8008c84:	2000546c 	.word	0x2000546c
 8008c88:	20000070 	.word	0x20000070
 8008c8c:	20005644 	.word	0x20005644
 8008c90:	20005450 	.word	0x20005450
 8008c94:	2000544c 	.word	0x2000544c
 8008c98:	20005670 	.word	0x20005670
 8008c9c:	20005678 	.word	0x20005678
 8008ca0:	20005684 	.word	0x20005684
 8008ca4:	20005630 	.word	0x20005630
 8008ca8:	20005664 	.word	0x20005664
 8008cac:	20005674 	.word	0x20005674
 8008cb0:	20005468 	.word	0x20005468
 8008cb4:	20005640 	.word	0x20005640
 8008cb8:	200057cc 	.word	0x200057cc
 8008cbc:	20005634 	.word	0x20005634
 8008cc0:	200057bc 	.word	0x200057bc
 8008cc4:	200057ac 	.word	0x200057ac

08008cc8 <_Paint1>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	4604      	mov	r4, r0
 8008ccc:	f006 fa5c 	bl	800f188 <GUI_ALLOC_h2p>
 8008cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008cd2:	4a04      	ldr	r2, [pc, #16]	; (8008ce4 <_Paint1+0x1c>)
 8008cd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <_Paint1+0x20>)
 8008cda:	4620      	mov	r0, r4
 8008cdc:	bf08      	it	eq
 8008cde:	4613      	moveq	r3, r2
 8008ce0:	4798      	blx	r3
 8008ce2:	bd10      	pop	{r4, pc}
 8008ce4:	08009bd5 	.word	0x08009bd5
 8008ce8:	0800a145 	.word	0x0800a145

08008cec <_Findy1>:
 8008cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	d04c      	beq.n	8008d94 <_Findy1+0xa8>
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f006 fa4e 	bl	800f19c <GUI_ALLOC_LockH>
 8008d00:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008d02:	9001      	str	r0, [sp, #4]
 8008d04:	07bb      	lsls	r3, r7, #30
 8008d06:	4601      	mov	r1, r0
 8008d08:	d53d      	bpl.n	8008d86 <_Findy1+0x9a>
 8008d0a:	ad02      	add	r5, sp, #8
 8008d0c:	b126      	cbz	r6, 8008d18 <_Findy1+0x2c>
 8008d0e:	4628      	mov	r0, r5
 8008d10:	4632      	mov	r2, r6
 8008d12:	f003 ff3f 	bl	800cb94 <GUI__IntersectRects>
 8008d16:	e002      	b.n	8008d1e <_Findy1+0x32>
 8008d18:	c803      	ldmia	r0, {r0, r1}
 8008d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f004 ffa9 	bl	800dc78 <GUI_RectsIntersect>
 8008d26:	b370      	cbz	r0, 8008d86 <_Findy1+0x9a>
 8008d28:	f017 0f01 	tst.w	r7, #1
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	d11e      	bne.n	8008d6e <_Findy1+0x82>
 8008d30:	b13e      	cbz	r6, 8008d42 <_Findy1+0x56>
 8008d32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008d36:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	bfa8      	it	ge
 8008d3e:	4613      	movge	r3, r2
 8008d40:	e001      	b.n	8008d46 <_Findy1+0x5a>
 8008d42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d46:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008d50:	dd06      	ble.n	8008d60 <_Findy1+0x74>
 8008d52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008d56:	b219      	sxth	r1, r3
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	db14      	blt.n	8008d86 <_Findy1+0x9a>
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	e004      	b.n	8008d6a <_Findy1+0x7e>
 8008d60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008d64:	b219      	sxth	r1, r3
 8008d66:	428a      	cmp	r2, r1
 8008d68:	dd0d      	ble.n	8008d86 <_Findy1+0x9a>
 8008d6a:	80e3      	strh	r3, [r4, #6]
 8008d6c:	e00b      	b.n	8008d86 <_Findy1+0x9a>
 8008d6e:	69df      	ldr	r7, [r3, #28]
 8008d70:	b14f      	cbz	r7, 8008d86 <_Findy1+0x9a>
 8008d72:	4638      	mov	r0, r7
 8008d74:	4621      	mov	r1, r4
 8008d76:	462a      	mov	r2, r5
 8008d78:	f7ff ffb8 	bl	8008cec <_Findy1>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f006 fa03 	bl	800f188 <GUI_ALLOC_h2p>
 8008d82:	6a07      	ldr	r7, [r0, #32]
 8008d84:	e7f4      	b.n	8008d70 <_Findy1+0x84>
 8008d86:	a804      	add	r0, sp, #16
 8008d88:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008d8c:	6a1d      	ldr	r5, [r3, #32]
 8008d8e:	f006 fa13 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008d92:	e7b0      	b.n	8008cf6 <_Findy1+0xa>
 8008d94:	b005      	add	sp, #20
 8008d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d98 <_Findx0>:
 8008d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460f      	mov	r7, r1
 8008da0:	4690      	mov	r8, r2
 8008da2:	2500      	movs	r5, #0
 8008da4:	2c00      	cmp	r4, #0
 8008da6:	d037      	beq.n	8008e18 <_Findx0+0x80>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f006 f9f7 	bl	800f19c <GUI_ALLOC_LockH>
 8008dae:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008db0:	9001      	str	r0, [sp, #4]
 8008db2:	07b2      	lsls	r2, r6, #30
 8008db4:	4601      	mov	r1, r0
 8008db6:	d528      	bpl.n	8008e0a <_Findx0+0x72>
 8008db8:	ac02      	add	r4, sp, #8
 8008dba:	f1b8 0f00 	cmp.w	r8, #0
 8008dbe:	d004      	beq.n	8008dca <_Findx0+0x32>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4642      	mov	r2, r8
 8008dc4:	f003 fee6 	bl	800cb94 <GUI__IntersectRects>
 8008dc8:	e002      	b.n	8008dd0 <_Findx0+0x38>
 8008dca:	c803      	ldmia	r0, {r0, r1}
 8008dcc:	e884 0003 	stmia.w	r4, {r0, r1}
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f004 ff50 	bl	800dc78 <GUI_RectsIntersect>
 8008dd8:	b1b8      	cbz	r0, 8008e0a <_Findx0+0x72>
 8008dda:	07f3      	lsls	r3, r6, #31
 8008ddc:	d405      	bmi.n	8008dea <_Findx0+0x52>
 8008dde:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	803b      	strh	r3, [r7, #0]
 8008de6:	2501      	movs	r5, #1
 8008de8:	e00f      	b.n	8008e0a <_Findx0+0x72>
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	69de      	ldr	r6, [r3, #28]
 8008dee:	b166      	cbz	r6, 8008e0a <_Findx0+0x72>
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	4622      	mov	r2, r4
 8008df6:	f7ff ffcf 	bl	8008d98 <_Findx0>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	bf18      	it	ne
 8008e00:	2501      	movne	r5, #1
 8008e02:	f006 f9c1 	bl	800f188 <GUI_ALLOC_h2p>
 8008e06:	6a06      	ldr	r6, [r0, #32]
 8008e08:	e7f1      	b.n	8008dee <_Findx0+0x56>
 8008e0a:	a804      	add	r0, sp, #16
 8008e0c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008e10:	6a1c      	ldr	r4, [r3, #32]
 8008e12:	f006 f9d1 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008e16:	e7c5      	b.n	8008da4 <_Findx0+0xc>
 8008e18:	4628      	mov	r0, r5
 8008e1a:	b004      	add	sp, #16
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e20 <_Findx1>:
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e22:	4604      	mov	r4, r0
 8008e24:	b085      	sub	sp, #20
 8008e26:	460e      	mov	r6, r1
 8008e28:	4617      	mov	r7, r2
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	d031      	beq.n	8008e92 <_Findx1+0x72>
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f006 f9b4 	bl	800f19c <GUI_ALLOC_LockH>
 8008e34:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8008e36:	9001      	str	r0, [sp, #4]
 8008e38:	07aa      	lsls	r2, r5, #30
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	d522      	bpl.n	8008e84 <_Findx1+0x64>
 8008e3e:	ac02      	add	r4, sp, #8
 8008e40:	b127      	cbz	r7, 8008e4c <_Findx1+0x2c>
 8008e42:	4620      	mov	r0, r4
 8008e44:	463a      	mov	r2, r7
 8008e46:	f003 fea5 	bl	800cb94 <GUI__IntersectRects>
 8008e4a:	e002      	b.n	8008e52 <_Findx1+0x32>
 8008e4c:	c803      	ldmia	r0, {r0, r1}
 8008e4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008e52:	4630      	mov	r0, r6
 8008e54:	4621      	mov	r1, r4
 8008e56:	f004 ff0f 	bl	800dc78 <GUI_RectsIntersect>
 8008e5a:	b198      	cbz	r0, 8008e84 <_Findx1+0x64>
 8008e5c:	07eb      	lsls	r3, r5, #31
 8008e5e:	d404      	bmi.n	8008e6a <_Findx1+0x4a>
 8008e60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	80b3      	strh	r3, [r6, #4]
 8008e68:	e00c      	b.n	8008e84 <_Findx1+0x64>
 8008e6a:	9b01      	ldr	r3, [sp, #4]
 8008e6c:	69dd      	ldr	r5, [r3, #28]
 8008e6e:	b14d      	cbz	r5, 8008e84 <_Findx1+0x64>
 8008e70:	4628      	mov	r0, r5
 8008e72:	4631      	mov	r1, r6
 8008e74:	4622      	mov	r2, r4
 8008e76:	f7ff ffd3 	bl	8008e20 <_Findx1>
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f006 f984 	bl	800f188 <GUI_ALLOC_h2p>
 8008e80:	6a05      	ldr	r5, [r0, #32]
 8008e82:	e7f4      	b.n	8008e6e <_Findx1+0x4e>
 8008e84:	a804      	add	r0, sp, #16
 8008e86:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008e8a:	6a1c      	ldr	r4, [r3, #32]
 8008e8c:	f006 f994 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008e90:	e7cb      	b.n	8008e2a <_Findx1+0xa>
 8008e92:	b005      	add	sp, #20
 8008e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e98 <_Paint1Trans>:
 8008e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e9c:	4d21      	ldr	r5, [pc, #132]	; (8008f24 <_Paint1Trans+0x8c>)
 8008e9e:	682b      	ldr	r3, [r5, #0]
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ea4:	f006 f97a 	bl	800f19c <GUI_ALLOC_LockH>
 8008ea8:	9000      	str	r0, [sp, #0]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f006 f976 	bl	800f19c <GUI_ALLOC_LockH>
 8008eb0:	ac02      	add	r4, sp, #8
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	9001      	str	r0, [sp, #4]
 8008eb6:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8008eba:	3008      	adds	r0, #8
 8008ebc:	f004 fedc 	bl	800dc78 <GUI_RectsIntersect>
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	b328      	cbz	r0, 8008f10 <_Paint1Trans+0x78>
 8008ec4:	9901      	ldr	r1, [sp, #4]
 8008ec6:	9a00      	ldr	r2, [sp, #0]
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	4c17      	ldr	r4, [pc, #92]	; (8008f28 <_Paint1Trans+0x90>)
 8008ecc:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8008ece:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8008ed2:	f101 0008 	add.w	r0, r1, #8
 8008ed6:	3208      	adds	r2, #8
 8008ed8:	f003 fe5c 	bl	800cb94 <GUI__IntersectRects>
 8008edc:	4668      	mov	r0, sp
 8008ede:	f006 f96b 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008ee2:	9a01      	ldr	r2, [sp, #4]
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8008eea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008eee:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8008ef2:	a801      	add	r0, sp, #4
 8008ef4:	6026      	str	r6, [r4, #0]
 8008ef6:	f006 f95f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff fee4 	bl	8008cc8 <_Paint1>
 8008f00:	2300      	movs	r3, #0
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	651f      	str	r7, [r3, #80]	; 0x50
 8008f08:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8008f0c:	2701      	movs	r7, #1
 8008f0e:	e005      	b.n	8008f1c <_Paint1Trans+0x84>
 8008f10:	4668      	mov	r0, sp
 8008f12:	f006 f951 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008f16:	a801      	add	r0, sp, #4
 8008f18:	f006 f94e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	b002      	add	sp, #8
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	20000084 	.word	0x20000084
 8008f28:	20005630 	.word	0x20005630

08008f2c <_PaintTransChildren>:
 8008f2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	4606      	mov	r6, r0
 8008f32:	f006 f933 	bl	800f19c <GUI_ALLOC_LockH>
 8008f36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f38:	9001      	str	r0, [sp, #4]
 8008f3a:	079b      	lsls	r3, r3, #30
 8008f3c:	d405      	bmi.n	8008f4a <_PaintTransChildren+0x1e>
 8008f3e:	a801      	add	r0, sp, #4
 8008f40:	f006 f93a 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008f44:	b002      	add	sp, #8
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	69c4      	ldr	r4, [r0, #28]
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	d0f6      	beq.n	8008f3e <_PaintTransChildren+0x12>
 8008f50:	4620      	mov	r0, r4
 8008f52:	f006 f923 	bl	800f19c <GUI_ALLOC_LockH>
 8008f56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f58:	ad02      	add	r5, sp, #8
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	f845 0d08 	str.w	r0, [r5, #-8]!
 8008f64:	d137      	bne.n	8008fd6 <_PaintTransChildren+0xaa>
 8008f66:	9901      	ldr	r1, [sp, #4]
 8008f68:	3108      	adds	r1, #8
 8008f6a:	f004 fe85 	bl	800dc78 <GUI_RectsIntersect>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d031      	beq.n	8008fd6 <_PaintTransChildren+0xaa>
 8008f72:	a802      	add	r0, sp, #8
 8008f74:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008f78:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8008f7c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8008f80:	899f      	ldrh	r7, [r3, #12]
 8008f82:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8008f86:	f006 f917 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008f8a:	4668      	mov	r0, sp
 8008f8c:	f006 f914 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7ff ff81 	bl	8008e98 <_Paint1Trans>
 8008f96:	b170      	cbz	r0, 8008fb6 <_PaintTransChildren+0x8a>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f006 f8f5 	bl	800f188 <GUI_ALLOC_h2p>
 8008f9e:	9000      	str	r0, [sp, #0]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff ffc3 	bl	8008f2c <_PaintTransChildren>
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f006 f8ee 	bl	800f188 <GUI_ALLOC_h2p>
 8008fac:	9000      	str	r0, [sp, #0]
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f006 f8ea 	bl	800f188 <GUI_ALLOC_h2p>
 8008fb4:	9001      	str	r0, [sp, #4]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f006 f8f0 	bl	800f19c <GUI_ALLOC_LockH>
 8008fbc:	9001      	str	r0, [sp, #4]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f006 f8ec 	bl	800f19c <GUI_ALLOC_LockH>
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	9000      	str	r0, [sp, #0]
 8008fc8:	f8a3 9008 	strh.w	r9, [r3, #8]
 8008fcc:	f8a3 800a 	strh.w	r8, [r3, #10]
 8008fd0:	819f      	strh	r7, [r3, #12]
 8008fd2:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	4668      	mov	r0, sp
 8008fda:	6a1c      	ldr	r4, [r3, #32]
 8008fdc:	f006 f8ec 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8008fe0:	e7b4      	b.n	8008f4c <_PaintTransChildren+0x20>
	...

08008fe4 <WM__PaintWinAndOverlays>:
 8008fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	f006 f8d8 	bl	800f19c <GUI_ALLOC_LockH>
 8008fec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008fee:	9001      	str	r0, [sp, #4]
 8008ff0:	f640 0301 	movw	r3, #2049	; 0x801
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d005      	beq.n	8009006 <WM__PaintWinAndOverlays+0x22>
 8008ffa:	a801      	add	r0, sp, #4
 8008ffc:	f006 f8dc 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff fe61 	bl	8008cc8 <_Paint1>
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <WM__PaintWinAndOverlays+0x74>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	b313      	cbz	r3, 8009052 <WM__PaintWinAndOverlays+0x6e>
 800900c:	4620      	mov	r0, r4
 800900e:	f7ff ff8d 	bl	8008f2c <_PaintTransChildren>
 8009012:	4620      	mov	r0, r4
 8009014:	f006 f8b8 	bl	800f188 <GUI_ALLOC_h2p>
 8009018:	6985      	ldr	r5, [r0, #24]
 800901a:	6a04      	ldr	r4, [r0, #32]
 800901c:	b1cd      	cbz	r5, 8009052 <WM__PaintWinAndOverlays+0x6e>
 800901e:	b194      	cbz	r4, 8009046 <WM__PaintWinAndOverlays+0x62>
 8009020:	4620      	mov	r0, r4
 8009022:	f006 f8b1 	bl	800f188 <GUI_ALLOC_h2p>
 8009026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b03      	cmp	r3, #3
 800902e:	d102      	bne.n	8009036 <WM__PaintWinAndOverlays+0x52>
 8009030:	4620      	mov	r0, r4
 8009032:	f7ff ff31 	bl	8008e98 <_Paint1Trans>
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff ff78 	bl	8008f2c <_PaintTransChildren>
 800903c:	4620      	mov	r0, r4
 800903e:	f006 f8a3 	bl	800f188 <GUI_ALLOC_h2p>
 8009042:	6a04      	ldr	r4, [r0, #32]
 8009044:	e7eb      	b.n	800901e <WM__PaintWinAndOverlays+0x3a>
 8009046:	4628      	mov	r0, r5
 8009048:	f006 f89e 	bl	800f188 <GUI_ALLOC_h2p>
 800904c:	6a04      	ldr	r4, [r0, #32]
 800904e:	6985      	ldr	r5, [r0, #24]
 8009050:	e7e4      	b.n	800901c <WM__PaintWinAndOverlays+0x38>
 8009052:	b003      	add	sp, #12
 8009054:	bd30      	pop	{r4, r5, pc}
 8009056:	bf00      	nop
 8009058:	20005684 	.word	0x20005684

0800905c <_cbPaintMemDev>:
 800905c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	4d17      	ldr	r5, [pc, #92]	; (80090c0 <_cbPaintMemDev+0x64>)
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	4606      	mov	r6, r0
 8009066:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009068:	f006 f898 	bl	800f19c <GUI_ALLOC_LockH>
 800906c:	682a      	ldr	r2, [r5, #0]
 800906e:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8009072:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8009076:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800907a:	89c7      	ldrh	r7, [r0, #14]
 800907c:	ac02      	add	r4, sp, #8
 800907e:	3208      	adds	r2, #8
 8009080:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009084:	f100 0308 	add.w	r3, r0, #8
 8009088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800908c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009090:	4620      	mov	r0, r4
 8009092:	f006 f891 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009096:	6830      	ldr	r0, [r6, #0]
 8009098:	f7ff ffa4 	bl	8008fe4 <WM__PaintWinAndOverlays>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80090a0:	f006 f87c 	bl	800f19c <GUI_ALLOC_LockH>
 80090a4:	9001      	str	r0, [sp, #4]
 80090a6:	f8a0 a008 	strh.w	sl, [r0, #8]
 80090aa:	f8a0 900a 	strh.w	r9, [r0, #10]
 80090ae:	f8a0 800c 	strh.w	r8, [r0, #12]
 80090b2:	81c7      	strh	r7, [r0, #14]
 80090b4:	4620      	mov	r0, r4
 80090b6:	f006 f87f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80090ba:	b002      	add	sp, #8
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	20000084 	.word	0x20000084

080090c4 <WM__ClipAtParentBorders>:
 80090c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c6:	4607      	mov	r7, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	4628      	mov	r0, r5
 80090cc:	f006 f866 	bl	800f19c <GUI_ALLOC_LockH>
 80090d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80090d2:	ac02      	add	r4, sp, #8
 80090d4:	f013 0602 	ands.w	r6, r3, #2
 80090d8:	4601      	mov	r1, r0
 80090da:	f844 0d04 	str.w	r0, [r4, #-4]!
 80090de:	d104      	bne.n	80090ea <WM__ClipAtParentBorders+0x26>
 80090e0:	4620      	mov	r0, r4
 80090e2:	f006 f869 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80090e6:	4630      	mov	r0, r6
 80090e8:	e016      	b.n	8009118 <WM__ClipAtParentBorders+0x54>
 80090ea:	4638      	mov	r0, r7
 80090ec:	f003 fd34 	bl	800cb58 <GUI__IntersectRect>
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	699e      	ldr	r6, [r3, #24]
 80090f4:	4620      	mov	r0, r4
 80090f6:	b956      	cbnz	r6, 800910e <WM__ClipAtParentBorders+0x4a>
 80090f8:	f006 f85e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <WM__ClipAtParentBorders+0x58>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4295      	cmp	r5, r2
 8009102:	d008      	beq.n	8009116 <WM__ClipAtParentBorders+0x52>
 8009104:	6858      	ldr	r0, [r3, #4]
 8009106:	1a2b      	subs	r3, r5, r0
 8009108:	4258      	negs	r0, r3
 800910a:	4158      	adcs	r0, r3
 800910c:	e004      	b.n	8009118 <WM__ClipAtParentBorders+0x54>
 800910e:	f006 f853 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009112:	4635      	mov	r5, r6
 8009114:	e7d9      	b.n	80090ca <WM__ClipAtParentBorders+0x6>
 8009116:	2001      	movs	r0, #1
 8009118:	b003      	add	sp, #12
 800911a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911c:	20005634 	.word	0x20005634

08009120 <WM__InsertWindowIntoList>:
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	b085      	sub	sp, #20
 8009126:	460d      	mov	r5, r1
 8009128:	2900      	cmp	r1, #0
 800912a:	d049      	beq.n	80091c0 <WM__InsertWindowIntoList+0xa0>
 800912c:	f006 f836 	bl	800f19c <GUI_ALLOC_LockH>
 8009130:	2300      	movs	r3, #0
 8009132:	6203      	str	r3, [r0, #32]
 8009134:	6185      	str	r5, [r0, #24]
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	4628      	mov	r0, r5
 800913a:	f006 f82f 	bl	800f19c <GUI_ALLOC_LockH>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	69c5      	ldr	r5, [r0, #28]
 8009142:	9002      	str	r0, [sp, #8]
 8009144:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8009146:	b92d      	cbnz	r5, 8009154 <WM__InsertWindowIntoList+0x34>
 8009148:	61c4      	str	r4, [r0, #28]
 800914a:	a801      	add	r0, sp, #4
 800914c:	f006 f834 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009150:	a802      	add	r0, sp, #8
 8009152:	e033      	b.n	80091bc <WM__InsertWindowIntoList+0x9c>
 8009154:	4628      	mov	r0, r5
 8009156:	f006 f821 	bl	800f19c <GUI_ALLOC_LockH>
 800915a:	ae04      	add	r6, sp, #16
 800915c:	f007 0708 	and.w	r7, r7, #8
 8009160:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009164:	b977      	cbnz	r7, 8009184 <WM__InsertWindowIntoList+0x64>
 8009166:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009168:	071a      	lsls	r2, r3, #28
 800916a:	d50b      	bpl.n	8009184 <WM__InsertWindowIntoList+0x64>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	621d      	str	r5, [r3, #32]
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	a801      	add	r0, sp, #4
 8009174:	61dc      	str	r4, [r3, #28]
 8009176:	f006 f81f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800917a:	a802      	add	r0, sp, #8
 800917c:	f006 f81c 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009180:	4630      	mov	r0, r6
 8009182:	e01b      	b.n	80091bc <WM__InsertWindowIntoList+0x9c>
 8009184:	a802      	add	r0, sp, #8
 8009186:	f006 f817 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800918a:	4630      	mov	r0, r6
 800918c:	f006 f814 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009190:	4628      	mov	r0, r5
 8009192:	f005 fff9 	bl	800f188 <GUI_ALLOC_h2p>
 8009196:	9003      	str	r0, [sp, #12]
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	6a1d      	ldr	r5, [r3, #32]
 800919c:	b90d      	cbnz	r5, 80091a2 <WM__InsertWindowIntoList+0x82>
 800919e:	621c      	str	r4, [r3, #32]
 80091a0:	e00b      	b.n	80091ba <WM__InsertWindowIntoList+0x9a>
 80091a2:	4628      	mov	r0, r5
 80091a4:	f005 fff0 	bl	800f188 <GUI_ALLOC_h2p>
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	d1f4      	bne.n	8009196 <WM__InsertWindowIntoList+0x76>
 80091ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091ae:	071b      	lsls	r3, r3, #28
 80091b0:	d5f1      	bpl.n	8009196 <WM__InsertWindowIntoList+0x76>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	621c      	str	r4, [r3, #32]
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	621d      	str	r5, [r3, #32]
 80091ba:	a801      	add	r0, sp, #4
 80091bc:	f005 fffc 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80091c0:	b005      	add	sp, #20
 80091c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091c4 <WM__RemoveWindowFromList>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4604      	mov	r4, r0
 80091c8:	f005 ffde 	bl	800f188 <GUI_ALLOC_h2p>
 80091cc:	4605      	mov	r5, r0
 80091ce:	6980      	ldr	r0, [r0, #24]
 80091d0:	b1a8      	cbz	r0, 80091fe <WM__RemoveWindowFromList+0x3a>
 80091d2:	f005 ffd9 	bl	800f188 <GUI_ALLOC_h2p>
 80091d6:	69c3      	ldr	r3, [r0, #28]
 80091d8:	42a3      	cmp	r3, r4
 80091da:	4606      	mov	r6, r0
 80091dc:	d105      	bne.n	80091ea <WM__RemoveWindowFromList+0x26>
 80091de:	4618      	mov	r0, r3
 80091e0:	f005 ffd2 	bl	800f188 <GUI_ALLOC_h2p>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	61f3      	str	r3, [r6, #28]
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	b143      	cbz	r3, 80091fe <WM__RemoveWindowFromList+0x3a>
 80091ec:	4618      	mov	r0, r3
 80091ee:	f005 ffcb 	bl	800f188 <GUI_ALLOC_h2p>
 80091f2:	6a03      	ldr	r3, [r0, #32]
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d1f8      	bne.n	80091ea <WM__RemoveWindowFromList+0x26>
 80091f8:	6a2b      	ldr	r3, [r5, #32]
 80091fa:	6203      	str	r3, [r0, #32]
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
 80091fe:	bd70      	pop	{r4, r5, r6, pc}

08009200 <WM__Client2Screen>:
 8009200:	4603      	mov	r3, r0
 8009202:	4608      	mov	r0, r1
 8009204:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009208:	f9b3 1000 	ldrsh.w	r1, [r3]
 800920c:	f004 bce9 	b.w	800dbe2 <GUI_MoveRect>

08009210 <_SetClipRectUserIntersect>:
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <_SetClipRectUserIntersect+0x48>)
 8009212:	b530      	push	{r4, r5, lr}
 8009214:	681c      	ldr	r4, [r3, #0]
 8009216:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009218:	b085      	sub	sp, #20
 800921a:	4605      	mov	r5, r0
 800921c:	b1ba      	cbz	r2, 800924e <_SetClipRectUserIntersect+0x3e>
 800921e:	6810      	ldr	r0, [r2, #0]
 8009220:	6851      	ldr	r1, [r2, #4]
 8009222:	ab02      	add	r3, sp, #8
 8009224:	c303      	stmia	r3!, {r0, r1}
 8009226:	4b0d      	ldr	r3, [pc, #52]	; (800925c <_SetClipRectUserIntersect+0x4c>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	b900      	cbnz	r0, 800922e <_SetClipRectUserIntersect+0x1e>
 800922c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800922e:	f005 ffb5 	bl	800f19c <GUI_ALLOC_LockH>
 8009232:	ac04      	add	r4, sp, #16
 8009234:	a902      	add	r1, sp, #8
 8009236:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800923a:	f7ff ffe1 	bl	8009200 <WM__Client2Screen>
 800923e:	4620      	mov	r0, r4
 8009240:	f005 ffba 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009244:	a802      	add	r0, sp, #8
 8009246:	4629      	mov	r1, r5
 8009248:	f003 fc86 	bl	800cb58 <GUI__IntersectRect>
 800924c:	a802      	add	r0, sp, #8
 800924e:	f002 ffa3 	bl	800c198 <LCD_SetClipRectEx>
 8009252:	b005      	add	sp, #20
 8009254:	bd30      	pop	{r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20000084 	.word	0x20000084
 800925c:	20005630 	.word	0x20005630

08009260 <WM__ActivateClipRect>:
 8009260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009262:	4b0e      	ldr	r3, [pc, #56]	; (800929c <WM__ActivateClipRect+0x3c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800926a:	b10a      	cbz	r2, 8009270 <WM__ActivateClipRect+0x10>
 800926c:	480c      	ldr	r0, [pc, #48]	; (80092a0 <WM__ActivateClipRect+0x40>)
 800926e:	e011      	b.n	8009294 <WM__ActivateClipRect+0x34>
 8009270:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009272:	f005 ff93 	bl	800f19c <GUI_ALLOC_LockH>
 8009276:	9001      	str	r0, [sp, #4]
 8009278:	c803      	ldmia	r0, {r0, r1}
 800927a:	ac02      	add	r4, sp, #8
 800927c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009280:	a801      	add	r0, sp, #4
 8009282:	f005 ff99 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009286:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <WM__ActivateClipRect+0x44>)
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	b111      	cbz	r1, 8009292 <WM__ActivateClipRect+0x32>
 800928c:	4620      	mov	r0, r4
 800928e:	f7ff ff19 	bl	80090c4 <WM__ClipAtParentBorders>
 8009292:	4620      	mov	r0, r4
 8009294:	f7ff ffbc 	bl	8009210 <_SetClipRectUserIntersect>
 8009298:	b004      	add	sp, #16
 800929a:	bd10      	pop	{r4, pc}
 800929c:	20000084 	.word	0x20000084
 80092a0:	20005458 	.word	0x20005458
 80092a4:	20005630 	.word	0x20005630

080092a8 <WM__IsWindow>:
 80092a8:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <WM__IsWindow+0x1c>)
 80092aa:	b510      	push	{r4, lr}
 80092ac:	4604      	mov	r4, r0
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	b128      	cbz	r0, 80092be <WM__IsWindow+0x16>
 80092b2:	42a0      	cmp	r0, r4
 80092b4:	d004      	beq.n	80092c0 <WM__IsWindow+0x18>
 80092b6:	f005 ff67 	bl	800f188 <GUI_ALLOC_h2p>
 80092ba:	6940      	ldr	r0, [r0, #20]
 80092bc:	e7f8      	b.n	80092b0 <WM__IsWindow+0x8>
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	2001      	movs	r0, #1
 80092c2:	bd10      	pop	{r4, pc}
 80092c4:	20005650 	.word	0x20005650

080092c8 <WM__InvalidateDrawAndDescs>:
 80092c8:	b513      	push	{r0, r1, r4, lr}
 80092ca:	4604      	mov	r4, r0
 80092cc:	b300      	cbz	r0, 8009310 <WM__InvalidateDrawAndDescs+0x48>
 80092ce:	f005 ff65 	bl	800f19c <GUI_ALLOC_LockH>
 80092d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80092d4:	9001      	str	r0, [sp, #4]
 80092d6:	0793      	lsls	r3, r2, #30
 80092d8:	d517      	bpl.n	800930a <WM__InvalidateDrawAndDescs+0x42>
 80092da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80092dc:	b140      	cbz	r0, 80092f0 <WM__InvalidateDrawAndDescs+0x28>
 80092de:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <WM__InvalidateDrawAndDescs+0x4c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	d004      	beq.n	80092f0 <WM__InvalidateDrawAndDescs+0x28>
 80092e6:	f001 fdf9 	bl	800aedc <GUI_MEMDEV_Delete>
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7ff f9ab 	bl	800864c <WM_GetFirstChild>
 80092f6:	4604      	mov	r4, r0
 80092f8:	b13c      	cbz	r4, 800930a <WM__InvalidateDrawAndDescs+0x42>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7ff ffe4 	bl	80092c8 <WM__InvalidateDrawAndDescs>
 8009300:	4620      	mov	r0, r4
 8009302:	f005 ff41 	bl	800f188 <GUI_ALLOC_h2p>
 8009306:	6a04      	ldr	r4, [r0, #32]
 8009308:	e7f6      	b.n	80092f8 <WM__InvalidateDrawAndDescs+0x30>
 800930a:	a801      	add	r0, sp, #4
 800930c:	f005 ff54 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009310:	b002      	add	sp, #8
 8009312:	bd10      	pop	{r4, pc}
 8009314:	20005680 	.word	0x20005680

08009318 <WM__RectIsNZ>:
 8009318:	f9b0 2000 	ldrsh.w	r2, [r0]
 800931c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	dc08      	bgt.n	8009336 <WM__RectIsNZ+0x1e>
 8009324:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009328:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800932c:	429a      	cmp	r2, r3
 800932e:	bfcc      	ite	gt
 8009330:	2000      	movgt	r0, #0
 8009332:	2001      	movle	r0, #1
 8009334:	4770      	bx	lr
 8009336:	2000      	movs	r0, #0
 8009338:	4770      	bx	lr

0800933a <WM_SendMessage>:
 800933a:	b108      	cbz	r0, 8009340 <WM_SendMessage+0x6>
 800933c:	f7fe bee6 	b.w	800810c <WM__SendMessage>
 8009340:	4770      	bx	lr

08009342 <WM__SendMsgNoData>:
 8009342:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009344:	ab04      	add	r3, sp, #16
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	f843 1d10 	str.w	r1, [r3, #-16]!
 800934c:	4669      	mov	r1, sp
 800934e:	f7fe fedd 	bl	800810c <WM__SendMessage>
 8009352:	b005      	add	sp, #20
 8009354:	f85d fb04 	ldr.w	pc, [sp], #4

08009358 <WM__GetClientRectWin>:
 8009358:	2300      	movs	r3, #0
 800935a:	800b      	strh	r3, [r1, #0]
 800935c:	8882      	ldrh	r2, [r0, #4]
 800935e:	804b      	strh	r3, [r1, #2]
 8009360:	8803      	ldrh	r3, [r0, #0]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	808b      	strh	r3, [r1, #4]
 8009366:	88c2      	ldrh	r2, [r0, #6]
 8009368:	8843      	ldrh	r3, [r0, #2]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	80cb      	strh	r3, [r1, #6]
 800936e:	4770      	bx	lr

08009370 <WM__GetTopLevelLayer>:
 8009370:	b510      	push	{r4, lr}
 8009372:	4604      	mov	r4, r0
 8009374:	f005 ff08 	bl	800f188 <GUI_ALLOC_h2p>
 8009378:	6980      	ldr	r0, [r0, #24]
 800937a:	2800      	cmp	r0, #0
 800937c:	d1f9      	bne.n	8009372 <WM__GetTopLevelLayer+0x2>
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <WM__GetTopLevelLayer+0x24>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4294      	cmp	r4, r2
 8009384:	d005      	beq.n	8009392 <WM__GetTopLevelLayer+0x22>
 8009386:	6858      	ldr	r0, [r3, #4]
 8009388:	4284      	cmp	r4, r0
 800938a:	bf14      	ite	ne
 800938c:	f04f 30ff 	movne.w	r0, #4294967295
 8009390:	2001      	moveq	r0, #1
 8009392:	bd10      	pop	{r4, pc}
 8009394:	20005634 	.word	0x20005634

08009398 <_Invalidate1Abs>:
 8009398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800939a:	b085      	sub	sp, #20
 800939c:	4606      	mov	r6, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	4617      	mov	r7, r2
 80093a2:	f005 fef1 	bl	800f188 <GUI_ALLOC_h2p>
 80093a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80093a8:	9001      	str	r0, [sp, #4]
 80093aa:	07a3      	lsls	r3, r4, #30
 80093ac:	d53e      	bpl.n	800942c <_Invalidate1Abs+0x94>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7ff ffb2 	bl	8009318 <WM__RectIsNZ>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d039      	beq.n	800942c <_Invalidate1Abs+0x94>
 80093b8:	f640 0301 	movw	r3, #2049	; 0x801
 80093bc:	4023      	ands	r3, r4
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d034      	beq.n	800942c <_Invalidate1Abs+0x94>
 80093c2:	4630      	mov	r0, r6
 80093c4:	f005 feea 	bl	800f19c <GUI_ALLOC_LockH>
 80093c8:	ac02      	add	r4, sp, #8
 80093ca:	4602      	mov	r2, r0
 80093cc:	9001      	str	r0, [sp, #4]
 80093ce:	4629      	mov	r1, r5
 80093d0:	4620      	mov	r0, r4
 80093d2:	f003 fbdf 	bl	800cb94 <GUI__IntersectRects>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7ff ff9e 	bl	8009318 <WM__RectIsNZ>
 80093dc:	b318      	cbz	r0, 8009426 <_Invalidate1Abs+0x8e>
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093e2:	f244 0120 	movw	r1, #16416	; 0x4020
 80093e6:	4011      	ands	r1, r2
 80093e8:	f103 0508 	add.w	r5, r3, #8
 80093ec:	b129      	cbz	r1, 80093fa <_Invalidate1Abs+0x62>
 80093ee:	4628      	mov	r0, r5
 80093f0:	4629      	mov	r1, r5
 80093f2:	4622      	mov	r2, r4
 80093f4:	f004 fbca 	bl	800db8c <GUI_MergeRect>
 80093f8:	e015      	b.n	8009426 <_Invalidate1Abs+0x8e>
 80093fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093fe:	4317      	orrs	r7, r2
 8009400:	e885 0003 	stmia.w	r5, {r0, r1}
 8009404:	629f      	str	r7, [r3, #40]	; 0x28
 8009406:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <_Invalidate1Abs+0x98>)
 8009408:	881a      	ldrh	r2, [r3, #0]
 800940a:	4630      	mov	r0, r6
 800940c:	3201      	adds	r2, #1
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	f7ff ffae 	bl	8009370 <WM__GetTopLevelLayer>
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <_Invalidate1Abs+0x9c>)
 8009416:	2201      	movs	r2, #1
 8009418:	fa02 f000 	lsl.w	r0, r2, r0
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4302      	orrs	r2, r0
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	f003 fee7 	bl	800d1f4 <GUI_SignalEvent>
 8009426:	a801      	add	r0, sp, #4
 8009428:	f005 fec6 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800942c:	b005      	add	sp, #20
 800942e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009430:	2000564c 	.word	0x2000564c
 8009434:	2000565c 	.word	0x2000565c

08009438 <WM__Invalidate1Abs>:
 8009438:	2220      	movs	r2, #32
 800943a:	f7ff bfad 	b.w	8009398 <_Invalidate1Abs>

0800943e <WM_InvalidateWindowAndDescsEx>:
 800943e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009440:	460f      	mov	r7, r1
 8009442:	b085      	sub	sp, #20
 8009444:	4615      	mov	r5, r2
 8009446:	4606      	mov	r6, r0
 8009448:	b348      	cbz	r0, 800949e <WM_InvalidateWindowAndDescsEx+0x60>
 800944a:	f005 fea7 	bl	800f19c <GUI_ALLOC_LockH>
 800944e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009450:	ac04      	add	r4, sp, #16
 8009452:	079b      	lsls	r3, r3, #30
 8009454:	4602      	mov	r2, r0
 8009456:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800945a:	d403      	bmi.n	8009464 <WM_InvalidateWindowAndDescsEx+0x26>
 800945c:	4620      	mov	r0, r4
 800945e:	f005 feab 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009462:	e01c      	b.n	800949e <WM_InvalidateWindowAndDescsEx+0x60>
 8009464:	a802      	add	r0, sp, #8
 8009466:	4639      	mov	r1, r7
 8009468:	f003 fb94 	bl	800cb94 <GUI__IntersectRects>
 800946c:	2800      	cmp	r0, #0
 800946e:	d0f5      	beq.n	800945c <WM_InvalidateWindowAndDescsEx+0x1e>
 8009470:	4620      	mov	r0, r4
 8009472:	f005 fea1 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009476:	4630      	mov	r0, r6
 8009478:	a902      	add	r1, sp, #8
 800947a:	462a      	mov	r2, r5
 800947c:	f7ff ff8c 	bl	8009398 <_Invalidate1Abs>
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff f8e3 	bl	800864c <WM_GetFirstChild>
 8009486:	4604      	mov	r4, r0
 8009488:	b14c      	cbz	r4, 800949e <WM_InvalidateWindowAndDescsEx+0x60>
 800948a:	4620      	mov	r0, r4
 800948c:	a902      	add	r1, sp, #8
 800948e:	462a      	mov	r2, r5
 8009490:	f7ff ffd5 	bl	800943e <WM_InvalidateWindowAndDescsEx>
 8009494:	4620      	mov	r0, r4
 8009496:	f005 fe77 	bl	800f188 <GUI_ALLOC_h2p>
 800949a:	6a04      	ldr	r4, [r0, #32]
 800949c:	e7f4      	b.n	8009488 <WM_InvalidateWindowAndDescsEx+0x4a>
 800949e:	b005      	add	sp, #20
 80094a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094a2 <WM__InvalidateRect>:
 80094a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80094a6:	4680      	mov	r8, r0
 80094a8:	4617      	mov	r7, r2
 80094aa:	461d      	mov	r5, r3
 80094ac:	460c      	mov	r4, r1
 80094ae:	2900      	cmp	r1, #0
 80094b0:	d030      	beq.n	8009514 <WM__InvalidateRect+0x72>
 80094b2:	4608      	mov	r0, r1
 80094b4:	f005 fe72 	bl	800f19c <GUI_ALLOC_LockH>
 80094b8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80094ba:	9001      	str	r0, [sp, #4]
 80094bc:	07b3      	lsls	r3, r6, #30
 80094be:	4602      	mov	r2, r0
 80094c0:	d525      	bpl.n	800950e <WM__InvalidateRect+0x6c>
 80094c2:	a802      	add	r0, sp, #8
 80094c4:	4641      	mov	r1, r8
 80094c6:	f003 fb65 	bl	800cb94 <GUI__IntersectRects>
 80094ca:	b300      	cbz	r0, 800950e <WM__InvalidateRect+0x6c>
 80094cc:	f640 0301 	movw	r3, #2049	; 0x801
 80094d0:	4033      	ands	r3, r6
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d107      	bne.n	80094e6 <WM__InvalidateRect+0x44>
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	a802      	add	r0, sp, #8
 80094da:	6999      	ldr	r1, [r3, #24]
 80094dc:	6a1a      	ldr	r2, [r3, #32]
 80094de:	462b      	mov	r3, r5
 80094e0:	f7ff ffdf 	bl	80094a2 <WM__InvalidateRect>
 80094e4:	e004      	b.n	80094f0 <WM__InvalidateRect+0x4e>
 80094e6:	4620      	mov	r0, r4
 80094e8:	a902      	add	r1, sp, #8
 80094ea:	462a      	mov	r2, r5
 80094ec:	f7ff ff54 	bl	8009398 <_Invalidate1Abs>
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	69dc      	ldr	r4, [r3, #28]
 80094f4:	b15c      	cbz	r4, 800950e <WM__InvalidateRect+0x6c>
 80094f6:	42bc      	cmp	r4, r7
 80094f8:	d009      	beq.n	800950e <WM__InvalidateRect+0x6c>
 80094fa:	4620      	mov	r0, r4
 80094fc:	a902      	add	r1, sp, #8
 80094fe:	462a      	mov	r2, r5
 8009500:	f7ff ff9d 	bl	800943e <WM_InvalidateWindowAndDescsEx>
 8009504:	4620      	mov	r0, r4
 8009506:	f005 fe3f 	bl	800f188 <GUI_ALLOC_h2p>
 800950a:	6a04      	ldr	r4, [r0, #32]
 800950c:	e7f2      	b.n	80094f4 <WM__InvalidateRect+0x52>
 800950e:	a801      	add	r0, sp, #4
 8009510:	f005 fe52 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009514:	b004      	add	sp, #16
 8009516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800951a <WM__InvalidateParent>:
 800951a:	b570      	push	{r4, r5, r6, lr}
 800951c:	4605      	mov	r5, r0
 800951e:	4608      	mov	r0, r1
 8009520:	460c      	mov	r4, r1
 8009522:	4616      	mov	r6, r2
 8009524:	f005 fe30 	bl	800f188 <GUI_ALLOC_h2p>
 8009528:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800952a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800952e:	4628      	mov	r0, r5
 8009530:	4621      	mov	r1, r4
 8009532:	4632      	mov	r2, r6
 8009534:	bf0c      	ite	eq
 8009536:	2320      	moveq	r3, #32
 8009538:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800953c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009540:	f7ff bfaf 	b.w	80094a2 <WM__InvalidateRect>

08009544 <WM__InvalidateRectEx>:
 8009544:	2320      	movs	r3, #32
 8009546:	f7ff bfac 	b.w	80094a2 <WM__InvalidateRect>

0800954a <WM__DetachWindow>:
 800954a:	b513      	push	{r0, r1, r4, lr}
 800954c:	4604      	mov	r4, r0
 800954e:	f005 fe25 	bl	800f19c <GUI_ALLOC_LockH>
 8009552:	6981      	ldr	r1, [r0, #24]
 8009554:	9001      	str	r0, [sp, #4]
 8009556:	b141      	cbz	r1, 800956a <WM__DetachWindow+0x20>
 8009558:	6a02      	ldr	r2, [r0, #32]
 800955a:	f7ff fff3 	bl	8009544 <WM__InvalidateRectEx>
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff fe30 	bl	80091c4 <WM__RemoveWindowFromList>
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	619a      	str	r2, [r3, #24]
 800956a:	a801      	add	r0, sp, #4
 800956c:	f005 fe24 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009570:	b002      	add	sp, #8
 8009572:	bd10      	pop	{r4, pc}

08009574 <WM_InvalidateRect>:
 8009574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009576:	460f      	mov	r7, r1
 8009578:	b087      	sub	sp, #28
 800957a:	4605      	mov	r5, r0
 800957c:	2800      	cmp	r0, #0
 800957e:	d033      	beq.n	80095e8 <WM_InvalidateRect+0x74>
 8009580:	f005 fe0c 	bl	800f19c <GUI_ALLOC_LockH>
 8009584:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009586:	9001      	str	r0, [sp, #4]
 8009588:	07b2      	lsls	r2, r6, #30
 800958a:	d52a      	bpl.n	80095e2 <WM_InvalidateRect+0x6e>
 800958c:	c803      	ldmia	r0, {r0, r1}
 800958e:	ac04      	add	r4, sp, #16
 8009590:	03f3      	lsls	r3, r6, #15
 8009592:	e884 0003 	stmia.w	r4, {r0, r1}
 8009596:	d502      	bpl.n	800959e <WM_InvalidateRect+0x2a>
 8009598:	4628      	mov	r0, r5
 800959a:	f7ff fe95 	bl	80092c8 <WM__InvalidateDrawAndDescs>
 800959e:	b15f      	cbz	r7, 80095b8 <WM_InvalidateRect+0x44>
 80095a0:	6838      	ldr	r0, [r7, #0]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	ab02      	add	r3, sp, #8
 80095a6:	c303      	stmia	r3!, {r0, r1}
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	a902      	add	r1, sp, #8
 80095ac:	f7ff fe28 	bl	8009200 <WM__Client2Screen>
 80095b0:	4620      	mov	r0, r4
 80095b2:	a902      	add	r1, sp, #8
 80095b4:	f003 fad0 	bl	800cb58 <GUI__IntersectRect>
 80095b8:	4620      	mov	r0, r4
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7ff fd82 	bl	80090c4 <WM__ClipAtParentBorders>
 80095c0:	b178      	cbz	r0, 80095e2 <WM_InvalidateRect+0x6e>
 80095c2:	f640 0301 	movw	r3, #2049	; 0x801
 80095c6:	4033      	ands	r3, r6
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d106      	bne.n	80095da <WM_InvalidateRect+0x66>
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	4620      	mov	r0, r4
 80095d0:	6999      	ldr	r1, [r3, #24]
 80095d2:	6a1a      	ldr	r2, [r3, #32]
 80095d4:	f7ff ffb6 	bl	8009544 <WM__InvalidateRectEx>
 80095d8:	e003      	b.n	80095e2 <WM_InvalidateRect+0x6e>
 80095da:	4628      	mov	r0, r5
 80095dc:	4621      	mov	r1, r4
 80095de:	f7ff ff2b 	bl	8009438 <WM__Invalidate1Abs>
 80095e2:	a801      	add	r0, sp, #4
 80095e4:	f005 fde8 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80095e8:	b007      	add	sp, #28
 80095ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095ec <WM_InvalidateWindow>:
 80095ec:	2100      	movs	r1, #0
 80095ee:	f7ff bfc1 	b.w	8009574 <WM_InvalidateRect>

080095f2 <WM__SelectTopLevelLayer>:
 80095f2:	b508      	push	{r3, lr}
 80095f4:	f7ff febc 	bl	8009370 <WM__GetTopLevelLayer>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	db03      	blt.n	8009604 <WM__SelectTopLevelLayer+0x12>
 80095fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009600:	f003 bedc 	b.w	800d3bc <GUI_SelectLayer>
 8009604:	bd08      	pop	{r3, pc}
	...

08009608 <WM_SelectWindow>:
 8009608:	4a0d      	ldr	r2, [pc, #52]	; (8009640 <WM_SelectWindow+0x38>)
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8009610:	4604      	mov	r4, r0
 8009612:	4616      	mov	r6, r2
 8009614:	b908      	cbnz	r0, 800961a <WM_SelectWindow+0x12>
 8009616:	4a0b      	ldr	r2, [pc, #44]	; (8009644 <WM_SelectWindow+0x3c>)
 8009618:	6814      	ldr	r4, [r2, #0]
 800961a:	649c      	str	r4, [r3, #72]	; 0x48
 800961c:	4620      	mov	r0, r4
 800961e:	f7ff ffe8 	bl	80095f2 <WM__SelectTopLevelLayer>
 8009622:	f003 f9b9 	bl	800c998 <LCD_SetClipRectMax>
 8009626:	4620      	mov	r0, r4
 8009628:	f005 fdae 	bl	800f188 <GUI_ALLOC_h2p>
 800962c:	6833      	ldr	r3, [r6, #0]
 800962e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8009632:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009636:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009638:	651a      	str	r2, [r3, #80]	; 0x50
 800963a:	4628      	mov	r0, r5
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	bf00      	nop
 8009640:	20000084 	.word	0x20000084
 8009644:	20005650 	.word	0x20005650

08009648 <WM_CreateWindowAsChild>:
 8009648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800964e:	469b      	mov	fp, r3
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <WM_CreateWindowAsChild+0x138>)
 8009652:	4607      	mov	r7, r0
 8009654:	4688      	mov	r8, r1
 8009656:	4692      	mov	sl, r2
 8009658:	681e      	ldr	r6, [r3, #0]
 800965a:	bb65      	cbnz	r5, 80096b6 <WM_CreateWindowAsChild+0x6e>
 800965c:	4b49      	ldr	r3, [pc, #292]	; (8009784 <WM_CreateWindowAsChild+0x13c>)
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b363      	cbz	r3, 80096bc <WM_CreateWindowAsChild+0x74>
 8009662:	4b49      	ldr	r3, [pc, #292]	; (8009788 <WM_CreateWindowAsChild+0x140>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	7c5a      	ldrb	r2, [r3, #17]
 8009668:	4b48      	ldr	r3, [pc, #288]	; (800978c <WM_CreateWindowAsChild+0x144>)
 800966a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	d024      	beq.n	80096bc <WM_CreateWindowAsChild+0x74>
 8009672:	b31b      	cbz	r3, 80096bc <WM_CreateWindowAsChild+0x74>
 8009674:	461d      	mov	r5, r3
 8009676:	4628      	mov	r0, r5
 8009678:	f005 fd90 	bl	800f19c <GUI_ALLOC_LockH>
 800967c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009680:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009684:	9001      	str	r0, [sp, #4]
 8009686:	4417      	add	r7, r2
 8009688:	4498      	add	r8, r3
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	d105      	bne.n	800969c <WM_CreateWindowAsChild+0x54>
 8009690:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8009694:	ebc2 0a0a 	rsb	sl, r2, sl
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	f1bb 0f00 	cmp.w	fp, #0
 80096a0:	d105      	bne.n	80096ae <WM_CreateWindowAsChild+0x66>
 80096a2:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 80096a6:	ebc3 0b0b 	rsb	fp, r3, fp
 80096aa:	f10b 0b01 	add.w	fp, fp, #1
 80096ae:	a801      	add	r0, sp, #4
 80096b0:	f005 fd82 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80096b4:	e002      	b.n	80096bc <WM_CreateWindowAsChild+0x74>
 80096b6:	1c6b      	adds	r3, r5, #1
 80096b8:	d1dd      	bne.n	8009676 <WM_CreateWindowAsChild+0x2e>
 80096ba:	2500      	movs	r5, #0
 80096bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80096be:	302c      	adds	r0, #44	; 0x2c
 80096c0:	f005 ff44 	bl	800f54c <GUI_ALLOC_AllocZero>
 80096c4:	4604      	mov	r4, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d056      	beq.n	8009778 <WM_CreateWindowAsChild+0x130>
 80096ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096cc:	431e      	orrs	r6, r3
 80096ce:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <WM_CreateWindowAsChild+0x13c>)
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	3201      	adds	r2, #1
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	f005 fd61 	bl	800f19c <GUI_ALLOC_LockH>
 80096da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096dc:	6103      	str	r3, [r0, #16]
 80096de:	f10d 0908 	add.w	r9, sp, #8
 80096e2:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <WM_CreateWindowAsChild+0x148>)
 80096e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80096e6:	f849 0d08 	str.w	r0, [r9, #-8]!
 80096ea:	4033      	ands	r3, r6
 80096ec:	8007      	strh	r7, [r0, #0]
 80096ee:	f8a0 8002 	strh.w	r8, [r0, #2]
 80096f2:	4457      	add	r7, sl
 80096f4:	44d8      	add	r8, fp
 80096f6:	4313      	orrs	r3, r2
 80096f8:	3f01      	subs	r7, #1
 80096fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80096fe:	6283      	str	r3, [r0, #40]	; 0x28
 8009700:	8087      	strh	r7, [r0, #4]
 8009702:	f8a0 8006 	strh.w	r8, [r0, #6]
 8009706:	4668      	mov	r0, sp
 8009708:	f005 fd56 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800970c:	4b21      	ldr	r3, [pc, #132]	; (8009794 <WM_CreateWindowAsChild+0x14c>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	b148      	cbz	r0, 8009726 <WM_CreateWindowAsChild+0xde>
 8009712:	f005 fd39 	bl	800f188 <GUI_ALLOC_h2p>
 8009716:	4607      	mov	r7, r0
 8009718:	4620      	mov	r0, r4
 800971a:	f005 fd35 	bl	800f188 <GUI_ALLOC_h2p>
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6143      	str	r3, [r0, #20]
 8009722:	617c      	str	r4, [r7, #20]
 8009724:	e000      	b.n	8009728 <WM_CreateWindowAsChild+0xe0>
 8009726:	601c      	str	r4, [r3, #0]
 8009728:	4629      	mov	r1, r5
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff fcf8 	bl	8009120 <WM__InsertWindowIntoList>
 8009730:	06b5      	lsls	r5, r6, #26
 8009732:	d502      	bpl.n	800973a <WM_CreateWindowAsChild+0xf2>
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff ff67 	bl	8009608 <WM_SelectWindow>
 800973a:	07f0      	lsls	r0, r6, #31
 800973c:	d503      	bpl.n	8009746 <WM_CreateWindowAsChild+0xfe>
 800973e:	4b16      	ldr	r3, [pc, #88]	; (8009798 <WM_CreateWindowAsChild+0x150>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	3201      	adds	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	0671      	lsls	r1, r6, #25
 8009748:	d502      	bpl.n	8009750 <WM_CreateWindowAsChild+0x108>
 800974a:	4620      	mov	r0, r4
 800974c:	f7fe fffb 	bl	8008746 <WM_BringToBottom>
 8009750:	07b2      	lsls	r2, r6, #30
 8009752:	d50d      	bpl.n	8009770 <WM_CreateWindowAsChild+0x128>
 8009754:	4620      	mov	r0, r4
 8009756:	f005 fd21 	bl	800f19c <GUI_ALLOC_LockH>
 800975a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800975c:	9000      	str	r0, [sp, #0]
 800975e:	f043 0302 	orr.w	r3, r3, #2
 8009762:	6283      	str	r3, [r0, #40]	; 0x28
 8009764:	4668      	mov	r0, sp
 8009766:	f005 fd27 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800976a:	4620      	mov	r0, r4
 800976c:	f7ff ff3e 	bl	80095ec <WM_InvalidateWindow>
 8009770:	4620      	mov	r0, r4
 8009772:	2101      	movs	r1, #1
 8009774:	f7ff fde5 	bl	8009342 <WM__SendMsgNoData>
 8009778:	4620      	mov	r0, r4
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	20005664 	.word	0x20005664
 8009784:	2000562c 	.word	0x2000562c
 8009788:	20000084 	.word	0x20000084
 800978c:	20005634 	.word	0x20005634
 8009790:	003f3f9f 	.word	0x003f3f9f
 8009794:	20005650 	.word	0x20005650
 8009798:	20005684 	.word	0x20005684

0800979c <WM_DeleteWindow>:
 800979c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800979e:	4604      	mov	r4, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d06e      	beq.n	8009882 <WM_DeleteWindow+0xe6>
 80097a4:	f7ff fd80 	bl	80092a8 <WM__IsWindow>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d06a      	beq.n	8009882 <WM_DeleteWindow+0xe6>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7ff fddf 	bl	8009370 <WM__GetTopLevelLayer>
 80097b2:	210b      	movs	r1, #11
 80097b4:	4605      	mov	r5, r0
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff fdc3 	bl	8009342 <WM__SendMsgNoData>
 80097bc:	4620      	mov	r0, r4
 80097be:	f006 fad9 	bl	800fd74 <WM__DeleteAssocTimer>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f005 fcea 	bl	800f19c <GUI_ALLOC_LockH>
 80097c8:	9001      	str	r0, [sp, #4]
 80097ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80097cc:	b108      	cbz	r0, 80097d2 <WM_DeleteWindow+0x36>
 80097ce:	f001 fb85 	bl	800aedc <GUI_MEMDEV_Delete>
 80097d2:	4b2d      	ldr	r3, [pc, #180]	; (8009888 <WM_DeleteWindow+0xec>)
 80097d4:	4a2d      	ldr	r2, [pc, #180]	; (800988c <WM_DeleteWindow+0xf0>)
 80097d6:	2100      	movs	r1, #0
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <WM_DeleteWindow+0xf4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80097e2:	42a0      	cmp	r0, r4
 80097e4:	bf08      	it	eq
 80097e6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80097ea:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <WM_DeleteWindow+0xf8>)
 80097ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80097f0:	42a1      	cmp	r1, r4
 80097f2:	bf04      	itt	eq
 80097f4:	2100      	moveq	r1, #0
 80097f6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80097fa:	4b27      	ldr	r3, [pc, #156]	; (8009898 <WM_DeleteWindow+0xfc>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	b12b      	cbz	r3, 800980c <WM_DeleteWindow+0x70>
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	42a2      	cmp	r2, r4
 8009804:	bf04      	itt	eq
 8009806:	2200      	moveq	r2, #0
 8009808:	605a      	streq	r2, [r3, #4]
 800980a:	e7f7      	b.n	80097fc <WM_DeleteWindow+0x60>
 800980c:	4620      	mov	r0, r4
 800980e:	2107      	movs	r1, #7
 8009810:	f7ff f8c5 	bl	800899e <WM_NotifyParent>
 8009814:	9e01      	ldr	r6, [sp, #4]
 8009816:	69f0      	ldr	r0, [r6, #28]
 8009818:	f7ff ffc0 	bl	800979c <WM_DeleteWindow>
 800981c:	69f3      	ldr	r3, [r6, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f9      	bne.n	8009816 <WM_DeleteWindow+0x7a>
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff fe91 	bl	800954a <WM__DetachWindow>
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <WM_DeleteWindow+0x100>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	b150      	cbz	r0, 8009844 <WM_DeleteWindow+0xa8>
 800982e:	f005 fcab 	bl	800f188 <GUI_ALLOC_h2p>
 8009832:	4606      	mov	r6, r0
 8009834:	6940      	ldr	r0, [r0, #20]
 8009836:	42a0      	cmp	r0, r4
 8009838:	d1f8      	bne.n	800982c <WM_DeleteWindow+0x90>
 800983a:	4620      	mov	r0, r4
 800983c:	f005 fca4 	bl	800f188 <GUI_ALLOC_h2p>
 8009840:	6943      	ldr	r3, [r0, #20]
 8009842:	6173      	str	r3, [r6, #20]
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	07da      	lsls	r2, r3, #31
 800984a:	d503      	bpl.n	8009854 <WM_DeleteWindow+0xb8>
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <WM_DeleteWindow+0x104>)
 800984e:	6811      	ldr	r1, [r2, #0]
 8009850:	3901      	subs	r1, #1
 8009852:	6011      	str	r1, [r2, #0]
 8009854:	069b      	lsls	r3, r3, #26
 8009856:	d503      	bpl.n	8009860 <WM_DeleteWindow+0xc4>
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <WM_DeleteWindow+0x108>)
 800985a:	881a      	ldrh	r2, [r3, #0]
 800985c:	3a01      	subs	r2, #1
 800985e:	801a      	strh	r2, [r3, #0]
 8009860:	a801      	add	r0, sp, #4
 8009862:	f005 fca9 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009866:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <WM_DeleteWindow+0x10c>)
 8009868:	881a      	ldrh	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	3a01      	subs	r2, #1
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	f005 fcce 	bl	800f210 <GUI_ALLOC_Free>
 8009874:	2d00      	cmp	r5, #0
 8009876:	db04      	blt.n	8009882 <WM_DeleteWindow+0xe6>
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <WM_DeleteWindow+0x110>)
 800987a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800987e:	f7ff fec3 	bl	8009608 <WM_SelectWindow>
 8009882:	b002      	add	sp, #8
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	bf00      	nop
 8009888:	20005468 	.word	0x20005468
 800988c:	20005644 	.word	0x20005644
 8009890:	20005654 	.word	0x20005654
 8009894:	20005678 	.word	0x20005678
 8009898:	20005670 	.word	0x20005670
 800989c:	20005650 	.word	0x20005650
 80098a0:	20005684 	.word	0x20005684
 80098a4:	2000564c 	.word	0x2000564c
 80098a8:	2000562c 	.word	0x2000562c
 80098ac:	20005634 	.word	0x20005634

080098b0 <_Exec1Input>:
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <_Exec1Input+0x70>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098b6:	461e      	mov	r6, r3
 80098b8:	b1d2      	cbz	r2, 80098f0 <_Exec1Input+0x40>
 80098ba:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <_Exec1Input+0x74>)
 80098bc:	681c      	ldr	r4, [r3, #0]
 80098be:	b1b4      	cbz	r4, 80098ee <_Exec1Input+0x3e>
 80098c0:	4620      	mov	r0, r4
 80098c2:	f005 fc6b 	bl	800f19c <GUI_ALLOC_LockH>
 80098c6:	4603      	mov	r3, r0
 80098c8:	a802      	add	r0, sp, #8
 80098ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098cc:	f840 3d04 	str.w	r3, [r0, #-4]!
 80098d0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80098d4:	695d      	ldr	r5, [r3, #20]
 80098d6:	d006      	beq.n	80098e6 <_Exec1Input+0x36>
 80098d8:	f005 fc6e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80098dc:	4620      	mov	r0, r4
 80098de:	f7ff ff5d 	bl	800979c <WM_DeleteWindow>
 80098e2:	462c      	mov	r4, r5
 80098e4:	e7eb      	b.n	80098be <_Exec1Input+0xe>
 80098e6:	462c      	mov	r4, r5
 80098e8:	f005 fc66 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80098ec:	e7e7      	b.n	80098be <_Exec1Input+0xe>
 80098ee:	6034      	str	r4, [r6, #0]
 80098f0:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <_Exec1Input+0x78>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	b103      	cbz	r3, 80098f8 <_Exec1Input+0x48>
 80098f6:	4798      	blx	r3
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <_Exec1Input+0x7c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	b953      	cbnz	r3, 8009914 <_Exec1Input+0x64>
 80098fe:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <_Exec1Input+0x80>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009906:	b148      	cbz	r0, 800991c <_Exec1Input+0x6c>
 8009908:	f003 fd76 	bl	800d3f8 <GUI_PollKeyMsg>
 800990c:	3000      	adds	r0, #0
 800990e:	bf18      	it	ne
 8009910:	2001      	movne	r0, #1
 8009912:	e003      	b.n	800991c <_Exec1Input+0x6c>
 8009914:	4798      	blx	r3
 8009916:	2800      	cmp	r0, #0
 8009918:	d0f1      	beq.n	80098fe <_Exec1Input+0x4e>
 800991a:	2001      	movs	r0, #1
 800991c:	b002      	add	sp, #8
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	2000544c 	.word	0x2000544c
 8009924:	20005650 	.word	0x20005650
 8009928:	2000563c 	.word	0x2000563c
 800992c:	200056e8 	.word	0x200056e8
 8009930:	20000084 	.word	0x20000084

08009934 <WM_GetActiveWindow>:
 8009934:	4b01      	ldr	r3, [pc, #4]	; (800993c <WM_GetActiveWindow+0x8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800993a:	4770      	bx	lr
 800993c:	20000084 	.word	0x20000084

08009940 <WM__GetNextIVR>:
 8009940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009944:	4f5d      	ldr	r7, [pc, #372]	; (8009abc <WM__GetNextIVR+0x17c>)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800994c:	2800      	cmp	r0, #0
 800994e:	f000 80b2 	beq.w	8009ab6 <WM__GetNextIVR+0x176>
 8009952:	4b5b      	ldr	r3, [pc, #364]	; (8009ac0 <WM__GetNextIVR+0x180>)
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	2a01      	cmp	r2, #1
 8009958:	461c      	mov	r4, r3
 800995a:	dd03      	ble.n	8009964 <WM__GetNextIVR+0x24>
 800995c:	3a01      	subs	r2, #1
 800995e:	615a      	str	r2, [r3, #20]
 8009960:	2000      	movs	r0, #0
 8009962:	e0a8      	b.n	8009ab6 <WM__GetNextIVR+0x176>
 8009964:	f104 0608 	add.w	r6, r4, #8
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800996e:	3301      	adds	r3, #1
 8009970:	ad02      	add	r5, sp, #8
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	e885 0003 	stmia.w	r5, {r0, r1}
 8009978:	b923      	cbnz	r3, 8009984 <WM__GetNextIVR+0x44>
 800997a:	8823      	ldrh	r3, [r4, #0]
 800997c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009980:	8863      	ldrh	r3, [r4, #2]
 8009982:	e011      	b.n	80099a8 <WM__GetNextIVR+0x68>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	8962      	ldrh	r2, [r4, #10]
 8009988:	f8ad 200a 	strh.w	r2, [sp, #10]
 800998c:	3301      	adds	r3, #1
 800998e:	b29b      	uxth	r3, r3
 8009990:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009994:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009998:	b21b      	sxth	r3, r3
 800999a:	429a      	cmp	r2, r3
 800999c:	da06      	bge.n	80099ac <WM__GetNextIVR+0x6c>
 800999e:	8823      	ldrh	r3, [r4, #0]
 80099a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80099a4:	89e3      	ldrh	r3, [r4, #14]
 80099a6:	3301      	adds	r3, #1
 80099a8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80099ac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80099b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80099b4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009ac0 <WM__GetNextIVR+0x180>
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dd04      	ble.n	80099c6 <WM__GetNextIVR+0x86>
 80099bc:	6963      	ldr	r3, [r4, #20]
 80099be:	3b01      	subs	r3, #1
 80099c0:	2000      	movs	r0, #0
 80099c2:	6163      	str	r3, [r4, #20]
 80099c4:	e077      	b.n	8009ab6 <WM__GetNextIVR+0x176>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80099ca:	f005 fbe7 	bl	800f19c <GUI_ALLOC_LockH>
 80099ce:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80099d2:	f9b8 3000 	ldrsh.w	r3, [r8]
 80099d6:	9001      	str	r0, [sp, #4]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d11c      	bne.n	8009a16 <WM__GetNextIVR+0xd6>
 80099dc:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80099e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80099e4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80099e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80099ec:	4b33      	ldr	r3, [pc, #204]	; (8009abc <WM__GetNextIVR+0x17c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099f2:	b15a      	cbz	r2, 8009a0c <WM__GetNextIVR+0xcc>
 80099f4:	4610      	mov	r0, r2
 80099f6:	f005 fbc7 	bl	800f188 <GUI_ALLOC_h2p>
 80099fa:	4680      	mov	r8, r0
 80099fc:	2200      	movs	r2, #0
 80099fe:	6a00      	ldr	r0, [r0, #32]
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7ff f973 	bl	8008cec <_Findy1>
 8009a06:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009a0a:	e7f2      	b.n	80099f2 <WM__GetNextIVR+0xb2>
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	4629      	mov	r1, r5
 8009a10:	69d8      	ldr	r0, [r3, #28]
 8009a12:	f7ff f96b 	bl	8008cec <_Findy1>
 8009a16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009a1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a22:	b16a      	cbz	r2, 8009a40 <WM__GetNextIVR+0x100>
 8009a24:	4610      	mov	r0, r2
 8009a26:	f005 fbaf 	bl	800f188 <GUI_ALLOC_h2p>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6a00      	ldr	r0, [r0, #32]
 8009a32:	f7ff f9b1 	bl	8008d98 <_Findx0>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d1ed      	bne.n	8009a16 <WM__GetNextIVR+0xd6>
 8009a3a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009a3e:	e7f0      	b.n	8009a22 <WM__GetNextIVR+0xe2>
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	4629      	mov	r1, r5
 8009a44:	69d8      	ldr	r0, [r3, #28]
 8009a46:	f7ff f9a7 	bl	8008d98 <_Findx0>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d1e3      	bne.n	8009a16 <WM__GetNextIVR+0xd6>
 8009a4e:	88a3      	ldrh	r3, [r4, #4]
 8009a50:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009a54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a58:	b21b      	sxth	r3, r3
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	dd07      	ble.n	8009a6e <WM__GetNextIVR+0x12e>
 8009a5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a62:	e886 0003 	stmia.w	r6, {r0, r1}
 8009a66:	a801      	add	r0, sp, #4
 8009a68:	f005 fba6 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009a6c:	e797      	b.n	800999e <WM__GetNextIVR+0x5e>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a72:	b152      	cbz	r2, 8009a8a <WM__GetNextIVR+0x14a>
 8009a74:	4610      	mov	r0, r2
 8009a76:	f005 fb87 	bl	800f188 <GUI_ALLOC_h2p>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	6a00      	ldr	r0, [r0, #32]
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7ff f9cd 	bl	8008e20 <_Findx1>
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	e7f3      	b.n	8009a72 <WM__GetNextIVR+0x132>
 8009a8a:	af04      	add	r7, sp, #16
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009a92:	69d8      	ldr	r0, [r3, #28]
 8009a94:	f7ff f9c4 	bl	8008e20 <_Findx1>
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f005 fb8d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	dc89      	bgt.n	80099bc <WM__GetNextIVR+0x7c>
 8009aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009aac:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ab0:	f7ff fbd6 	bl	8009260 <WM__ActivateClipRect>
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	b004      	add	sp, #16
 8009ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009abc:	20000084 	.word	0x20000084
 8009ac0:	20005450 	.word	0x20005450

08009ac4 <WM__InitIVRSearch>:
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	4f39      	ldr	r7, [pc, #228]	; (8009bb0 <WM__InitIVRSearch+0xec>)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009ad0:	b086      	sub	sp, #24
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	b912      	cbnz	r2, 8009adc <WM__InitIVRSearch+0x18>
 8009ad6:	f7ff fbc3 	bl	8009260 <WM__ActivateClipRect>
 8009ada:	e064      	b.n	8009ba6 <WM__InitIVRSearch+0xe2>
 8009adc:	4d35      	ldr	r5, [pc, #212]	; (8009bb4 <WM__InitIVRSearch+0xf0>)
 8009ade:	696a      	ldr	r2, [r5, #20]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	2a01      	cmp	r2, #1
 8009ae4:	616a      	str	r2, [r5, #20]
 8009ae6:	462c      	mov	r4, r5
 8009ae8:	dc5d      	bgt.n	8009ba6 <WM__InitIVRSearch+0xe2>
 8009aea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009aec:	f005 fb56 	bl	800f19c <GUI_ALLOC_LockH>
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	612a      	str	r2, [r5, #16]
 8009af6:	4a30      	ldr	r2, [pc, #192]	; (8009bb8 <WM__InitIVRSearch+0xf4>)
 8009af8:	9000      	str	r0, [sp, #0]
 8009afa:	7812      	ldrb	r2, [r2, #0]
 8009afc:	b12a      	cbz	r2, 8009b0a <WM__InitIVRSearch+0x46>
 8009afe:	f100 0308 	add.w	r3, r0, #8
 8009b02:	aa02      	add	r2, sp, #8
 8009b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b08:	e005      	b.n	8009b16 <WM__InitIVRSearch+0x52>
 8009b0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009b0c:	f012 0802 	ands.w	r8, r2, #2
 8009b10:	d00a      	beq.n	8009b28 <WM__InitIVRSearch+0x64>
 8009b12:	c803      	ldmia	r0, {r0, r1}
 8009b14:	aa02      	add	r2, sp, #8
 8009b16:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b1a:	ad02      	add	r5, sp, #8
 8009b1c:	b166      	cbz	r6, 8009b38 <WM__InitIVRSearch+0x74>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4631      	mov	r1, r6
 8009b22:	f003 f819 	bl	800cb58 <GUI__IntersectRect>
 8009b26:	e007      	b.n	8009b38 <WM__InitIVRSearch+0x74>
 8009b28:	696b      	ldr	r3, [r5, #20]
 8009b2a:	4668      	mov	r0, sp
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	616b      	str	r3, [r5, #20]
 8009b30:	f005 fb42 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009b34:	4640      	mov	r0, r8
 8009b36:	e037      	b.n	8009ba8 <WM__InitIVRSearch+0xe4>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	4e20      	ldr	r6, [pc, #128]	; (8009bbc <WM__InitIVRSearch+0xf8>)
 8009b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b3e:	b1c2      	cbz	r2, 8009b72 <WM__InitIVRSearch+0xae>
 8009b40:	9b00      	ldr	r3, [sp, #0]
 8009b42:	6810      	ldr	r0, [r2, #0]
 8009b44:	6851      	ldr	r1, [r2, #4]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	ab04      	add	r3, sp, #16
 8009b4a:	c303      	stmia	r3!, {r0, r1}
 8009b4c:	6833      	ldr	r3, [r6, #0]
 8009b4e:	b133      	cbz	r3, 8009b5e <WM__InitIVRSearch+0x9a>
 8009b50:	a801      	add	r0, sp, #4
 8009b52:	f005 fb31 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009b56:	6830      	ldr	r0, [r6, #0]
 8009b58:	f005 fb20 	bl	800f19c <GUI_ALLOC_LockH>
 8009b5c:	9001      	str	r0, [sp, #4]
 8009b5e:	9801      	ldr	r0, [sp, #4]
 8009b60:	a904      	add	r1, sp, #16
 8009b62:	f7ff fb4d 	bl	8009200 <WM__Client2Screen>
 8009b66:	4628      	mov	r0, r5
 8009b68:	a904      	add	r1, sp, #16
 8009b6a:	f002 fff5 	bl	800cb58 <GUI__IntersectRect>
 8009b6e:	a801      	add	r0, sp, #4
 8009b70:	e000      	b.n	8009b74 <WM__InitIVRSearch+0xb0>
 8009b72:	4668      	mov	r0, sp
 8009b74:	f005 fb20 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009b78:	6831      	ldr	r1, [r6, #0]
 8009b7a:	b119      	cbz	r1, 8009b84 <WM__InitIVRSearch+0xc0>
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7ff faa1 	bl	80090c4 <WM__ClipAtParentBorders>
 8009b82:	b128      	cbz	r0, 8009b90 <WM__InitIVRSearch+0xcc>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	4628      	mov	r0, r5
 8009b88:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009b8a:	f7ff fa9b 	bl	80090c4 <WM__ClipAtParentBorders>
 8009b8e:	b918      	cbnz	r0, 8009b98 <WM__InitIVRSearch+0xd4>
 8009b90:	6963      	ldr	r3, [r4, #20]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	6163      	str	r3, [r4, #20]
 8009b96:	e007      	b.n	8009ba8 <WM__InitIVRSearch+0xe4>
 8009b98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ba0:	f7ff fece 	bl	8009940 <WM__GetNextIVR>
 8009ba4:	e000      	b.n	8009ba8 <WM__InitIVRSearch+0xe4>
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	b006      	add	sp, #24
 8009baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000084 	.word	0x20000084
 8009bb4:	20005450 	.word	0x20005450
 8009bb8:	20005660 	.word	0x20005660
 8009bbc:	20005630 	.word	0x20005630

08009bc0 <WM_SetDefault>:
 8009bc0:	b508      	push	{r3, lr}
 8009bc2:	f004 f8db 	bl	800dd7c <GL_SetDefault>
 8009bc6:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <WM_SetDefault+0x10>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8009bce:	bd08      	pop	{r3, pc}
 8009bd0:	20000084 	.word	0x20000084

08009bd4 <WM__Paint1>:
 8009bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd6:	b089      	sub	sp, #36	; 0x24
 8009bd8:	4604      	mov	r4, r0
 8009bda:	f005 fadf 	bl	800f19c <GUI_ALLOC_LockH>
 8009bde:	6907      	ldr	r7, [r0, #16]
 8009be0:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009be2:	9001      	str	r0, [sp, #4]
 8009be4:	3008      	adds	r0, #8
 8009be6:	c803      	ldmia	r0, {r0, r1}
 8009be8:	ad02      	add	r5, sp, #8
 8009bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8009bee:	a801      	add	r0, sp, #4
 8009bf0:	f005 fae2 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	d031      	beq.n	8009c5c <WM__Paint1+0x88>
 8009bf8:	07b3      	lsls	r3, r6, #30
 8009bfa:	d52f      	bpl.n	8009c5c <WM__Paint1+0x88>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	212e      	movs	r1, #46	; 0x2e
 8009c00:	f7fe febd 	bl	800897e <WM_SendMessageNoPara>
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <WM__Paint1+0x8c>)
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8009c0c:	f102 0201 	add.w	r2, r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	461e      	mov	r6, r3
 8009c14:	d00a      	beq.n	8009c2c <WM__Paint1+0x58>
 8009c16:	230f      	movs	r3, #15
 8009c18:	9405      	str	r4, [sp, #20]
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	9507      	str	r5, [sp, #28]
 8009c1e:	f7ff ffcf 	bl	8009bc0 <WM_SetDefault>
 8009c22:	4620      	mov	r0, r4
 8009c24:	a904      	add	r1, sp, #16
 8009c26:	f7fe fa71 	bl	800810c <WM__SendMessage>
 8009c2a:	e010      	b.n	8009c4e <WM__Paint1+0x7a>
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f7ff ff49 	bl	8009ac4 <WM__InitIVRSearch>
 8009c32:	b160      	cbz	r0, 8009c4e <WM__Paint1+0x7a>
 8009c34:	230f      	movs	r3, #15
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	9405      	str	r4, [sp, #20]
 8009c3a:	9507      	str	r5, [sp, #28]
 8009c3c:	f7ff ffc0 	bl	8009bc0 <WM_SetDefault>
 8009c40:	4620      	mov	r0, r4
 8009c42:	a904      	add	r1, sp, #16
 8009c44:	f7fe fa62 	bl	800810c <WM__SendMessage>
 8009c48:	f7ff fe7a 	bl	8009940 <WM__GetNextIVR>
 8009c4c:	e7f1      	b.n	8009c32 <WM__Paint1+0x5e>
 8009c4e:	7833      	ldrb	r3, [r6, #0]
 8009c50:	4620      	mov	r0, r4
 8009c52:	3b01      	subs	r3, #1
 8009c54:	212f      	movs	r1, #47	; 0x2f
 8009c56:	7033      	strb	r3, [r6, #0]
 8009c58:	f7fe fe91 	bl	800897e <WM_SendMessageNoPara>
 8009c5c:	b009      	add	sp, #36	; 0x24
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c60:	20005660 	.word	0x20005660

08009c64 <WM__Paint>:
 8009c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c66:	b089      	sub	sp, #36	; 0x24
 8009c68:	ac06      	add	r4, sp, #24
 8009c6a:	9003      	str	r0, [sp, #12]
 8009c6c:	f005 fa96 	bl	800f19c <GUI_ALLOC_LockH>
 8009c70:	f100 0208 	add.w	r2, r0, #8
 8009c74:	4603      	mov	r3, r0
 8009c76:	9005      	str	r0, [sp, #20]
 8009c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c7c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009c7e:	699e      	ldr	r6, [r3, #24]
 8009c80:	691f      	ldr	r7, [r3, #16]
 8009c82:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c86:	a805      	add	r0, sp, #20
 8009c88:	f005 fa96 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009c8c:	f244 0320 	movw	r3, #16416	; 0x4020
 8009c90:	402b      	ands	r3, r5
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d034      	beq.n	8009d00 <WM__Paint+0x9c>
 8009c96:	b1bf      	cbz	r7, 8009cc8 <WM__Paint+0x64>
 8009c98:	4620      	mov	r0, r4
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	f7ff fa12 	bl	80090c4 <WM__ClipAtParentBorders>
 8009ca0:	b190      	cbz	r0, 8009cc8 <WM__Paint+0x64>
 8009ca2:	9803      	ldr	r0, [sp, #12]
 8009ca4:	f7ff fcb0 	bl	8009608 <WM_SelectWindow>
 8009ca8:	0769      	lsls	r1, r5, #29
 8009caa:	d50f      	bpl.n	8009ccc <WM__Paint+0x68>
 8009cac:	b126      	cbz	r6, 8009cb8 <WM__Paint+0x54>
 8009cae:	f005 0501 	and.w	r5, r5, #1
 8009cb2:	f085 0501 	eor.w	r5, r5, #1
 8009cb6:	e000      	b.n	8009cba <WM__Paint+0x56>
 8009cb8:	2501      	movs	r5, #1
 8009cba:	9500      	str	r5, [sp, #0]
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	4912      	ldr	r1, [pc, #72]	; (8009d08 <WM__Paint+0xa4>)
 8009cc0:	aa03      	add	r2, sp, #12
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f000 fa9c 	bl	800a200 <GUI_MEMDEV_Draw>
 8009cc8:	2400      	movs	r4, #0
 8009cca:	e003      	b.n	8009cd4 <WM__Paint+0x70>
 8009ccc:	9803      	ldr	r0, [sp, #12]
 8009cce:	f7ff f989 	bl	8008fe4 <WM__PaintWinAndOverlays>
 8009cd2:	2401      	movs	r4, #1
 8009cd4:	9803      	ldr	r0, [sp, #12]
 8009cd6:	f005 fa61 	bl	800f19c <GUI_ALLOC_LockH>
 8009cda:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009cdc:	9005      	str	r0, [sp, #20]
 8009cde:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8009ce2:	f023 0320 	bic.w	r3, r3, #32
 8009ce6:	0492      	lsls	r2, r2, #18
 8009ce8:	bf48      	it	mi
 8009cea:	f043 0304 	orrmi.w	r3, r3, #4
 8009cee:	6283      	str	r3, [r0, #40]	; 0x28
 8009cf0:	a805      	add	r0, sp, #20
 8009cf2:	f005 fa61 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <WM__Paint+0xa8>)
 8009cf8:	881a      	ldrh	r2, [r3, #0]
 8009cfa:	3a01      	subs	r2, #1
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	e000      	b.n	8009d02 <WM__Paint+0x9e>
 8009d00:	461c      	mov	r4, r3
 8009d02:	4620      	mov	r0, r4
 8009d04:	b009      	add	sp, #36	; 0x24
 8009d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d08:	0800905d 	.word	0x0800905d
 8009d0c:	2000564c 	.word	0x2000564c

08009d10 <_Exec1Draw>:
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <_Exec1Draw+0x70>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8009d1c:	b09c      	sub	sp, #112	; 0x70
 8009d1e:	461d      	mov	r5, r3
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d02a      	beq.n	8009d7a <_Exec1Draw+0x6a>
 8009d24:	4b17      	ldr	r3, [pc, #92]	; (8009d84 <_Exec1Draw+0x74>)
 8009d26:	8818      	ldrh	r0, [r3, #0]
 8009d28:	b338      	cbz	r0, 8009d7a <_Exec1Draw+0x6a>
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <_Exec1Draw+0x78>)
 8009d2c:	6814      	ldr	r4, [r2, #0]
 8009d2e:	4616      	mov	r6, r2
 8009d30:	b90c      	cbnz	r4, 8009d36 <_Exec1Draw+0x26>
 8009d32:	4b16      	ldr	r3, [pc, #88]	; (8009d8c <_Exec1Draw+0x7c>)
 8009d34:	681c      	ldr	r4, [r3, #0]
 8009d36:	4668      	mov	r0, sp
 8009d38:	f003 ffbc 	bl	800dcb4 <GUI_SaveContext_W>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8009d40:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009d42:	b924      	cbnz	r4, 8009d4e <_Exec1Draw+0x3e>
 8009d44:	2400      	movs	r4, #0
 8009d46:	e00d      	b.n	8009d64 <_Exec1Draw+0x54>
 8009d48:	f1b8 0f00 	cmp.w	r8, #0
 8009d4c:	d10a      	bne.n	8009d64 <_Exec1Draw+0x54>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff ff88 	bl	8009c64 <WM__Paint>
 8009d54:	4680      	mov	r8, r0
 8009d56:	4620      	mov	r0, r4
 8009d58:	f005 fa16 	bl	800f188 <GUI_ALLOC_h2p>
 8009d5c:	6944      	ldr	r4, [r0, #20]
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d1f2      	bne.n	8009d48 <_Exec1Draw+0x38>
 8009d62:	e7ef      	b.n	8009d44 <_Exec1Draw+0x34>
 8009d64:	4638      	mov	r0, r7
 8009d66:	6034      	str	r4, [r6, #0]
 8009d68:	f003 ffc3 	bl	800dcf2 <GUI_SetColor>
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f003 ffbe 	bl	800dcee <GUI_SetBkColor>
 8009d72:	4668      	mov	r0, sp
 8009d74:	f003 ffa8 	bl	800dcc8 <GUI_RestoreContext>
 8009d78:	2001      	movs	r0, #1
 8009d7a:	b01c      	add	sp, #112	; 0x70
 8009d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d80:	20000084 	.word	0x20000084
 8009d84:	2000564c 	.word	0x2000564c
 8009d88:	20005468 	.word	0x20005468
 8009d8c:	20005650 	.word	0x20005650

08009d90 <WM_Exec>:
 8009d90:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <WM_Exec+0x64>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	b103      	cbz	r3, 8009d9a <WM_Exec+0xa>
 8009d98:	4798      	blx	r3
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	f7ff fd88 	bl	80098b0 <_Exec1Input>
 8009da0:	b108      	cbz	r0, 8009da6 <WM_Exec+0x16>
 8009da2:	2501      	movs	r5, #1
 8009da4:	e7fa      	b.n	8009d9c <WM_Exec+0xc>
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <WM_Exec+0x68>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009dae:	b144      	cbz	r4, 8009dc2 <WM_Exec+0x32>
 8009db0:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <WM_Exec+0x6c>)
 8009db2:	881c      	ldrh	r4, [r3, #0]
 8009db4:	b12c      	cbz	r4, 8009dc2 <WM_Exec+0x32>
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <WM_Exec+0x70>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	b1a3      	cbz	r3, 8009de6 <WM_Exec+0x56>
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4798      	blx	r3
 8009dc0:	2401      	movs	r4, #1
 8009dc2:	f7ff ffa5 	bl	8009d10 <_Exec1Draw>
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	b108      	cbz	r0, 8009dce <WM_Exec+0x3e>
 8009dca:	2501      	movs	r5, #1
 8009dcc:	e7f9      	b.n	8009dc2 <WM_Exec+0x32>
 8009dce:	b174      	cbz	r4, 8009dee <WM_Exec+0x5e>
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <WM_Exec+0x70>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	b123      	cbz	r3, 8009de0 <WM_Exec+0x50>
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	4798      	blx	r3
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <WM_Exec+0x74>)
 8009ddc:	601e      	str	r6, [r3, #0]
 8009dde:	e006      	b.n	8009dee <WM_Exec+0x5e>
 8009de0:	f003 f856 	bl	800ce90 <GUI__ManageCache>
 8009de4:	e003      	b.n	8009dee <WM_Exec+0x5e>
 8009de6:	2001      	movs	r0, #1
 8009de8:	f003 f852 	bl	800ce90 <GUI__ManageCache>
 8009dec:	e7e8      	b.n	8009dc0 <WM_Exec+0x30>
 8009dee:	4628      	mov	r0, r5
 8009df0:	bd70      	pop	{r4, r5, r6, pc}
 8009df2:	bf00      	nop
 8009df4:	20005640 	.word	0x20005640
 8009df8:	20000084 	.word	0x20000084
 8009dfc:	2000564c 	.word	0x2000564c
 8009e00:	20005674 	.word	0x20005674
 8009e04:	2000565c 	.word	0x2000565c

08009e08 <WM_Activate>:
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <WM_Activate+0xc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009e12:	4770      	bx	lr
 8009e14:	20000084 	.word	0x20000084

08009e18 <WM_Deactivate>:
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <WM_Deactivate+0x10>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009e22:	f002 bdb9 	b.w	800c998 <LCD_SetClipRectMax>
 8009e26:	bf00      	nop
 8009e28:	20000084 	.word	0x20000084

08009e2c <WM_DefaultProc>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	6840      	ldr	r0, [r0, #4]
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	68e1      	ldr	r1, [r4, #12]
 8009e36:	2b17      	cmp	r3, #23
 8009e38:	d00f      	beq.n	8009e5a <WM_DefaultProc+0x2e>
 8009e3a:	dc06      	bgt.n	8009e4a <WM_DefaultProc+0x1e>
 8009e3c:	2b0e      	cmp	r3, #14
 8009e3e:	d00e      	beq.n	8009e5e <WM_DefaultProc+0x32>
 8009e40:	2b14      	cmp	r3, #20
 8009e42:	d114      	bne.n	8009e6e <WM_DefaultProc+0x42>
 8009e44:	f7fe fa16 	bl	8008274 <WM__GetClientRectEx>
 8009e48:	e011      	b.n	8009e6e <WM_DefaultProc+0x42>
 8009e4a:	2b22      	cmp	r3, #34	; 0x22
 8009e4c:	d00c      	beq.n	8009e68 <WM_DefaultProc+0x3c>
 8009e4e:	2b28      	cmp	r3, #40	; 0x28
 8009e50:	d10d      	bne.n	8009e6e <WM_DefaultProc+0x42>
 8009e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e56:	f7ff bbc9 	b.w	80095ec <WM_InvalidateWindow>
 8009e5a:	60e0      	str	r0, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	4621      	mov	r1, r4
 8009e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e64:	f7fe bd8d 	b.w	8008982 <WM_SendToParent>
 8009e68:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009e6c:	e000      	b.n	8009e70 <WM_DefaultProc+0x44>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60e3      	str	r3, [r4, #12]
 8009e72:	bd10      	pop	{r4, pc}

08009e74 <_cbBackWin>:
 8009e74:	6803      	ldr	r3, [r0, #0]
 8009e76:	2b0e      	cmp	r3, #14
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	d002      	beq.n	8009e84 <_cbBackWin+0x10>
 8009e7e:	2b0f      	cmp	r3, #15
 8009e80:	d009      	beq.n	8009e96 <_cbBackWin+0x22>
 8009e82:	e020      	b.n	8009ec6 <_cbBackWin+0x52>
 8009e84:	68c3      	ldr	r3, [r0, #12]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	2a01      	cmp	r2, #1
 8009e8a:	d121      	bne.n	8009ed0 <_cbBackWin+0x5c>
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e92:	f003 baa9 	b.w	800d3e8 <GUI_StoreKey>
 8009e96:	4a0f      	ldr	r2, [pc, #60]	; (8009ed4 <_cbBackWin+0x60>)
 8009e98:	6843      	ldr	r3, [r0, #4]
 8009e9a:	6811      	ldr	r1, [r2, #0]
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	d006      	beq.n	8009eae <_cbBackWin+0x3a>
 8009ea0:	6852      	ldr	r2, [r2, #4]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf14      	ite	ne
 8009ea6:	f04f 33ff 	movne.w	r3, #4294967295
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	e000      	b.n	8009eb0 <_cbBackWin+0x3c>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4a09      	ldr	r2, [pc, #36]	; (8009ed8 <_cbBackWin+0x64>)
 8009eb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009eb6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009eba:	4298      	cmp	r0, r3
 8009ebc:	d003      	beq.n	8009ec6 <_cbBackWin+0x52>
 8009ebe:	f003 ff16 	bl	800dcee <GUI_SetBkColor>
 8009ec2:	f003 fd7b 	bl	800d9bc <GUI_Clear>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ecc:	f7ff bfae 	b.w	8009e2c <WM_DefaultProc>
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20005634 	.word	0x20005634
 8009ed8:	20005668 	.word	0x20005668

08009edc <WM_Init>:
 8009edc:	b530      	push	{r4, r5, lr}
 8009ede:	4b2b      	ldr	r3, [pc, #172]	; (8009f8c <WM_Init+0xb0>)
 8009ee0:	7818      	ldrb	r0, [r3, #0]
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	461d      	mov	r5, r3
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d14d      	bne.n	8009f86 <WM_Init+0xaa>
 8009eea:	4b29      	ldr	r3, [pc, #164]	; (8009f90 <WM_Init+0xb4>)
 8009eec:	6018      	str	r0, [r3, #0]
 8009eee:	4b29      	ldr	r3, [pc, #164]	; (8009f94 <WM_Init+0xb8>)
 8009ef0:	6018      	str	r0, [r3, #0]
 8009ef2:	4b29      	ldr	r3, [pc, #164]	; (8009f98 <WM_Init+0xbc>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6458      	str	r0, [r3, #68]	; 0x44
 8009ef8:	4b28      	ldr	r3, [pc, #160]	; (8009f9c <WM_Init+0xc0>)
 8009efa:	8018      	strh	r0, [r3, #0]
 8009efc:	4b28      	ldr	r3, [pc, #160]	; (8009fa0 <WM_Init+0xc4>)
 8009efe:	4604      	mov	r4, r0
 8009f00:	8018      	strh	r0, [r3, #0]
 8009f02:	4620      	mov	r0, r4
 8009f04:	f003 fc10 	bl	800d728 <GUI_DEVICE__GetpDriver>
 8009f08:	b1c0      	cbz	r0, 8009f3c <WM_Init+0x60>
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009f14:	2000      	movs	r0, #0
 8009f16:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009f1a:	4b22      	ldr	r3, [pc, #136]	; (8009fa4 <WM_Init+0xc8>)
 8009f1c:	9302      	str	r3, [sp, #8]
 8009f1e:	9003      	str	r0, [sp, #12]
 8009f20:	4613      	mov	r3, r2
 8009f22:	4601      	mov	r1, r0
 8009f24:	f7ff fb90 	bl	8009648 <WM_CreateWindowAsChild>
 8009f28:	4b1f      	ldr	r3, [pc, #124]	; (8009fa8 <WM_Init+0xcc>)
 8009f2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009f2e:	4b1f      	ldr	r3, [pc, #124]	; (8009fac <WM_Init+0xd0>)
 8009f30:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009f34:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009f38:	f7ff fb58 	bl	80095ec <WM_InvalidateWindow>
 8009f3c:	3401      	adds	r4, #1
 8009f3e:	2c02      	cmp	r4, #2
 8009f40:	d1df      	bne.n	8009f02 <WM_Init+0x26>
 8009f42:	481b      	ldr	r0, [pc, #108]	; (8009fb0 <WM_Init+0xd4>)
 8009f44:	f7fe f98e 	bl	8008264 <WM__AddCriticalHandle>
 8009f48:	481a      	ldr	r0, [pc, #104]	; (8009fb4 <WM_Init+0xd8>)
 8009f4a:	f7fe f98b 	bl	8008264 <WM__AddCriticalHandle>
 8009f4e:	481a      	ldr	r0, [pc, #104]	; (8009fb8 <WM_Init+0xdc>)
 8009f50:	f7fe f988 	bl	8008264 <WM__AddCriticalHandle>
 8009f54:	4819      	ldr	r0, [pc, #100]	; (8009fbc <WM_Init+0xe0>)
 8009f56:	f7fe f985 	bl	8008264 <WM__AddCriticalHandle>
 8009f5a:	4819      	ldr	r0, [pc, #100]	; (8009fc0 <WM_Init+0xe4>)
 8009f5c:	f7fe f982 	bl	8008264 <WM__AddCriticalHandle>
 8009f60:	4818      	ldr	r0, [pc, #96]	; (8009fc4 <WM_Init+0xe8>)
 8009f62:	f7fe f97f 	bl	8008264 <WM__AddCriticalHandle>
 8009f66:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <WM_Init+0xcc>)
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f7ff fb4d 	bl	8009608 <WM_SelectWindow>
 8009f6e:	f7ff ff4b 	bl	8009e08 <WM_Activate>
 8009f72:	2301      	movs	r3, #1
 8009f74:	702b      	strb	r3, [r5, #0]
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <WM_Init+0xec>)
 8009f78:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <WM_Init+0xf0>)
 8009f7a:	6003      	str	r3, [r0, #0]
 8009f7c:	b005      	add	sp, #20
 8009f7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f82:	f003 bd2b 	b.w	800d9dc <GUI__RegisterExit>
 8009f86:	b005      	add	sp, #20
 8009f88:	bd30      	pop	{r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	2000546c 	.word	0x2000546c
 8009f90:	20005650 	.word	0x20005650
 8009f94:	20005468 	.word	0x20005468
 8009f98:	20000084 	.word	0x20000084
 8009f9c:	2000564c 	.word	0x2000564c
 8009fa0:	2000562c 	.word	0x2000562c
 8009fa4:	08009e75 	.word	0x08009e75
 8009fa8:	20005634 	.word	0x20005634
 8009fac:	20005668 	.word	0x20005668
 8009fb0:	200057cc 	.word	0x200057cc
 8009fb4:	200057bc 	.word	0x200057bc
 8009fb8:	200057ac 	.word	0x200057ac
 8009fbc:	200057d4 	.word	0x200057d4
 8009fc0:	200057c4 	.word	0x200057c4
 8009fc4:	200057b4 	.word	0x200057b4
 8009fc8:	20005444 	.word	0x20005444
 8009fcc:	08008c1d 	.word	0x08008c1d

08009fd0 <_CreateStaticDevice>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	b087      	sub	sp, #28
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	f005 f8e0 	bl	800f19c <GUI_ALLOC_LockH>
 8009fdc:	af06      	add	r7, sp, #24
 8009fde:	f8b0 8000 	ldrh.w	r8, [r0]
 8009fe2:	8886      	ldrh	r6, [r0, #4]
 8009fe4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8009fe8:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8009fec:	f847 0d04 	str.w	r0, [r7, #-4]!
 8009ff0:	fa0f f888 	sxth.w	r8, r8
 8009ff4:	b236      	sxth	r6, r6
 8009ff6:	ebc8 0606 	rsb	r6, r8, r6
 8009ffa:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8009ffe:	3601      	adds	r6, #1
 800a000:	4638      	mov	r0, r7
 800a002:	fa0f f989 	sxth.w	r9, r9
 800a006:	fa0f f58b 	sxth.w	r5, fp
 800a00a:	f005 f8d5 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a00e:	ebc9 0505 	rsb	r5, r9, r5
 800a012:	2e00      	cmp	r6, #0
 800a014:	f105 0501 	add.w	r5, r5, #1
 800a018:	dd4d      	ble.n	800a0b6 <_CreateStaticDevice+0xe6>
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	dd4b      	ble.n	800a0b6 <_CreateStaticDevice+0xe6>
 800a01e:	f1ba 0f00 	cmp.w	sl, #0
 800a022:	d04a      	beq.n	800a0ba <_CreateStaticDevice+0xea>
 800a024:	4650      	mov	r0, sl
 800a026:	f005 f8b9 	bl	800f19c <GUI_ALLOC_LockH>
 800a02a:	ab06      	add	r3, sp, #24
 800a02c:	8886      	ldrh	r6, [r0, #4]
 800a02e:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a032:	88c5      	ldrh	r5, [r0, #6]
 800a034:	b236      	sxth	r6, r6
 800a036:	4618      	mov	r0, r3
 800a038:	f005 f8be 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a03c:	4546      	cmp	r6, r8
 800a03e:	d102      	bne.n	800a046 <_CreateStaticDevice+0x76>
 800a040:	b22d      	sxth	r5, r5
 800a042:	454d      	cmp	r5, r9
 800a044:	d032      	beq.n	800a0ac <_CreateStaticDevice+0xdc>
 800a046:	4650      	mov	r0, sl
 800a048:	4641      	mov	r1, r8
 800a04a:	464a      	mov	r2, r9
 800a04c:	f000 f888 	bl	800a160 <GUI_MEMDEV_SetOrg>
 800a050:	e02c      	b.n	800a0ac <_CreateStaticDevice+0xdc>
 800a052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a058:	6283      	str	r3, [r0, #40]	; 0x28
 800a05a:	4638      	mov	r0, r7
 800a05c:	f005 f8ac 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a060:	4640      	mov	r0, r8
 800a062:	f000 ff99 	bl	800af98 <GUI_MEMDEV_Select>
 800a066:	4607      	mov	r7, r0
 800a068:	4650      	mov	r0, sl
 800a06a:	f003 f995 	bl	800d398 <GUI__AlphaPreserveTrans>
 800a06e:	4640      	mov	r0, r8
 800a070:	f000 f8b6 	bl	800a1e0 <GUI_MEMDEV_GetDataPtr>
 800a074:	4a2d      	ldr	r2, [pc, #180]	; (800a12c <_CreateStaticDevice+0x15c>)
 800a076:	4b2e      	ldr	r3, [pc, #184]	; (800a130 <_CreateStaticDevice+0x160>)
 800a078:	7811      	ldrb	r1, [r2, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4375      	muls	r5, r6
 800a07e:	00aa      	lsls	r2, r5, #2
 800a080:	4e2c      	ldr	r6, [pc, #176]	; (800a134 <_CreateStaticDevice+0x164>)
 800a082:	4d2d      	ldr	r5, [pc, #180]	; (800a138 <_CreateStaticDevice+0x168>)
 800a084:	4798      	blx	r3
 800a086:	4620      	mov	r0, r4
 800a088:	f8d5 8000 	ldr.w	r8, [r5]
 800a08c:	6034      	str	r4, [r6, #0]
 800a08e:	f7fe fb4a 	bl	8008726 <WM_GetWindowOrgX>
 800a092:	6028      	str	r0, [r5, #0]
 800a094:	4620      	mov	r0, r4
 800a096:	f7ff fd9d 	bl	8009bd4 <WM__Paint1>
 800a09a:	2000      	movs	r0, #0
 800a09c:	f8c5 8000 	str.w	r8, [r5]
 800a0a0:	6030      	str	r0, [r6, #0]
 800a0a2:	f003 f979 	bl	800d398 <GUI__AlphaPreserveTrans>
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f000 ff76 	bl	800af98 <GUI_MEMDEV_Select>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f005 f86b 	bl	800f188 <GUI_ALLOC_h2p>
 800a0b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a0b4:	e037      	b.n	800a126 <_CreateStaticDevice+0x156>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e035      	b.n	800a126 <_CreateStaticDevice+0x156>
 800a0ba:	f7fe fabb 	bl	8008634 <WM_GetDesktopWindow>
 800a0be:	4284      	cmp	r4, r0
 800a0c0:	d112      	bne.n	800a0e8 <_CreateStaticDevice+0x118>
 800a0c2:	f002 f8fb 	bl	800c2bc <LCD_GetXSize>
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	f002 f900 	bl	800c2cc <LCD_GetYSize>
 800a0cc:	4556      	cmp	r6, sl
 800a0ce:	dc02      	bgt.n	800a0d6 <_CreateStaticDevice+0x106>
 800a0d0:	4285      	cmp	r5, r0
 800a0d2:	dd09      	ble.n	800a0e8 <_CreateStaticDevice+0x118>
 800a0d4:	e000      	b.n	800a0d8 <_CreateStaticDevice+0x108>
 800a0d6:	4656      	mov	r6, sl
 800a0d8:	4285      	cmp	r5, r0
 800a0da:	bfa8      	it	ge
 800a0dc:	4605      	movge	r5, r0
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	f7fe fcb4 	bl	8008a50 <WM_SetSize>
 800a0e8:	4b14      	ldr	r3, [pc, #80]	; (800a13c <_CreateStaticDevice+0x16c>)
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	f04f 0a01 	mov.w	sl, #1
 800a0f0:	4b13      	ldr	r3, [pc, #76]	; (800a140 <_CreateStaticDevice+0x170>)
 800a0f2:	9302      	str	r3, [sp, #8]
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f8cd a000 	str.w	sl, [sp]
 800a100:	f000 fe54 	bl	800adac <GUI_MEMDEV__CreateFixed>
 800a104:	4680      	mov	r8, r0
 800a106:	4620      	mov	r0, r4
 800a108:	f005 f848 	bl	800f19c <GUI_ALLOC_LockH>
 800a10c:	9005      	str	r0, [sp, #20]
 800a10e:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800a112:	f1b8 0f00 	cmp.w	r8, #0
 800a116:	d19c      	bne.n	800a052 <_CreateStaticDevice+0x82>
 800a118:	4638      	mov	r0, r7
 800a11a:	f005 f84d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff fd58 	bl	8009bd4 <WM__Paint1>
 800a124:	4640      	mov	r0, r8
 800a126:	b007      	add	sp, #28
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	20000060 	.word	0x20000060
 800a130:	20000070 	.word	0x20000070
 800a134:	20005680 	.word	0x20005680
 800a138:	20005698 	.word	0x20005698
 800a13c:	080140d8 	.word	0x080140d8
 800a140:	080151dc 	.word	0x080151dc

0800a144 <GUI_MEMDEV_Paint1Static>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4605      	mov	r5, r0
 800a148:	2405      	movs	r4, #5
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff ff40 	bl	8009fd0 <_CreateStaticDevice>
 800a150:	b910      	cbnz	r0, 800a158 <GUI_MEMDEV_Paint1Static+0x14>
 800a152:	3c01      	subs	r4, #1
 800a154:	d1f9      	bne.n	800a14a <GUI_MEMDEV_Paint1Static+0x6>
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a15c:	f006 bafa 	b.w	8010754 <GUI_MEMDEV_Write>

0800a160 <GUI_MEMDEV_SetOrg>:
 800a160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a162:	460d      	mov	r5, r1
 800a164:	4614      	mov	r4, r2
 800a166:	b918      	cbnz	r0, 800a170 <GUI_MEMDEV_SetOrg+0x10>
 800a168:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <GUI_MEMDEV_SetOrg+0x50>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a16e:	b1e8      	cbz	r0, 800a1ac <GUI_MEMDEV_SetOrg+0x4c>
 800a170:	f005 f814 	bl	800f19c <GUI_ALLOC_LockH>
 800a174:	b2a4      	uxth	r4, r4
 800a176:	b2ad      	uxth	r5, r5
 800a178:	80c4      	strh	r4, [r0, #6]
 800a17a:	8085      	strh	r5, [r0, #4]
 800a17c:	9000      	str	r0, [sp, #0]
 800a17e:	f002 fc0b 	bl	800c998 <LCD_SetClipRectMax>
 800a182:	9b00      	ldr	r3, [sp, #0]
 800a184:	6958      	ldr	r0, [r3, #20]
 800a186:	b170      	cbz	r0, 800a1a6 <GUI_MEMDEV_SetOrg+0x46>
 800a188:	f005 f808 	bl	800f19c <GUI_ALLOC_LockH>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	9001      	str	r0, [sp, #4]
 800a190:	891a      	ldrh	r2, [r3, #8]
 800a192:	895b      	ldrh	r3, [r3, #10]
 800a194:	8082      	strh	r2, [r0, #4]
 800a196:	80c3      	strh	r3, [r0, #6]
 800a198:	b112      	cbz	r2, 800a1a0 <GUI_MEMDEV_SetOrg+0x40>
 800a19a:	b10b      	cbz	r3, 800a1a0 <GUI_MEMDEV_SetOrg+0x40>
 800a19c:	8005      	strh	r5, [r0, #0]
 800a19e:	8044      	strh	r4, [r0, #2]
 800a1a0:	a801      	add	r0, sp, #4
 800a1a2:	f005 f809 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a1a6:	4668      	mov	r0, sp
 800a1a8:	f005 f806 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a1ac:	b003      	add	sp, #12
 800a1ae:	bd30      	pop	{r4, r5, pc}
 800a1b0:	20000084 	.word	0x20000084

0800a1b4 <GUI_MEMDEV_GetYSize>:
 800a1b4:	b513      	push	{r0, r1, r4, lr}
 800a1b6:	b920      	cbnz	r0, 800a1c2 <GUI_MEMDEV_GetYSize+0xe>
 800a1b8:	4b08      	ldr	r3, [pc, #32]	; (800a1dc <GUI_MEMDEV_GetYSize+0x28>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a1be:	4604      	mov	r4, r0
 800a1c0:	b148      	cbz	r0, 800a1d6 <GUI_MEMDEV_GetYSize+0x22>
 800a1c2:	f004 ffeb 	bl	800f19c <GUI_ALLOC_LockH>
 800a1c6:	ab02      	add	r3, sp, #8
 800a1c8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800a1cc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f004 fff1 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	b002      	add	sp, #8
 800a1da:	bd10      	pop	{r4, pc}
 800a1dc:	20000084 	.word	0x20000084

0800a1e0 <GUI_MEMDEV_GetDataPtr>:
 800a1e0:	b513      	push	{r0, r1, r4, lr}
 800a1e2:	b150      	cbz	r0, 800a1fa <GUI_MEMDEV_GetDataPtr+0x1a>
 800a1e4:	f004 ffda 	bl	800f19c <GUI_ALLOC_LockH>
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	a802      	add	r0, sp, #8
 800a1ec:	f840 4d04 	str.w	r4, [r0, #-4]!
 800a1f0:	f004 ffe2 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a1f4:	f104 0018 	add.w	r0, r4, #24
 800a1f8:	e7ff      	b.n	800a1fa <GUI_MEMDEV_GetDataPtr+0x1a>
 800a1fa:	b002      	add	sp, #8
 800a1fc:	bd10      	pop	{r4, pc}
	...

0800a200 <GUI_MEMDEV_Draw>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	461e      	mov	r6, r3
 800a206:	b089      	sub	sp, #36	; 0x24
 800a208:	4b4e      	ldr	r3, [pc, #312]	; (800a344 <GUI_MEMDEV_Draw+0x144>)
 800a20a:	9204      	str	r2, [sp, #16]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	9103      	str	r1, [sp, #12]
 800a210:	7c54      	ldrb	r4, [r2, #17]
 800a212:	4a4d      	ldr	r2, [pc, #308]	; (800a348 <GUI_MEMDEV_Draw+0x148>)
 800a214:	5712      	ldrsb	r2, [r2, r4]
 800a216:	2a01      	cmp	r2, #1
 800a218:	4605      	mov	r5, r0
 800a21a:	469b      	mov	fp, r3
 800a21c:	4620      	mov	r0, r4
 800a21e:	dd06      	ble.n	800a22e <GUI_MEMDEV_Draw+0x2e>
 800a220:	f002 f83a 	bl	800c298 <LCD_GetXSizeEx>
 800a224:	4607      	mov	r7, r0
 800a226:	4620      	mov	r0, r4
 800a228:	f002 f839 	bl	800c29e <LCD_GetYSizeEx>
 800a22c:	e005      	b.n	800a23a <GUI_MEMDEV_Draw+0x3a>
 800a22e:	f002 f839 	bl	800c2a4 <LCD_GetVXSizeEx>
 800a232:	4607      	mov	r7, r0
 800a234:	4620      	mov	r0, r4
 800a236:	f002 f838 	bl	800c2aa <LCD_GetVYSizeEx>
 800a23a:	4604      	mov	r4, r0
 800a23c:	b325      	cbz	r5, 800a288 <GUI_MEMDEV_Draw+0x88>
 800a23e:	a806      	add	r0, sp, #24
 800a240:	a907      	add	r1, sp, #28
 800a242:	f003 fc91 	bl	800db68 <GUI_GetOrg>
 800a246:	9b06      	ldr	r3, [sp, #24]
 800a248:	f9b5 a000 	ldrsh.w	sl, [r5]
 800a24c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a250:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800a254:	441f      	add	r7, r3
 800a256:	9b07      	ldr	r3, [sp, #28]
 800a258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a25c:	3f01      	subs	r7, #1
 800a25e:	4297      	cmp	r7, r2
 800a260:	bfd4      	ite	le
 800a262:	ebca 0707 	rsble	r7, sl, r7
 800a266:	ebca 0702 	rsbgt	r7, sl, r2
 800a26a:	441c      	add	r4, r3
 800a26c:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800a270:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a274:	3c01      	subs	r4, #1
 800a276:	4294      	cmp	r4, r2
 800a278:	bfd4      	ite	le
 800a27a:	ebc8 0404 	rsble	r4, r8, r4
 800a27e:	ebc8 0402 	rsbgt	r4, r8, r2
 800a282:	3701      	adds	r7, #1
 800a284:	3401      	adds	r4, #1
 800a286:	e001      	b.n	800a28c <GUI_MEMDEV_Draw+0x8c>
 800a288:	46a8      	mov	r8, r5
 800a28a:	46aa      	mov	sl, r5
 800a28c:	b906      	cbnz	r6, 800a290 <GUI_MEMDEV_Draw+0x90>
 800a28e:	4266      	negs	r6, r4
 800a290:	2f00      	cmp	r7, #0
 800a292:	dd52      	ble.n	800a33a <GUI_MEMDEV_Draw+0x13a>
 800a294:	2c00      	cmp	r4, #0
 800a296:	dd50      	ble.n	800a33a <GUI_MEMDEV_Draw+0x13a>
 800a298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4650      	mov	r0, sl
 800a29e:	4641      	mov	r1, r8
 800a2a0:	463a      	mov	r2, r7
 800a2a2:	4633      	mov	r3, r6
 800a2a4:	f000 fe3c 	bl	800af20 <GUI_MEMDEV_CreateEx>
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	b920      	cbnz	r0, 800a2b6 <GUI_MEMDEV_Draw+0xb6>
 800a2ac:	9804      	ldr	r0, [sp, #16]
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	4798      	blx	r3
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	e042      	b.n	800a33c <GUI_MEMDEV_Draw+0x13c>
 800a2b6:	f7ff ff7d 	bl	800a1b4 <GUI_MEMDEV_GetYSize>
 800a2ba:	42a0      	cmp	r0, r4
 800a2bc:	4606      	mov	r6, r0
 800a2be:	d006      	beq.n	800a2ce <GUI_MEMDEV_Draw+0xce>
 800a2c0:	f8db 3000 	ldr.w	r3, [fp]
 800a2c4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a2c6:	b110      	cbz	r0, 800a2ce <GUI_MEMDEV_Draw+0xce>
 800a2c8:	2132      	movs	r1, #50	; 0x32
 800a2ca:	f7fd ff3d 	bl	8008148 <WM__SendMessageNoPara>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 fe62 	bl	800af98 <GUI_MEMDEV_Select>
 800a2d4:	4273      	negs	r3, r6
 800a2d6:	9305      	str	r3, [sp, #20]
 800a2d8:	46a1      	mov	r9, r4
 800a2da:	2700      	movs	r7, #0
 800a2dc:	45b1      	cmp	r9, r6
 800a2de:	da03      	bge.n	800a2e8 <GUI_MEMDEV_Draw+0xe8>
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	f006 fb36 	bl	8010954 <GUI_MEMDEV_ReduceYSize>
 800a2e8:	b147      	cbz	r7, 800a2fc <GUI_MEMDEV_Draw+0xfc>
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	4651      	mov	r1, sl
 800a2ee:	eb07 0208 	add.w	r2, r7, r8
 800a2f2:	f7ff ff35 	bl	800a160 <GUI_MEMDEV_SetOrg>
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f006 fb42 	bl	8010980 <GUI_MEMDEV_Clear>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	9804      	ldr	r0, [sp, #16]
 800a300:	4798      	blx	r3
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <GUI_MEMDEV_Draw+0x14c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	b10b      	cbz	r3, 800a30c <GUI_MEMDEV_Draw+0x10c>
 800a308:	2000      	movs	r0, #0
 800a30a:	4798      	blx	r3
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 febb 	bl	800b088 <GUI_MEMDEV_CopyToLCD>
 800a312:	4437      	add	r7, r6
 800a314:	9b05      	ldr	r3, [sp, #20]
 800a316:	42a7      	cmp	r7, r4
 800a318:	4499      	add	r9, r3
 800a31a:	dbdf      	blt.n	800a2dc <GUI_MEMDEV_Draw+0xdc>
 800a31c:	4628      	mov	r0, r5
 800a31e:	f000 fddd 	bl	800aedc <GUI_MEMDEV_Delete>
 800a322:	2000      	movs	r0, #0
 800a324:	f000 fe38 	bl	800af98 <GUI_MEMDEV_Select>
 800a328:	42a6      	cmp	r6, r4
 800a32a:	d006      	beq.n	800a33a <GUI_MEMDEV_Draw+0x13a>
 800a32c:	f8db 3000 	ldr.w	r3, [fp]
 800a330:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a332:	b110      	cbz	r0, 800a33a <GUI_MEMDEV_Draw+0x13a>
 800a334:	2133      	movs	r1, #51	; 0x33
 800a336:	f7fd ff07 	bl	8008148 <WM__SendMessageNoPara>
 800a33a:	2000      	movs	r0, #0
 800a33c:	b009      	add	sp, #36	; 0x24
 800a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a342:	bf00      	nop
 800a344:	20000084 	.word	0x20000084
 800a348:	20005688 	.word	0x20005688
 800a34c:	20005470 	.word	0x20005470

0800a350 <_GetDevData>:
 800a350:	4802      	ldr	r0, [pc, #8]	; (800a35c <_GetDevData+0xc>)
 800a352:	2901      	cmp	r1, #1
 800a354:	bf18      	it	ne
 800a356:	2000      	movne	r0, #0
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	080140d8 	.word	0x080140d8

0800a360 <_GetDevFunc>:
 800a360:	4802      	ldr	r0, [pc, #8]	; (800a36c <_GetDevFunc+0xc>)
 800a362:	2916      	cmp	r1, #22
 800a364:	bf18      	it	ne
 800a366:	2000      	movne	r0, #0
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	08010565 	.word	0x08010565

0800a370 <_GetDevProp>:
 800a370:	2908      	cmp	r1, #8
 800a372:	bf0c      	ite	eq
 800a374:	2020      	moveq	r0, #32
 800a376:	2000      	movne	r0, #0
 800a378:	4770      	bx	lr

0800a37a <_SetOrg>:
 800a37a:	b508      	push	{r3, lr}
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	68c3      	ldr	r3, [r0, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	4798      	blx	r3
 800a384:	bd08      	pop	{r3, pc}

0800a386 <_GetRect>:
 800a386:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a388:	6880      	ldr	r0, [r0, #8]
 800a38a:	460c      	mov	r4, r1
 800a38c:	f004 ff06 	bl	800f19c <GUI_ALLOC_LockH>
 800a390:	4603      	mov	r3, r0
 800a392:	a802      	add	r0, sp, #8
 800a394:	8899      	ldrh	r1, [r3, #4]
 800a396:	88da      	ldrh	r2, [r3, #6]
 800a398:	891d      	ldrh	r5, [r3, #8]
 800a39a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a39e:	895b      	ldrh	r3, [r3, #10]
 800a3a0:	8021      	strh	r1, [r4, #0]
 800a3a2:	8062      	strh	r2, [r4, #2]
 800a3a4:	4429      	add	r1, r5
 800a3a6:	441a      	add	r2, r3
 800a3a8:	3901      	subs	r1, #1
 800a3aa:	3a01      	subs	r2, #1
 800a3ac:	80a1      	strh	r1, [r4, #4]
 800a3ae:	80e2      	strh	r2, [r4, #6]
 800a3b0:	f004 ff02 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a3b4:	b003      	add	sp, #12
 800a3b6:	bd30      	pop	{r4, r5, pc}

0800a3b8 <_XY2PTR>:
 800a3b8:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <_XY2PTR+0x3c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3be:	4605      	mov	r5, r0
 800a3c0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	f004 feea 	bl	800f19c <GUI_ALLOC_LockH>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	a802      	add	r0, sp, #8
 800a3cc:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a3d0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a3d4:	f103 0118 	add.w	r1, r3, #24
 800a3d8:	1b36      	subs	r6, r6, r4
 800a3da:	68dc      	ldr	r4, [r3, #12]
 800a3dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a3e0:	fb04 1406 	mla	r4, r4, r6, r1
 800a3e4:	1aed      	subs	r5, r5, r3
 800a3e6:	f004 fee7 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a3ea:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	b002      	add	sp, #8
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	20000084 	.word	0x20000084

0800a3f8 <_GetPixelIndex>:
 800a3f8:	b508      	push	{r3, lr}
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	f7ff ffdb 	bl	800a3b8 <_XY2PTR>
 800a402:	6800      	ldr	r0, [r0, #0]
 800a404:	bd08      	pop	{r3, pc}
	...

0800a408 <_XorPixel>:
 800a408:	4b15      	ldr	r3, [pc, #84]	; (800a460 <_XorPixel+0x58>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a40e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a410:	4615      	mov	r5, r2
 800a412:	460e      	mov	r6, r1
 800a414:	f004 fec2 	bl	800f19c <GUI_ALLOC_LockH>
 800a418:	4629      	mov	r1, r5
 800a41a:	9000      	str	r0, [sp, #0]
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff ffcb 	bl	800a3b8 <_XY2PTR>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4604      	mov	r4, r0
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	4798      	blx	r3
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	4058      	eors	r0, r3
 800a432:	9b00      	ldr	r3, [sp, #0]
 800a434:	6020      	str	r0, [r4, #0]
 800a436:	6958      	ldr	r0, [r3, #20]
 800a438:	b160      	cbz	r0, 800a454 <_XorPixel+0x4c>
 800a43a:	f004 feaf 	bl	800f19c <GUI_ALLOC_LockH>
 800a43e:	ac02      	add	r4, sp, #8
 800a440:	6883      	ldr	r3, [r0, #8]
 800a442:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4631      	mov	r1, r6
 800a44a:	462a      	mov	r2, r5
 800a44c:	4798      	blx	r3
 800a44e:	4620      	mov	r0, r4
 800a450:	f004 feb2 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a454:	4668      	mov	r0, sp
 800a456:	f004 feaf 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a45a:	b002      	add	sp, #8
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	bf00      	nop
 800a460:	20000084 	.word	0x20000084

0800a464 <_SetPixelIndex>:
 800a464:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a466:	461c      	mov	r4, r3
 800a468:	4b10      	ldr	r3, [pc, #64]	; (800a4ac <_SetPixelIndex+0x48>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a46e:	460e      	mov	r6, r1
 800a470:	4615      	mov	r5, r2
 800a472:	f004 fe93 	bl	800f19c <GUI_ALLOC_LockH>
 800a476:	4629      	mov	r1, r5
 800a478:	9000      	str	r0, [sp, #0]
 800a47a:	4630      	mov	r0, r6
 800a47c:	f7ff ff9c 	bl	800a3b8 <_XY2PTR>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	6004      	str	r4, [r0, #0]
 800a484:	6958      	ldr	r0, [r3, #20]
 800a486:	b160      	cbz	r0, 800a4a2 <_SetPixelIndex+0x3e>
 800a488:	f004 fe88 	bl	800f19c <GUI_ALLOC_LockH>
 800a48c:	ac02      	add	r4, sp, #8
 800a48e:	6883      	ldr	r3, [r0, #8]
 800a490:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4631      	mov	r1, r6
 800a498:	462a      	mov	r2, r5
 800a49a:	4798      	blx	r3
 800a49c:	4620      	mov	r0, r4
 800a49e:	f004 fe8b 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a4a2:	4668      	mov	r0, sp
 800a4a4:	f004 fe88 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a4a8:	b002      	add	sp, #8
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	20000084 	.word	0x20000084

0800a4b0 <_DrawVLine>:
 800a4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4d2c      	ldr	r5, [pc, #176]	; (800a568 <_DrawVLine+0xb8>)
 800a4b6:	461e      	mov	r6, r3
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a4bc:	460f      	mov	r7, r1
 800a4be:	4614      	mov	r4, r2
 800a4c0:	f004 fe6c 	bl	800f19c <GUI_ALLOC_LockH>
 800a4c4:	9000      	str	r0, [sp, #0]
 800a4c6:	6940      	ldr	r0, [r0, #20]
 800a4c8:	46a9      	mov	r9, r5
 800a4ca:	b108      	cbz	r0, 800a4d0 <_DrawVLine+0x20>
 800a4cc:	f004 fe66 	bl	800f19c <GUI_ALLOC_LockH>
 800a4d0:	9001      	str	r0, [sp, #4]
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7ff ff6f 	bl	800a3b8 <_XY2PTR>
 800a4da:	f8d9 2000 	ldr.w	r2, [r9]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a4e8:	f8d1 9000 	ldr.w	r9, [r1]
 800a4ec:	07d2      	lsls	r2, r2, #31
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	d51f      	bpl.n	800a532 <_DrawVLine+0x82>
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	4798      	blx	r3
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	9801      	ldr	r0, [sp, #4]
 800a4fe:	b128      	cbz	r0, 800a50c <_DrawVLine+0x5c>
 800a500:	6882      	ldr	r2, [r0, #8]
 800a502:	4639      	mov	r1, r7
 800a504:	f8d2 c000 	ldr.w	ip, [r2]
 800a508:	4622      	mov	r2, r4
 800a50a:	47e0      	blx	ip
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	ea83 0308 	eor.w	r3, r3, r8
 800a512:	602b      	str	r3, [r5, #0]
 800a514:	9b00      	ldr	r3, [sp, #0]
 800a516:	3401      	adds	r4, #1
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	42b4      	cmp	r4, r6
 800a51c:	441d      	add	r5, r3
 800a51e:	dded      	ble.n	800a4fc <_DrawVLine+0x4c>
 800a520:	4668      	mov	r0, sp
 800a522:	f004 fe49 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	b1d3      	cbz	r3, 800a560 <_DrawVLine+0xb0>
 800a52a:	a801      	add	r0, sp, #4
 800a52c:	f004 fe44 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a530:	e016      	b.n	800a560 <_DrawVLine+0xb0>
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	b163      	cbz	r3, 800a550 <_DrawVLine+0xa0>
 800a536:	9801      	ldr	r0, [sp, #4]
 800a538:	6883      	ldr	r3, [r0, #8]
 800a53a:	4622      	mov	r2, r4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4639      	mov	r1, r7
 800a540:	3401      	adds	r4, #1
 800a542:	4798      	blx	r3
 800a544:	42b4      	cmp	r4, r6
 800a546:	f8c5 9000 	str.w	r9, [r5]
 800a54a:	4445      	add	r5, r8
 800a54c:	ddf3      	ble.n	800a536 <_DrawVLine+0x86>
 800a54e:	e7e7      	b.n	800a520 <_DrawVLine+0x70>
 800a550:	1b34      	subs	r4, r6, r4
 800a552:	3401      	adds	r4, #1
 800a554:	3c01      	subs	r4, #1
 800a556:	f8c5 9000 	str.w	r9, [r5]
 800a55a:	4445      	add	r5, r8
 800a55c:	d1fa      	bne.n	800a554 <_DrawVLine+0xa4>
 800a55e:	e7df      	b.n	800a520 <_DrawVLine+0x70>
 800a560:	b003      	add	sp, #12
 800a562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a566:	bf00      	nop
 800a568:	20000084 	.word	0x20000084

0800a56c <_FillRect>:
 800a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a620 <_FillRect+0xb4>
 800a574:	4614      	mov	r4, r2
 800a576:	f8db 2000 	ldr.w	r2, [fp]
 800a57a:	b085      	sub	sp, #20
 800a57c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a57e:	460f      	mov	r7, r1
 800a580:	461d      	mov	r5, r3
 800a582:	f004 fe0b 	bl	800f19c <GUI_ALLOC_LockH>
 800a586:	4621      	mov	r1, r4
 800a588:	9002      	str	r0, [sp, #8]
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ff14 	bl	800a3b8 <_XY2PTR>
 800a590:	9a02      	ldr	r2, [sp, #8]
 800a592:	f8db 3000 	ldr.w	r3, [fp]
 800a596:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800a59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59c:	4606      	mov	r6, r0
 800a59e:	6950      	ldr	r0, [r2, #20]
 800a5a0:	f8d3 a000 	ldr.w	sl, [r3]
 800a5a4:	1bed      	subs	r5, r5, r7
 800a5a6:	3501      	adds	r5, #1
 800a5a8:	b338      	cbz	r0, 800a5fa <_FillRect+0x8e>
 800a5aa:	f004 fdf7 	bl	800f19c <GUI_ALLOC_LockH>
 800a5ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b0:	f10d 0810 	add.w	r8, sp, #16
 800a5b4:	1b13      	subs	r3, r2, r4
 800a5b6:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	4639      	mov	r1, r7
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	f006 f9b0 	bl	8010928 <GUI_USAGE_AddRect>
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	f004 fdf5 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a5ce:	e014      	b.n	800a5fa <_FillRect+0x8e>
 800a5d0:	f8db 3000 	ldr.w	r3, [fp]
 800a5d4:	7c1b      	ldrb	r3, [r3, #16]
 800a5d6:	07db      	lsls	r3, r3, #31
 800a5d8:	d513      	bpl.n	800a602 <_FillRect+0x96>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	4798      	blx	r3
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	6811      	ldr	r1, [r2, #0]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	ea81 0100 	eor.w	r1, r1, r0
 800a5f0:	f842 1b04 	str.w	r1, [r2], #4
 800a5f4:	d1f8      	bne.n	800a5e8 <_FillRect+0x7c>
 800a5f6:	444e      	add	r6, r9
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	dde7      	ble.n	800a5d0 <_FillRect+0x64>
 800a600:	e008      	b.n	800a614 <_FillRect+0xa8>
 800a602:	2d00      	cmp	r5, #0
 800a604:	ddf7      	ble.n	800a5f6 <_FillRect+0x8a>
 800a606:	462b      	mov	r3, r5
 800a608:	4632      	mov	r2, r6
 800a60a:	3b01      	subs	r3, #1
 800a60c:	f842 ab04 	str.w	sl, [r2], #4
 800a610:	d1fb      	bne.n	800a60a <_FillRect+0x9e>
 800a612:	e7f0      	b.n	800a5f6 <_FillRect+0x8a>
 800a614:	a802      	add	r0, sp, #8
 800a616:	f004 fdcf 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a61a:	b005      	add	sp, #20
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	20000084 	.word	0x20000084

0800a624 <_DrawHLine>:
 800a624:	b507      	push	{r0, r1, r2, lr}
 800a626:	9200      	str	r2, [sp, #0]
 800a628:	f7ff ffa0 	bl	800a56c <_FillRect>
 800a62c:	b003      	add	sp, #12
 800a62e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a634 <_DrawBitmap>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	4c90      	ldr	r4, [pc, #576]	; (800a87c <_DrawBitmap+0x248>)
 800a63a:	b091      	sub	sp, #68	; 0x44
 800a63c:	469b      	mov	fp, r3
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	9008      	str	r0, [sp, #32]
 800a642:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a644:	9207      	str	r2, [sp, #28]
 800a646:	460e      	mov	r6, r1
 800a648:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800a64c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a64e:	2800      	cmp	r0, #0
 800a650:	f000 838b 	beq.w	800ad6a <_DrawBitmap+0x736>
 800a654:	f004 fda2 	bl	800f19c <GUI_ALLOC_LockH>
 800a658:	900e      	str	r0, [sp, #56]	; 0x38
 800a65a:	6940      	ldr	r0, [r0, #20]
 800a65c:	b108      	cbz	r0, 800a662 <_DrawBitmap+0x2e>
 800a65e:	f004 fd9d 	bl	800f19c <GUI_ALLOC_LockH>
 800a662:	900f      	str	r0, [sp, #60]	; 0x3c
 800a664:	a810      	add	r0, sp, #64	; 0x40
 800a666:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	930a      	str	r3, [sp, #40]	; 0x28
 800a66e:	f004 fda3 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800a672:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a674:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a676:	4437      	add	r7, r6
 800a678:	9704      	str	r7, [sp, #16]
 800a67a:	b150      	cbz	r0, 800a692 <_DrawBitmap+0x5e>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	7c1b      	ldrb	r3, [r3, #16]
 800a680:	079c      	lsls	r4, r3, #30
 800a682:	d406      	bmi.n	800a692 <_DrawBitmap+0x5e>
 800a684:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a686:	9700      	str	r7, [sp, #0]
 800a688:	9904      	ldr	r1, [sp, #16]
 800a68a:	9a07      	ldr	r2, [sp, #28]
 800a68c:	465b      	mov	r3, fp
 800a68e:	f006 f94b 	bl	8010928 <GUI_USAGE_AddRect>
 800a692:	9804      	ldr	r0, [sp, #16]
 800a694:	9907      	ldr	r1, [sp, #28]
 800a696:	f7ff fe8f 	bl	800a3b8 <_XY2PTR>
 800a69a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a69c:	2f17      	cmp	r7, #23
 800a69e:	4606      	mov	r6, r0
 800a6a0:	dd64      	ble.n	800a76c <_DrawBitmap+0x138>
 800a6a2:	ea4f 078b 	mov.w	r7, fp, lsl #2
 800a6a6:	9706      	str	r7, [sp, #24]
 800a6a8:	f04f 0900 	mov.w	r9, #0
 800a6ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a6ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a6b0:	45b9      	cmp	r9, r7
 800a6b2:	da57      	bge.n	800a764 <_DrawBitmap+0x130>
 800a6b4:	b130      	cbz	r0, 800a6c4 <_DrawBitmap+0x90>
 800a6b6:	6883      	ldr	r3, [r0, #8]
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	685c      	ldr	r4, [r3, #4]
 800a6bc:	9904      	ldr	r1, [sp, #16]
 800a6be:	444a      	add	r2, r9
 800a6c0:	465b      	mov	r3, fp
 800a6c2:	47a0      	blx	r4
 800a6c4:	9f08      	ldr	r7, [sp, #32]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	68d8      	ldr	r0, [r3, #12]
 800a6ca:	b130      	cbz	r0, 800a6da <_DrawBitmap+0xa6>
 800a6cc:	4b6c      	ldr	r3, [pc, #432]	; (800a880 <_DrawBitmap+0x24c>)
 800a6ce:	9a06      	ldr	r2, [sp, #24]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4651      	mov	r1, sl
 800a6d6:	4798      	blx	r3
 800a6d8:	e03d      	b.n	800a756 <_DrawBitmap+0x122>
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	4798      	blx	r3
 800a6de:	0e00      	lsrs	r0, r0, #24
 800a6e0:	9005      	str	r0, [sp, #20]
 800a6e2:	4635      	mov	r5, r6
 800a6e4:	465f      	mov	r7, fp
 800a6e6:	4654      	mov	r4, sl
 800a6e8:	463b      	mov	r3, r7
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	f04f 0800 	mov.w	r8, #0
 800a6f0:	f852 1b04 	ldr.w	r1, [r2], #4
 800a6f4:	9805      	ldr	r0, [sp, #20]
 800a6f6:	0e09      	lsrs	r1, r1, #24
 800a6f8:	4281      	cmp	r1, r0
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	bf08      	it	eq
 800a6fe:	f108 0801 	addeq.w	r8, r8, #1
 800a702:	4281      	cmp	r1, r0
 800a704:	f103 33ff 	add.w	r3, r3, #4294967295
 800a708:	d012      	beq.n	800a730 <_DrawBitmap+0xfc>
 800a70a:	f1b8 0f00 	cmp.w	r8, #0
 800a70e:	d012      	beq.n	800a736 <_DrawBitmap+0x102>
 800a710:	4a5b      	ldr	r2, [pc, #364]	; (800a880 <_DrawBitmap+0x24c>)
 800a712:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800a716:	f8d2 c000 	ldr.w	ip, [r2]
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	4628      	mov	r0, r5
 800a71e:	4621      	mov	r1, r4
 800a720:	461a      	mov	r2, r3
 800a722:	47e0      	blx	ip
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	ebc8 0707 	rsb	r7, r8, r7
 800a72a:	441d      	add	r5, r3
 800a72c:	441c      	add	r4, r3
 800a72e:	e010      	b.n	800a752 <_DrawBitmap+0x11e>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1dd      	bne.n	800a6f0 <_DrawBitmap+0xbc>
 800a734:	e7e9      	b.n	800a70a <_DrawBitmap+0xd6>
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	0e02      	lsrs	r2, r0, #24
 800a73a:	2aff      	cmp	r2, #255	; 0xff
 800a73c:	d006      	beq.n	800a74c <_DrawBitmap+0x118>
 800a73e:	4b51      	ldr	r3, [pc, #324]	; (800a884 <_DrawBitmap+0x250>)
 800a740:	6829      	ldr	r1, [r5, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	43d2      	mvns	r2, r2
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	4798      	blx	r3
 800a74a:	6028      	str	r0, [r5, #0]
 800a74c:	3504      	adds	r5, #4
 800a74e:	3404      	adds	r4, #4
 800a750:	3f01      	subs	r7, #1
 800a752:	2f00      	cmp	r7, #0
 800a754:	d1c8      	bne.n	800a6e8 <_DrawBitmap+0xb4>
 800a756:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a758:	44ba      	add	sl, r7
 800a75a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a75c:	f109 0901 	add.w	r9, r9, #1
 800a760:	443e      	add	r6, r7
 800a762:	e7a3      	b.n	800a6ac <_DrawBitmap+0x78>
 800a764:	2800      	cmp	r0, #0
 800a766:	f040 82fd 	bne.w	800ad64 <_DrawBitmap+0x730>
 800a76a:	e2fe      	b.n	800ad6a <_DrawBitmap+0x736>
 800a76c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a76e:	2f10      	cmp	r7, #16
 800a770:	d134      	bne.n	800a7dc <_DrawBitmap+0x1a8>
 800a772:	1f06      	subs	r6, r0, #4
 800a774:	2500      	movs	r5, #0
 800a776:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a778:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a77a:	42bd      	cmp	r5, r7
 800a77c:	f280 80a3 	bge.w	800a8c6 <_DrawBitmap+0x292>
 800a780:	9f07      	ldr	r7, [sp, #28]
 800a782:	442f      	add	r7, r5
 800a784:	b13c      	cbz	r4, 800a796 <_DrawBitmap+0x162>
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	9904      	ldr	r1, [sp, #16]
 800a78a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a78e:	4620      	mov	r0, r4
 800a790:	463a      	mov	r2, r7
 800a792:	465b      	mov	r3, fp
 800a794:	47e0      	blx	ip
 800a796:	f1aa 0902 	sub.w	r9, sl, #2
 800a79a:	9605      	str	r6, [sp, #20]
 800a79c:	46d8      	mov	r8, fp
 800a79e:	9808      	ldr	r0, [sp, #32]
 800a7a0:	9904      	ldr	r1, [sp, #16]
 800a7a2:	6903      	ldr	r3, [r0, #16]
 800a7a4:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	4459      	add	r1, fp
 800a7ac:	ebc8 0101 	rsb	r1, r8, r1
 800a7b0:	9103      	str	r1, [sp, #12]
 800a7b2:	4798      	blx	r3
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	9903      	ldr	r1, [sp, #12]
 800a7b8:	f843 0f04 	str.w	r0, [r3, #4]!
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	b124      	cbz	r4, 800a7ca <_DrawBitmap+0x196>
 800a7c0:	68a3      	ldr	r3, [r4, #8]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	463a      	mov	r2, r7
 800a7c8:	4798      	blx	r3
 800a7ca:	f1b8 0801 	subs.w	r8, r8, #1
 800a7ce:	d1e6      	bne.n	800a79e <_DrawBitmap+0x16a>
 800a7d0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a7d2:	44ba      	add	sl, r7
 800a7d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	443e      	add	r6, r7
 800a7da:	e7cc      	b.n	800a776 <_DrawBitmap+0x142>
 800a7dc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a7de:	2f08      	cmp	r7, #8
 800a7e0:	f100 0604 	add.w	r6, r0, #4
 800a7e4:	d173      	bne.n	800a8ce <_DrawBitmap+0x29a>
 800a7e6:	9f07      	ldr	r7, [sp, #28]
 800a7e8:	9907      	ldr	r1, [sp, #28]
 800a7ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a7ee:	1a7b      	subs	r3, r7, r1
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	f1a6 0004 	sub.w	r0, r6, #4
 800a7f6:	da66      	bge.n	800a8c6 <_DrawBitmap+0x292>
 800a7f8:	4b20      	ldr	r3, [pc, #128]	; (800a87c <_DrawBitmap+0x248>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	7c1b      	ldrb	r3, [r3, #16]
 800a7fe:	b36d      	cbz	r5, 800a85c <_DrawBitmap+0x228>
 800a800:	f013 0303 	ands.w	r3, r3, #3
 800a804:	d005      	beq.n	800a812 <_DrawBitmap+0x1de>
 800a806:	2b02      	cmp	r3, #2
 800a808:	d157      	bne.n	800a8ba <_DrawBitmap+0x286>
 800a80a:	46b1      	mov	r9, r6
 800a80c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a810:	e01c      	b.n	800a84c <_DrawBitmap+0x218>
 800a812:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a816:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a81a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a81e:	3301      	adds	r3, #1
 800a820:	455b      	cmp	r3, fp
 800a822:	d1f6      	bne.n	800a812 <_DrawBitmap+0x1de>
 800a824:	e049      	b.n	800a8ba <_DrawBitmap+0x286>
 800a826:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a82a:	f849 3c04 	str.w	r3, [r9, #-4]
 800a82e:	b12c      	cbz	r4, 800a83c <_DrawBitmap+0x208>
 800a830:	68a3      	ldr	r3, [r4, #8]
 800a832:	4620      	mov	r0, r4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4641      	mov	r1, r8
 800a838:	463a      	mov	r2, r7
 800a83a:	4798      	blx	r3
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	f108 0801 	add.w	r8, r8, #1
 800a842:	445b      	add	r3, fp
 800a844:	4543      	cmp	r3, r8
 800a846:	f109 0904 	add.w	r9, r9, #4
 800a84a:	d036      	beq.n	800a8ba <_DrawBitmap+0x286>
 800a84c:	9804      	ldr	r0, [sp, #16]
 800a84e:	ebc0 030a 	rsb	r3, r0, sl
 800a852:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f0      	beq.n	800a83c <_DrawBitmap+0x208>
 800a85a:	e7e4      	b.n	800a826 <_DrawBitmap+0x1f2>
 800a85c:	f013 0303 	ands.w	r3, r3, #3
 800a860:	d005      	beq.n	800a86e <_DrawBitmap+0x23a>
 800a862:	2b02      	cmp	r3, #2
 800a864:	d129      	bne.n	800a8ba <_DrawBitmap+0x286>
 800a866:	46b1      	mov	r9, r6
 800a868:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a86c:	e01d      	b.n	800a8aa <_DrawBitmap+0x276>
 800a86e:	4b04      	ldr	r3, [pc, #16]	; (800a880 <_DrawBitmap+0x24c>)
 800a870:	4651      	mov	r1, sl
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	465a      	mov	r2, fp
 800a876:	4798      	blx	r3
 800a878:	e01f      	b.n	800a8ba <_DrawBitmap+0x286>
 800a87a:	bf00      	nop
 800a87c:	20000084 	.word	0x20000084
 800a880:	20000074 	.word	0x20000074
 800a884:	20000078 	.word	0x20000078
 800a888:	f849 3c04 	str.w	r3, [r9, #-4]
 800a88c:	b12c      	cbz	r4, 800a89a <_DrawBitmap+0x266>
 800a88e:	68a3      	ldr	r3, [r4, #8]
 800a890:	4620      	mov	r0, r4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4641      	mov	r1, r8
 800a896:	463a      	mov	r2, r7
 800a898:	4798      	blx	r3
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	f108 0801 	add.w	r8, r8, #1
 800a8a0:	445b      	add	r3, fp
 800a8a2:	4543      	cmp	r3, r8
 800a8a4:	f109 0904 	add.w	r9, r9, #4
 800a8a8:	d007      	beq.n	800a8ba <_DrawBitmap+0x286>
 800a8aa:	9904      	ldr	r1, [sp, #16]
 800a8ac:	ebc1 030a 	rsb	r3, r1, sl
 800a8b0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0f0      	beq.n	800a89a <_DrawBitmap+0x266>
 800a8b8:	e7e6      	b.n	800a888 <_DrawBitmap+0x254>
 800a8ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	4492      	add	sl, r2
 800a8c0:	3701      	adds	r7, #1
 800a8c2:	441e      	add	r6, r3
 800a8c4:	e790      	b.n	800a7e8 <_DrawBitmap+0x1b4>
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	f040 824c 	bne.w	800ad64 <_DrawBitmap+0x730>
 800a8cc:	e24d      	b.n	800ad6a <_DrawBitmap+0x736>
 800a8ce:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a8d0:	4bb2      	ldr	r3, [pc, #712]	; (800ab9c <_DrawBitmap+0x568>)
 800a8d2:	9608      	str	r6, [sp, #32]
 800a8d4:	007f      	lsls	r7, r7, #1
 800a8d6:	970c      	str	r7, [sp, #48]	; 0x30
 800a8d8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a8da:	00bf      	lsls	r7, r7, #2
 800a8dc:	970d      	str	r7, [sp, #52]	; 0x34
 800a8de:	9f07      	ldr	r7, [sp, #28]
 800a8e0:	9705      	str	r7, [sp, #20]
 800a8e2:	2d00      	cmp	r5, #0
 800a8e4:	bf08      	it	eq
 800a8e6:	461d      	moveq	r5, r3
 800a8e8:	9f08      	ldr	r7, [sp, #32]
 800a8ea:	9807      	ldr	r0, [sp, #28]
 800a8ec:	1f3c      	subs	r4, r7, #4
 800a8ee:	9f05      	ldr	r7, [sp, #20]
 800a8f0:	1a3b      	subs	r3, r7, r0
 800a8f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a8f4:	42bb      	cmp	r3, r7
 800a8f6:	f280 8233 	bge.w	800ad60 <_DrawBitmap+0x72c>
 800a8fa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a8fc:	2f02      	cmp	r7, #2
 800a8fe:	f000 80ad 	beq.w	800aa5c <_DrawBitmap+0x428>
 800a902:	2f04      	cmp	r7, #4
 800a904:	f000 8150 	beq.w	800aba8 <_DrawBitmap+0x574>
 800a908:	2f01      	cmp	r7, #1
 800a90a:	f040 821f 	bne.w	800ad4c <_DrawBitmap+0x718>
 800a90e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800aba4 <_DrawBitmap+0x570>
 800a912:	f8d9 3000 	ldr.w	r3, [r9]
 800a916:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a918:	f004 fc40 	bl	800f19c <GUI_ALLOC_LockH>
 800a91c:	f89a 3000 	ldrb.w	r3, [sl]
 800a920:	4a9f      	ldr	r2, [pc, #636]	; (800aba0 <_DrawBitmap+0x56c>)
 800a922:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a924:	5cd6      	ldrb	r6, [r2, r3]
 800a926:	f8d9 3000 	ldr.w	r3, [r9]
 800a92a:	900e      	str	r0, [sp, #56]	; 0x38
 800a92c:	7c1b      	ldrb	r3, [r3, #16]
 800a92e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b02      	cmp	r3, #2
 800a938:	465f      	mov	r7, fp
 800a93a:	f1c1 0808 	rsb	r8, r1, #8
 800a93e:	fa46 f601 	asr.w	r6, r6, r1
 800a942:	d020      	beq.n	800a986 <_DrawBitmap+0x352>
 800a944:	2b03      	cmp	r3, #3
 800a946:	d061      	beq.n	800aa0c <_DrawBitmap+0x3d8>
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d05f      	beq.n	800aa0c <_DrawBitmap+0x3d8>
 800a94c:	4652      	mov	r2, sl
 800a94e:	4547      	cmp	r7, r8
 800a950:	bf38      	it	cc
 800a952:	46b8      	movcc	r8, r7
 800a954:	ebc8 0707 	rsb	r7, r8, r7
 800a958:	4643      	mov	r3, r8
 800a95a:	4621      	mov	r1, r4
 800a95c:	f006 0001 	and.w	r0, r6, #1
 800a960:	3b01      	subs	r3, #1
 800a962:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800a966:	f841 0b04 	str.w	r0, [r1], #4
 800a96a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a96e:	d1f5      	bne.n	800a95c <_DrawBitmap+0x328>
 800a970:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a974:	2f00      	cmp	r7, #0
 800a976:	d06d      	beq.n	800aa54 <_DrawBitmap+0x420>
 800a978:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a97c:	4988      	ldr	r1, [pc, #544]	; (800aba0 <_DrawBitmap+0x56c>)
 800a97e:	f04f 0808 	mov.w	r8, #8
 800a982:	5cce      	ldrb	r6, [r1, r3]
 800a984:	e7e3      	b.n	800a94e <_DrawBitmap+0x31a>
 800a986:	686b      	ldr	r3, [r5, #4]
 800a988:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a98c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a98e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a992:	4547      	cmp	r7, r8
 800a994:	bf38      	it	cc
 800a996:	46b8      	movcc	r8, r7
 800a998:	ebc8 0707 	rsb	r7, r8, r7
 800a99c:	f1bc 0f00 	cmp.w	ip, #0
 800a9a0:	d026      	beq.n	800a9f0 <_DrawBitmap+0x3bc>
 800a9a2:	b91e      	cbnz	r6, 800a9ac <_DrawBitmap+0x378>
 800a9a4:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a9a8:	44c1      	add	r9, r8
 800a9aa:	e025      	b.n	800a9f8 <_DrawBitmap+0x3c4>
 800a9ac:	07f0      	lsls	r0, r6, #31
 800a9ae:	d50c      	bpl.n	800a9ca <_DrawBitmap+0x396>
 800a9b0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a9b4:	9a05      	ldr	r2, [sp, #20]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8cd c00c 	str.w	ip, [sp, #12]
 800a9bc:	4660      	mov	r0, ip
 800a9be:	4649      	mov	r1, r9
 800a9c0:	4798      	blx	r3
 800a9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	f1b8 0801 	subs.w	r8, r8, #1
 800a9ce:	f109 0901 	add.w	r9, r9, #1
 800a9d2:	f104 0404 	add.w	r4, r4, #4
 800a9d6:	d00f      	beq.n	800a9f8 <_DrawBitmap+0x3c4>
 800a9d8:	0876      	lsrs	r6, r6, #1
 800a9da:	e7e2      	b.n	800a9a2 <_DrawBitmap+0x36e>
 800a9dc:	07f1      	lsls	r1, r6, #31
 800a9de:	bf44      	itt	mi
 800a9e0:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800a9e2:	6023      	strmi	r3, [r4, #0]
 800a9e4:	f1b8 0801 	subs.w	r8, r8, #1
 800a9e8:	f104 0404 	add.w	r4, r4, #4
 800a9ec:	d004      	beq.n	800a9f8 <_DrawBitmap+0x3c4>
 800a9ee:	0876      	lsrs	r6, r6, #1
 800a9f0:	2e00      	cmp	r6, #0
 800a9f2:	d1f3      	bne.n	800a9dc <_DrawBitmap+0x3a8>
 800a9f4:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800a9f8:	b367      	cbz	r7, 800aa54 <_DrawBitmap+0x420>
 800a9fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9fc:	4a68      	ldr	r2, [pc, #416]	; (800aba0 <_DrawBitmap+0x56c>)
 800a9fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800aa02:	9009      	str	r0, [sp, #36]	; 0x24
 800aa04:	5cd6      	ldrb	r6, [r2, r3]
 800aa06:	f04f 0808 	mov.w	r8, #8
 800aa0a:	e7c2      	b.n	800a992 <_DrawBitmap+0x35e>
 800aa0c:	6803      	ldr	r3, [r0, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	4798      	blx	r3
 800aa14:	4651      	mov	r1, sl
 800aa16:	4547      	cmp	r7, r8
 800aa18:	bf38      	it	cc
 800aa1a:	46b8      	movcc	r8, r7
 800aa1c:	ebc8 0707 	rsb	r7, r8, r7
 800aa20:	1d23      	adds	r3, r4, #4
 800aa22:	46c6      	mov	lr, r8
 800aa24:	07f2      	lsls	r2, r6, #31
 800aa26:	d504      	bpl.n	800aa32 <_DrawBitmap+0x3fe>
 800aa28:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800aa2c:	4042      	eors	r2, r0
 800aa2e:	f843 2c04 	str.w	r2, [r3, #-4]
 800aa32:	f1be 0e01 	subs.w	lr, lr, #1
 800aa36:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa3a:	f103 0304 	add.w	r3, r3, #4
 800aa3e:	d1f1      	bne.n	800aa24 <_DrawBitmap+0x3f0>
 800aa40:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800aa44:	b137      	cbz	r7, 800aa54 <_DrawBitmap+0x420>
 800aa46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa4a:	4a55      	ldr	r2, [pc, #340]	; (800aba0 <_DrawBitmap+0x56c>)
 800aa4c:	f04f 0808 	mov.w	r8, #8
 800aa50:	5cd6      	ldrb	r6, [r2, r3]
 800aa52:	e7e0      	b.n	800aa16 <_DrawBitmap+0x3e2>
 800aa54:	a80e      	add	r0, sp, #56	; 0x38
 800aa56:	f004 fbaf 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800aa5a:	e177      	b.n	800ad4c <_DrawBitmap+0x718>
 800aa5c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aa5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa60:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800aa64:	f1c7 0604 	rsb	r6, r7, #4
 800aa68:	f89a 7000 	ldrb.w	r7, [sl]
 800aa6c:	409f      	lsls	r7, r3
 800aa6e:	4b4d      	ldr	r3, [pc, #308]	; (800aba4 <_DrawBitmap+0x570>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	7c1b      	ldrb	r3, [r3, #16]
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	b2f6      	uxtb	r6, r6
 800aa7c:	b2ff      	uxtb	r7, r7
 800aa7e:	d066      	beq.n	800ab4e <_DrawBitmap+0x51a>
 800aa80:	d308      	bcc.n	800aa94 <_DrawBitmap+0x460>
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	f040 8162 	bne.w	800ad4c <_DrawBitmap+0x718>
 800aa88:	9804      	ldr	r0, [sp, #16]
 800aa8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aa8e:	46d8      	mov	r8, fp
 800aa90:	9006      	str	r0, [sp, #24]
 800aa92:	e03e      	b.n	800ab12 <_DrawBitmap+0x4de>
 800aa94:	4652      	mov	r2, sl
 800aa96:	465b      	mov	r3, fp
 800aa98:	429e      	cmp	r6, r3
 800aa9a:	bfc8      	it	gt
 800aa9c:	b2de      	uxtbgt	r6, r3
 800aa9e:	1b9b      	subs	r3, r3, r6
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800aaa8:	3901      	subs	r1, #1
 800aaaa:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800aaae:	f840 cb04 	str.w	ip, [r0], #4
 800aab2:	00bf      	lsls	r7, r7, #2
 800aab4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800aab8:	b2ff      	uxtb	r7, r7
 800aaba:	d1f3      	bne.n	800aaa4 <_DrawBitmap+0x470>
 800aabc:	3e01      	subs	r6, #1
 800aabe:	b2f6      	uxtb	r6, r6
 800aac0:	3601      	adds	r6, #1
 800aac2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 8140 	beq.w	800ad4c <_DrawBitmap+0x718>
 800aacc:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800aad0:	2604      	movs	r6, #4
 800aad2:	e7e1      	b.n	800aa98 <_DrawBitmap+0x464>
 800aad4:	9906      	ldr	r1, [sp, #24]
 800aad6:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800aada:	4449      	add	r1, r9
 800aadc:	d122      	bne.n	800ab24 <_DrawBitmap+0x4f0>
 800aade:	f109 0901 	add.w	r9, r9, #1
 800aae2:	fa5f f289 	uxtb.w	r2, r9
 800aae6:	00bf      	lsls	r7, r7, #2
 800aae8:	4296      	cmp	r6, r2
 800aaea:	b2ff      	uxtb	r7, r7
 800aaec:	d1f2      	bne.n	800aad4 <_DrawBitmap+0x4a0>
 800aaee:	9f06      	ldr	r7, [sp, #24]
 800aaf0:	3e01      	subs	r6, #1
 800aaf2:	b2f6      	uxtb	r6, r6
 800aaf4:	1c7b      	adds	r3, r7, #1
 800aaf6:	1c72      	adds	r2, r6, #1
 800aaf8:	199e      	adds	r6, r3, r6
 800aafa:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800aafe:	9606      	str	r6, [sp, #24]
 800ab00:	f1b8 0f00 	cmp.w	r8, #0
 800ab04:	f000 8122 	beq.w	800ad4c <_DrawBitmap+0x718>
 800ab08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ab0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab10:	2604      	movs	r6, #4
 800ab12:	4546      	cmp	r6, r8
 800ab14:	bfc8      	it	gt
 800ab16:	fa5f f688 	uxtbgt.w	r6, r8
 800ab1a:	ebc6 0808 	rsb	r8, r6, r8
 800ab1e:	f04f 0900 	mov.w	r9, #0
 800ab22:	e7d7      	b.n	800aad4 <_DrawBitmap+0x4a0>
 800ab24:	09ba      	lsrs	r2, r7, #6
 800ab26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ab2a:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800ab2e:	f1bc 0f00 	cmp.w	ip, #0
 800ab32:	d0d4      	beq.n	800aade <_DrawBitmap+0x4aa>
 800ab34:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab3c:	4660      	mov	r0, ip
 800ab3e:	f8cd c00c 	str.w	ip, [sp, #12]
 800ab42:	9a05      	ldr	r2, [sp, #20]
 800ab44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab46:	4798      	blx	r3
 800ab48:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ab4c:	e7c7      	b.n	800aade <_DrawBitmap+0x4aa>
 800ab4e:	4650      	mov	r0, sl
 800ab50:	465b      	mov	r3, fp
 800ab52:	429e      	cmp	r6, r3
 800ab54:	bfc8      	it	gt
 800ab56:	b2de      	uxtbgt	r6, r3
 800ab58:	1b9b      	subs	r3, r3, r6
 800ab5a:	1d22      	adds	r2, r4, #4
 800ab5c:	46b4      	mov	ip, r6
 800ab5e:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800ab62:	d005      	beq.n	800ab70 <_DrawBitmap+0x53c>
 800ab64:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800ab68:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ab6c:	f842 1c04 	str.w	r1, [r2, #-4]
 800ab70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab74:	00bf      	lsls	r7, r7, #2
 800ab76:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ab7a:	b2ff      	uxtb	r7, r7
 800ab7c:	f102 0204 	add.w	r2, r2, #4
 800ab80:	d1ed      	bne.n	800ab5e <_DrawBitmap+0x52a>
 800ab82:	3e01      	subs	r6, #1
 800ab84:	b2f6      	uxtb	r6, r6
 800ab86:	3601      	adds	r6, #1
 800ab88:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 80dd 	beq.w	800ad4c <_DrawBitmap+0x718>
 800ab92:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800ab96:	2604      	movs	r6, #4
 800ab98:	e7db      	b.n	800ab52 <_DrawBitmap+0x51e>
 800ab9a:	bf00      	nop
 800ab9c:	08014098 	.word	0x08014098
 800aba0:	080150c8 	.word	0x080150c8
 800aba4:	20000084 	.word	0x20000084
 800aba8:	4a71      	ldr	r2, [pc, #452]	; (800ad70 <_DrawBitmap+0x73c>)
 800abaa:	f89a 3000 	ldrb.w	r3, [sl]
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800abb6:	f002 0203 	and.w	r2, r2, #3
 800abba:	4083      	lsls	r3, r0
 800abbc:	2a01      	cmp	r2, #1
 800abbe:	b2de      	uxtb	r6, r3
 800abc0:	f000 809c 	beq.w	800acfc <_DrawBitmap+0x6c8>
 800abc4:	d302      	bcc.n	800abcc <_DrawBitmap+0x598>
 800abc6:	2a02      	cmp	r2, #2
 800abc8:	d035      	beq.n	800ac36 <_DrawBitmap+0x602>
 800abca:	e0bf      	b.n	800ad4c <_DrawBitmap+0x718>
 800abcc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800abce:	b15f      	cbz	r7, 800abe8 <_DrawBitmap+0x5b4>
 800abd0:	0936      	lsrs	r6, r6, #4
 800abd2:	f10a 0201 	add.w	r2, sl, #1
 800abd6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800abe0:	9c08      	ldr	r4, [sp, #32]
 800abe2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800abe6:	e001      	b.n	800abec <_DrawBitmap+0x5b8>
 800abe8:	465b      	mov	r3, fp
 800abea:	4652      	mov	r2, sl
 800abec:	2b01      	cmp	r3, #1
 800abee:	dd1a      	ble.n	800ac26 <_DrawBitmap+0x5f2>
 800abf0:	1058      	asrs	r0, r3, #1
 800abf2:	f104 0108 	add.w	r1, r4, #8
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	eb02 0800 	add.w	r8, r2, r0
 800abfe:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800ac02:	f006 060f 	and.w	r6, r6, #15
 800ac06:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800ac0a:	f841 7c08 	str.w	r7, [r1, #-8]
 800ac0e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ac12:	f841 6c04 	str.w	r6, [r1, #-4]
 800ac16:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800ac1a:	4542      	cmp	r2, r8
 800ac1c:	f101 0108 	add.w	r1, r1, #8
 800ac20:	d1ed      	bne.n	800abfe <_DrawBitmap+0x5ca>
 800ac22:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 8090 	beq.w	800ad4c <_DrawBitmap+0x718>
 800ac2c:	0936      	lsrs	r6, r6, #4
 800ac2e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	e08a      	b.n	800ad4c <_DrawBitmap+0x718>
 800ac36:	981e      	ldr	r0, [sp, #120]	; 0x78
 800ac38:	b1c0      	cbz	r0, 800ac6c <_DrawBitmap+0x638>
 800ac3a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800ac3e:	d00a      	beq.n	800ac56 <_DrawBitmap+0x622>
 800ac40:	0936      	lsrs	r6, r6, #4
 800ac42:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	b12f      	cbz	r7, 800ac56 <_DrawBitmap+0x622>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	9904      	ldr	r1, [sp, #16]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	9a05      	ldr	r2, [sp, #20]
 800ac52:	4638      	mov	r0, r7
 800ac54:	4798      	blx	r3
 800ac56:	9904      	ldr	r1, [sp, #16]
 800ac58:	9c08      	ldr	r4, [sp, #32]
 800ac5a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 800ac5e:	f101 0801 	add.w	r8, r1, #1
 800ac62:	f10b 3cff 	add.w	ip, fp, #4294967295
 800ac66:	f10a 0901 	add.w	r9, sl, #1
 800ac6a:	e011      	b.n	800ac90 <_DrawBitmap+0x65c>
 800ac6c:	46dc      	mov	ip, fp
 800ac6e:	46d1      	mov	r9, sl
 800ac70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac74:	e00c      	b.n	800ac90 <_DrawBitmap+0x65c>
 800ac76:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800ac7a:	d10d      	bne.n	800ac98 <_DrawBitmap+0x664>
 800ac7c:	f016 060f 	ands.w	r6, r6, #15
 800ac80:	d11b      	bne.n	800acba <_DrawBitmap+0x686>
 800ac82:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800ac86:	3408      	adds	r4, #8
 800ac88:	f108 0802 	add.w	r8, r8, #2
 800ac8c:	f1ac 0c02 	sub.w	ip, ip, #2
 800ac90:	f1bc 0f01 	cmp.w	ip, #1
 800ac94:	dcef      	bgt.n	800ac76 <_DrawBitmap+0x642>
 800ac96:	e021      	b.n	800acdc <_DrawBitmap+0x6a8>
 800ac98:	0933      	lsrs	r3, r6, #4
 800ac9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	2f00      	cmp	r7, #0
 800aca2:	d0eb      	beq.n	800ac7c <_DrawBitmap+0x648>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	9a05      	ldr	r2, [sp, #20]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f8cd c00c 	str.w	ip, [sp, #12]
 800acae:	4638      	mov	r0, r7
 800acb0:	4641      	mov	r1, r8
 800acb2:	4798      	blx	r3
 800acb4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800acb8:	e7e0      	b.n	800ac7c <_DrawBitmap+0x648>
 800acba:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	d0de      	beq.n	800ac82 <_DrawBitmap+0x64e>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	9a05      	ldr	r2, [sp, #20]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f8cd c00c 	str.w	ip, [sp, #12]
 800acce:	4638      	mov	r0, r7
 800acd0:	f108 0101 	add.w	r1, r8, #1
 800acd4:	4798      	blx	r3
 800acd6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800acda:	e7d2      	b.n	800ac82 <_DrawBitmap+0x64e>
 800acdc:	f1bc 0f00 	cmp.w	ip, #0
 800ace0:	d034      	beq.n	800ad4c <_DrawBitmap+0x718>
 800ace2:	0936      	lsrs	r6, r6, #4
 800ace4:	d032      	beq.n	800ad4c <_DrawBitmap+0x718>
 800ace6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	b377      	cbz	r7, 800ad4c <_DrawBitmap+0x718>
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	9a05      	ldr	r2, [sp, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4638      	mov	r0, r7
 800acf6:	4641      	mov	r1, r8
 800acf8:	4798      	blx	r3
 800acfa:	e027      	b.n	800ad4c <_DrawBitmap+0x718>
 800acfc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800acfe:	f1c7 0302 	rsb	r3, r7, #2
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	4657      	mov	r7, sl
 800ad06:	465a      	mov	r2, fp
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	bfc8      	it	gt
 800ad0c:	b2d3      	uxtbgt	r3, r2
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	1d20      	adds	r0, r4, #4
 800ad12:	469c      	mov	ip, r3
 800ad14:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800ad18:	d005      	beq.n	800ad26 <_DrawBitmap+0x6f2>
 800ad1a:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800ad1e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ad22:	f840 1c04 	str.w	r1, [r0, #-4]
 800ad26:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad2a:	0136      	lsls	r6, r6, #4
 800ad2c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ad30:	b2f6      	uxtb	r6, r6
 800ad32:	f100 0004 	add.w	r0, r0, #4
 800ad36:	d1ed      	bne.n	800ad14 <_DrawBitmap+0x6e0>
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ad42:	b11a      	cbz	r2, 800ad4c <_DrawBitmap+0x718>
 800ad44:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e7dd      	b.n	800ad08 <_DrawBitmap+0x6d4>
 800ad4c:	9b05      	ldr	r3, [sp, #20]
 800ad4e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ad50:	3301      	adds	r3, #1
 800ad52:	44ba      	add	sl, r7
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ad58:	9b08      	ldr	r3, [sp, #32]
 800ad5a:	443b      	add	r3, r7
 800ad5c:	9308      	str	r3, [sp, #32]
 800ad5e:	e5c3      	b.n	800a8e8 <_DrawBitmap+0x2b4>
 800ad60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad62:	b113      	cbz	r3, 800ad6a <_DrawBitmap+0x736>
 800ad64:	a80f      	add	r0, sp, #60	; 0x3c
 800ad66:	f004 fa27 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800ad6a:	b011      	add	sp, #68	; 0x44
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	20000084 	.word	0x20000084

0800ad74 <GUI_MEMDEV__WriteToActiveAt>:
 800ad74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad78:	460e      	mov	r6, r1
 800ad7a:	4690      	mov	r8, r2
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	f004 fa0d 	bl	800f19c <GUI_ALLOC_LockH>
 800ad82:	6803      	ldr	r3, [r0, #0]
 800ad84:	ac02      	add	r4, sp, #8
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	2000      	movs	r0, #0
 800ad90:	2116      	movs	r1, #22
 800ad92:	4798      	blx	r3
 800ad94:	4605      	mov	r5, r0
 800ad96:	4620      	mov	r0, r4
 800ad98:	f004 fa0e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800ad9c:	b11d      	cbz	r5, 800ada6 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800ad9e:	4638      	mov	r0, r7
 800ada0:	4631      	mov	r1, r6
 800ada2:	4642      	mov	r2, r8
 800ada4:	47a8      	blx	r5
 800ada6:	b002      	add	sp, #8
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adac <GUI_MEMDEV__CreateFixed>:
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	4e3e      	ldr	r6, [pc, #248]	; (800aeac <GUI_MEMDEV__CreateFixed+0x100>)
 800adb2:	b087      	sub	sp, #28
 800adb4:	461d      	mov	r5, r3
 800adb6:	6833      	ldr	r3, [r6, #0]
 800adb8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800adba:	7c5b      	ldrb	r3, [r3, #17]
 800adbc:	4683      	mov	fp, r0
 800adbe:	468a      	mov	sl, r1
 800adc0:	4690      	mov	r8, r2
 800adc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800adc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800adc6:	2200      	movs	r2, #0
 800adc8:	f002 fcc0 	bl	800d74c <GUI_DEVICE_Create>
 800adcc:	4604      	mov	r4, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d033      	beq.n	800ae3a <GUI_MEMDEV__CreateFixed+0x8e>
 800add2:	6903      	ldr	r3, [r0, #16]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	4798      	blx	r3
 800add8:	f001 fb1d 	bl	800c416 <LCD__GetBPPDevice>
 800addc:	fb08 f600 	mul.w	r6, r8, r0
 800ade0:	9003      	str	r0, [sp, #12]
 800ade2:	3607      	adds	r6, #7
 800ade4:	f004 fb1a 	bl	800f41c <GUI_ALLOC_RequestSize>
 800ade8:	f017 0901 	ands.w	r9, r7, #1
 800adec:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800adf0:	d104      	bne.n	800adfc <GUI_MEMDEV__CreateFixed+0x50>
 800adf2:	2304      	movs	r3, #4
 800adf4:	fb90 f0f3 	sdiv	r0, r0, r3
 800adf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	dc09      	bgt.n	800ae14 <GUI_MEMDEV__CreateFixed+0x68>
 800ae00:	b11e      	cbz	r6, 800ae0a <GUI_MEMDEV__CreateFixed+0x5e>
 800ae02:	3818      	subs	r0, #24
 800ae04:	fbb0 f0f6 	udiv	r0, r0, r6
 800ae08:	e000      	b.n	800ae0c <GUI_MEMDEV__CreateFixed+0x60>
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	426d      	negs	r5, r5
 800ae0e:	42a8      	cmp	r0, r5
 800ae10:	bfb8      	it	lt
 800ae12:	4605      	movlt	r5, r0
 800ae14:	f1b9 0f00 	cmp.w	r9, #0
 800ae18:	d109      	bne.n	800ae2e <GUI_MEMDEV__CreateFixed+0x82>
 800ae1a:	f8cd 9000 	str.w	r9, [sp]
 800ae1e:	4658      	mov	r0, fp
 800ae20:	4651      	mov	r1, sl
 800ae22:	4642      	mov	r2, r8
 800ae24:	462b      	mov	r3, r5
 800ae26:	f005 fd3f 	bl	80108a8 <GUI_USAGE_BM_Create>
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	e000      	b.n	800ae30 <GUI_MEMDEV__CreateFixed+0x84>
 800ae2e:	2700      	movs	r7, #0
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	dc04      	bgt.n	800ae3e <GUI_MEMDEV__CreateFixed+0x92>
 800ae34:	4620      	mov	r0, r4
 800ae36:	f002 fc87 	bl	800d748 <GUI_DEVICE_Delete>
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e032      	b.n	800aea4 <GUI_MEMDEV__CreateFixed+0xf8>
 800ae3e:	fb06 f005 	mul.w	r0, r6, r5
 800ae42:	3018      	adds	r0, #24
 800ae44:	f1b9 0f00 	cmp.w	r9, #0
 800ae48:	d002      	beq.n	800ae50 <GUI_MEMDEV__CreateFixed+0xa4>
 800ae4a:	f004 fb73 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 800ae4e:	e001      	b.n	800ae54 <GUI_MEMDEV__CreateFixed+0xa8>
 800ae50:	f004 fb7c 	bl	800f54c <GUI_ALLOC_AllocZero>
 800ae54:	4681      	mov	r9, r0
 800ae56:	b940      	cbnz	r0, 800ae6a <GUI_MEMDEV__CreateFixed+0xbe>
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f002 fc75 	bl	800d748 <GUI_DEVICE_Delete>
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	d0eb      	beq.n	800ae3a <GUI_MEMDEV__CreateFixed+0x8e>
 800ae62:	4638      	mov	r0, r7
 800ae64:	f004 f9d4 	bl	800f210 <GUI_ALLOC_Free>
 800ae68:	e01b      	b.n	800aea2 <GUI_MEMDEV__CreateFixed+0xf6>
 800ae6a:	f004 f997 	bl	800f19c <GUI_ALLOC_LockH>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	a806      	add	r0, sp, #24
 800ae72:	9a03      	ldr	r2, [sp, #12]
 800ae74:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ae78:	611a      	str	r2, [r3, #16]
 800ae7a:	601c      	str	r4, [r3, #0]
 800ae7c:	f8a3 b004 	strh.w	fp, [r3, #4]
 800ae80:	f8a3 a006 	strh.w	sl, [r3, #6]
 800ae84:	f8a3 8008 	strh.w	r8, [r3, #8]
 800ae88:	815d      	strh	r5, [r3, #10]
 800ae8a:	60de      	str	r6, [r3, #12]
 800ae8c:	615f      	str	r7, [r3, #20]
 800ae8e:	f004 f993 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800ae92:	4a06      	ldr	r2, [pc, #24]	; (800aeac <GUI_MEMDEV__CreateFixed+0x100>)
 800ae94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	6813      	ldr	r3, [r2, #0]
 800ae9a:	f8c4 9008 	str.w	r9, [r4, #8]
 800ae9e:	7c5b      	ldrb	r3, [r3, #17]
 800aea0:	61a3      	str	r3, [r4, #24]
 800aea2:	4648      	mov	r0, r9
 800aea4:	b007      	add	sp, #28
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000084 	.word	0x20000084

0800aeb0 <GUI_MEMDEV_GetBitsPerPixel>:
 800aeb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b170      	cbz	r0, 800aed4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800aeb6:	f004 f971 	bl	800f19c <GUI_ALLOC_LockH>
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	ac02      	add	r4, sp, #8
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	4798      	blx	r3
 800aec8:	f001 faa5 	bl	800c416 <LCD__GetBPPDevice>
 800aecc:	4605      	mov	r5, r0
 800aece:	4620      	mov	r0, r4
 800aed0:	f004 f972 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800aed4:	4628      	mov	r0, r5
 800aed6:	b003      	add	sp, #12
 800aed8:	bd30      	pop	{r4, r5, pc}
	...

0800aedc <GUI_MEMDEV_Delete>:
 800aedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	b1d0      	cbz	r0, 800af18 <GUI_MEMDEV_Delete+0x3c>
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <GUI_MEMDEV_Delete+0x40>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee8:	4283      	cmp	r3, r0
 800aeea:	d101      	bne.n	800aef0 <GUI_MEMDEV_Delete+0x14>
 800aeec:	f002 fef6 	bl	800dcdc <GUI_SelectLCD>
 800aef0:	4620      	mov	r0, r4
 800aef2:	f004 f953 	bl	800f19c <GUI_ALLOC_LockH>
 800aef6:	9001      	str	r0, [sp, #4]
 800aef8:	6940      	ldr	r0, [r0, #20]
 800aefa:	b108      	cbz	r0, 800af00 <GUI_MEMDEV_Delete+0x24>
 800aefc:	f005 fd00 	bl	8010900 <GUI_USAGE_DecUseCnt>
 800af00:	ad02      	add	r5, sp, #8
 800af02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800af06:	6818      	ldr	r0, [r3, #0]
 800af08:	f002 fc1e 	bl	800d748 <GUI_DEVICE_Delete>
 800af0c:	4628      	mov	r0, r5
 800af0e:	f004 f953 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800af12:	4620      	mov	r0, r4
 800af14:	f004 f97c 	bl	800f210 <GUI_ALLOC_Free>
 800af18:	b003      	add	sp, #12
 800af1a:	bd30      	pop	{r4, r5, pc}
 800af1c:	20000084 	.word	0x20000084

0800af20 <GUI_MEMDEV_CreateEx>:
 800af20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	469a      	mov	sl, r3
 800af26:	4b19      	ldr	r3, [pc, #100]	; (800af8c <GUI_MEMDEV_CreateEx+0x6c>)
 800af28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4607      	mov	r7, r0
 800af2e:	7c58      	ldrb	r0, [r3, #17]
 800af30:	4b17      	ldr	r3, [pc, #92]	; (800af90 <GUI_MEMDEV_CreateEx+0x70>)
 800af32:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800af36:	4688      	mov	r8, r1
 800af38:	4691      	mov	r9, r2
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d006      	beq.n	800af50 <GUI_MEMDEV_CreateEx+0x30>
 800af42:	6824      	ldr	r4, [r4, #0]
 800af44:	2c00      	cmp	r4, #0
 800af46:	d1f8      	bne.n	800af3a <GUI_MEMDEV_CreateEx+0x1a>
 800af48:	f002 fbee 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800af4c:	4604      	mov	r4, r0
 800af4e:	b130      	cbz	r0, 800af5e <GUI_MEMDEV_CreateEx+0x3e>
 800af50:	68e3      	ldr	r3, [r4, #12]
 800af52:	4620      	mov	r0, r4
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	2101      	movs	r1, #1
 800af58:	4798      	blx	r3
 800af5a:	4606      	mov	r6, r0
 800af5c:	b908      	cbnz	r0, 800af62 <GUI_MEMDEV_CreateEx+0x42>
 800af5e:	2000      	movs	r0, #0
 800af60:	e010      	b.n	800af84 <GUI_MEMDEV_CreateEx+0x64>
 800af62:	6924      	ldr	r4, [r4, #16]
 800af64:	68a3      	ldr	r3, [r4, #8]
 800af66:	4798      	blx	r3
 800af68:	3001      	adds	r0, #1
 800af6a:	bf04      	itt	eq
 800af6c:	f045 0501 	orreq.w	r5, r5, #1
 800af70:	4c08      	ldreq	r4, [pc, #32]	; (800af94 <GUI_MEMDEV_CreateEx+0x74>)
 800af72:	9402      	str	r4, [sp, #8]
 800af74:	e88d 0060 	stmia.w	sp, {r5, r6}
 800af78:	4638      	mov	r0, r7
 800af7a:	4641      	mov	r1, r8
 800af7c:	464a      	mov	r2, r9
 800af7e:	4653      	mov	r3, sl
 800af80:	f7ff ff14 	bl	800adac <GUI_MEMDEV__CreateFixed>
 800af84:	b004      	add	sp, #16
 800af86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8a:	bf00      	nop
 800af8c:	20000084 	.word	0x20000084
 800af90:	200056dc 	.word	0x200056dc
 800af94:	080151dc 	.word	0x080151dc

0800af98 <GUI_MEMDEV_Select>:
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <GUI_MEMDEV_Select+0x48>)
 800af9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	4604      	mov	r4, r0
 800afa0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800afa2:	461f      	mov	r7, r3
 800afa4:	b910      	cbnz	r0, 800afac <GUI_MEMDEV_Select+0x14>
 800afa6:	f002 fe99 	bl	800dcdc <GUI_SelectLCD>
 800afaa:	e016      	b.n	800afda <GUI_MEMDEV_Select+0x42>
 800afac:	b10e      	cbz	r6, 800afb2 <GUI_MEMDEV_Select+0x1a>
 800afae:	f002 fe95 	bl	800dcdc <GUI_SelectLCD>
 800afb2:	f7fe ff31 	bl	8009e18 <WM_Deactivate>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f004 f8f0 	bl	800f19c <GUI_ALLOC_LockH>
 800afbc:	ad02      	add	r5, sp, #8
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800afc4:	661c      	str	r4, [r3, #96]	; 0x60
 800afc6:	6800      	ldr	r0, [r0, #0]
 800afc8:	f002 fc00 	bl	800d7cc <GUI_DEVICE_Link>
 800afcc:	4628      	mov	r0, r5
 800afce:	f004 f8f3 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800afd2:	f001 f8cf 	bl	800c174 <LCD_UpdateColorIndices>
 800afd6:	f001 fcdf 	bl	800c998 <LCD_SetClipRectMax>
 800afda:	4630      	mov	r0, r6
 800afdc:	b003      	add	sp, #12
 800afde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe0:	20000084 	.word	0x20000084

0800afe4 <GUI_MEMDEV_CopyToLCDAt>:
 800afe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afe8:	460c      	mov	r4, r1
 800afea:	b085      	sub	sp, #20
 800afec:	4615      	mov	r5, r2
 800afee:	4606      	mov	r6, r0
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d041      	beq.n	800b078 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800aff4:	2000      	movs	r0, #0
 800aff6:	f002 fe7e 	bl	800dcf6 <GUI_SetDrawMode>
 800affa:	4b21      	ldr	r3, [pc, #132]	; (800b080 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4607      	mov	r7, r0
 800b000:	4630      	mov	r0, r6
 800b002:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800b006:	f004 f8c9 	bl	800f19c <GUI_ALLOC_LockH>
 800b00a:	6803      	ldr	r3, [r0, #0]
 800b00c:	9001      	str	r0, [sp, #4]
 800b00e:	6998      	ldr	r0, [r3, #24]
 800b010:	f002 f9d4 	bl	800d3bc <GUI_SelectLayer>
 800b014:	4b1b      	ldr	r3, [pc, #108]	; (800b084 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800b016:	429c      	cmp	r4, r3
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	bf04      	itt	eq
 800b01c:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800b020:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800b024:	891a      	ldrh	r2, [r3, #8]
 800b026:	895b      	ldrh	r3, [r3, #10]
 800b028:	f8ad 4008 	strh.w	r4, [sp, #8]
 800b02c:	3a01      	subs	r2, #1
 800b02e:	3b01      	subs	r3, #1
 800b030:	4422      	add	r2, r4
 800b032:	442b      	add	r3, r5
 800b034:	4681      	mov	r9, r0
 800b036:	f8ad 200c 	strh.w	r2, [sp, #12]
 800b03a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b03e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800b042:	f7fe fee1 	bl	8009e08 <WM_Activate>
 800b046:	a801      	add	r0, sp, #4
 800b048:	f004 f8b6 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800b04c:	a802      	add	r0, sp, #8
 800b04e:	f7fe fd39 	bl	8009ac4 <WM__InitIVRSearch>
 800b052:	b948      	cbnz	r0, 800b068 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800b054:	4648      	mov	r0, r9
 800b056:	f002 f9b1 	bl	800d3bc <GUI_SelectLayer>
 800b05a:	4640      	mov	r0, r8
 800b05c:	f7ff ff9c 	bl	800af98 <GUI_MEMDEV_Select>
 800b060:	4638      	mov	r0, r7
 800b062:	f002 fe48 	bl	800dcf6 <GUI_SetDrawMode>
 800b066:	e007      	b.n	800b078 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800b068:	4630      	mov	r0, r6
 800b06a:	4621      	mov	r1, r4
 800b06c:	462a      	mov	r2, r5
 800b06e:	f004 fee7 	bl	800fe40 <GUI_MEMDEV__WriteToActiveOpaque>
 800b072:	f7fe fc65 	bl	8009940 <WM__GetNextIVR>
 800b076:	e7ec      	b.n	800b052 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800b078:	b005      	add	sp, #20
 800b07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b07e:	bf00      	nop
 800b080:	20000084 	.word	0x20000084
 800b084:	fffff001 	.word	0xfffff001

0800b088 <GUI_MEMDEV_CopyToLCD>:
 800b088:	4901      	ldr	r1, [pc, #4]	; (800b090 <GUI_MEMDEV_CopyToLCD+0x8>)
 800b08a:	460a      	mov	r2, r1
 800b08c:	f7ff bfaa 	b.w	800afe4 <GUI_MEMDEV_CopyToLCDAt>
 800b090:	fffff001 	.word	0xfffff001

0800b094 <_SetPhysRAMAddr>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	4604      	mov	r4, r0
 800b098:	460e      	mov	r6, r1
 800b09a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800b09e:	212a      	movs	r1, #42	; 0x2a
 800b0a0:	4615      	mov	r5, r2
 800b0a2:	4798      	blx	r3
 800b0a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0aa:	4431      	add	r1, r6
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b0b2:	4798      	blx	r3
 800b0b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0ba:	b2b7      	uxth	r7, r6
 800b0bc:	4439      	add	r1, r7
 800b0be:	4620      	mov	r0, r4
 800b0c0:	b2c9      	uxtb	r1, r1
 800b0c2:	4798      	blx	r3
 800b0c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0ca:	4431      	add	r1, r6
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b0d2:	4798      	blx	r3
 800b0d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0da:	4439      	add	r1, r7
 800b0dc:	4620      	mov	r0, r4
 800b0de:	b2c9      	uxtb	r1, r1
 800b0e0:	4798      	blx	r3
 800b0e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	212b      	movs	r1, #43	; 0x2b
 800b0ea:	4798      	blx	r3
 800b0ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0f2:	4429      	add	r1, r5
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b0fa:	4798      	blx	r3
 800b0fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b102:	b2ae      	uxth	r6, r5
 800b104:	4431      	add	r1, r6
 800b106:	4620      	mov	r0, r4
 800b108:	b2c9      	uxtb	r1, r1
 800b10a:	4798      	blx	r3
 800b10c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b10e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b112:	4429      	add	r1, r5
 800b114:	4620      	mov	r0, r4
 800b116:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b11a:	4798      	blx	r3
 800b11c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b11e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b122:	4431      	add	r1, r6
 800b124:	4620      	mov	r0, r4
 800b126:	b2c9      	uxtb	r1, r1
 800b128:	4798      	blx	r3
 800b12a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b12e:	4620      	mov	r0, r4
 800b130:	212c      	movs	r1, #44	; 0x2c
 800b132:	4798      	blx	r3
 800b134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b136 <_SetRect>:
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	4604      	mov	r4, r0
 800b13c:	4688      	mov	r8, r1
 800b13e:	461f      	mov	r7, r3
 800b140:	212a      	movs	r1, #42	; 0x2a
 800b142:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800b146:	9d06      	ldr	r5, [sp, #24]
 800b148:	4616      	mov	r6, r2
 800b14a:	4798      	blx	r3
 800b14c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b14e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b152:	4441      	add	r1, r8
 800b154:	4620      	mov	r0, r4
 800b156:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b15a:	4798      	blx	r3
 800b15c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b15e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b162:	4441      	add	r1, r8
 800b164:	4620      	mov	r0, r4
 800b166:	b2c9      	uxtb	r1, r1
 800b168:	4798      	blx	r3
 800b16a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b16c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b170:	4439      	add	r1, r7
 800b172:	4620      	mov	r0, r4
 800b174:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b178:	4798      	blx	r3
 800b17a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b17c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b180:	4439      	add	r1, r7
 800b182:	4620      	mov	r0, r4
 800b184:	b2c9      	uxtb	r1, r1
 800b186:	4798      	blx	r3
 800b188:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b18c:	4620      	mov	r0, r4
 800b18e:	212b      	movs	r1, #43	; 0x2b
 800b190:	4798      	blx	r3
 800b192:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b194:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b198:	4431      	add	r1, r6
 800b19a:	4620      	mov	r0, r4
 800b19c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b1a0:	4798      	blx	r3
 800b1a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b1a8:	4431      	add	r1, r6
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	b2c9      	uxtb	r1, r1
 800b1ae:	4798      	blx	r3
 800b1b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b1b6:	4429      	add	r1, r5
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b1be:	4798      	blx	r3
 800b1c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b1c6:	4429      	add	r1, r5
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	b2c9      	uxtb	r1, r1
 800b1cc:	4798      	blx	r3
 800b1ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	212c      	movs	r1, #44	; 0x2c
 800b1d6:	4798      	blx	r3
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1dc <_SetOrientation>:
 800b1dc:	b513      	push	{r0, r1, r4, lr}
 800b1de:	4a0d      	ldr	r2, [pc, #52]	; (800b214 <_SetOrientation+0x38>)
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	6851      	ldr	r1, [r2, #4]
 800b1e4:	6810      	ldr	r0, [r2, #0]
 800b1e6:	466b      	mov	r3, sp
 800b1e8:	c303      	stmia	r3!, {r0, r1}
 800b1ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	2136      	movs	r1, #54	; 0x36
 800b1f2:	4798      	blx	r3
 800b1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1f6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800b1f8:	aa02      	add	r2, sp, #8
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800b200:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800b204:	4319      	orrs	r1, r3
 800b206:	4620      	mov	r0, r4
 800b208:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b20c:	b289      	uxth	r1, r1
 800b20e:	4798      	blx	r3
 800b210:	b002      	add	sp, #8
 800b212:	bd10      	pop	{r4, pc}
 800b214:	08013afc 	.word	0x08013afc

0800b218 <_ReadPixel_16bpp_B8>:
 800b218:	b513      	push	{r0, r1, r4, lr}
 800b21a:	4604      	mov	r4, r0
 800b21c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800b220:	202e      	movs	r0, #46	; 0x2e
 800b222:	4798      	blx	r3
 800b224:	6a21      	ldr	r1, [r4, #32]
 800b226:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b22a:	4668      	mov	r0, sp
 800b22c:	3103      	adds	r1, #3
 800b22e:	4798      	blx	r3
 800b230:	6a22      	ldr	r2, [r4, #32]
 800b232:	ab00      	add	r3, sp, #0
 800b234:	4413      	add	r3, r2
 800b236:	f81d 2002 	ldrb.w	r2, [sp, r2]
 800b23a:	7859      	ldrb	r1, [r3, #1]
 800b23c:	7898      	ldrb	r0, [r3, #2]
 800b23e:	08d2      	lsrs	r2, r2, #3
 800b240:	0889      	lsrs	r1, r1, #2
 800b242:	02d2      	lsls	r2, r2, #11
 800b244:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800b248:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 800b24c:	b002      	add	sp, #8
 800b24e:	bd10      	pop	{r4, pc}

0800b250 <_ReadPixel_16bpp_B16_I>:
 800b250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b252:	4604      	mov	r4, r0
 800b254:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800b258:	202e      	movs	r0, #46	; 0x2e
 800b25a:	4798      	blx	r3
 800b25c:	6a21      	ldr	r1, [r4, #32]
 800b25e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b262:	4668      	mov	r0, sp
 800b264:	3102      	adds	r1, #2
 800b266:	4798      	blx	r3
 800b268:	6a23      	ldr	r3, [r4, #32]
 800b26a:	a900      	add	r1, sp, #0
 800b26c:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800b270:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800b274:	8852      	ldrh	r2, [r2, #2]
 800b276:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800b27a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800b27e:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800b282:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800b286:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800b28a:	b004      	add	sp, #16
 800b28c:	bd10      	pop	{r4, pc}

0800b28e <_SetReg_B8>:
 800b28e:	b538      	push	{r3, r4, r5, lr}
 800b290:	4604      	mov	r4, r0
 800b292:	460d      	mov	r5, r1
 800b294:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800b298:	0a08      	lsrs	r0, r1, #8
 800b29a:	4798      	blx	r3
 800b29c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b2a0:	b2e8      	uxtb	r0, r5
 800b2a2:	4798      	blx	r3
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}

0800b2a6 <_SetReg_B16>:
 800b2a6:	b508      	push	{r3, lr}
 800b2a8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	4798      	blx	r3
 800b2b0:	bd08      	pop	{r3, pc}

0800b2b2 <_WritePara_B8>:
 800b2b2:	b508      	push	{r3, lr}
 800b2b4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800b2b8:	b2c8      	uxtb	r0, r1
 800b2ba:	4798      	blx	r3
 800b2bc:	bd08      	pop	{r3, pc}

0800b2be <_WritePara_B16>:
 800b2be:	b508      	push	{r3, lr}
 800b2c0:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	4798      	blx	r3
 800b2c8:	bd08      	pop	{r3, pc}
	...

0800b2cc <_SetInterface>:
 800b2cc:	2908      	cmp	r1, #8
 800b2ce:	d002      	beq.n	800b2d6 <_SetInterface+0xa>
 800b2d0:	2910      	cmp	r1, #16
 800b2d2:	d005      	beq.n	800b2e0 <_SetInterface+0x14>
 800b2d4:	4770      	bx	lr
 800b2d6:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <_SetInterface+0x24>)
 800b2d8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <_SetInterface+0x28>)
 800b2de:	e003      	b.n	800b2e8 <_SetInterface+0x1c>
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <_SetInterface+0x2c>)
 800b2e2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <_SetInterface+0x30>)
 800b2e8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	0800b28f 	.word	0x0800b28f
 800b2f4:	0800b2b3 	.word	0x0800b2b3
 800b2f8:	0800b2a7 	.word	0x0800b2a7
 800b2fc:	0800b2bf 	.word	0x0800b2bf

0800b300 <_ReadRect_16bpp_B8>:
 800b300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b302:	b085      	sub	sp, #20
 800b304:	6884      	ldr	r4, [r0, #8]
 800b306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b308:	9700      	str	r7, [sp, #0]
 800b30a:	1abd      	subs	r5, r7, r2
 800b30c:	1a58      	subs	r0, r3, r1
 800b30e:	3501      	adds	r5, #1
 800b310:	fb00 5505 	mla	r5, r0, r5, r5
 800b314:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b318:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b31a:	4620      	mov	r0, r4
 800b31c:	47b8      	blx	r7
 800b31e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b322:	202e      	movs	r0, #46	; 0x2e
 800b324:	4798      	blx	r3
 800b326:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b32a:	6a21      	ldr	r1, [r4, #32]
 800b32c:	a802      	add	r0, sp, #8
 800b32e:	4798      	blx	r3
 800b330:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b334:	a802      	add	r0, sp, #8
 800b336:	2103      	movs	r1, #3
 800b338:	4798      	blx	r3
 800b33a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b33e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	0892      	lsrs	r2, r2, #2
 800b346:	02db      	lsls	r3, r3, #11
 800b348:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b34c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800b350:	3d01      	subs	r5, #1
 800b352:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800b356:	f826 3b02 	strh.w	r3, [r6], #2
 800b35a:	d1e9      	bne.n	800b330 <_ReadRect_16bpp_B8+0x30>
 800b35c:	b005      	add	sp, #20
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b360 <_ReadRect_16bpp_B16_I>:
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	b087      	sub	sp, #28
 800b364:	6884      	ldr	r4, [r0, #8]
 800b366:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b368:	9700      	str	r7, [sp, #0]
 800b36a:	1abd      	subs	r5, r7, r2
 800b36c:	1a58      	subs	r0, r3, r1
 800b36e:	3501      	adds	r5, #1
 800b370:	fb00 5505 	mla	r5, r0, r5, r5
 800b374:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b378:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b37a:	4620      	mov	r0, r4
 800b37c:	47b8      	blx	r7
 800b37e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800b382:	202e      	movs	r0, #46	; 0x2e
 800b384:	4798      	blx	r3
 800b386:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b38a:	6a21      	ldr	r1, [r4, #32]
 800b38c:	a802      	add	r0, sp, #8
 800b38e:	4798      	blx	r3
 800b390:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b394:	a802      	add	r0, sp, #8
 800b396:	2102      	movs	r1, #2
 800b398:	4798      	blx	r3
 800b39a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b39e:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800b3a2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b3a6:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800b3aa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b3ae:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800b3b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b3b6:	3d01      	subs	r5, #1
 800b3b8:	f826 3b02 	strh.w	r3, [r6], #2
 800b3bc:	d1e8      	bne.n	800b390 <_ReadRect_16bpp_B16_I+0x30>
 800b3be:	b007      	add	sp, #28
 800b3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b3c4 <GUIDRV_FlexColor_SetFunc66709>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	f000 fde2 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800b3cc:	68a3      	ldr	r3, [r4, #8]
 800b3ce:	4a12      	ldr	r2, [pc, #72]	; (800b418 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800b3d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800b3d4:	4a11      	ldr	r2, [pc, #68]	; (800b41c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800b3d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800b3da:	4a11      	ldr	r2, [pc, #68]	; (800b420 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800b3dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b3e0:	4a10      	ldr	r2, [pc, #64]	; (800b424 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800b3e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b3ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800b3f0:	4a0d      	ldr	r2, [pc, #52]	; (800b428 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800b3f2:	490e      	ldr	r1, [pc, #56]	; (800b42c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800b3fa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800b3fc:	6809      	ldr	r1, [r1, #0]
 800b3fe:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800b402:	f022 0203 	bic.w	r2, r2, #3
 800b406:	490a      	ldr	r1, [pc, #40]	; (800b430 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 800b408:	84da      	strh	r2, [r3, #38]	; 0x26
 800b40a:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800b40c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800b410:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b414:	bd10      	pop	{r4, pc}
 800b416:	bf00      	nop
 800b418:	0800b095 	.word	0x0800b095
 800b41c:	0800b137 	.word	0x0800b137
 800b420:	0800b1dd 	.word	0x0800b1dd
 800b424:	0800b219 	.word	0x0800b219
 800b428:	20000068 	.word	0x20000068
 800b42c:	20000064 	.word	0x20000064
 800b430:	0800b301 	.word	0x0800b301
 800b434:	0800b2cd 	.word	0x0800b2cd

0800b438 <_WriteU16_A1>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	0a0b      	lsrs	r3, r1, #8
 800b43c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800b440:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800b444:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800b448:	2102      	movs	r1, #2
 800b44a:	3071      	adds	r0, #113	; 0x71
 800b44c:	4798      	blx	r3
 800b44e:	bd08      	pop	{r3, pc}

0800b450 <_WriteDataMP>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800b454:	4604      	mov	r4, r0
 800b456:	460f      	mov	r7, r1
 800b458:	4615      	mov	r5, r2
 800b45a:	2300      	movs	r3, #0
 800b45c:	b1a5      	cbz	r5, 800b488 <_WriteDataMP+0x38>
 800b45e:	f837 2b02 	ldrh.w	r2, [r7], #2
 800b462:	4630      	mov	r0, r6
 800b464:	3301      	adds	r3, #1
 800b466:	0a11      	lsrs	r1, r2, #8
 800b468:	2bfa      	cmp	r3, #250	; 0xfa
 800b46a:	f800 1b02 	strb.w	r1, [r0], #2
 800b46e:	7072      	strb	r2, [r6, #1]
 800b470:	d107      	bne.n	800b482 <_WriteDataMP+0x32>
 800b472:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b476:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b478:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b47c:	4798      	blx	r3
 800b47e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b480:	2300      	movs	r3, #0
 800b482:	3d01      	subs	r5, #1
 800b484:	4606      	mov	r6, r0
 800b486:	e7e9      	b.n	800b45c <_WriteDataMP+0xc>
 800b488:	b123      	cbz	r3, 800b494 <_WriteDataMP+0x44>
 800b48a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b48e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800b490:	0059      	lsls	r1, r3, #1
 800b492:	4790      	blx	r2
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b496 <_ReadData>:
 800b496:	b508      	push	{r3, lr}
 800b498:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800b49c:	4798      	blx	r3
 800b49e:	bd08      	pop	{r3, pc}

0800b4a0 <_WriteData>:
 800b4a0:	b289      	uxth	r1, r1
 800b4a2:	f7ff bfc9 	b.w	800b438 <_WriteU16_A1>
	...

0800b4a8 <_FillRect>:
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	4f40      	ldr	r7, [pc, #256]	; (800b5b0 <_FillRect+0x108>)
 800b4ae:	6884      	ldr	r4, [r0, #8]
 800b4b0:	4682      	mov	sl, r0
 800b4b2:	6838      	ldr	r0, [r7, #0]
 800b4b4:	7c00      	ldrb	r0, [r0, #16]
 800b4b6:	f010 0f01 	tst.w	r0, #1
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	460e      	mov	r6, r1
 800b4be:	4615      	mov	r5, r2
 800b4c0:	4698      	mov	r8, r3
 800b4c2:	ebc1 0903 	rsb	r9, r1, r3
 800b4c6:	d045      	beq.n	800b554 <_FillRect+0xac>
 800b4c8:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800b4cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b4ce:	4285      	cmp	r5, r0
 800b4d0:	dc6b      	bgt.n	800b5aa <_FillRect+0x102>
 800b4d2:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 800b4d6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b4d8:	f1bc 0f00 	cmp.w	ip, #0
 800b4dc:	d101      	bne.n	800b4e2 <_FillRect+0x3a>
 800b4de:	46b4      	mov	ip, r6
 800b4e0:	e007      	b.n	800b4f2 <_FillRect+0x4a>
 800b4e2:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4643      	mov	r3, r8
 800b4ee:	47e0      	blx	ip
 800b4f0:	e011      	b.n	800b516 <_FillRect+0x6e>
 800b4f2:	45c4      	cmp	ip, r8
 800b4f4:	dc0e      	bgt.n	800b514 <_FillRect+0x6c>
 800b4f6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b4fa:	f8cd c00c 	str.w	ip, [sp, #12]
 800b4fe:	4661      	mov	r1, ip
 800b500:	4650      	mov	r0, sl
 800b502:	462a      	mov	r2, r5
 800b504:	4798      	blx	r3
 800b506:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b50a:	f827 0b02 	strh.w	r0, [r7], #2
 800b50e:	f10c 0c01 	add.w	ip, ip, #1
 800b512:	e7ee      	b.n	800b4f2 <_FillRect+0x4a>
 800b514:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b516:	1ebb      	subs	r3, r7, #2
 800b518:	f109 0c01 	add.w	ip, r9, #1
 800b51c:	445f      	add	r7, fp
 800b51e:	42bb      	cmp	r3, r7
 800b520:	d005      	beq.n	800b52e <_FillRect+0x86>
 800b522:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b524:	8859      	ldrh	r1, [r3, #2]
 800b526:	404a      	eors	r2, r1
 800b528:	f823 2f02 	strh.w	r2, [r3, #2]!
 800b52c:	e7f7      	b.n	800b51e <_FillRect+0x76>
 800b52e:	9500      	str	r5, [sp, #0]
 800b530:	462a      	mov	r2, r5
 800b532:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b536:	f8cd c00c 	str.w	ip, [sp, #12]
 800b53a:	4620      	mov	r0, r4
 800b53c:	4631      	mov	r1, r6
 800b53e:	4643      	mov	r3, r8
 800b540:	47b8      	blx	r7
 800b542:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b546:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b548:	4620      	mov	r0, r4
 800b54a:	4662      	mov	r2, ip
 800b54c:	f7ff ff80 	bl	800b450 <_WriteDataMP>
 800b550:	3501      	adds	r5, #1
 800b552:	e7bb      	b.n	800b4cc <_FillRect+0x24>
 800b554:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b556:	9000      	str	r0, [sp, #0]
 800b558:	1a85      	subs	r5, r0, r2
 800b55a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b55e:	4620      	mov	r0, r4
 800b560:	47b0      	blx	r6
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800b566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f109 0901 	add.w	r9, r9, #1
 800b56e:	fb05 9509 	mla	r5, r5, r9, r9
 800b572:	f3c3 2807 	ubfx	r8, r3, #8, #8
 800b576:	fa5f f983 	uxtb.w	r9, r3
 800b57a:	2301      	movs	r3, #1
 800b57c:	b1ad      	cbz	r5, 800b5aa <_FillRect+0x102>
 800b57e:	2df9      	cmp	r5, #249	; 0xf9
 800b580:	bf34      	ite	cc
 800b582:	462f      	movcc	r7, r5
 800b584:	27f9      	movcs	r7, #249	; 0xf9
 800b586:	0079      	lsls	r1, r7, #1
 800b588:	b143      	cbz	r3, 800b59c <_FillRect+0xf4>
 800b58a:	4633      	mov	r3, r6
 800b58c:	1872      	adds	r2, r6, r1
 800b58e:	4293      	cmp	r3, r2
 800b590:	d004      	beq.n	800b59c <_FillRect+0xf4>
 800b592:	f883 8001 	strb.w	r8, [r3, #1]
 800b596:	f803 9f02 	strb.w	r9, [r3, #2]!
 800b59a:	e7f8      	b.n	800b58e <_FillRect+0xe6>
 800b59c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800b5a0:	1c70      	adds	r0, r6, #1
 800b5a2:	4790      	blx	r2
 800b5a4:	1bed      	subs	r5, r5, r7
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e7e8      	b.n	800b57c <_FillRect+0xd4>
 800b5aa:	b005      	add	sp, #20
 800b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b0:	20000084 	.word	0x20000084

0800b5b4 <_DrawBitmap>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	b08d      	sub	sp, #52	; 0x34
 800b5ba:	6885      	ldr	r5, [r0, #8]
 800b5bc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	1e7b      	subs	r3, r7, #1
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	9009      	str	r0, [sp, #36]	; 0x24
 800b5c6:	9108      	str	r1, [sp, #32]
 800b5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ca:	950b      	str	r5, [sp, #44]	; 0x2c
 800b5cc:	d903      	bls.n	800b5d6 <_DrawBitmap+0x22>
 800b5ce:	2f04      	cmp	r7, #4
 800b5d0:	d001      	beq.n	800b5d6 <_DrawBitmap+0x22>
 800b5d2:	2f08      	cmp	r7, #8
 800b5d4:	d106      	bne.n	800b5e4 <_DrawBitmap+0x30>
 800b5d6:	4b91      	ldr	r3, [pc, #580]	; (800b81c <_DrawBitmap+0x268>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	7c1b      	ldrb	r3, [r3, #16]
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d010      	beq.n	800b606 <_DrawBitmap+0x52>
 800b5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5e6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b5e8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b5ea:	9908      	ldr	r1, [sp, #32]
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	443a      	add	r2, r7
 800b5f0:	4429      	add	r1, r5
 800b5f2:	3a01      	subs	r2, #1
 800b5f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b5f6:	9200      	str	r2, [sp, #0]
 800b5f8:	440b      	add	r3, r1
 800b5fa:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800b5fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b600:	4628      	mov	r0, r5
 800b602:	3b01      	subs	r3, #1
 800b604:	47a0      	blx	r4
 800b606:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b60a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b60c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b60e:	ebc5 030b 	rsb	r3, r5, fp
 800b612:	42bb      	cmp	r3, r7
 800b614:	f280 8253 	bge.w	800babe <_DrawBitmap+0x50a>
 800b618:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800b61a:	1e7b      	subs	r3, r7, #1
 800b61c:	2b0f      	cmp	r3, #15
 800b61e:	f200 8247 	bhi.w	800bab0 <_DrawBitmap+0x4fc>
 800b622:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b626:	0010      	.short	0x0010
 800b628:	024500bb 	.word	0x024500bb
 800b62c:	02450144 	.word	0x02450144
 800b630:	02450245 	.word	0x02450245
 800b634:	024501db 	.word	0x024501db
 800b638:	02450245 	.word	0x02450245
 800b63c:	02450245 	.word	0x02450245
 800b640:	02450245 	.word	0x02450245
 800b644:	0240      	.short	0x0240
 800b646:	4b75      	ldr	r3, [pc, #468]	; (800b81c <_DrawBitmap+0x268>)
 800b648:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b64a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68ac      	ldr	r4, [r5, #8]
 800b650:	7c1b      	ldrb	r3, [r3, #16]
 800b652:	687d      	ldr	r5, [r7, #4]
 800b654:	683e      	ldr	r6, [r7, #0]
 800b656:	9507      	str	r5, [sp, #28]
 800b658:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b65a:	9d08      	ldr	r5, [sp, #32]
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	443d      	add	r5, r7
 800b662:	2b02      	cmp	r3, #2
 800b664:	9503      	str	r5, [sp, #12]
 800b666:	d01c      	beq.n	800b6a2 <_DrawBitmap+0xee>
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d071      	beq.n	800b750 <_DrawBitmap+0x19c>
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d06f      	beq.n	800b750 <_DrawBitmap+0x19c>
 800b670:	9f05      	ldr	r7, [sp, #20]
 800b672:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b674:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800b678:	f898 2000 	ldrb.w	r2, [r8]
 800b67c:	2380      	movs	r3, #128	; 0x80
 800b67e:	412b      	asrs	r3, r5
 800b680:	421a      	tst	r2, r3
 800b682:	bf16      	itet	ne
 800b684:	9807      	ldrne	r0, [sp, #28]
 800b686:	b2b1      	uxtheq	r1, r6
 800b688:	b281      	uxthne	r1, r0
 800b68a:	3501      	adds	r5, #1
 800b68c:	4620      	mov	r0, r4
 800b68e:	f7ff fed3 	bl	800b438 <_WriteU16_A1>
 800b692:	2d08      	cmp	r5, #8
 800b694:	bf04      	itt	eq
 800b696:	f108 0801 	addeq.w	r8, r8, #1
 800b69a:	2500      	moveq	r5, #0
 800b69c:	3f01      	subs	r7, #1
 800b69e:	d1eb      	bne.n	800b678 <_DrawBitmap+0xc4>
 800b6a0:	e206      	b.n	800bab0 <_DrawBitmap+0x4fc>
 800b6a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b6a4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800b6a8:	9506      	str	r5, [sp, #24]
 800b6aa:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b6ae:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	4656      	mov	r6, sl
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	9f06      	ldr	r7, [sp, #24]
 800b6ba:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b6be:	783a      	ldrb	r2, [r7, #0]
 800b6c0:	fa4c fc08 	asr.w	ip, ip, r8
 800b6c4:	ea12 0c0c 	ands.w	ip, r2, ip
 800b6c8:	d00b      	beq.n	800b6e2 <_DrawBitmap+0x12e>
 800b6ca:	b913      	cbnz	r3, 800b6d2 <_DrawBitmap+0x11e>
 800b6cc:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800b6d0:	46b2      	mov	sl, r6
 800b6d2:	9f07      	ldr	r7, [sp, #28]
 800b6d4:	f8a9 7000 	strh.w	r7, [r9]
 800b6d8:	3501      	adds	r5, #1
 800b6da:	f109 0902 	add.w	r9, r9, #2
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e017      	b.n	800b712 <_DrawBitmap+0x15e>
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d114      	bne.n	800b710 <_DrawBitmap+0x15c>
 800b6e6:	f8cd b000 	str.w	fp, [sp]
 800b6ea:	1e73      	subs	r3, r6, #1
 800b6ec:	f8cd c010 	str.w	ip, [sp, #16]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	4651      	mov	r1, sl
 800b6f4:	465a      	mov	r2, fp
 800b6f6:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b6fa:	47b8      	blx	r7
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	4620      	mov	r0, r4
 800b700:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b702:	f7ff fea5 	bl	800b450 <_WriteDataMP>
 800b706:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b70a:	4665      	mov	r5, ip
 800b70c:	4663      	mov	r3, ip
 800b70e:	e000      	b.n	800b712 <_DrawBitmap+0x15e>
 800b710:	4663      	mov	r3, ip
 800b712:	f108 0801 	add.w	r8, r8, #1
 800b716:	f1b8 0f08 	cmp.w	r8, #8
 800b71a:	f106 0601 	add.w	r6, r6, #1
 800b71e:	d104      	bne.n	800b72a <_DrawBitmap+0x176>
 800b720:	9f06      	ldr	r7, [sp, #24]
 800b722:	3701      	adds	r7, #1
 800b724:	9706      	str	r7, [sp, #24]
 800b726:	f04f 0800 	mov.w	r8, #0
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	9f03      	ldr	r7, [sp, #12]
 800b72e:	443a      	add	r2, r7
 800b730:	42b2      	cmp	r2, r6
 800b732:	d1c1      	bne.n	800b6b8 <_DrawBitmap+0x104>
 800b734:	9f05      	ldr	r7, [sp, #20]
 800b736:	1e7b      	subs	r3, r7, #1
 800b738:	9f03      	ldr	r7, [sp, #12]
 800b73a:	443b      	add	r3, r7
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	f000 81b7 	beq.w	800bab0 <_DrawBitmap+0x4fc>
 800b742:	f8cd b000 	str.w	fp, [sp]
 800b746:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b74a:	4620      	mov	r0, r4
 800b74c:	4651      	mov	r1, sl
 800b74e:	e13f      	b.n	800b9d0 <_DrawBitmap+0x41c>
 800b750:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b754:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b756:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b758:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b75c:	9f03      	ldr	r7, [sp, #12]
 800b75e:	782a      	ldrb	r2, [r5, #0]
 800b760:	2380      	movs	r3, #128	; 0x80
 800b762:	4133      	asrs	r3, r6
 800b764:	44b9      	add	r9, r7
 800b766:	421a      	tst	r2, r3
 800b768:	ebc8 0909 	rsb	r9, r8, r9
 800b76c:	d00d      	beq.n	800b78a <_DrawBitmap+0x1d6>
 800b76e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b772:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b774:	4649      	mov	r1, r9
 800b776:	465a      	mov	r2, fp
 800b778:	4798      	blx	r3
 800b77a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b77c:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 800b780:	4043      	eors	r3, r0
 800b782:	4649      	mov	r1, r9
 800b784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b786:	465a      	mov	r2, fp
 800b788:	47b8      	blx	r7
 800b78a:	3601      	adds	r6, #1
 800b78c:	2e08      	cmp	r6, #8
 800b78e:	bf04      	itt	eq
 800b790:	3501      	addeq	r5, #1
 800b792:	2600      	moveq	r6, #0
 800b794:	f1b8 0801 	subs.w	r8, r8, #1
 800b798:	d1de      	bne.n	800b758 <_DrawBitmap+0x1a4>
 800b79a:	e189      	b.n	800bab0 <_DrawBitmap+0x4fc>
 800b79c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b79e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b7a0:	68ac      	ldr	r4, [r5, #8]
 800b7a2:	2f00      	cmp	r7, #0
 800b7a4:	f000 8184 	beq.w	800bab0 <_DrawBitmap+0x4fc>
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <_DrawBitmap+0x268>)
 800b7aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f895 a000 	ldrb.w	sl, [r5]
 800b7b2:	7c1b      	ldrb	r3, [r3, #16]
 800b7b4:	f013 0303 	ands.w	r3, r3, #3
 800b7b8:	d011      	beq.n	800b7de <_DrawBitmap+0x22a>
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	f040 8178 	bne.w	800bab0 <_DrawBitmap+0x4fc>
 800b7c0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b7c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7c6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b7c8:	9703      	str	r7, [sp, #12]
 800b7ca:	44a9      	add	r9, r5
 800b7cc:	46a8      	mov	r8, r5
 800b7ce:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b7d0:	9507      	str	r5, [sp, #28]
 800b7d2:	2500      	movs	r5, #0
 800b7d4:	f8cd 9018 	str.w	r9, [sp, #24]
 800b7d8:	464e      	mov	r6, r9
 800b7da:	462b      	mov	r3, r5
 800b7dc:	e040      	b.n	800b860 <_DrawBitmap+0x2ac>
 800b7de:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b7e0:	9e05      	ldr	r6, [sp, #20]
 800b7e2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b7e4:	f1c5 0303 	rsb	r3, r5, #3
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	f1c3 0206 	rsb	r2, r3, #6
 800b7ee:	21c0      	movs	r1, #192	; 0xc0
 800b7f0:	fa41 f202 	asr.w	r2, r1, r2
 800b7f4:	ea02 020a 	and.w	r2, r2, sl
 800b7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b7fe:	4620      	mov	r0, r4
 800b800:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b804:	3501      	adds	r5, #1
 800b806:	f7ff fe17 	bl	800b438 <_WriteU16_A1>
 800b80a:	2d04      	cmp	r5, #4
 800b80c:	d103      	bne.n	800b816 <_DrawBitmap+0x262>
 800b80e:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b812:	2500      	movs	r5, #0
 800b814:	3701      	adds	r7, #1
 800b816:	3e01      	subs	r6, #1
 800b818:	d1e4      	bne.n	800b7e4 <_DrawBitmap+0x230>
 800b81a:	e149      	b.n	800bab0 <_DrawBitmap+0x4fc>
 800b81c:	20000084 	.word	0x20000084
 800b820:	b913      	cbnz	r3, 800b828 <_DrawBitmap+0x274>
 800b822:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b824:	9703      	str	r7, [sp, #12]
 800b826:	9606      	str	r6, [sp, #24]
 800b828:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b82a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b82e:	9f03      	ldr	r7, [sp, #12]
 800b830:	803b      	strh	r3, [r7, #0]
 800b832:	3702      	adds	r7, #2
 800b834:	3501      	adds	r5, #1
 800b836:	9703      	str	r7, [sp, #12]
 800b838:	2301      	movs	r3, #1
 800b83a:	f108 0801 	add.w	r8, r8, #1
 800b83e:	f1b8 0f04 	cmp.w	r8, #4
 800b842:	f106 0601 	add.w	r6, r6, #1
 800b846:	d106      	bne.n	800b856 <_DrawBitmap+0x2a2>
 800b848:	9f07      	ldr	r7, [sp, #28]
 800b84a:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b84e:	3701      	adds	r7, #1
 800b850:	9707      	str	r7, [sp, #28]
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	9a05      	ldr	r2, [sp, #20]
 800b858:	444a      	add	r2, r9
 800b85a:	42b2      	cmp	r2, r6
 800b85c:	f000 80ad 	beq.w	800b9ba <_DrawBitmap+0x406>
 800b860:	f1c8 0203 	rsb	r2, r8, #3
 800b864:	0052      	lsls	r2, r2, #1
 800b866:	f1c2 0106 	rsb	r1, r2, #6
 800b86a:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800b86e:	fa4c fc01 	asr.w	ip, ip, r1
 800b872:	ea0c 0c0a 	and.w	ip, ip, sl
 800b876:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b87a:	d1d1      	bne.n	800b820 <_DrawBitmap+0x26c>
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d114      	bne.n	800b8aa <_DrawBitmap+0x2f6>
 800b880:	f8cd b000 	str.w	fp, [sp]
 800b884:	1e73      	subs	r3, r6, #1
 800b886:	f8cd c010 	str.w	ip, [sp, #16]
 800b88a:	4620      	mov	r0, r4
 800b88c:	9906      	ldr	r1, [sp, #24]
 800b88e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b892:	465a      	mov	r2, fp
 800b894:	47b8      	blx	r7
 800b896:	462a      	mov	r2, r5
 800b898:	4620      	mov	r0, r4
 800b89a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b89c:	f7ff fdd8 	bl	800b450 <_WriteDataMP>
 800b8a0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b8a4:	4665      	mov	r5, ip
 800b8a6:	4663      	mov	r3, ip
 800b8a8:	e7c7      	b.n	800b83a <_DrawBitmap+0x286>
 800b8aa:	4663      	mov	r3, ip
 800b8ac:	e7c5      	b.n	800b83a <_DrawBitmap+0x286>
 800b8ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b8b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b8b2:	68ac      	ldr	r4, [r5, #8]
 800b8b4:	2f00      	cmp	r7, #0
 800b8b6:	f000 80fb 	beq.w	800bab0 <_DrawBitmap+0x4fc>
 800b8ba:	4b82      	ldr	r3, [pc, #520]	; (800bac4 <_DrawBitmap+0x510>)
 800b8bc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f895 a000 	ldrb.w	sl, [r5]
 800b8c4:	7c1b      	ldrb	r3, [r3, #16]
 800b8c6:	f013 0303 	ands.w	r3, r3, #3
 800b8ca:	d011      	beq.n	800b8f0 <_DrawBitmap+0x33c>
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	f040 80ef 	bne.w	800bab0 <_DrawBitmap+0x4fc>
 800b8d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b8d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8d8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b8da:	9703      	str	r7, [sp, #12]
 800b8dc:	44a9      	add	r9, r5
 800b8de:	46a8      	mov	r8, r5
 800b8e0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b8e2:	9507      	str	r5, [sp, #28]
 800b8e4:	2500      	movs	r5, #0
 800b8e6:	f8cd 9018 	str.w	r9, [sp, #24]
 800b8ea:	464e      	mov	r6, r9
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	e03d      	b.n	800b96c <_DrawBitmap+0x3b8>
 800b8f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b8f2:	9e05      	ldr	r6, [sp, #20]
 800b8f4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b8f6:	f1c5 0301 	rsb	r3, r5, #1
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	f1c3 0204 	rsb	r2, r3, #4
 800b900:	21f0      	movs	r1, #240	; 0xf0
 800b902:	fa41 f202 	asr.w	r2, r1, r2
 800b906:	ea02 020a 	and.w	r2, r2, sl
 800b90a:	fa22 f303 	lsr.w	r3, r2, r3
 800b90e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b910:	4620      	mov	r0, r4
 800b912:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800b916:	3501      	adds	r5, #1
 800b918:	f7ff fd8e 	bl	800b438 <_WriteU16_A1>
 800b91c:	2d02      	cmp	r5, #2
 800b91e:	d103      	bne.n	800b928 <_DrawBitmap+0x374>
 800b920:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b924:	2500      	movs	r5, #0
 800b926:	3701      	adds	r7, #1
 800b928:	3e01      	subs	r6, #1
 800b92a:	d1e4      	bne.n	800b8f6 <_DrawBitmap+0x342>
 800b92c:	e0c0      	b.n	800bab0 <_DrawBitmap+0x4fc>
 800b92e:	b913      	cbnz	r3, 800b936 <_DrawBitmap+0x382>
 800b930:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800b932:	9703      	str	r7, [sp, #12]
 800b934:	9606      	str	r6, [sp, #24]
 800b936:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b938:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800b93c:	9f03      	ldr	r7, [sp, #12]
 800b93e:	803b      	strh	r3, [r7, #0]
 800b940:	3702      	adds	r7, #2
 800b942:	3501      	adds	r5, #1
 800b944:	9703      	str	r7, [sp, #12]
 800b946:	2301      	movs	r3, #1
 800b948:	f108 0801 	add.w	r8, r8, #1
 800b94c:	f1b8 0f02 	cmp.w	r8, #2
 800b950:	f106 0601 	add.w	r6, r6, #1
 800b954:	d106      	bne.n	800b964 <_DrawBitmap+0x3b0>
 800b956:	9f07      	ldr	r7, [sp, #28]
 800b958:	f897 a001 	ldrb.w	sl, [r7, #1]
 800b95c:	3701      	adds	r7, #1
 800b95e:	9707      	str	r7, [sp, #28]
 800b960:	f04f 0800 	mov.w	r8, #0
 800b964:	9a05      	ldr	r2, [sp, #20]
 800b966:	444a      	add	r2, r9
 800b968:	42b2      	cmp	r2, r6
 800b96a:	d026      	beq.n	800b9ba <_DrawBitmap+0x406>
 800b96c:	f1c8 0201 	rsb	r2, r8, #1
 800b970:	0092      	lsls	r2, r2, #2
 800b972:	f1c2 0104 	rsb	r1, r2, #4
 800b976:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800b97a:	fa4c fc01 	asr.w	ip, ip, r1
 800b97e:	ea0c 0c0a 	and.w	ip, ip, sl
 800b982:	fa3c fc02 	lsrs.w	ip, ip, r2
 800b986:	d1d2      	bne.n	800b92e <_DrawBitmap+0x37a>
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d114      	bne.n	800b9b6 <_DrawBitmap+0x402>
 800b98c:	f8cd b000 	str.w	fp, [sp]
 800b990:	1e73      	subs	r3, r6, #1
 800b992:	f8cd c010 	str.w	ip, [sp, #16]
 800b996:	4620      	mov	r0, r4
 800b998:	9906      	ldr	r1, [sp, #24]
 800b99a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800b99e:	465a      	mov	r2, fp
 800b9a0:	47b8      	blx	r7
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b9a8:	f7ff fd52 	bl	800b450 <_WriteDataMP>
 800b9ac:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b9b0:	4665      	mov	r5, ip
 800b9b2:	4663      	mov	r3, ip
 800b9b4:	e7c8      	b.n	800b948 <_DrawBitmap+0x394>
 800b9b6:	4663      	mov	r3, ip
 800b9b8:	e7c6      	b.n	800b948 <_DrawBitmap+0x394>
 800b9ba:	9f05      	ldr	r7, [sp, #20]
 800b9bc:	1e7b      	subs	r3, r7, #1
 800b9be:	444b      	add	r3, r9
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	d075      	beq.n	800bab0 <_DrawBitmap+0x4fc>
 800b9c4:	f8cd b000 	str.w	fp, [sp]
 800b9c8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800b9cc:	9906      	ldr	r1, [sp, #24]
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	465a      	mov	r2, fp
 800b9d2:	47b0      	blx	r6
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b9d8:	462a      	mov	r2, r5
 800b9da:	e067      	b.n	800baac <_DrawBitmap+0x4f8>
 800b9dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b9de:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b9e0:	68ac      	ldr	r4, [r5, #8]
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	d064      	beq.n	800bab0 <_DrawBitmap+0x4fc>
 800b9e6:	4b37      	ldr	r3, [pc, #220]	; (800bac4 <_DrawBitmap+0x510>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	7c1b      	ldrb	r3, [r3, #16]
 800b9ec:	f013 0303 	ands.w	r3, r3, #3
 800b9f0:	d009      	beq.n	800ba06 <_DrawBitmap+0x452>
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d15c      	bne.n	800bab0 <_DrawBitmap+0x4fc>
 800b9f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9fa:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800b9fe:	2600      	movs	r6, #0
 800ba00:	464f      	mov	r7, r9
 800ba02:	4633      	mov	r3, r6
 800ba04:	e022      	b.n	800ba4c <_DrawBitmap+0x498>
 800ba06:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ba08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba0a:	9f05      	ldr	r7, [sp, #20]
 800ba0c:	443b      	add	r3, r7
 800ba0e:	1b5b      	subs	r3, r3, r5
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dd4d      	ble.n	800bab0 <_DrawBitmap+0x4fc>
 800ba14:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba18:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 800ba20:	f7ff fd0a 	bl	800b438 <_WriteU16_A1>
 800ba24:	e7f0      	b.n	800ba08 <_DrawBitmap+0x454>
 800ba26:	b913      	cbnz	r3, 800ba2e <_DrawBitmap+0x47a>
 800ba28:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800ba2c:	46b9      	mov	r9, r7
 800ba2e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ba30:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800ba34:	f8a8 3000 	strh.w	r3, [r8]
 800ba38:	3601      	adds	r6, #1
 800ba3a:	f108 0802 	add.w	r8, r8, #2
 800ba3e:	2301      	movs	r3, #1
 800ba40:	9a08      	ldr	r2, [sp, #32]
 800ba42:	9d05      	ldr	r5, [sp, #20]
 800ba44:	3701      	adds	r7, #1
 800ba46:	442a      	add	r2, r5
 800ba48:	42ba      	cmp	r2, r7
 800ba4a:	d01c      	beq.n	800ba86 <_DrawBitmap+0x4d2>
 800ba4c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ba4e:	9808      	ldr	r0, [sp, #32]
 800ba50:	1a2a      	subs	r2, r5, r0
 800ba52:	f812 a007 	ldrb.w	sl, [r2, r7]
 800ba56:	f1ba 0f00 	cmp.w	sl, #0
 800ba5a:	d1e4      	bne.n	800ba26 <_DrawBitmap+0x472>
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d110      	bne.n	800ba82 <_DrawBitmap+0x4ce>
 800ba60:	f8cd b000 	str.w	fp, [sp]
 800ba64:	1e7b      	subs	r3, r7, #1
 800ba66:	4620      	mov	r0, r4
 800ba68:	4649      	mov	r1, r9
 800ba6a:	465a      	mov	r2, fp
 800ba6c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800ba70:	47a8      	blx	r5
 800ba72:	4632      	mov	r2, r6
 800ba74:	4620      	mov	r0, r4
 800ba76:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ba78:	f7ff fcea 	bl	800b450 <_WriteDataMP>
 800ba7c:	4656      	mov	r6, sl
 800ba7e:	4653      	mov	r3, sl
 800ba80:	e7de      	b.n	800ba40 <_DrawBitmap+0x48c>
 800ba82:	4653      	mov	r3, sl
 800ba84:	e7dc      	b.n	800ba40 <_DrawBitmap+0x48c>
 800ba86:	9f08      	ldr	r7, [sp, #32]
 800ba88:	1e6b      	subs	r3, r5, #1
 800ba8a:	443b      	add	r3, r7
 800ba8c:	b186      	cbz	r6, 800bab0 <_DrawBitmap+0x4fc>
 800ba8e:	f8cd b000 	str.w	fp, [sp]
 800ba92:	4620      	mov	r0, r4
 800ba94:	4649      	mov	r1, r9
 800ba96:	465a      	mov	r2, fp
 800ba98:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800ba9c:	47a8      	blx	r5
 800ba9e:	4620      	mov	r0, r4
 800baa0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800baa2:	4632      	mov	r2, r6
 800baa4:	e002      	b.n	800baac <_DrawBitmap+0x4f8>
 800baa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800baa8:	9919      	ldr	r1, [sp, #100]	; 0x64
 800baaa:	9a05      	ldr	r2, [sp, #20]
 800baac:	f7ff fcd0 	bl	800b450 <_WriteDataMP>
 800bab0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800bab2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800bab4:	443d      	add	r5, r7
 800bab6:	9519      	str	r5, [sp, #100]	; 0x64
 800bab8:	f10b 0b01 	add.w	fp, fp, #1
 800babc:	e5a5      	b.n	800b60a <_DrawBitmap+0x56>
 800babe:	b00d      	add	sp, #52	; 0x34
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac4:	20000084 	.word	0x20000084

0800bac8 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800bac8:	b510      	push	{r4, lr}
 800baca:	4604      	mov	r4, r0
 800bacc:	f000 fa60 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800bad0:	68a4      	ldr	r4, [r4, #8]
 800bad2:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800bad4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800bada:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800bade:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800bae0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800bae6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800baea:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800baec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800baf0:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800baf2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800baf6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800bafa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800bafe:	4620      	mov	r0, r4
 800bb00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bb04:	2108      	movs	r1, #8
 800bb06:	4798      	blx	r3
 800bb08:	2310      	movs	r3, #16
 800bb0a:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb0c:	4b07      	ldr	r3, [pc, #28]	; (800bb2c <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800bb0e:	6463      	str	r3, [r4, #68]	; 0x44
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	bf00      	nop
 800bb14:	0800b5b5 	.word	0x0800b5b5
 800bb18:	0800b4a9 	.word	0x0800b4a9
 800bb1c:	0800bedf 	.word	0x0800bedf
 800bb20:	0800be4f 	.word	0x0800be4f
 800bb24:	0800b497 	.word	0x0800b497
 800bb28:	0800b4a1 	.word	0x0800b4a1
 800bb2c:	08015264 	.word	0x08015264

0800bb30 <_Log2PhysX_X0Y0S0>:
 800bb30:	4608      	mov	r0, r1
 800bb32:	4770      	bx	lr

0800bb34 <_Log2PhysX_X1Y0S0>:
 800bb34:	6800      	ldr	r0, [r0, #0]
 800bb36:	1a40      	subs	r0, r0, r1
 800bb38:	3801      	subs	r0, #1
 800bb3a:	4770      	bx	lr

0800bb3c <_Log2PhysX_X0Y1S0>:
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4770      	bx	lr

0800bb40 <_Log2PhysX_X1Y1S0>:
 800bb40:	6800      	ldr	r0, [r0, #0]
 800bb42:	1a40      	subs	r0, r0, r1
 800bb44:	3801      	subs	r0, #1
 800bb46:	4770      	bx	lr

0800bb48 <_Log2PhysX_X0Y0S1>:
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4770      	bx	lr

0800bb4c <_Log2PhysX_X1Y0S1>:
 800bb4c:	6840      	ldr	r0, [r0, #4]
 800bb4e:	1a80      	subs	r0, r0, r2
 800bb50:	3801      	subs	r0, #1
 800bb52:	4770      	bx	lr

0800bb54 <_Log2PhysX_X0Y1S1>:
 800bb54:	4610      	mov	r0, r2
 800bb56:	4770      	bx	lr

0800bb58 <_Log2PhysX_X1Y1S1>:
 800bb58:	6840      	ldr	r0, [r0, #4]
 800bb5a:	1a80      	subs	r0, r0, r2
 800bb5c:	3801      	subs	r0, #1
 800bb5e:	4770      	bx	lr

0800bb60 <_Log2PhysY_X0Y0S0>:
 800bb60:	4610      	mov	r0, r2
 800bb62:	4770      	bx	lr

0800bb64 <_Log2PhysY_X1Y0S0>:
 800bb64:	4610      	mov	r0, r2
 800bb66:	4770      	bx	lr

0800bb68 <_Log2PhysY_X0Y1S0>:
 800bb68:	6840      	ldr	r0, [r0, #4]
 800bb6a:	1a80      	subs	r0, r0, r2
 800bb6c:	3801      	subs	r0, #1
 800bb6e:	4770      	bx	lr

0800bb70 <_Log2PhysY_X1Y1S0>:
 800bb70:	6840      	ldr	r0, [r0, #4]
 800bb72:	1a80      	subs	r0, r0, r2
 800bb74:	3801      	subs	r0, #1
 800bb76:	4770      	bx	lr

0800bb78 <_Log2PhysY_X0Y0S1>:
 800bb78:	4608      	mov	r0, r1
 800bb7a:	4770      	bx	lr

0800bb7c <_Log2PhysY_X1Y0S1>:
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	4770      	bx	lr

0800bb80 <_Log2PhysY_X0Y1S1>:
 800bb80:	6800      	ldr	r0, [r0, #0]
 800bb82:	1a40      	subs	r0, r0, r1
 800bb84:	3801      	subs	r0, #1
 800bb86:	4770      	bx	lr

0800bb88 <_Log2PhysY_X1Y1S1>:
 800bb88:	6800      	ldr	r0, [r0, #0]
 800bb8a:	1a40      	subs	r0, r0, r1
 800bb8c:	3801      	subs	r0, #1
 800bb8e:	4770      	bx	lr

0800bb90 <_SetPixelIndex>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	6884      	ldr	r4, [r0, #8]
 800bb94:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800bb98:	47a0      	blx	r4
 800bb9a:	bd10      	pop	{r4, pc}

0800bb9c <_GetPixelIndex>:
 800bb9c:	b508      	push	{r3, lr}
 800bb9e:	6883      	ldr	r3, [r0, #8]
 800bba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bba4:	4798      	blx	r3
 800bba6:	bd08      	pop	{r3, pc}

0800bba8 <_XorPixel>:
 800bba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	4616      	mov	r6, r2
 800bbb0:	6885      	ldr	r5, [r0, #8]
 800bbb2:	f7ff fff3 	bl	800bb9c <_GetPixelIndex>
 800bbb6:	9001      	str	r0, [sp, #4]
 800bbb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bbbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4632      	mov	r2, r6
 800bbc4:	ea8e 0303 	eor.w	r3, lr, r3
 800bbc8:	f7ff ffe2 	bl	800bb90 <_SetPixelIndex>
 800bbcc:	b003      	add	sp, #12
 800bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbd0 <_DrawHLine>:
 800bbd0:	b513      	push	{r0, r1, r4, lr}
 800bbd2:	6884      	ldr	r4, [r0, #8]
 800bbd4:	9200      	str	r2, [sp, #0]
 800bbd6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800bbda:	47a0      	blx	r4
 800bbdc:	b002      	add	sp, #8
 800bbde:	bd10      	pop	{r4, pc}

0800bbe0 <_DrawVLine>:
 800bbe0:	b513      	push	{r0, r1, r4, lr}
 800bbe2:	6884      	ldr	r4, [r0, #8]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800bbea:	460b      	mov	r3, r1
 800bbec:	47a0      	blx	r4
 800bbee:	b002      	add	sp, #8
 800bbf0:	bd10      	pop	{r4, pc}

0800bbf2 <_FillRect>:
 800bbf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf4:	9c06      	ldr	r4, [sp, #24]
 800bbf6:	6885      	ldr	r5, [r0, #8]
 800bbf8:	9400      	str	r4, [sp, #0]
 800bbfa:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 800bbfe:	47a0      	blx	r4
 800bc00:	b003      	add	sp, #12
 800bc02:	bd30      	pop	{r4, r5, pc}

0800bc04 <_DrawBitmap>:
 800bc04:	b530      	push	{r4, r5, lr}
 800bc06:	b087      	sub	sp, #28
 800bc08:	6885      	ldr	r5, [r0, #8]
 800bc0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc0c:	9400      	str	r4, [sp, #0]
 800bc0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc10:	9401      	str	r4, [sp, #4]
 800bc12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc14:	9402      	str	r4, [sp, #8]
 800bc16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bc18:	9403      	str	r4, [sp, #12]
 800bc1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bc1c:	9404      	str	r4, [sp, #16]
 800bc1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bc20:	9405      	str	r4, [sp, #20]
 800bc22:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 800bc26:	47a0      	blx	r4
 800bc28:	b007      	add	sp, #28
 800bc2a:	bd30      	pop	{r4, r5, pc}

0800bc2c <_GetDevFunc_SetRect>:
 800bc2c:	4770      	bx	lr
	...

0800bc30 <_GetDevFunc_SetRectOutside>:
 800bc30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc32:	9e07      	ldr	r6, [sp, #28]
 800bc34:	6884      	ldr	r4, [r0, #8]
 800bc36:	4d0c      	ldr	r5, [pc, #48]	; (800bc68 <_GetDevFunc_SetRectOutside+0x38>)
 800bc38:	b176      	cbz	r6, 800bc58 <_GetDevFunc_SetRectOutside+0x28>
 800bc3a:	6828      	ldr	r0, [r5, #0]
 800bc3c:	b988      	cbnz	r0, 800bc62 <_GetDevFunc_SetRectOutside+0x32>
 800bc3e:	9806      	ldr	r0, [sp, #24]
 800bc40:	9000      	str	r0, [sp, #0]
 800bc42:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800bc46:	4620      	mov	r0, r4
 800bc48:	47b0      	blx	r6
 800bc4a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <_GetDevFunc_SetRectOutside+0x3c>)
 800bc52:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800bc56:	e004      	b.n	800bc62 <_GetDevFunc_SetRectOutside+0x32>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b113      	cbz	r3, 800bc62 <_GetDevFunc_SetRectOutside+0x32>
 800bc5c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800bc60:	602e      	str	r6, [r5, #0]
 800bc62:	b002      	add	sp, #8
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
 800bc66:	bf00      	nop
 800bc68:	20005474 	.word	0x20005474
 800bc6c:	0800bc2d 	.word	0x0800bc2d

0800bc70 <_ReadPixelCust_16bpp>:
 800bc70:	b508      	push	{r3, lr}
 800bc72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bc74:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800bc78:	6990      	ldr	r0, [r2, #24]
 800bc7a:	4798      	blx	r3
 800bc7c:	bd08      	pop	{r3, pc}

0800bc7e <_ReadPixelCust_18bpp>:
 800bc7e:	b508      	push	{r3, lr}
 800bc80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bc82:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800bc86:	6990      	ldr	r0, [r2, #24]
 800bc88:	4798      	blx	r3
 800bc8a:	bd08      	pop	{r3, pc}

0800bc8c <_ReadRectCust_16bpp>:
 800bc8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bc92:	6884      	ldr	r4, [r0, #8]
 800bc94:	9500      	str	r5, [sp, #0]
 800bc96:	4617      	mov	r7, r2
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800bc9e:	4699      	mov	r9, r3
 800bca0:	4688      	mov	r8, r1
 800bca2:	1bed      	subs	r5, r5, r7
 800bca4:	47b0      	blx	r6
 800bca6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bca8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800bcac:	6988      	ldr	r0, [r1, #24]
 800bcae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcb0:	ebc8 0809 	rsb	r8, r8, r9
 800bcb4:	1c6a      	adds	r2, r5, #1
 800bcb6:	fb08 2202 	mla	r2, r8, r2, r2
 800bcba:	4798      	blx	r3
 800bcbc:	b003      	add	sp, #12
 800bcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bcc2 <_ReadRectCust_18bpp>:
 800bcc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bcc8:	6884      	ldr	r4, [r0, #8]
 800bcca:	9500      	str	r5, [sp, #0]
 800bccc:	4617      	mov	r7, r2
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800bcd4:	4699      	mov	r9, r3
 800bcd6:	4688      	mov	r8, r1
 800bcd8:	1bed      	subs	r5, r5, r7
 800bcda:	47b0      	blx	r6
 800bcdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bcde:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800bce2:	6988      	ldr	r0, [r1, #24]
 800bce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bce6:	ebc8 0809 	rsb	r8, r8, r9
 800bcea:	1c6a      	adds	r2, r5, #1
 800bcec:	fb08 2202 	mla	r2, r8, r2, r2
 800bcf0:	4798      	blx	r3
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bcf8 <_GetDevFunc>:
 800bcf8:	3901      	subs	r1, #1
 800bcfa:	2917      	cmp	r1, #23
 800bcfc:	d828      	bhi.n	800bd50 <_GetDevFunc+0x58>
 800bcfe:	e8df f001 	tbb	[pc, r1]
 800bd02:	2714      	.short	0x2714
 800bd04:	27272727 	.word	0x27272727
 800bd08:	0e272727 	.word	0x0e272727
 800bd0c:	0c191210 	.word	0x0c191210
 800bd10:	27272729 	.word	0x27272729
 800bd14:	23272727 	.word	0x23272727
 800bd18:	251e      	.short	0x251e
 800bd1a:	480f      	ldr	r0, [pc, #60]	; (800bd58 <_GetDevFunc+0x60>)
 800bd1c:	4770      	bx	lr
 800bd1e:	480f      	ldr	r0, [pc, #60]	; (800bd5c <_GetDevFunc+0x64>)
 800bd20:	4770      	bx	lr
 800bd22:	480f      	ldr	r0, [pc, #60]	; (800bd60 <_GetDevFunc+0x68>)
 800bd24:	4770      	bx	lr
 800bd26:	480f      	ldr	r0, [pc, #60]	; (800bd64 <_GetDevFunc+0x6c>)
 800bd28:	4770      	bx	lr
 800bd2a:	6803      	ldr	r3, [r0, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800bd32:	4770      	bx	lr
 800bd34:	6803      	ldr	r3, [r0, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800bd3c:	4770      	bx	lr
 800bd3e:	6803      	ldr	r3, [r0, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800bd46:	4770      	bx	lr
 800bd48:	4807      	ldr	r0, [pc, #28]	; (800bd68 <_GetDevFunc+0x70>)
 800bd4a:	4770      	bx	lr
 800bd4c:	4807      	ldr	r0, [pc, #28]	; (800bd6c <_GetDevFunc+0x74>)
 800bd4e:	4770      	bx	lr
 800bd50:	2000      	movs	r0, #0
 800bd52:	4770      	bx	lr
 800bd54:	4806      	ldr	r0, [pc, #24]	; (800bd70 <_GetDevFunc+0x78>)
 800bd56:	4770      	bx	lr
 800bd58:	0800c0f1 	.word	0x0800c0f1
 800bd5c:	0800c0c7 	.word	0x0800c0c7
 800bd60:	0800c0b3 	.word	0x0800c0b3
 800bd64:	0800c069 	.word	0x0800c069
 800bd68:	0800bfcd 	.word	0x0800bfcd
 800bd6c:	0800bc31 	.word	0x0800bc31
 800bd70:	0800c0db 	.word	0x0800c0db

0800bd74 <_GetDevProp>:
 800bd74:	3901      	subs	r1, #1
 800bd76:	6880      	ldr	r0, [r0, #8]
 800bd78:	290d      	cmp	r1, #13
 800bd7a:	d823      	bhi.n	800bdc4 <_GetDevProp+0x50>
 800bd7c:	e8df f001 	tbb	[pc, r1]
 800bd80:	0f0d0b09 	.word	0x0f0d0b09
 800bd84:	11222222 	.word	0x11222222
 800bd88:	13252507 	.word	0x13252507
 800bd8c:	1d18      	.short	0x1d18
 800bd8e:	2000      	movs	r0, #0
 800bd90:	4770      	bx	lr
 800bd92:	6800      	ldr	r0, [r0, #0]
 800bd94:	4770      	bx	lr
 800bd96:	6840      	ldr	r0, [r0, #4]
 800bd98:	4770      	bx	lr
 800bd9a:	6880      	ldr	r0, [r0, #8]
 800bd9c:	4770      	bx	lr
 800bd9e:	68c0      	ldr	r0, [r0, #12]
 800bda0:	4770      	bx	lr
 800bda2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bda4:	4770      	bx	lr
 800bda6:	b188      	cbz	r0, 800bdcc <_GetDevProp+0x58>
 800bda8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bdaa:	f000 0001 	and.w	r0, r0, #1
 800bdae:	4770      	bx	lr
 800bdb0:	b160      	cbz	r0, 800bdcc <_GetDevProp+0x58>
 800bdb2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bdb4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800bdb8:	4770      	bx	lr
 800bdba:	b138      	cbz	r0, 800bdcc <_GetDevProp+0x58>
 800bdbc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bdbe:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800bdc2:	4770      	bx	lr
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	4770      	bx	lr
 800bdca:	2001      	movs	r0, #1
 800bdcc:	4770      	bx	lr

0800bdce <_GetDevData>:
 800bdce:	6883      	ldr	r3, [r0, #8]
 800bdd0:	2901      	cmp	r1, #1
 800bdd2:	bf0c      	ite	eq
 800bdd4:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800bdd6:	2000      	movne	r0, #0
 800bdd8:	4770      	bx	lr

0800bdda <_GetRect>:
 800bdda:	6883      	ldr	r3, [r0, #8]
 800bddc:	2200      	movs	r2, #0
 800bdde:	800a      	strh	r2, [r1, #0]
 800bde0:	804a      	strh	r2, [r1, #2]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	3a01      	subs	r2, #1
 800bde8:	3b01      	subs	r3, #1
 800bdea:	808a      	strh	r2, [r1, #4]
 800bdec:	80cb      	strh	r3, [r1, #6]
 800bdee:	4770      	bx	lr

0800bdf0 <GUIDRV_FlexColor__SetLog2Phys>:
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	4d10      	ldr	r5, [pc, #64]	; (800be34 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800bdf4:	462e      	mov	r6, r5
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bdfa:	b091      	sub	sp, #68	; 0x44
 800bdfc:	466c      	mov	r4, sp
 800bdfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800be04:	3520      	adds	r5, #32
 800be06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800be0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be0c:	ac08      	add	r4, sp, #32
 800be0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800be14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800be18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1a:	aa10      	add	r2, sp, #64	; 0x40
 800be1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be20:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800be24:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800be28:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800be2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800be30:	b011      	add	sp, #68	; 0x44
 800be32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be34:	08013b04 	.word	0x08013b04

0800be38 <_SetOrg>:
 800be38:	b507      	push	{r0, r1, r2, lr}
 800be3a:	6980      	ldr	r0, [r0, #24]
 800be3c:	e88d 0006 	stmia.w	sp, {r1, r2}
 800be40:	2103      	movs	r1, #3
 800be42:	466a      	mov	r2, sp
 800be44:	f7f4 fdc8 	bl	80009d8 <LCD_X_DisplayDriver>
 800be48:	b003      	add	sp, #12
 800be4a:	f85d fb04 	ldr.w	pc, [sp], #4

0800be4e <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800be4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be52:	6884      	ldr	r4, [r0, #8]
 800be54:	4698      	mov	r8, r3
 800be56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800be58:	079b      	lsls	r3, r3, #30
 800be5a:	4689      	mov	r9, r1
 800be5c:	4617      	mov	r7, r2
 800be5e:	d532      	bpl.n	800bec6 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800be60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800be64:	4620      	mov	r0, r4
 800be66:	4798      	blx	r3
 800be68:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800be6c:	4606      	mov	r6, r0
 800be6e:	463a      	mov	r2, r7
 800be70:	4620      	mov	r0, r4
 800be72:	4649      	mov	r1, r9
 800be74:	47a8      	blx	r5
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	69a2      	ldr	r2, [r4, #24]
 800be7a:	429e      	cmp	r6, r3
 800be7c:	bfac      	ite	ge
 800be7e:	2300      	movge	r3, #0
 800be80:	2301      	movlt	r3, #1
 800be82:	4296      	cmp	r6, r2
 800be84:	bfd4      	ite	le
 800be86:	461a      	movle	r2, r3
 800be88:	f043 0201 	orrgt.w	r2, r3, #1
 800be8c:	6963      	ldr	r3, [r4, #20]
 800be8e:	4298      	cmp	r0, r3
 800be90:	bfac      	ite	ge
 800be92:	4613      	movge	r3, r2
 800be94:	f042 0301 	orrlt.w	r3, r2, #1
 800be98:	4605      	mov	r5, r0
 800be9a:	b913      	cbnz	r3, 800bea2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800be9c:	69e3      	ldr	r3, [r4, #28]
 800be9e:	4298      	cmp	r0, r3
 800bea0:	dd0a      	ble.n	800beb8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800bea2:	6862      	ldr	r2, [r4, #4]
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	3a01      	subs	r2, #1
 800bea8:	9200      	str	r2, [sp, #0]
 800beaa:	2100      	movs	r1, #0
 800beac:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800beb0:	4620      	mov	r0, r4
 800beb2:	460a      	mov	r2, r1
 800beb4:	3b01      	subs	r3, #1
 800beb6:	47b8      	blx	r7
 800beb8:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800bebc:	4620      	mov	r0, r4
 800bebe:	4631      	mov	r1, r6
 800bec0:	462a      	mov	r2, r5
 800bec2:	47b8      	blx	r7
 800bec4:	e003      	b.n	800bece <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800bec6:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800beca:	4620      	mov	r0, r4
 800becc:	47a8      	blx	r5
 800bece:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bed2:	4620      	mov	r0, r4
 800bed4:	4641      	mov	r1, r8
 800bed6:	4798      	blx	r3
 800bed8:	b003      	add	sp, #12
 800beda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bede <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800bede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee0:	6884      	ldr	r4, [r0, #8]
 800bee2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bee4:	079b      	lsls	r3, r3, #30
 800bee6:	460f      	mov	r7, r1
 800bee8:	4616      	mov	r6, r2
 800beea:	d545      	bpl.n	800bf78 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800beec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800bef0:	4620      	mov	r0, r4
 800bef2:	4798      	blx	r3
 800bef4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800bef8:	4632      	mov	r2, r6
 800befa:	4605      	mov	r5, r0
 800befc:	4639      	mov	r1, r7
 800befe:	4620      	mov	r0, r4
 800bf00:	4798      	blx	r3
 800bf02:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bf06:	4606      	mov	r6, r0
 800bf08:	b11b      	cbz	r3, 800bf12 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4798      	blx	r3
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	69a2      	ldr	r2, [r4, #24]
 800bf16:	429d      	cmp	r5, r3
 800bf18:	bfac      	ite	ge
 800bf1a:	2300      	movge	r3, #0
 800bf1c:	2301      	movlt	r3, #1
 800bf1e:	4295      	cmp	r5, r2
 800bf20:	bfd4      	ite	le
 800bf22:	461a      	movle	r2, r3
 800bf24:	f043 0201 	orrgt.w	r2, r3, #1
 800bf28:	6963      	ldr	r3, [r4, #20]
 800bf2a:	429e      	cmp	r6, r3
 800bf2c:	bfac      	ite	ge
 800bf2e:	4613      	movge	r3, r2
 800bf30:	f042 0301 	orrlt.w	r3, r2, #1
 800bf34:	b913      	cbnz	r3, 800bf3c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800bf36:	69e3      	ldr	r3, [r4, #28]
 800bf38:	429e      	cmp	r6, r3
 800bf3a:	dd0a      	ble.n	800bf52 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800bf3c:	6862      	ldr	r2, [r4, #4]
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	3a01      	subs	r2, #1
 800bf42:	9200      	str	r2, [sp, #0]
 800bf44:	2100      	movs	r1, #0
 800bf46:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	460a      	mov	r2, r1
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	47b8      	blx	r7
 800bf52:	4629      	mov	r1, r5
 800bf54:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	4798      	blx	r3
 800bf5e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bf62:	4620      	mov	r0, r4
 800bf64:	4798      	blx	r3
 800bf66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	b16b      	cbz	r3, 800bf8a <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bf6e:	4620      	mov	r0, r4
 800bf70:	2100      	movs	r1, #0
 800bf72:	2201      	movs	r2, #1
 800bf74:	4798      	blx	r3
 800bf76:	e008      	b.n	800bf8a <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800bf78:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	4798      	blx	r3
 800bf80:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bf84:	4620      	mov	r0, r4
 800bf86:	4798      	blx	r3
 800bf88:	4605      	mov	r5, r0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	b003      	add	sp, #12
 800bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf90 <GUIDRV_FlexColor__InitOnce>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	6885      	ldr	r5, [r0, #8]
 800bf94:	4604      	mov	r4, r0
 800bf96:	b99d      	cbnz	r5, 800bfc0 <GUIDRV_FlexColor__InitOnce+0x30>
 800bf98:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800bf9c:	f003 f9ce 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <GUIDRV_FlexColor__InitOnce+0x34>)
 800bfa2:	60a0      	str	r0, [r4, #8]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4798      	blx	r3
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	84da      	strh	r2, [r3, #38]	; 0x26
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	621a      	str	r2, [r3, #32]
 800bfb8:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <GUIDRV_FlexColor__InitOnce+0x38>)
 800bfba:	641c      	str	r4, [r3, #64]	; 0x40
 800bfbc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800bfc0:	bd38      	pop	{r3, r4, r5, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000070 	.word	0x20000070
 800bfc8:	0800bdf1 	.word	0x0800bdf1

0800bfcc <_SetDevFunc>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	4614      	mov	r4, r2
 800bfd4:	f7ff ffdc 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800bfd8:	68b3      	ldr	r3, [r6, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d03b      	beq.n	800c056 <_SetDevFunc+0x8a>
 800bfde:	2d26      	cmp	r5, #38	; 0x26
 800bfe0:	d002      	beq.n	800bfe8 <_SetDevFunc+0x1c>
 800bfe2:	2d27      	cmp	r5, #39	; 0x27
 800bfe4:	d016      	beq.n	800c014 <_SetDevFunc+0x48>
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfea:	2a10      	cmp	r2, #16
 800bfec:	d002      	beq.n	800bff4 <_SetDevFunc+0x28>
 800bfee:	2a12      	cmp	r2, #18
 800bff0:	d008      	beq.n	800c004 <_SetDevFunc+0x38>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	4a18      	ldr	r2, [pc, #96]	; (800c058 <_SetDevFunc+0x8c>)
 800bff6:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800bffa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800bffe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	4a15      	ldr	r2, [pc, #84]	; (800c05c <_SetDevFunc+0x90>)
 800c006:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800c00a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800c00e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c016:	2a10      	cmp	r2, #16
 800c018:	d002      	beq.n	800c020 <_SetDevFunc+0x54>
 800c01a:	2a12      	cmp	r2, #18
 800c01c:	d00e      	beq.n	800c03c <_SetDevFunc+0x70>
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	b13c      	cbz	r4, 800c032 <_SetDevFunc+0x66>
 800c022:	4a0f      	ldr	r2, [pc, #60]	; (800c060 <_SetDevFunc+0x94>)
 800c024:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800c028:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c02c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800c030:	bd70      	pop	{r4, r5, r6, pc}
 800c032:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800c036:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	b13c      	cbz	r4, 800c04e <_SetDevFunc+0x82>
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <_SetDevFunc+0x98>)
 800c040:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800c044:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800c048:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c04c:	bd70      	pop	{r4, r5, r6, pc}
 800c04e:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800c052:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	0800bc71 	.word	0x0800bc71
 800c05c:	0800bc7f 	.word	0x0800bc7f
 800c060:	0800bc8d 	.word	0x0800bc8d
 800c064:	0800bcc3 	.word	0x0800bcc3

0800c068 <_GetDevFunc_Init>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4605      	mov	r5, r0
 800c06c:	f7ff ff90 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c070:	68ac      	ldr	r4, [r5, #8]
 800c072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c076:	f003 f961 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800c07a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c07c:	66a0      	str	r0, [r4, #104]	; 0x68
 800c07e:	3307      	adds	r3, #7
 800c080:	10d8      	asrs	r0, r3, #3
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	4358      	muls	r0, r3
 800c086:	f003 f959 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800c08a:	2101      	movs	r1, #1
 800c08c:	2200      	movs	r2, #0
 800c08e:	66e0      	str	r0, [r4, #108]	; 0x6c
 800c090:	69a8      	ldr	r0, [r5, #24]
 800c092:	f7f4 fca1 	bl	80009d8 <LCD_X_DisplayDriver>
 800c096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800c09a:	4605      	mov	r5, r0
 800c09c:	4620      	mov	r0, r4
 800c09e:	4798      	blx	r3
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c0a6:	4798      	blx	r3
 800c0a8:	2d00      	cmp	r5, #0
 800c0aa:	bfd4      	ite	le
 800c0ac:	2000      	movle	r0, #0
 800c0ae:	2001      	movgt	r0, #1
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}

0800c0b2 <_GetDevFunc_SetSize>:
 800c0b2:	b570      	push	{r4, r5, r6, lr}
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	4616      	mov	r6, r2
 800c0ba:	f7ff ff69 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	e883 0060 	stmia.w	r3, {r5, r6}
 800c0c4:	bd70      	pop	{r4, r5, r6, pc}

0800c0c6 <_GetDevFunc_SetVSize>:
 800c0c6:	b570      	push	{r4, r5, r6, lr}
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	f7ff ff5f 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c0d2:	68a3      	ldr	r3, [r4, #8]
 800c0d4:	609d      	str	r5, [r3, #8]
 800c0d6:	60de      	str	r6, [r3, #12]
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}

0800c0da <_GetDevFunc_Off>:
 800c0da:	b510      	push	{r4, lr}
 800c0dc:	4604      	mov	r4, r0
 800c0de:	f7ff ff57 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c0e2:	69a0      	ldr	r0, [r4, #24]
 800c0e4:	2106      	movs	r1, #6
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ec:	f7f4 bc74 	b.w	80009d8 <LCD_X_DisplayDriver>

0800c0f0 <_GetDevFunc_On>:
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	f7ff ff4c 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c0f8:	69a0      	ldr	r0, [r4, #24]
 800c0fa:	2105      	movs	r1, #5
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c102:	f7f4 bc69 	b.w	80009d8 <LCD_X_DisplayDriver>

0800c106 <GUIDRV_FlexColor_Config>:
 800c106:	b538      	push	{r3, r4, r5, lr}
 800c108:	4605      	mov	r5, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	f7ff ff40 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c110:	68ab      	ldr	r3, [r5, #8]
 800c112:	6822      	ldr	r2, [r4, #0]
 800c114:	62da      	str	r2, [r3, #44]	; 0x2c
 800c116:	6862      	ldr	r2, [r4, #4]
 800c118:	631a      	str	r2, [r3, #48]	; 0x30
 800c11a:	68a2      	ldr	r2, [r4, #8]
 800c11c:	635a      	str	r2, [r3, #52]	; 0x34
 800c11e:	0752      	lsls	r2, r2, #29
 800c120:	d507      	bpl.n	800c132 <GUIDRV_FlexColor_Config+0x2c>
 800c122:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	6059      	str	r1, [r3, #4]
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	6899      	ldr	r1, [r3, #8]
 800c12e:	60d9      	str	r1, [r3, #12]
 800c130:	609a      	str	r2, [r3, #8]
 800c132:	89a2      	ldrh	r2, [r4, #12]
 800c134:	849a      	strh	r2, [r3, #36]	; 0x24
 800c136:	6922      	ldr	r2, [r4, #16]
 800c138:	b112      	cbz	r2, 800c140 <GUIDRV_FlexColor_Config+0x3a>
 800c13a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800c13e:	621a      	str	r2, [r3, #32]
 800c140:	bd38      	pop	{r3, r4, r5, pc}

0800c142 <GUIDRV_FlexColor_SetFunc>:
 800c142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c146:	4604      	mov	r4, r0
 800c148:	461f      	mov	r7, r3
 800c14a:	4616      	mov	r6, r2
 800c14c:	4688      	mov	r8, r1
 800c14e:	f7ff ff1f 	bl	800bf90 <GUIDRV_FlexColor__InitOnce>
 800c152:	68a5      	ldr	r5, [r4, #8]
 800c154:	4641      	mov	r1, r8
 800c156:	2268      	movs	r2, #104	; 0x68
 800c158:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800c15c:	f006 f9b2 	bl	80124c4 <memcpy>
 800c160:	4620      	mov	r0, r4
 800c162:	47b0      	blx	r6
 800c164:	4620      	mov	r0, r4
 800c166:	47b8      	blx	r7
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	4798      	blx	r3
 800c16e:	62a8      	str	r0, [r5, #40]	; 0x28
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c174 <LCD_UpdateColorIndices>:
 800c174:	b510      	push	{r4, lr}
 800c176:	4c07      	ldr	r4, [pc, #28]	; (800c194 <LCD_UpdateColorIndices+0x20>)
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c17c:	f000 fc70 	bl	800ca60 <LCD_Color2Index>
 800c180:	f000 fc8e 	bl	800caa0 <LCD_SetColorIndex>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c188:	f000 fc6a 	bl	800ca60 <LCD_Color2Index>
 800c18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c190:	f000 bca2 	b.w	800cad8 <LCD_SetBkColorIndex>
 800c194:	20000084 	.word	0x20000084

0800c198 <LCD_SetClipRectEx>:
 800c198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c19a:	4c09      	ldr	r4, [pc, #36]	; (800c1c0 <LCD_SetClipRectEx+0x28>)
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	7c5a      	ldrb	r2, [r3, #17]
 800c1a0:	4b08      	ldr	r3, [pc, #32]	; (800c1c4 <LCD_SetClipRectEx+0x2c>)
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c1a8:	68c2      	ldr	r2, [r0, #12]
 800c1aa:	4669      	mov	r1, sp
 800c1ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c1ae:	4790      	blx	r2
 800c1b0:	6820      	ldr	r0, [r4, #0]
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	466a      	mov	r2, sp
 800c1b6:	3008      	adds	r0, #8
 800c1b8:	f000 fcec 	bl	800cb94 <GUI__IntersectRects>
 800c1bc:	b003      	add	sp, #12
 800c1be:	bd30      	pop	{r4, r5, pc}
 800c1c0:	20000084 	.word	0x20000084
 800c1c4:	200056dc 	.word	0x200056dc

0800c1c8 <LCD_SetVSizeEx>:
 800c1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	f001 faab 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c1d2:	9001      	str	r0, [sp, #4]
 800c1d4:	b908      	cbnz	r0, 800c1da <LCD_SetVSizeEx+0x12>
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e00c      	b.n	800c1f4 <LCD_SetVSizeEx+0x2c>
 800c1da:	68c3      	ldr	r3, [r0, #12]
 800c1dc:	210a      	movs	r1, #10
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	a801      	add	r0, sp, #4
 800c1e2:	4798      	blx	r3
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0f5      	beq.n	800c1d6 <LCD_SetVSizeEx+0xe>
 800c1ea:	9801      	ldr	r0, [sp, #4]
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	4798      	blx	r3
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	b003      	add	sp, #12
 800c1f6:	bd30      	pop	{r4, r5, pc}

0800c1f8 <LCD_SetSizeEx>:
 800c1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	4614      	mov	r4, r2
 800c1fe:	f001 fa93 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c202:	9001      	str	r0, [sp, #4]
 800c204:	b908      	cbnz	r0, 800c20a <LCD_SetSizeEx+0x12>
 800c206:	2001      	movs	r0, #1
 800c208:	e00c      	b.n	800c224 <LCD_SetSizeEx+0x2c>
 800c20a:	68c3      	ldr	r3, [r0, #12]
 800c20c:	210b      	movs	r1, #11
 800c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c210:	a801      	add	r0, sp, #4
 800c212:	4798      	blx	r3
 800c214:	4603      	mov	r3, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	d0f5      	beq.n	800c206 <LCD_SetSizeEx+0xe>
 800c21a:	9801      	ldr	r0, [sp, #4]
 800c21c:	4629      	mov	r1, r5
 800c21e:	4622      	mov	r2, r4
 800c220:	4798      	blx	r3
 800c222:	2000      	movs	r0, #0
 800c224:	b003      	add	sp, #12
 800c226:	bd30      	pop	{r4, r5, pc}

0800c228 <LCD_SetLUTEntryEx>:
 800c228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c22a:	460d      	mov	r5, r1
 800c22c:	4614      	mov	r4, r2
 800c22e:	f001 fa7b 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c232:	9001      	str	r0, [sp, #4]
 800c234:	b908      	cbnz	r0, 800c23a <LCD_SetLUTEntryEx+0x12>
 800c236:	2001      	movs	r0, #1
 800c238:	e00c      	b.n	800c254 <LCD_SetLUTEntryEx+0x2c>
 800c23a:	68c3      	ldr	r3, [r0, #12]
 800c23c:	2110      	movs	r1, #16
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	a801      	add	r0, sp, #4
 800c242:	4798      	blx	r3
 800c244:	4603      	mov	r3, r0
 800c246:	2800      	cmp	r0, #0
 800c248:	d0f5      	beq.n	800c236 <LCD_SetLUTEntryEx+0xe>
 800c24a:	9801      	ldr	r0, [sp, #4]
 800c24c:	4629      	mov	r1, r5
 800c24e:	4622      	mov	r2, r4
 800c250:	4798      	blx	r3
 800c252:	2000      	movs	r0, #0
 800c254:	b003      	add	sp, #12
 800c256:	bd30      	pop	{r4, r5, pc}

0800c258 <_GetDevProp>:
 800c258:	2801      	cmp	r0, #1
 800c25a:	b510      	push	{r4, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	dc08      	bgt.n	800c272 <_GetDevProp+0x1a>
 800c260:	f001 fa62 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c264:	b120      	cbz	r0, 800c270 <_GetDevProp+0x18>
 800c266:	68c3      	ldr	r3, [r0, #12]
 800c268:	4621      	mov	r1, r4
 800c26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26c:	4798      	blx	r3
 800c26e:	bd10      	pop	{r4, pc}
 800c270:	bd10      	pop	{r4, pc}
 800c272:	2000      	movs	r0, #0
 800c274:	bd10      	pop	{r4, pc}

0800c276 <_GetMaxValue>:
 800c276:	b538      	push	{r3, r4, r5, lr}
 800c278:	4604      	mov	r4, r0
 800c27a:	4621      	mov	r1, r4
 800c27c:	2001      	movs	r0, #1
 800c27e:	f7ff ffeb 	bl	800c258 <_GetDevProp>
 800c282:	4621      	mov	r1, r4
 800c284:	4605      	mov	r5, r0
 800c286:	2000      	movs	r0, #0
 800c288:	f7ff ffe6 	bl	800c258 <_GetDevProp>
 800c28c:	42a8      	cmp	r0, r5
 800c28e:	bfb8      	it	lt
 800c290:	4628      	movlt	r0, r5
 800c292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c296:	bd38      	pop	{r3, r4, r5, pc}

0800c298 <LCD_GetXSizeEx>:
 800c298:	2101      	movs	r1, #1
 800c29a:	f7ff bfdd 	b.w	800c258 <_GetDevProp>

0800c29e <LCD_GetYSizeEx>:
 800c29e:	2102      	movs	r1, #2
 800c2a0:	f7ff bfda 	b.w	800c258 <_GetDevProp>

0800c2a4 <LCD_GetVXSizeEx>:
 800c2a4:	2103      	movs	r1, #3
 800c2a6:	f7ff bfd7 	b.w	800c258 <_GetDevProp>

0800c2aa <LCD_GetVYSizeEx>:
 800c2aa:	2104      	movs	r1, #4
 800c2ac:	f7ff bfd4 	b.w	800c258 <_GetDevProp>

0800c2b0 <LCD_GetBitsPerPixelEx>:
 800c2b0:	2108      	movs	r1, #8
 800c2b2:	f7ff bfd1 	b.w	800c258 <_GetDevProp>

0800c2b6 <LCD_GetNumColorsEx>:
 800c2b6:	2109      	movs	r1, #9
 800c2b8:	f7ff bfce 	b.w	800c258 <_GetDevProp>

0800c2bc <LCD_GetXSize>:
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <LCD_GetXSize+0xc>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	7c58      	ldrb	r0, [r3, #17]
 800c2c2:	f7ff bfe9 	b.w	800c298 <LCD_GetXSizeEx>
 800c2c6:	bf00      	nop
 800c2c8:	20000084 	.word	0x20000084

0800c2cc <LCD_GetYSize>:
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <LCD_GetYSize+0xc>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	7c58      	ldrb	r0, [r3, #17]
 800c2d2:	f7ff bfe4 	b.w	800c29e <LCD_GetYSizeEx>
 800c2d6:	bf00      	nop
 800c2d8:	20000084 	.word	0x20000084

0800c2dc <LCD_GetNumColors>:
 800c2dc:	4b02      	ldr	r3, [pc, #8]	; (800c2e8 <LCD_GetNumColors+0xc>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	7c58      	ldrb	r0, [r3, #17]
 800c2e2:	f7ff bfe8 	b.w	800c2b6 <LCD_GetNumColorsEx>
 800c2e6:	bf00      	nop
 800c2e8:	20000084 	.word	0x20000084

0800c2ec <GUI_GetBitsPerPixelEx>:
 800c2ec:	b508      	push	{r3, lr}
 800c2ee:	4b04      	ldr	r3, [pc, #16]	; (800c300 <GUI_GetBitsPerPixelEx+0x14>)
 800c2f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c2f4:	68c3      	ldr	r3, [r0, #12]
 800c2f6:	2108      	movs	r1, #8
 800c2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fa:	4798      	blx	r3
 800c2fc:	bd08      	pop	{r3, pc}
 800c2fe:	bf00      	nop
 800c300:	200056dc 	.word	0x200056dc

0800c304 <LCD_GetPaletteEx>:
 800c304:	b508      	push	{r3, lr}
 800c306:	f001 fa0f 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c30a:	b120      	cbz	r0, 800c316 <LCD_GetPaletteEx+0x12>
 800c30c:	68c3      	ldr	r3, [r0, #12]
 800c30e:	2102      	movs	r1, #2
 800c310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c312:	4798      	blx	r3
 800c314:	bd08      	pop	{r3, pc}
 800c316:	bd08      	pop	{r3, pc}

0800c318 <LCD_GetPalette>:
 800c318:	4b02      	ldr	r3, [pc, #8]	; (800c324 <LCD_GetPalette+0xc>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	7c58      	ldrb	r0, [r3, #17]
 800c31e:	f7ff bff1 	b.w	800c304 <LCD_GetPaletteEx>
 800c322:	bf00      	nop
 800c324:	20000084 	.word	0x20000084

0800c328 <GUI_GetpfIndex2ColorEx>:
 800c328:	4b02      	ldr	r3, [pc, #8]	; (800c334 <GUI_GetpfIndex2ColorEx+0xc>)
 800c32a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	6858      	ldr	r0, [r3, #4]
 800c332:	4770      	bx	lr
 800c334:	200056dc 	.word	0x200056dc

0800c338 <LCD_GetpfColor2IndexEx>:
 800c338:	b508      	push	{r3, lr}
 800c33a:	f001 f9f5 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c33e:	b108      	cbz	r0, 800c344 <LCD_GetpfColor2IndexEx+0xc>
 800c340:	6903      	ldr	r3, [r0, #16]
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	bd08      	pop	{r3, pc}
	...

0800c348 <GUI_GetpfColor2IndexEx>:
 800c348:	4b02      	ldr	r3, [pc, #8]	; (800c354 <GUI_GetpfColor2IndexEx+0xc>)
 800c34a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	4770      	bx	lr
 800c354:	200056dc 	.word	0x200056dc

0800c358 <LCD_GetXSizeMax>:
 800c358:	2001      	movs	r0, #1
 800c35a:	f7ff bf8c 	b.w	800c276 <_GetMaxValue>

0800c35e <LCD_GetYSizeMax>:
 800c35e:	2002      	movs	r0, #2
 800c360:	f7ff bf89 	b.w	800c276 <_GetMaxValue>

0800c364 <LCD_GetVXSizeMax>:
 800c364:	2003      	movs	r0, #3
 800c366:	f7ff bf86 	b.w	800c276 <_GetMaxValue>
	...

0800c36c <LCD_SetDisplaySize>:
 800c36c:	4b02      	ldr	r3, [pc, #8]	; (800c378 <LCD_SetDisplaySize+0xc>)
 800c36e:	6018      	str	r0, [r3, #0]
 800c370:	4b02      	ldr	r3, [pc, #8]	; (800c37c <LCD_SetDisplaySize+0x10>)
 800c372:	6019      	str	r1, [r3, #0]
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	2000547c 	.word	0x2000547c
 800c37c:	20005478 	.word	0x20005478

0800c380 <LCD_GetXSizeDisplay>:
 800c380:	4b01      	ldr	r3, [pc, #4]	; (800c388 <LCD_GetXSizeDisplay+0x8>)
 800c382:	6818      	ldr	r0, [r3, #0]
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	2000547c 	.word	0x2000547c

0800c38c <LCD_GetYSizeDisplay>:
 800c38c:	4b01      	ldr	r3, [pc, #4]	; (800c394 <LCD_GetYSizeDisplay+0x8>)
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20005478 	.word	0x20005478

0800c398 <LCD__GetBPP>:
 800c398:	2800      	cmp	r0, #0
 800c39a:	d03b      	beq.n	800c414 <LCD__GetBPP+0x7c>
 800c39c:	f030 0301 	bics.w	r3, r0, #1
 800c3a0:	d029      	beq.n	800c3f6 <LCD__GetBPP+0x5e>
 800c3a2:	f030 0303 	bics.w	r3, r0, #3
 800c3a6:	d028      	beq.n	800c3fa <LCD__GetBPP+0x62>
 800c3a8:	f030 0307 	bics.w	r3, r0, #7
 800c3ac:	d027      	beq.n	800c3fe <LCD__GetBPP+0x66>
 800c3ae:	f030 030f 	bics.w	r3, r0, #15
 800c3b2:	d026      	beq.n	800c402 <LCD__GetBPP+0x6a>
 800c3b4:	f030 031f 	bics.w	r3, r0, #31
 800c3b8:	d025      	beq.n	800c406 <LCD__GetBPP+0x6e>
 800c3ba:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800c3be:	d024      	beq.n	800c40a <LCD__GetBPP+0x72>
 800c3c0:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800c3c4:	f023 0301 	bic.w	r3, r3, #1
 800c3c8:	b30b      	cbz	r3, 800c40e <LCD__GetBPP+0x76>
 800c3ca:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800c3ce:	f023 030f 	bic.w	r3, r3, #15
 800c3d2:	b1e3      	cbz	r3, 800c40e <LCD__GetBPP+0x76>
 800c3d4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800c3d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3dc:	b1bb      	cbz	r3, 800c40e <LCD__GetBPP+0x76>
 800c3de:	0c03      	lsrs	r3, r0, #16
 800c3e0:	041b      	lsls	r3, r3, #16
 800c3e2:	b1a3      	cbz	r3, 800c40e <LCD__GetBPP+0x76>
 800c3e4:	0c83      	lsrs	r3, r0, #18
 800c3e6:	049b      	lsls	r3, r3, #18
 800c3e8:	b19b      	cbz	r3, 800c412 <LCD__GetBPP+0x7a>
 800c3ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3ee:	bf0c      	ite	eq
 800c3f0:	2018      	moveq	r0, #24
 800c3f2:	2020      	movne	r0, #32
 800c3f4:	4770      	bx	lr
 800c3f6:	2001      	movs	r0, #1
 800c3f8:	4770      	bx	lr
 800c3fa:	2002      	movs	r0, #2
 800c3fc:	4770      	bx	lr
 800c3fe:	2003      	movs	r0, #3
 800c400:	4770      	bx	lr
 800c402:	2004      	movs	r0, #4
 800c404:	4770      	bx	lr
 800c406:	2005      	movs	r0, #5
 800c408:	4770      	bx	lr
 800c40a:	2008      	movs	r0, #8
 800c40c:	4770      	bx	lr
 800c40e:	2010      	movs	r0, #16
 800c410:	4770      	bx	lr
 800c412:	2012      	movs	r0, #18
 800c414:	4770      	bx	lr

0800c416 <LCD__GetBPPDevice>:
 800c416:	b508      	push	{r3, lr}
 800c418:	f7ff ffbe 	bl	800c398 <LCD__GetBPP>
 800c41c:	2801      	cmp	r0, #1
 800c41e:	d00f      	beq.n	800c440 <LCD__GetBPPDevice+0x2a>
 800c420:	1e83      	subs	r3, r0, #2
 800c422:	2b06      	cmp	r3, #6
 800c424:	d909      	bls.n	800c43a <LCD__GetBPPDevice+0x24>
 800c426:	f1a0 0309 	sub.w	r3, r0, #9
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	d907      	bls.n	800c43e <LCD__GetBPPDevice+0x28>
 800c42e:	3811      	subs	r0, #17
 800c430:	2810      	cmp	r0, #16
 800c432:	bf34      	ite	cc
 800c434:	2020      	movcc	r0, #32
 800c436:	2000      	movcs	r0, #0
 800c438:	bd08      	pop	{r3, pc}
 800c43a:	2008      	movs	r0, #8
 800c43c:	bd08      	pop	{r3, pc}
 800c43e:	2010      	movs	r0, #16
 800c440:	bd08      	pop	{r3, pc}
	...

0800c444 <_SetDrawMode>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4b08      	ldr	r3, [pc, #32]	; (800c468 <_SetDrawMode+0x24>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	7c1a      	ldrb	r2, [r3, #16]
 800c44c:	ea80 0102 	eor.w	r1, r0, r2
 800c450:	0749      	lsls	r1, r1, #29
 800c452:	d505      	bpl.n	800c460 <_SetDrawMode+0x1c>
 800c454:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c456:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c458:	6826      	ldr	r6, [r4, #0]
 800c45a:	680d      	ldr	r5, [r1, #0]
 800c45c:	6025      	str	r5, [r4, #0]
 800c45e:	600e      	str	r6, [r1, #0]
 800c460:	7418      	strb	r0, [r3, #16]
 800c462:	4610      	mov	r0, r2
 800c464:	bd70      	pop	{r4, r5, r6, pc}
 800c466:	bf00      	nop
 800c468:	20000084 	.word	0x20000084

0800c46c <LCD_SetDrawMode>:
 800c46c:	b508      	push	{r3, lr}
 800c46e:	4b02      	ldr	r3, [pc, #8]	; (800c478 <LCD_SetDrawMode+0xc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	4798      	blx	r3
 800c476:	bd08      	pop	{r3, pc}
 800c478:	2000006c 	.word	0x2000006c

0800c47c <LCD_DrawPixel>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4b14      	ldr	r3, [pc, #80]	; (800c4d0 <LCD_DrawPixel+0x54>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	460a      	mov	r2, r1
 800c484:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800c488:	428a      	cmp	r2, r1
 800c48a:	4604      	mov	r4, r0
 800c48c:	db1e      	blt.n	800c4cc <LCD_DrawPixel+0x50>
 800c48e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800c492:	428a      	cmp	r2, r1
 800c494:	dc1a      	bgt.n	800c4cc <LCD_DrawPixel+0x50>
 800c496:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800c49a:	4288      	cmp	r0, r1
 800c49c:	db16      	blt.n	800c4cc <LCD_DrawPixel+0x50>
 800c49e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800c4a2:	4288      	cmp	r0, r1
 800c4a4:	dc12      	bgt.n	800c4cc <LCD_DrawPixel+0x50>
 800c4a6:	7c19      	ldrb	r1, [r3, #16]
 800c4a8:	7c58      	ldrb	r0, [r3, #17]
 800c4aa:	f011 0f01 	tst.w	r1, #1
 800c4ae:	4909      	ldr	r1, [pc, #36]	; (800c4d4 <LCD_DrawPixel+0x58>)
 800c4b0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c4b4:	d004      	beq.n	800c4c0 <LCD_DrawPixel+0x44>
 800c4b6:	68c3      	ldr	r3, [r0, #12]
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	4798      	blx	r3
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	68c1      	ldr	r1, [r0, #12]
 800c4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c4:	698d      	ldr	r5, [r1, #24]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	47a8      	blx	r5
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20000084 	.word	0x20000084
 800c4d4:	200056dc 	.word	0x200056dc

0800c4d8 <LCD_DrawHLine>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4b10      	ldr	r3, [pc, #64]	; (800c51c <LCD_DrawHLine+0x44>)
 800c4dc:	681c      	ldr	r4, [r3, #0]
 800c4de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	db17      	blt.n	800c518 <LCD_DrawHLine+0x40>
 800c4e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c4ec:	4299      	cmp	r1, r3
 800c4ee:	dc13      	bgt.n	800c518 <LCD_DrawHLine+0x40>
 800c4f0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f8:	4288      	cmp	r0, r1
 800c4fa:	bfa8      	it	ge
 800c4fc:	4601      	movge	r1, r0
 800c4fe:	429a      	cmp	r2, r3
 800c500:	bfb8      	it	lt
 800c502:	4613      	movlt	r3, r2
 800c504:	428b      	cmp	r3, r1
 800c506:	db07      	blt.n	800c518 <LCD_DrawHLine+0x40>
 800c508:	7c60      	ldrb	r0, [r4, #17]
 800c50a:	4a05      	ldr	r2, [pc, #20]	; (800c520 <LCD_DrawHLine+0x48>)
 800c50c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800c510:	68c2      	ldr	r2, [r0, #12]
 800c512:	6894      	ldr	r4, [r2, #8]
 800c514:	462a      	mov	r2, r5
 800c516:	47a0      	blx	r4
 800c518:	bd38      	pop	{r3, r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	20000084 	.word	0x20000084
 800c520:	200056dc 	.word	0x200056dc

0800c524 <LCD_DrawVLine>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4b10      	ldr	r3, [pc, #64]	; (800c568 <LCD_DrawVLine+0x44>)
 800c528:	681c      	ldr	r4, [r3, #0]
 800c52a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800c52e:	4605      	mov	r5, r0
 800c530:	429d      	cmp	r5, r3
 800c532:	4610      	mov	r0, r2
 800c534:	db17      	blt.n	800c566 <LCD_DrawVLine+0x42>
 800c536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53a:	429d      	cmp	r5, r3
 800c53c:	dc13      	bgt.n	800c566 <LCD_DrawVLine+0x42>
 800c53e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c542:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c546:	4291      	cmp	r1, r2
 800c548:	bfa8      	it	ge
 800c54a:	460a      	movge	r2, r1
 800c54c:	4298      	cmp	r0, r3
 800c54e:	bfb8      	it	lt
 800c550:	4603      	movlt	r3, r0
 800c552:	4293      	cmp	r3, r2
 800c554:	db07      	blt.n	800c566 <LCD_DrawVLine+0x42>
 800c556:	7c60      	ldrb	r0, [r4, #17]
 800c558:	4904      	ldr	r1, [pc, #16]	; (800c56c <LCD_DrawVLine+0x48>)
 800c55a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c55e:	68c1      	ldr	r1, [r0, #12]
 800c560:	68cc      	ldr	r4, [r1, #12]
 800c562:	4629      	mov	r1, r5
 800c564:	47a0      	blx	r4
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	20000084 	.word	0x20000084
 800c56c:	200056dc 	.word	0x200056dc

0800c570 <LCD_FillRect>:
 800c570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c572:	460e      	mov	r6, r1
 800c574:	4912      	ldr	r1, [pc, #72]	; (800c5c0 <LCD_FillRect+0x50>)
 800c576:	680c      	ldr	r4, [r1, #0]
 800c578:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c580:	4288      	cmp	r0, r1
 800c582:	bfa8      	it	ge
 800c584:	4601      	movge	r1, r0
 800c586:	42aa      	cmp	r2, r5
 800c588:	bfb8      	it	lt
 800c58a:	4615      	movlt	r5, r2
 800c58c:	428d      	cmp	r5, r1
 800c58e:	db14      	blt.n	800c5ba <LCD_FillRect+0x4a>
 800c590:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c594:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800c598:	4296      	cmp	r6, r2
 800c59a:	bfa8      	it	ge
 800c59c:	4632      	movge	r2, r6
 800c59e:	4283      	cmp	r3, r0
 800c5a0:	bfa8      	it	ge
 800c5a2:	4603      	movge	r3, r0
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	db08      	blt.n	800c5ba <LCD_FillRect+0x4a>
 800c5a8:	7c64      	ldrb	r4, [r4, #17]
 800c5aa:	4806      	ldr	r0, [pc, #24]	; (800c5c4 <LCD_FillRect+0x54>)
 800c5ac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c5b0:	68c4      	ldr	r4, [r0, #12]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	6924      	ldr	r4, [r4, #16]
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	47a0      	blx	r4
 800c5ba:	b002      	add	sp, #8
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000084 	.word	0x20000084
 800c5c4:	200056dc 	.word	0x200056dc

0800c5c8 <LCD__DrawBitmap_1bpp>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800c77c <LCD__DrawBitmap_1bpp+0x1b4>
 800c5d0:	b08f      	sub	sp, #60	; 0x3c
 800c5d2:	f8dc c000 	ldr.w	ip, [ip]
 800c5d6:	9009      	str	r0, [sp, #36]	; 0x24
 800c5d8:	460e      	mov	r6, r1
 800c5da:	4615      	mov	r5, r2
 800c5dc:	469b      	mov	fp, r3
 800c5de:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c5e0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c5e4:	f1bc 0f00 	cmp.w	ip, #0
 800c5e8:	d00d      	beq.n	800c606 <LCD__DrawBitmap_1bpp+0x3e>
 800c5ea:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c5ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c5ee:	9500      	str	r5, [sp, #0]
 800c5f0:	9601      	str	r6, [sp, #4]
 800c5f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c5f4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c5f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c5f8:	9702      	str	r7, [sp, #8]
 800c5fa:	9503      	str	r5, [sp, #12]
 800c5fc:	9404      	str	r4, [sp, #16]
 800c5fe:	9605      	str	r6, [sp, #20]
 800c600:	f8dc 4000 	ldr.w	r4, [ip]
 800c604:	e053      	b.n	800c6ae <LCD__DrawBitmap_1bpp+0xe6>
 800c606:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c608:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c60a:	ea47 0300 	orr.w	r3, r7, r0
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d14f      	bne.n	800c6b2 <LCD__DrawBitmap_1bpp+0xea>
 800c612:	4b58      	ldr	r3, [pc, #352]	; (800c774 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c614:	6818      	ldr	r0, [r3, #0]
 800c616:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c61a:	1a51      	subs	r1, r2, r1
 800c61c:	2900      	cmp	r1, #0
 800c61e:	dd08      	ble.n	800c632 <LCD__DrawBitmap_1bpp+0x6a>
 800c620:	ebc1 030b 	rsb	r3, r1, fp
 800c624:	2b00      	cmp	r3, #0
 800c626:	f340 80a2 	ble.w	800c76e <LCD__DrawBitmap_1bpp+0x1a6>
 800c62a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c62c:	fb07 4401 	mla	r4, r7, r1, r4
 800c630:	e001      	b.n	800c636 <LCD__DrawBitmap_1bpp+0x6e>
 800c632:	465b      	mov	r3, fp
 800c634:	4632      	mov	r2, r6
 800c636:	445e      	add	r6, fp
 800c638:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800c63c:	3e01      	subs	r6, #1
 800c63e:	1a76      	subs	r6, r6, r1
 800c640:	2e00      	cmp	r6, #0
 800c642:	dd03      	ble.n	800c64c <LCD__DrawBitmap_1bpp+0x84>
 800c644:	1b9b      	subs	r3, r3, r6
 800c646:	2b00      	cmp	r3, #0
 800c648:	f340 8091 	ble.w	800c76e <LCD__DrawBitmap_1bpp+0x1a6>
 800c64c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c64e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800c652:	4429      	add	r1, r5
 800c654:	3901      	subs	r1, #1
 800c656:	1b89      	subs	r1, r1, r6
 800c658:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c65a:	2900      	cmp	r1, #0
 800c65c:	bfc8      	it	gt
 800c65e:	ebc1 0505 	rsbgt	r5, r1, r5
 800c662:	ebc8 0106 	rsb	r1, r8, r6
 800c666:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800c66a:	42b1      	cmp	r1, r6
 800c66c:	da0c      	bge.n	800c688 <LCD__DrawBitmap_1bpp+0xc0>
 800c66e:	ebc1 0c06 	rsb	ip, r1, r6
 800c672:	eb08 070c 	add.w	r7, r8, ip
 800c676:	1b8e      	subs	r6, r1, r6
 800c678:	f02c 0c07 	bic.w	ip, ip, #7
 800c67c:	4435      	add	r5, r6
 800c67e:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800c682:	4461      	add	r1, ip
 800c684:	f007 0807 	and.w	r8, r7, #7
 800c688:	2d00      	cmp	r5, #0
 800c68a:	dd70      	ble.n	800c76e <LCD__DrawBitmap_1bpp+0x1a6>
 800c68c:	7c46      	ldrb	r6, [r0, #17]
 800c68e:	483a      	ldr	r0, [pc, #232]	; (800c778 <LCD__DrawBitmap_1bpp+0x1b0>)
 800c690:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c692:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800c696:	68c6      	ldr	r6, [r0, #12]
 800c698:	9701      	str	r7, [sp, #4]
 800c69a:	9403      	str	r4, [sp, #12]
 800c69c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c69e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	9702      	str	r7, [sp, #8]
 800c6a4:	f8cd 8010 	str.w	r8, [sp, #16]
 800c6a8:	9405      	str	r4, [sp, #20]
 800c6aa:	6874      	ldr	r4, [r6, #4]
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	47a0      	blx	r4
 800c6b0:	e05d      	b.n	800c76e <LCD__DrawBitmap_1bpp+0x1a6>
 800c6b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c6b4:	f1c7 0708 	rsb	r7, r7, #8
 800c6b8:	970c      	str	r7, [sp, #48]	; 0x30
 800c6ba:	4667      	mov	r7, ip
 800c6bc:	45dc      	cmp	ip, fp
 800c6be:	da56      	bge.n	800c76e <LCD__DrawBitmap_1bpp+0x1a6>
 800c6c0:	4b2c      	ldr	r3, [pc, #176]	; (800c774 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c6c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4430      	add	r0, r6
 800c6c8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c6cc:	900a      	str	r0, [sp, #40]	; 0x28
 800c6ce:	1e41      	subs	r1, r0, #1
 800c6d0:	4291      	cmp	r1, r2
 800c6d2:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6d4:	db45      	blt.n	800c762 <LCD__DrawBitmap_1bpp+0x19a>
 800c6d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c6da:	429e      	cmp	r6, r3
 800c6dc:	dc41      	bgt.n	800c762 <LCD__DrawBitmap_1bpp+0x19a>
 800c6de:	f04f 0800 	mov.w	r8, #0
 800c6e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c6e6:	9408      	str	r4, [sp, #32]
 800c6e8:	46c2      	mov	sl, r8
 800c6ea:	45aa      	cmp	sl, r5
 800c6ec:	da39      	bge.n	800c762 <LCD__DrawBitmap_1bpp+0x19a>
 800c6ee:	f1b8 0f00 	cmp.w	r8, #0
 800c6f2:	d105      	bne.n	800c700 <LCD__DrawBitmap_1bpp+0x138>
 800c6f4:	9a08      	ldr	r2, [sp, #32]
 800c6f6:	7817      	ldrb	r7, [r2, #0]
 800c6f8:	3201      	adds	r2, #1
 800c6fa:	9208      	str	r2, [sp, #32]
 800c6fc:	f04f 0808 	mov.w	r8, #8
 800c700:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c702:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c704:	4a1b      	ldr	r2, [pc, #108]	; (800c774 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c706:	fa47 f300 	asr.w	r3, r7, r0
 800c70a:	ebc1 0808 	rsb	r8, r1, r8
 800c70e:	408f      	lsls	r7, r1
 800c710:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c714:	b2ff      	uxtb	r7, r7
 800c716:	d103      	bne.n	800c720 <LCD__DrawBitmap_1bpp+0x158>
 800c718:	6810      	ldr	r0, [r2, #0]
 800c71a:	7c00      	ldrb	r0, [r0, #16]
 800c71c:	0780      	lsls	r0, r0, #30
 800c71e:	d41b      	bmi.n	800c758 <LCD__DrawBitmap_1bpp+0x190>
 800c720:	6812      	ldr	r2, [r2, #0]
 800c722:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c724:	6810      	ldr	r0, [r2, #0]
 800c726:	900d      	str	r0, [sp, #52]	; 0x34
 800c728:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c72a:	b110      	cbz	r0, 800c732 <LCD__DrawBitmap_1bpp+0x16a>
 800c72c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c730:	e000      	b.n	800c734 <LCD__DrawBitmap_1bpp+0x16c>
 800c732:	b2db      	uxtb	r3, r3
 800c734:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	1e4a      	subs	r2, r1, #1
 800c73a:	444a      	add	r2, r9
 800c73c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c742:	4648      	mov	r0, r9
 800c744:	4631      	mov	r1, r6
 800c746:	f7ff ff13 	bl	800c570 <LCD_FillRect>
 800c74a:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c75a:	f10a 0a01 	add.w	sl, sl, #1
 800c75e:	4499      	add	r9, r3
 800c760:	e7c3      	b.n	800c6ea <LCD__DrawBitmap_1bpp+0x122>
 800c762:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c764:	f10c 0c01 	add.w	ip, ip, #1
 800c768:	4434      	add	r4, r6
 800c76a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c76c:	e7a6      	b.n	800c6bc <LCD__DrawBitmap_1bpp+0xf4>
 800c76e:	b00f      	add	sp, #60	; 0x3c
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	20000084 	.word	0x20000084
 800c778:	200056dc 	.word	0x200056dc
 800c77c:	20005694 	.word	0x20005694

0800c780 <LCD_DrawBitmap>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800c994 <LCD_DrawBitmap+0x214>
 800c788:	b091      	sub	sp, #68	; 0x44
 800c78a:	f8dc 9000 	ldr.w	r9, [ip]
 800c78e:	9207      	str	r2, [sp, #28]
 800c790:	4605      	mov	r5, r0
 800c792:	4688      	mov	r8, r1
 800c794:	469b      	mov	fp, r3
 800c796:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c798:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c79a:	f1b9 0f00 	cmp.w	r9, #0
 800c79e:	d00c      	beq.n	800c7ba <LCD_DrawBitmap+0x3a>
 800c7a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c7a2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c7a4:	9500      	str	r5, [sp, #0]
 800c7a6:	9701      	str	r7, [sp, #4]
 800c7a8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c7aa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c7ac:	9602      	str	r6, [sp, #8]
 800c7ae:	9503      	str	r5, [sp, #12]
 800c7b0:	9404      	str	r4, [sp, #16]
 800c7b2:	9705      	str	r7, [sp, #20]
 800c7b4:	f8d9 4000 	ldr.w	r4, [r9]
 800c7b8:	e081      	b.n	800c8be <LCD_DrawBitmap+0x13e>
 800c7ba:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c7bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c7be:	ea47 0300 	orr.w	r3, r7, r0
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d17d      	bne.n	800c8c2 <LCD_DrawBitmap+0x142>
 800c7c6:	4b71      	ldr	r3, [pc, #452]	; (800c98c <LCD_DrawBitmap+0x20c>)
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c7ce:	1a53      	subs	r3, r2, r1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	dd08      	ble.n	800c7e6 <LCD_DrawBitmap+0x66>
 800c7d4:	ebc3 010b 	rsb	r1, r3, fp
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	f340 80d4 	ble.w	800c986 <LCD_DrawBitmap+0x206>
 800c7de:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c7e0:	fb07 4403 	mla	r4, r7, r3, r4
 800c7e4:	e001      	b.n	800c7ea <LCD_DrawBitmap+0x6a>
 800c7e6:	4659      	mov	r1, fp
 800c7e8:	4642      	mov	r2, r8
 800c7ea:	44d8      	add	r8, fp
 800c7ec:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800c7f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7f4:	ebc3 0808 	rsb	r8, r3, r8
 800c7f8:	f1b8 0f00 	cmp.w	r8, #0
 800c7fc:	dd04      	ble.n	800c808 <LCD_DrawBitmap+0x88>
 800c7fe:	ebc8 0101 	rsb	r1, r8, r1
 800c802:	2900      	cmp	r1, #0
 800c804:	f340 80bf 	ble.w	800c986 <LCD_DrawBitmap+0x206>
 800c808:	9b07      	ldr	r3, [sp, #28]
 800c80a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800c80e:	442b      	add	r3, r5
 800c810:	3b01      	subs	r3, #1
 800c812:	ebcc 0303 	rsb	r3, ip, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	dd02      	ble.n	800c820 <LCD_DrawBitmap+0xa0>
 800c81a:	9f07      	ldr	r7, [sp, #28]
 800c81c:	1aff      	subs	r7, r7, r3
 800c81e:	9707      	str	r7, [sp, #28]
 800c820:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800c824:	4565      	cmp	r5, ip
 800c826:	da33      	bge.n	800c890 <LCD_DrawBitmap+0x110>
 800c828:	9f07      	ldr	r7, [sp, #28]
 800c82a:	ebc5 030c 	rsb	r3, r5, ip
 800c82e:	1aff      	subs	r7, r7, r3
 800c830:	2e08      	cmp	r6, #8
 800c832:	9707      	str	r7, [sp, #28]
 800c834:	d027      	beq.n	800c886 <LCD_DrawBitmap+0x106>
 800c836:	dc0d      	bgt.n	800c854 <LCD_DrawBitmap+0xd4>
 800c838:	2e02      	cmp	r6, #2
 800c83a:	d014      	beq.n	800c866 <LCD_DrawBitmap+0xe6>
 800c83c:	2e04      	cmp	r6, #4
 800c83e:	d01a      	beq.n	800c876 <LCD_DrawBitmap+0xf6>
 800c840:	2e01      	cmp	r6, #1
 800c842:	d126      	bne.n	800c892 <LCD_DrawBitmap+0x112>
 800c844:	f023 0c07 	bic.w	ip, r3, #7
 800c848:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800c84c:	4465      	add	r5, ip
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	e01e      	b.n	800c892 <LCD_DrawBitmap+0x112>
 800c854:	2e18      	cmp	r6, #24
 800c856:	d018      	beq.n	800c88a <LCD_DrawBitmap+0x10a>
 800c858:	2e20      	cmp	r6, #32
 800c85a:	d016      	beq.n	800c88a <LCD_DrawBitmap+0x10a>
 800c85c:	2e10      	cmp	r6, #16
 800c85e:	d118      	bne.n	800c892 <LCD_DrawBitmap+0x112>
 800c860:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c864:	e013      	b.n	800c88e <LCD_DrawBitmap+0x10e>
 800c866:	f023 0c03 	bic.w	ip, r3, #3
 800c86a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800c86e:	4465      	add	r5, ip
 800c870:	f003 0303 	and.w	r3, r3, #3
 800c874:	e00d      	b.n	800c892 <LCD_DrawBitmap+0x112>
 800c876:	f023 0c01 	bic.w	ip, r3, #1
 800c87a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800c87e:	4465      	add	r5, ip
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	e005      	b.n	800c892 <LCD_DrawBitmap+0x112>
 800c886:	441c      	add	r4, r3
 800c888:	e001      	b.n	800c88e <LCD_DrawBitmap+0x10e>
 800c88a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c88e:	4665      	mov	r5, ip
 800c890:	2300      	movs	r3, #0
 800c892:	9f07      	ldr	r7, [sp, #28]
 800c894:	2f00      	cmp	r7, #0
 800c896:	dd76      	ble.n	800c986 <LCD_DrawBitmap+0x206>
 800c898:	f890 e011 	ldrb.w	lr, [r0, #17]
 800c89c:	483c      	ldr	r0, [pc, #240]	; (800c990 <LCD_DrawBitmap+0x210>)
 800c89e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c8a0:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800c8a4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c8a8:	9403      	str	r4, [sp, #12]
 800c8aa:	e88d 0042 	stmia.w	sp, {r1, r6}
 800c8ae:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	9702      	str	r7, [sp, #8]
 800c8b4:	9405      	str	r4, [sp, #20]
 800c8b6:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c8ba:	9b07      	ldr	r3, [sp, #28]
 800c8bc:	4629      	mov	r1, r5
 800c8be:	47a0      	blx	r4
 800c8c0:	e061      	b.n	800c986 <LCD_DrawBitmap+0x206>
 800c8c2:	f1c6 0708 	rsb	r7, r6, #8
 800c8c6:	970e      	str	r7, [sp, #56]	; 0x38
 800c8c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c8cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c8ce:	455f      	cmp	r7, fp
 800c8d0:	da59      	bge.n	800c986 <LCD_DrawBitmap+0x206>
 800c8d2:	4b2e      	ldr	r3, [pc, #184]	; (800c98c <LCD_DrawBitmap+0x20c>)
 800c8d4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4447      	add	r7, r8
 800c8da:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c8de:	970c      	str	r7, [sp, #48]	; 0x30
 800c8e0:	3f01      	subs	r7, #1
 800c8e2:	4297      	cmp	r7, r2
 800c8e4:	970d      	str	r7, [sp, #52]	; 0x34
 800c8e6:	db46      	blt.n	800c976 <LCD_DrawBitmap+0x1f6>
 800c8e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c8ec:	4598      	cmp	r8, r3
 800c8ee:	dc42      	bgt.n	800c976 <LCD_DrawBitmap+0x1f6>
 800c8f0:	f04f 0a00 	mov.w	sl, #0
 800c8f4:	940b      	str	r4, [sp, #44]	; 0x2c
 800c8f6:	46ac      	mov	ip, r5
 800c8f8:	4657      	mov	r7, sl
 800c8fa:	9807      	ldr	r0, [sp, #28]
 800c8fc:	4287      	cmp	r7, r0
 800c8fe:	da3a      	bge.n	800c976 <LCD_DrawBitmap+0x1f6>
 800c900:	f1ba 0f00 	cmp.w	sl, #0
 800c904:	d106      	bne.n	800c914 <LCD_DrawBitmap+0x194>
 800c906:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c908:	f890 9000 	ldrb.w	r9, [r0]
 800c90c:	3001      	adds	r0, #1
 800c90e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c910:	f04f 0a08 	mov.w	sl, #8
 800c914:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c916:	4a1d      	ldr	r2, [pc, #116]	; (800c98c <LCD_DrawBitmap+0x20c>)
 800c918:	fa49 f301 	asr.w	r3, r9, r1
 800c91c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c920:	fa09 f906 	lsl.w	r9, r9, r6
 800c924:	fa5f f989 	uxtb.w	r9, r9
 800c928:	ebc6 0a0a 	rsb	sl, r6, sl
 800c92c:	d103      	bne.n	800c936 <LCD_DrawBitmap+0x1b6>
 800c92e:	6810      	ldr	r0, [r2, #0]
 800c930:	7c00      	ldrb	r0, [r0, #16]
 800c932:	0780      	lsls	r0, r0, #30
 800c934:	d41b      	bmi.n	800c96e <LCD_DrawBitmap+0x1ee>
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c93a:	6810      	ldr	r0, [r2, #0]
 800c93c:	900f      	str	r0, [sp, #60]	; 0x3c
 800c93e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c940:	b110      	cbz	r0, 800c948 <LCD_DrawBitmap+0x1c8>
 800c942:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c946:	e000      	b.n	800c94a <LCD_DrawBitmap+0x1ca>
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	1e4a      	subs	r2, r1, #1
 800c950:	4462      	add	r2, ip
 800c952:	4660      	mov	r0, ip
 800c954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c956:	f8cd c020 	str.w	ip, [sp, #32]
 800c95a:	4641      	mov	r1, r8
 800c95c:	f7ff fe08 	bl	800c570 <LCD_FillRect>
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <LCD_DrawBitmap+0x20c>)
 800c962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c970:	3701      	adds	r7, #1
 800c972:	449c      	add	ip, r3
 800c974:	e7c1      	b.n	800c8fa <LCD_DrawBitmap+0x17a>
 800c976:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c978:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c97c:	3701      	adds	r7, #1
 800c97e:	970a      	str	r7, [sp, #40]	; 0x28
 800c980:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c982:	443c      	add	r4, r7
 800c984:	e7a2      	b.n	800c8cc <LCD_DrawBitmap+0x14c>
 800c986:	b011      	add	sp, #68	; 0x44
 800c988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98c:	20000084 	.word	0x20000084
 800c990:	200056dc 	.word	0x200056dc
 800c994:	20005694 	.word	0x20005694

0800c998 <LCD_SetClipRectMax>:
 800c998:	b508      	push	{r3, lr}
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <LCD_SetClipRectMax+0x18>)
 800c99c:	6819      	ldr	r1, [r3, #0]
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <LCD_SetClipRectMax+0x1c>)
 800c9a0:	7c4a      	ldrb	r2, [r1, #17]
 800c9a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c9a6:	68c3      	ldr	r3, [r0, #12]
 800c9a8:	3108      	adds	r1, #8
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ac:	4798      	blx	r3
 800c9ae:	bd08      	pop	{r3, pc}
 800c9b0:	20000084 	.word	0x20000084
 800c9b4:	200056dc 	.word	0x200056dc

0800c9b8 <emWin_LCD_Init>:
 800c9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ba:	f7ff ffed 	bl	800c998 <LCD_SetClipRectMax>
 800c9be:	f004 fe6f 	bl	80116a0 <LCD_InitColors>
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d145      	bne.n	800ca54 <emWin_LCD_Init+0x9c>
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 feac 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800c9d0:	9001      	str	r0, [sp, #4]
 800c9d2:	b150      	cbz	r0, 800c9ea <emWin_LCD_Init+0x32>
 800c9d4:	68c3      	ldr	r3, [r0, #12]
 800c9d6:	210c      	movs	r1, #12
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	a801      	add	r0, sp, #4
 800c9dc:	4798      	blx	r3
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d035      	beq.n	800ca50 <emWin_LCD_Init+0x98>
 800c9e4:	9801      	ldr	r0, [sp, #4]
 800c9e6:	4798      	blx	r3
 800c9e8:	4304      	orrs	r4, r0
 800c9ea:	3501      	adds	r5, #1
 800c9ec:	2d02      	cmp	r5, #2
 800c9ee:	d1ec      	bne.n	800c9ca <emWin_LCD_Init+0x12>
 800c9f0:	bb84      	cbnz	r4, 800ca54 <emWin_LCD_Init+0x9c>
 800c9f2:	f004 fe71 	bl	80116d8 <LCD_InitLUT>
 800c9f6:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <emWin_LCD_Init+0xa4>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d101      	bne.n	800ca06 <emWin_LCD_Init+0x4e>
 800ca02:	2000      	movs	r0, #0
 800ca04:	e027      	b.n	800ca56 <emWin_LCD_Init+0x9e>
 800ca06:	2401      	movs	r4, #1
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f000 fe8d 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800ca0e:	9001      	str	r0, [sp, #4]
 800ca10:	b1d0      	cbz	r0, 800ca48 <emWin_LCD_Init+0x90>
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 fcd2 	bl	800d3bc <GUI_SelectLayer>
 800ca18:	2004      	movs	r0, #4
 800ca1a:	f7ff fd27 	bl	800c46c <LCD_SetDrawMode>
 800ca1e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800ca22:	2000      	movs	r0, #0
 800ca24:	4601      	mov	r1, r0
 800ca26:	4613      	mov	r3, r2
 800ca28:	f7ff fda2 	bl	800c570 <LCD_FillRect>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f7ff fd1d 	bl	800c46c <LCD_SetDrawMode>
 800ca32:	a802      	add	r0, sp, #8
 800ca34:	210e      	movs	r1, #14
 800ca36:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	4798      	blx	r3
 800ca40:	4603      	mov	r3, r0
 800ca42:	b108      	cbz	r0, 800ca48 <emWin_LCD_Init+0x90>
 800ca44:	9801      	ldr	r0, [sp, #4]
 800ca46:	4798      	blx	r3
 800ca48:	f114 34ff 	adds.w	r4, r4, #4294967295
 800ca4c:	d2dc      	bcs.n	800ca08 <emWin_LCD_Init+0x50>
 800ca4e:	e7d8      	b.n	800ca02 <emWin_LCD_Init+0x4a>
 800ca50:	2001      	movs	r0, #1
 800ca52:	e000      	b.n	800ca56 <emWin_LCD_Init+0x9e>
 800ca54:	4620      	mov	r0, r4
 800ca56:	b003      	add	sp, #12
 800ca58:	bd30      	pop	{r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20005524 	.word	0x20005524

0800ca60 <LCD_Color2Index>:
 800ca60:	b508      	push	{r3, lr}
 800ca62:	4b05      	ldr	r3, [pc, #20]	; (800ca78 <LCD_Color2Index+0x18>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	7c5a      	ldrb	r2, [r3, #17]
 800ca68:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <LCD_Color2Index+0x1c>)
 800ca6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4798      	blx	r3
 800ca74:	bd08      	pop	{r3, pc}
 800ca76:	bf00      	nop
 800ca78:	20000084 	.word	0x20000084
 800ca7c:	200056dc 	.word	0x200056dc

0800ca80 <LCD_Index2Color>:
 800ca80:	b508      	push	{r3, lr}
 800ca82:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <LCD_Index2Color+0x18>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	7c5a      	ldrb	r2, [r3, #17]
 800ca88:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <LCD_Index2Color+0x1c>)
 800ca8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	4798      	blx	r3
 800ca94:	bd08      	pop	{r3, pc}
 800ca96:	bf00      	nop
 800ca98:	20000084 	.word	0x20000084
 800ca9c:	200056dc 	.word	0x200056dc

0800caa0 <LCD_SetColorIndex>:
 800caa0:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <LCD_SetColorIndex+0x14>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	7c1a      	ldrb	r2, [r3, #16]
 800caa6:	0752      	lsls	r2, r2, #29
 800caa8:	bf4c      	ite	mi
 800caaa:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800caac:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800caae:	6018      	str	r0, [r3, #0]
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	20000084 	.word	0x20000084

0800cab8 <_SetColor>:
 800cab8:	b508      	push	{r3, lr}
 800caba:	4b06      	ldr	r3, [pc, #24]	; (800cad4 <_SetColor+0x1c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cac0:	4281      	cmp	r1, r0
 800cac2:	d006      	beq.n	800cad2 <_SetColor+0x1a>
 800cac4:	6318      	str	r0, [r3, #48]	; 0x30
 800cac6:	f7ff ffcb 	bl	800ca60 <LCD_Color2Index>
 800caca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cace:	f7ff bfe7 	b.w	800caa0 <LCD_SetColorIndex>
 800cad2:	bd08      	pop	{r3, pc}
 800cad4:	20000084 	.word	0x20000084

0800cad8 <LCD_SetBkColorIndex>:
 800cad8:	4b04      	ldr	r3, [pc, #16]	; (800caec <LCD_SetBkColorIndex+0x14>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	7c1a      	ldrb	r2, [r3, #16]
 800cade:	0752      	lsls	r2, r2, #29
 800cae0:	bf4c      	ite	mi
 800cae2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800cae4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800cae6:	6018      	str	r0, [r3, #0]
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	20000084 	.word	0x20000084

0800caf0 <_SetBkColor>:
 800caf0:	b508      	push	{r3, lr}
 800caf2:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <_SetBkColor+0x1c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800caf8:	4281      	cmp	r1, r0
 800cafa:	d006      	beq.n	800cb0a <_SetBkColor+0x1a>
 800cafc:	6358      	str	r0, [r3, #52]	; 0x34
 800cafe:	f7ff ffaf 	bl	800ca60 <LCD_Color2Index>
 800cb02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb06:	f7ff bfe7 	b.w	800cad8 <LCD_SetBkColorIndex>
 800cb0a:	bd08      	pop	{r3, pc}
 800cb0c:	20000084 	.word	0x20000084

0800cb10 <LCD_SetBkColor>:
 800cb10:	b508      	push	{r3, lr}
 800cb12:	4b02      	ldr	r3, [pc, #8]	; (800cb1c <LCD_SetBkColor+0xc>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4798      	blx	r3
 800cb1a:	bd08      	pop	{r3, pc}
 800cb1c:	2000006c 	.word	0x2000006c

0800cb20 <LCD_SetColor>:
 800cb20:	b508      	push	{r3, lr}
 800cb22:	4b02      	ldr	r3, [pc, #8]	; (800cb2c <LCD_SetColor+0xc>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4798      	blx	r3
 800cb2a:	bd08      	pop	{r3, pc}
 800cb2c:	2000006c 	.word	0x2000006c

0800cb30 <GUI__HandleEOLine>:
 800cb30:	b513      	push	{r0, r1, r4, lr}
 800cb32:	6802      	ldr	r2, [r0, #0]
 800cb34:	4604      	mov	r4, r0
 800cb36:	a802      	add	r0, sp, #8
 800cb38:	f840 2d04 	str.w	r2, [r0, #-4]!
 800cb3c:	f000 fb62 	bl	800d204 <GUI_UC__GetCharCodeInc>
 800cb40:	b2c0      	uxtb	r0, r0
 800cb42:	b120      	cbz	r0, 800cb4e <GUI__HandleEOLine+0x1e>
 800cb44:	280a      	cmp	r0, #10
 800cb46:	d104      	bne.n	800cb52 <GUI__HandleEOLine+0x22>
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	e001      	b.n	800cb52 <GUI__HandleEOLine+0x22>
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e000      	b.n	800cb54 <GUI__HandleEOLine+0x24>
 800cb52:	2000      	movs	r0, #0
 800cb54:	b002      	add	sp, #8
 800cb56:	bd10      	pop	{r4, pc}

0800cb58 <GUI__IntersectRect>:
 800cb58:	880b      	ldrh	r3, [r1, #0]
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cb60:	b21a      	sxth	r2, r3
 800cb62:	4294      	cmp	r4, r2
 800cb64:	bfb8      	it	lt
 800cb66:	8003      	strhlt	r3, [r0, #0]
 800cb68:	884b      	ldrh	r3, [r1, #2]
 800cb6a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800cb6e:	b21a      	sxth	r2, r3
 800cb70:	4294      	cmp	r4, r2
 800cb72:	bfb8      	it	lt
 800cb74:	8043      	strhlt	r3, [r0, #2]
 800cb76:	888b      	ldrh	r3, [r1, #4]
 800cb78:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	4294      	cmp	r4, r2
 800cb80:	bfc8      	it	gt
 800cb82:	8083      	strhgt	r3, [r0, #4]
 800cb84:	88cb      	ldrh	r3, [r1, #6]
 800cb86:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cb8a:	b21a      	sxth	r2, r3
 800cb8c:	4291      	cmp	r1, r2
 800cb8e:	bfc8      	it	gt
 800cb90:	80c3      	strhgt	r3, [r0, #6]
 800cb92:	bd10      	pop	{r4, pc}

0800cb94 <GUI__IntersectRects>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cb9a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cb9e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800cba2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800cba6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800cbaa:	429c      	cmp	r4, r3
 800cbac:	bfb8      	it	lt
 800cbae:	461c      	movlt	r4, r3
 800cbb0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800cbb4:	429d      	cmp	r5, r3
 800cbb6:	bfa8      	it	ge
 800cbb8:	462b      	movge	r3, r5
 800cbba:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800cbbe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cbc2:	42ae      	cmp	r6, r5
 800cbc4:	bfb8      	it	lt
 800cbc6:	4635      	movlt	r5, r6
 800cbc8:	b2a4      	uxth	r4, r4
 800cbca:	b2ad      	uxth	r5, r5
 800cbcc:	4291      	cmp	r1, r2
 800cbce:	bfb8      	it	lt
 800cbd0:	460a      	movlt	r2, r1
 800cbd2:	8004      	strh	r4, [r0, #0]
 800cbd4:	8085      	strh	r5, [r0, #4]
 800cbd6:	b224      	sxth	r4, r4
 800cbd8:	b22d      	sxth	r5, r5
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	b292      	uxth	r2, r2
 800cbde:	42a5      	cmp	r5, r4
 800cbe0:	8043      	strh	r3, [r0, #2]
 800cbe2:	80c2      	strh	r2, [r0, #6]
 800cbe4:	db06      	blt.n	800cbf4 <GUI__IntersectRects+0x60>
 800cbe6:	b210      	sxth	r0, r2
 800cbe8:	b21b      	sxth	r3, r3
 800cbea:	4298      	cmp	r0, r3
 800cbec:	bfb4      	ite	lt
 800cbee:	2000      	movlt	r0, #0
 800cbf0:	2001      	movge	r0, #1
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}

0800cbf8 <GUI__memset16>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	0784      	lsls	r4, r0, #30
 800cbfc:	d502      	bpl.n	800cc04 <GUI__memset16+0xc>
 800cbfe:	8001      	strh	r1, [r0, #0]
 800cc00:	3a01      	subs	r2, #1
 800cc02:	3002      	adds	r0, #2
 800cc04:	0855      	lsrs	r5, r2, #1
 800cc06:	462b      	mov	r3, r5
 800cc08:	b305      	cbz	r5, 800cc4c <GUI__memset16+0x54>
 800cc0a:	2d03      	cmp	r5, #3
 800cc0c:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800cc10:	dc02      	bgt.n	800cc18 <GUI__memset16+0x20>
 800cc12:	4606      	mov	r6, r0
 800cc14:	461d      	mov	r5, r3
 800cc16:	e012      	b.n	800cc3e <GUI__memset16+0x46>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	462e      	mov	r6, r5
 800cc1c:	3e04      	subs	r6, #4
 800cc1e:	2e03      	cmp	r6, #3
 800cc20:	601c      	str	r4, [r3, #0]
 800cc22:	605c      	str	r4, [r3, #4]
 800cc24:	609c      	str	r4, [r3, #8]
 800cc26:	60dc      	str	r4, [r3, #12]
 800cc28:	f103 0310 	add.w	r3, r3, #16
 800cc2c:	dcf6      	bgt.n	800cc1c <GUI__memset16+0x24>
 800cc2e:	3d04      	subs	r5, #4
 800cc30:	08ab      	lsrs	r3, r5, #2
 800cc32:	1c5e      	adds	r6, r3, #1
 800cc34:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800cc38:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800cc3c:	e7e9      	b.n	800cc12 <GUI__memset16+0x1a>
 800cc3e:	b11d      	cbz	r5, 800cc48 <GUI__memset16+0x50>
 800cc40:	f846 4b04 	str.w	r4, [r6], #4
 800cc44:	3d01      	subs	r5, #1
 800cc46:	e7fa      	b.n	800cc3e <GUI__memset16+0x46>
 800cc48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cc4c:	07d3      	lsls	r3, r2, #31
 800cc4e:	bf48      	it	mi
 800cc50:	8001      	strhmi	r1, [r0, #0]
 800cc52:	bd70      	pop	{r4, r5, r6, pc}

0800cc54 <GUI__Read16>:
 800cc54:	6803      	ldr	r3, [r0, #0]
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	7859      	ldrb	r1, [r3, #1]
 800cc5a:	3302      	adds	r3, #2
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800cc62:	4770      	bx	lr

0800cc64 <GUI__Read32>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	6803      	ldr	r3, [r0, #0]
 800cc68:	789a      	ldrb	r2, [r3, #2]
 800cc6a:	785c      	ldrb	r4, [r3, #1]
 800cc6c:	7819      	ldrb	r1, [r3, #0]
 800cc6e:	0412      	lsls	r2, r2, #16
 800cc70:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800cc74:	430a      	orrs	r2, r1
 800cc76:	78d9      	ldrb	r1, [r3, #3]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	6003      	str	r3, [r0, #0]
 800cc7c:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800cc80:	bd10      	pop	{r4, pc}

0800cc82 <GUI__ReduceRect>:
 800cc82:	880b      	ldrh	r3, [r1, #0]
 800cc84:	b292      	uxth	r2, r2
 800cc86:	4413      	add	r3, r2
 800cc88:	8003      	strh	r3, [r0, #0]
 800cc8a:	888b      	ldrh	r3, [r1, #4]
 800cc8c:	1a9b      	subs	r3, r3, r2
 800cc8e:	8083      	strh	r3, [r0, #4]
 800cc90:	884b      	ldrh	r3, [r1, #2]
 800cc92:	4413      	add	r3, r2
 800cc94:	8043      	strh	r3, [r0, #2]
 800cc96:	88cb      	ldrh	r3, [r1, #6]
 800cc98:	1a9a      	subs	r2, r3, r2
 800cc9a:	80c2      	strh	r2, [r0, #6]
 800cc9c:	4770      	bx	lr

0800cc9e <GUI__sqrt32>:
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	2110      	movs	r1, #16
 800cca2:	2300      	movs	r3, #0
 800cca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cca8:	189c      	adds	r4, r3, r2
 800ccaa:	4284      	cmp	r4, r0
 800ccac:	bf9c      	itt	ls
 800ccae:	18a3      	addls	r3, r4, r2
 800ccb0:	ebc4 0000 	rsbls	r0, r4, r0
 800ccb4:	3901      	subs	r1, #1
 800ccb6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ccba:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ccbe:	d1f3      	bne.n	800cca8 <GUI__sqrt32+0xa>
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	bd10      	pop	{r4, pc}

0800ccc4 <GUI__strcmp>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <GUI__strcmp+0x28>)
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	bf08      	it	eq
 800cccc:	4618      	moveq	r0, r3
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	bf08      	it	eq
 800ccd2:	4619      	moveq	r1, r3
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	5cc4      	ldrb	r4, [r0, r3]
 800ccd8:	5cca      	ldrb	r2, [r1, r3]
 800ccda:	42a2      	cmp	r2, r4
 800ccdc:	d104      	bne.n	800cce8 <GUI__strcmp+0x24>
 800ccde:	3301      	adds	r3, #1
 800cce0:	2a00      	cmp	r2, #0
 800cce2:	d1f8      	bne.n	800ccd6 <GUI__strcmp+0x12>
 800cce4:	4610      	mov	r0, r2
 800cce6:	bd10      	pop	{r4, pc}
 800cce8:	2001      	movs	r0, #1
 800ccea:	bd10      	pop	{r4, pc}
 800ccec:	08015df3 	.word	0x08015df3

0800ccf0 <GUI__strcmp_hp>:
 800ccf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	b160      	cbz	r0, 800cd10 <GUI__strcmp_hp+0x20>
 800ccf6:	f002 fa51 	bl	800f19c <GUI_ALLOC_LockH>
 800ccfa:	ac02      	add	r4, sp, #8
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cd02:	f7ff ffdf 	bl	800ccc4 <GUI__strcmp>
 800cd06:	4605      	mov	r5, r0
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f002 fa55 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800cd0e:	e000      	b.n	800cd12 <GUI__strcmp_hp+0x22>
 800cd10:	2501      	movs	r5, #1
 800cd12:	4628      	mov	r0, r5
 800cd14:	b003      	add	sp, #12
 800cd16:	bd30      	pop	{r4, r5, pc}

0800cd18 <GUI__strlen>:
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	b118      	cbz	r0, 800cd26 <GUI__strlen+0xe>
 800cd1e:	3301      	adds	r3, #1
 800cd20:	5cc2      	ldrb	r2, [r0, r3]
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	d1fb      	bne.n	800cd1e <GUI__strlen+0x6>
 800cd26:	4618      	mov	r0, r3
 800cd28:	4770      	bx	lr
	...

0800cd2c <GUI__SetText>:
 800cd2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd2e:	6807      	ldr	r7, [r0, #0]
 800cd30:	4605      	mov	r5, r0
 800cd32:	4638      	mov	r0, r7
 800cd34:	460e      	mov	r6, r1
 800cd36:	f7ff ffdb 	bl	800ccf0 <GUI__strcmp_hp>
 800cd3a:	b908      	cbnz	r0, 800cd40 <GUI__SetText+0x14>
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	e02f      	b.n	800cda0 <GUI__SetText+0x74>
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff ffe9 	bl	800cd18 <GUI__strlen>
 800cd46:	1c44      	adds	r4, r0, #1
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f002 fa55 	bl	800f1f8 <GUI_ALLOC_GetSize>
 800cd4e:	4284      	cmp	r4, r0
 800cd50:	d110      	bne.n	800cd74 <GUI__SetText+0x48>
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	d0f2      	beq.n	800cd3c <GUI__SetText+0x10>
 800cd56:	4638      	mov	r0, r7
 800cd58:	f002 fa20 	bl	800f19c <GUI_ALLOC_LockH>
 800cd5c:	ad02      	add	r5, sp, #8
 800cd5e:	4b11      	ldr	r3, [pc, #68]	; (800cda4 <GUI__SetText+0x78>)
 800cd60:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4631      	mov	r1, r6
 800cd68:	4622      	mov	r2, r4
 800cd6a:	4798      	blx	r3
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f002 fa23 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800cd72:	e014      	b.n	800cd9e <GUI__SetText+0x72>
 800cd74:	4620      	mov	r0, r4
 800cd76:	f002 fbdd 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d0dd      	beq.n	800cd3c <GUI__SetText+0x10>
 800cd80:	f002 fa0c 	bl	800f19c <GUI_ALLOC_LockH>
 800cd84:	ac02      	add	r4, sp, #8
 800cd86:	4631      	mov	r1, r6
 800cd88:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cd8c:	f005 fbf7 	bl	801257e <strcpy>
 800cd90:	4620      	mov	r0, r4
 800cd92:	f002 fa11 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800cd96:	4628      	mov	r0, r5
 800cd98:	f002 fbd0 	bl	800f53c <GUI_ALLOC_FreePtr>
 800cd9c:	602f      	str	r7, [r5, #0]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	b003      	add	sp, #12
 800cda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda4:	20000074 	.word	0x20000074

0800cda8 <GUI__ManageCacheEx>:
 800cda8:	2801      	cmp	r0, #1
 800cdaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdac:	4604      	mov	r4, r0
 800cdae:	460d      	mov	r5, r1
 800cdb0:	dc65      	bgt.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800cdb2:	4b34      	ldr	r3, [pc, #208]	; (800ce84 <GUI__ManageCacheEx+0xdc>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <GUI__ManageCacheEx+0x12>
 800cdb8:	4798      	blx	r3
 800cdba:	2d01      	cmp	r5, #1
 800cdbc:	d004      	beq.n	800cdc8 <GUI__ManageCacheEx+0x20>
 800cdbe:	2d02      	cmp	r5, #2
 800cdc0:	d021      	beq.n	800ce06 <GUI__ManageCacheEx+0x5e>
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	d15b      	bne.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800cdc6:	e035      	b.n	800ce34 <GUI__ManageCacheEx+0x8c>
 800cdc8:	4e2f      	ldr	r6, [pc, #188]	; (800ce88 <GUI__ManageCacheEx+0xe0>)
 800cdca:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800cdce:	b9b7      	cbnz	r7, 800cdfe <GUI__ManageCacheEx+0x56>
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 fca9 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800cdd6:	9001      	str	r0, [sp, #4]
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d050      	beq.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800cddc:	68c3      	ldr	r3, [r0, #12]
 800cdde:	210d      	movs	r1, #13
 800cde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde2:	a801      	add	r0, sp, #4
 800cde4:	4798      	blx	r3
 800cde6:	4603      	mov	r3, r0
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d048      	beq.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800cdec:	9801      	ldr	r0, [sp, #4]
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4798      	blx	r3
 800cdf2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800cdfc:	e018      	b.n	800ce30 <GUI__ManageCacheEx+0x88>
 800cdfe:	3701      	adds	r7, #1
 800ce00:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800ce04:	e03b      	b.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fc8e 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800ce0c:	9001      	str	r0, [sp, #4]
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d035      	beq.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800ce12:	68c3      	ldr	r3, [r0, #12]
 800ce14:	210d      	movs	r1, #13
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	a801      	add	r0, sp, #4
 800ce1a:	4798      	blx	r3
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d02d      	beq.n	800ce7e <GUI__ManageCacheEx+0xd6>
 800ce22:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <GUI__ManageCacheEx+0xe4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	b103      	cbz	r3, 800ce2a <GUI__ManageCacheEx+0x82>
 800ce28:	4798      	blx	r3
 800ce2a:	9801      	ldr	r0, [sp, #4]
 800ce2c:	2102      	movs	r1, #2
 800ce2e:	47a0      	blx	r4
 800ce30:	2000      	movs	r0, #0
 800ce32:	e025      	b.n	800ce80 <GUI__ManageCacheEx+0xd8>
 800ce34:	4d14      	ldr	r5, [pc, #80]	; (800ce88 <GUI__ManageCacheEx+0xe0>)
 800ce36:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d001      	beq.n	800ce42 <GUI__ManageCacheEx+0x9a>
 800ce3e:	2001      	movs	r0, #1
 800ce40:	e015      	b.n	800ce6e <GUI__ManageCacheEx+0xc6>
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fc70 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800ce48:	9001      	str	r0, [sp, #4]
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d0f7      	beq.n	800ce3e <GUI__ManageCacheEx+0x96>
 800ce4e:	68c3      	ldr	r3, [r0, #12]
 800ce50:	210d      	movs	r1, #13
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	a801      	add	r0, sp, #4
 800ce56:	4798      	blx	r3
 800ce58:	4606      	mov	r6, r0
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d0ef      	beq.n	800ce3e <GUI__ManageCacheEx+0x96>
 800ce5e:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <GUI__ManageCacheEx+0xe4>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	b103      	cbz	r3, 800ce66 <GUI__ManageCacheEx+0xbe>
 800ce64:	4798      	blx	r3
 800ce66:	9801      	ldr	r0, [sp, #4]
 800ce68:	2100      	movs	r1, #0
 800ce6a:	47b0      	blx	r6
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	bf18      	it	ne
 800ce76:	3b01      	subne	r3, #1
 800ce78:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800ce7c:	e000      	b.n	800ce80 <GUI__ManageCacheEx+0xd8>
 800ce7e:	2001      	movs	r0, #1
 800ce80:	b003      	add	sp, #12
 800ce82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce84:	2000548c 	.word	0x2000548c
 800ce88:	20005484 	.word	0x20005484
 800ce8c:	20005480 	.word	0x20005480

0800ce90 <GUI__ManageCache>:
 800ce90:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <GUI__ManageCache+0xc>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4601      	mov	r1, r0
 800ce96:	7c58      	ldrb	r0, [r3, #17]
 800ce98:	f7ff bf86 	b.w	800cda8 <GUI__ManageCacheEx>
 800ce9c:	20000084 	.word	0x20000084

0800cea0 <GUI__MixColors>:
 800cea0:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800cea4:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cea8:	0e0b      	lsrs	r3, r1, #24
 800ceaa:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ceae:	b530      	push	{r4, r5, lr}
 800ceb0:	fb02 f303 	mul.w	r3, r2, r3
 800ceb4:	f04f 04ff 	mov.w	r4, #255	; 0xff
 800ceb8:	fbb3 f3f4 	udiv	r3, r3, r4
 800cebc:	bf08      	it	eq
 800cebe:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800cec2:	1ae2      	subs	r2, r4, r3
 800cec4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cec8:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 800cecc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800ced0:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800ced4:	0a2d      	lsrs	r5, r5, #8
 800ced6:	435c      	muls	r4, r3
 800ced8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800cedc:	4343      	muls	r3, r0
 800cede:	fb02 4405 	mla	r4, r2, r5, r4
 800cee2:	fb02 3201 	mla	r2, r2, r1, r3
 800cee6:	0a12      	lsrs	r2, r2, #8
 800cee8:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800ceec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800cef0:	ea44 0002 	orr.w	r0, r4, r2
 800cef4:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800cef8:	bd30      	pop	{r4, r5, pc}
	...

0800cefc <_OnExit>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	4c0a      	ldr	r4, [pc, #40]	; (800cf28 <_OnExit+0x2c>)
 800cf00:	4d0a      	ldr	r5, [pc, #40]	; (800cf2c <_OnExit+0x30>)
 800cf02:	6820      	ldr	r0, [r4, #0]
 800cf04:	4e0a      	ldr	r6, [pc, #40]	; (800cf30 <_OnExit+0x34>)
 800cf06:	f002 f935 	bl	800f174 <GUI_ALLOC_FreeFixedBlock>
 800cf0a:	6828      	ldr	r0, [r5, #0]
 800cf0c:	f002 f932 	bl	800f174 <GUI_ALLOC_FreeFixedBlock>
 800cf10:	6830      	ldr	r0, [r6, #0]
 800cf12:	f002 f92f 	bl	800f174 <GUI_ALLOC_FreeFixedBlock>
 800cf16:	4a07      	ldr	r2, [pc, #28]	; (800cf34 <_OnExit+0x38>)
 800cf18:	2300      	movs	r3, #0
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	4a06      	ldr	r2, [pc, #24]	; (800cf38 <_OnExit+0x3c>)
 800cf1e:	6033      	str	r3, [r6, #0]
 800cf20:	602b      	str	r3, [r5, #0]
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	20005494 	.word	0x20005494
 800cf2c:	20005490 	.word	0x20005490
 800cf30:	20005498 	.word	0x20005498
 800cf34:	2000549c 	.word	0x2000549c
 800cf38:	200054ac 	.word	0x200054ac

0800cf3c <GUI__GetAlphaBuffer>:
 800cf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf40:	461c      	mov	r4, r3
 800cf42:	4b28      	ldr	r3, [pc, #160]	; (800cfe4 <GUI__GetAlphaBuffer+0xa8>)
 800cf44:	4617      	mov	r7, r2
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	4606      	mov	r6, r0
 800cf4a:	4688      	mov	r8, r1
 800cf4c:	b932      	cbnz	r2, 800cf5c <GUI__GetAlphaBuffer+0x20>
 800cf4e:	2201      	movs	r2, #1
 800cf50:	4825      	ldr	r0, [pc, #148]	; (800cfe8 <GUI__GetAlphaBuffer+0xac>)
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	4b25      	ldr	r3, [pc, #148]	; (800cfec <GUI__GetAlphaBuffer+0xb0>)
 800cf56:	6003      	str	r3, [r0, #0]
 800cf58:	f000 fd40 	bl	800d9dc <GUI__RegisterExit>
 800cf5c:	4d24      	ldr	r5, [pc, #144]	; (800cff0 <GUI__GetAlphaBuffer+0xb4>)
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	b933      	cbnz	r3, 800cf70 <GUI__GetAlphaBuffer+0x34>
 800cf62:	4b24      	ldr	r3, [pc, #144]	; (800cff4 <GUI__GetAlphaBuffer+0xb8>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	602b      	str	r3, [r5, #0]
 800cf68:	b913      	cbnz	r3, 800cf70 <GUI__GetAlphaBuffer+0x34>
 800cf6a:	f7ff f9fb 	bl	800c364 <LCD_GetVXSizeMax>
 800cf6e:	6028      	str	r0, [r5, #0]
 800cf70:	b10c      	cbz	r4, 800cf76 <GUI__GetAlphaBuffer+0x3a>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	b196      	cbz	r6, 800cf9e <GUI__GetAlphaBuffer+0x62>
 800cf78:	4b1f      	ldr	r3, [pc, #124]	; (800cff8 <GUI__GetAlphaBuffer+0xbc>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	4699      	mov	r9, r3
 800cf7e:	2400      	movs	r4, #0
 800cf80:	b94a      	cbnz	r2, 800cf96 <GUI__GetAlphaBuffer+0x5a>
 800cf82:	6828      	ldr	r0, [r5, #0]
 800cf84:	0080      	lsls	r0, r0, #2
 800cf86:	f002 f9d9 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800cf8a:	f1d0 0401 	rsbs	r4, r0, #1
 800cf8e:	f8c9 0000 	str.w	r0, [r9]
 800cf92:	bf38      	it	cc
 800cf94:	2400      	movcc	r4, #0
 800cf96:	f8d9 3000 	ldr.w	r3, [r9]
 800cf9a:	6033      	str	r3, [r6, #0]
 800cf9c:	e000      	b.n	800cfa0 <GUI__GetAlphaBuffer+0x64>
 800cf9e:	4634      	mov	r4, r6
 800cfa0:	f1b8 0f00 	cmp.w	r8, #0
 800cfa4:	d00d      	beq.n	800cfc2 <GUI__GetAlphaBuffer+0x86>
 800cfa6:	4e15      	ldr	r6, [pc, #84]	; (800cffc <GUI__GetAlphaBuffer+0xc0>)
 800cfa8:	6833      	ldr	r3, [r6, #0]
 800cfaa:	b93b      	cbnz	r3, 800cfbc <GUI__GetAlphaBuffer+0x80>
 800cfac:	6828      	ldr	r0, [r5, #0]
 800cfae:	0080      	lsls	r0, r0, #2
 800cfb0:	f002 f9c4 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	6030      	str	r0, [r6, #0]
 800cfb8:	bf08      	it	eq
 800cfba:	2401      	moveq	r4, #1
 800cfbc:	6833      	ldr	r3, [r6, #0]
 800cfbe:	f8c8 3000 	str.w	r3, [r8]
 800cfc2:	b167      	cbz	r7, 800cfde <GUI__GetAlphaBuffer+0xa2>
 800cfc4:	4e0e      	ldr	r6, [pc, #56]	; (800d000 <GUI__GetAlphaBuffer+0xc4>)
 800cfc6:	6833      	ldr	r3, [r6, #0]
 800cfc8:	b93b      	cbnz	r3, 800cfda <GUI__GetAlphaBuffer+0x9e>
 800cfca:	6828      	ldr	r0, [r5, #0]
 800cfcc:	0080      	lsls	r0, r0, #2
 800cfce:	f002 f9b5 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	6030      	str	r0, [r6, #0]
 800cfd6:	bf08      	it	eq
 800cfd8:	2401      	moveq	r4, #1
 800cfda:	6833      	ldr	r3, [r6, #0]
 800cfdc:	603b      	str	r3, [r7, #0]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe4:	200054ac 	.word	0x200054ac
 800cfe8:	200054a0 	.word	0x200054a0
 800cfec:	0800cefd 	.word	0x0800cefd
 800cff0:	2000549c 	.word	0x2000549c
 800cff4:	200056e4 	.word	0x200056e4
 800cff8:	20005494 	.word	0x20005494
 800cffc:	20005490 	.word	0x20005490
 800d000:	20005498 	.word	0x20005498

0800d004 <GUI__DoAlphaBlending>:
 800d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d008:	b093      	sub	sp, #76	; 0x4c
 800d00a:	2400      	movs	r4, #0
 800d00c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d00e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d010:	910c      	str	r1, [sp, #48]	; 0x30
 800d012:	4690      	mov	r8, r2
 800d014:	461f      	mov	r7, r3
 800d016:	6034      	str	r4, [r6, #0]
 800d018:	a80f      	add	r0, sp, #60	; 0x3c
 800d01a:	a910      	add	r1, sp, #64	; 0x40
 800d01c:	4622      	mov	r2, r4
 800d01e:	ab11      	add	r3, sp, #68	; 0x44
 800d020:	f7ff ff8c 	bl	800cf3c <GUI__GetAlphaBuffer>
 800d024:	4605      	mov	r5, r0
 800d026:	2800      	cmp	r0, #0
 800d028:	f040 80c5 	bne.w	800d1b6 <GUI__DoAlphaBlending+0x1b2>
 800d02c:	4c64      	ldr	r4, [pc, #400]	; (800d1c0 <GUI__DoAlphaBlending+0x1bc>)
 800d02e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	7c58      	ldrb	r0, [r3, #17]
 800d034:	4b63      	ldr	r3, [pc, #396]	; (800d1c4 <GUI__DoAlphaBlending+0x1c0>)
 800d036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	4297      	cmp	r7, r2
 800d03e:	bfa8      	it	ge
 800d040:	4617      	movge	r7, r2
 800d042:	691a      	ldr	r2, [r3, #16]
 800d044:	920d      	str	r2, [sp, #52]	; 0x34
 800d046:	970a      	str	r7, [sp, #40]	; 0x28
 800d048:	f7ff f950 	bl	800c2ec <GUI_GetBitsPerPixelEx>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	9008      	str	r0, [sp, #32]
 800d050:	7c58      	ldrb	r0, [r3, #17]
 800d052:	f7ff f969 	bl	800c328 <GUI_GetpfIndex2ColorEx>
 800d056:	4b5c      	ldr	r3, [pc, #368]	; (800d1c8 <GUI__DoAlphaBlending+0x1c4>)
 800d058:	9004      	str	r0, [sp, #16]
 800d05a:	4298      	cmp	r0, r3
 800d05c:	d005      	beq.n	800d06a <GUI__DoAlphaBlending+0x66>
 800d05e:	4b5b      	ldr	r3, [pc, #364]	; (800d1cc <GUI__DoAlphaBlending+0x1c8>)
 800d060:	1ac3      	subs	r3, r0, r3
 800d062:	bf18      	it	ne
 800d064:	2301      	movne	r3, #1
 800d066:	9306      	str	r3, [sp, #24]
 800d068:	e000      	b.n	800d06c <GUI__DoAlphaBlending+0x68>
 800d06a:	9506      	str	r5, [sp, #24]
 800d06c:	2500      	movs	r5, #0
 800d06e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d070:	46ab      	mov	fp, r5
 800d072:	4643      	mov	r3, r8
 800d074:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d076:	f853 0b04 	ldr.w	r0, [r3], #4
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	4790      	blx	r2
 800d07e:	0e03      	lsrs	r3, r0, #24
 800d080:	4681      	mov	r9, r0
 800d082:	9309      	str	r3, [sp, #36]	; 0x24
 800d084:	f000 8087 	beq.w	800d196 <GUI__DoAlphaBlending+0x192>
 800d088:	f1bb 0f00 	cmp.w	fp, #0
 800d08c:	d13f      	bne.n	800d10e <GUI__DoAlphaBlending+0x10a>
 800d08e:	4b4c      	ldr	r3, [pc, #304]	; (800d1c0 <GUI__DoAlphaBlending+0x1bc>)
 800d090:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d096:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d09a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800d09e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0a0:	442f      	add	r7, r5
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	bfc8      	it	gt
 800d0a6:	ebc7 0b03 	rsbgt	fp, r7, r3
 800d0aa:	eb0b 0a05 	add.w	sl, fp, r5
 800d0ae:	bfc8      	it	gt
 800d0b0:	461f      	movgt	r7, r3
 800d0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0b4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800d0b8:	4453      	add	r3, sl
 800d0ba:	4494      	add	ip, r2
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	9b07      	ldr	r3, [sp, #28]
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	f10c 32ff 	add.w	r2, ip, #4294967295
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	f8cd c00c 	str.w	ip, [sp, #12]
 800d0ce:	f004 fa99 	bl	8011604 <GUI_ReadRectEx>
 800d0d2:	9a08      	ldr	r2, [sp, #32]
 800d0d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d0d6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d0da:	2a17      	cmp	r2, #23
 800d0dc:	dc06      	bgt.n	800d0ec <GUI__DoAlphaBlending+0xe8>
 800d0de:	4450      	add	r0, sl
 800d0e0:	ebcb 0104 	rsb	r1, fp, r4
 800d0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e6:	f004 fbf1 	bl	80118cc <GUI__ExpandPixelIndicesEx>
 800d0ea:	e001      	b.n	800d0f0 <GUI__DoAlphaBlending+0xec>
 800d0ec:	9b06      	ldr	r3, [sp, #24]
 800d0ee:	b913      	cbnz	r3, 800d0f6 <GUI__DoAlphaBlending+0xf2>
 800d0f0:	f04f 0b01 	mov.w	fp, #1
 800d0f4:	e00b      	b.n	800d10e <GUI__DoAlphaBlending+0x10a>
 800d0f6:	ebc7 070c 	rsb	r7, r7, ip
 800d0fa:	4482      	add	sl, r0
 800d0fc:	f8da 0000 	ldr.w	r0, [sl]
 800d100:	9a04      	ldr	r2, [sp, #16]
 800d102:	4790      	blx	r2
 800d104:	3f01      	subs	r7, #1
 800d106:	f84a 0b04 	str.w	r0, [sl], #4
 800d10a:	d1f7      	bne.n	800d0fc <GUI__DoAlphaBlending+0xf8>
 800d10c:	e7f0      	b.n	800d0f0 <GUI__DoAlphaBlending+0xec>
 800d10e:	4b30      	ldr	r3, [pc, #192]	; (800d1d0 <GUI__DoAlphaBlending+0x1cc>)
 800d110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d112:	f8d3 c000 	ldr.w	ip, [r3]
 800d116:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d118:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800d11c:	f1bc 0f00 	cmp.w	ip, #0
 800d120:	d024      	beq.n	800d16c <GUI__DoAlphaBlending+0x168>
 800d122:	eb07 020a 	add.w	r2, r7, sl
 800d126:	4451      	add	r1, sl
 800d128:	9210      	str	r2, [sp, #64]	; 0x40
 800d12a:	4623      	mov	r3, r4
 800d12c:	910f      	str	r1, [sp, #60]	; 0x3c
 800d12e:	4640      	mov	r0, r8
 800d130:	47e0      	blx	ip
 800d132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d136:	2300      	movs	r3, #0
 800d138:	f858 1003 	ldr.w	r1, [r8, r3]
 800d13c:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800d140:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d144:	58e8      	ldr	r0, [r5, r3]
 800d146:	d101      	bne.n	800d14c <GUI__DoAlphaBlending+0x148>
 800d148:	50d0      	str	r0, [r2, r3]
 800d14a:	e005      	b.n	800d158 <GUI__DoAlphaBlending+0x154>
 800d14c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800d150:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d154:	bf08      	it	eq
 800d156:	50d1      	streq	r1, [r2, r3]
 800d158:	3c01      	subs	r4, #1
 800d15a:	f103 0304 	add.w	r3, r3, #4
 800d15e:	d1eb      	bne.n	800d138 <GUI__DoAlphaBlending+0x134>
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	9710      	str	r7, [sp, #64]	; 0x40
 800d164:	f043 0301 	orr.w	r3, r3, #1
 800d168:	6033      	str	r3, [r6, #0]
 800d16a:	e022      	b.n	800d1b2 <GUI__DoAlphaBlending+0x1ae>
 800d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16e:	2bff      	cmp	r3, #255	; 0xff
 800d170:	d104      	bne.n	800d17c <GUI__DoAlphaBlending+0x178>
 800d172:	f851 300a 	ldr.w	r3, [r1, sl]
 800d176:	f847 300a 	str.w	r3, [r7, sl]
 800d17a:	e013      	b.n	800d1a4 <GUI__DoAlphaBlending+0x1a0>
 800d17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17e:	f851 100a 	ldr.w	r1, [r1, sl]
 800d182:	43da      	mvns	r2, r3
 800d184:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <GUI__DoAlphaBlending+0x1d0>)
 800d186:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	b2d2      	uxtb	r2, r2
 800d18e:	4798      	blx	r3
 800d190:	f847 000a 	str.w	r0, [r7, sl]
 800d194:	e002      	b.n	800d19c <GUI__DoAlphaBlending+0x198>
 800d196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d198:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d19c:	6833      	ldr	r3, [r6, #0]
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	6033      	str	r3, [r6, #0]
 800d1a4:	3c01      	subs	r4, #1
 800d1a6:	f105 0501 	add.w	r5, r5, #1
 800d1aa:	d002      	beq.n	800d1b2 <GUI__DoAlphaBlending+0x1ae>
 800d1ac:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d1b0:	e75f      	b.n	800d072 <GUI__DoAlphaBlending+0x6e>
 800d1b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d1b4:	e000      	b.n	800d1b8 <GUI__DoAlphaBlending+0x1b4>
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	b013      	add	sp, #76	; 0x4c
 800d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1be:	bf00      	nop
 800d1c0:	20000084 	.word	0x20000084
 800d1c4:	200056dc 	.word	0x200056dc
 800d1c8:	0800f5a3 	.word	0x0800f5a3
 800d1cc:	0800f5a1 	.word	0x0800f5a1
 800d1d0:	200054a8 	.word	0x200054a8
 800d1d4:	20000078 	.word	0x20000078

0800d1d8 <GUI__AllocAlphaBuffer>:
 800d1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1da:	b108      	cbz	r0, 800d1e0 <GUI__AllocAlphaBuffer+0x8>
 800d1dc:	aa03      	add	r2, sp, #12
 800d1de:	e000      	b.n	800d1e2 <GUI__AllocAlphaBuffer+0xa>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	a801      	add	r0, sp, #4
 800d1e4:	a902      	add	r1, sp, #8
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f7ff fea8 	bl	800cf3c <GUI__GetAlphaBuffer>
 800d1ec:	b005      	add	sp, #20
 800d1ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d1f4 <GUI_SignalEvent>:
 800d1f4:	b508      	push	{r3, lr}
 800d1f6:	4b02      	ldr	r3, [pc, #8]	; (800d200 <GUI_SignalEvent+0xc>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <GUI_SignalEvent+0xa>
 800d1fc:	4798      	blx	r3
 800d1fe:	bd08      	pop	{r3, pc}
 800d200:	200054b0 	.word	0x200054b0

0800d204 <GUI_UC__GetCharCodeInc>:
 800d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d206:	4e08      	ldr	r6, [pc, #32]	; (800d228 <GUI_UC__GetCharCodeInc+0x24>)
 800d208:	6804      	ldr	r4, [r0, #0]
 800d20a:	6833      	ldr	r3, [r6, #0]
 800d20c:	4605      	mov	r5, r0
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4620      	mov	r0, r4
 800d212:	4798      	blx	r3
 800d214:	6833      	ldr	r3, [r6, #0]
 800d216:	4607      	mov	r7, r0
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	4620      	mov	r0, r4
 800d21c:	4798      	blx	r3
 800d21e:	4420      	add	r0, r4
 800d220:	6028      	str	r0, [r5, #0]
 800d222:	4638      	mov	r0, r7
 800d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d226:	bf00      	nop
 800d228:	200056d4 	.word	0x200056d4

0800d22c <GUI_UC__NumChars2NumBytes>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	460e      	mov	r6, r1
 800d232:	2500      	movs	r5, #0
 800d234:	b146      	cbz	r6, 800d248 <GUI_UC__NumChars2NumBytes+0x1c>
 800d236:	4b05      	ldr	r3, [pc, #20]	; (800d24c <GUI_UC__NumChars2NumBytes+0x20>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4620      	mov	r0, r4
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	4798      	blx	r3
 800d240:	3e01      	subs	r6, #1
 800d242:	4404      	add	r4, r0
 800d244:	4405      	add	r5, r0
 800d246:	e7f5      	b.n	800d234 <GUI_UC__NumChars2NumBytes+0x8>
 800d248:	4628      	mov	r0, r5
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	200056d4 	.word	0x200056d4

0800d250 <_Unlink>:
 800d250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d252:	4605      	mov	r5, r0
 800d254:	b1f0      	cbz	r0, 800d294 <_Unlink+0x44>
 800d256:	f001 ffa1 	bl	800f19c <GUI_ALLOC_LockH>
 800d25a:	4b0f      	ldr	r3, [pc, #60]	; (800d298 <_Unlink+0x48>)
 800d25c:	9000      	str	r0, [sp, #0]
 800d25e:	681c      	ldr	r4, [r3, #0]
 800d260:	42ac      	cmp	r4, r5
 800d262:	d104      	bne.n	800d26e <_Unlink+0x1e>
 800d264:	6842      	ldr	r2, [r0, #4]
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	e011      	b.n	800d28e <_Unlink+0x3e>
 800d26a:	f001 ffa5 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d26e:	b174      	cbz	r4, 800d28e <_Unlink+0x3e>
 800d270:	4620      	mov	r0, r4
 800d272:	f001 ff93 	bl	800f19c <GUI_ALLOC_LockH>
 800d276:	4603      	mov	r3, r0
 800d278:	a802      	add	r0, sp, #8
 800d27a:	685c      	ldr	r4, [r3, #4]
 800d27c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d280:	42ac      	cmp	r4, r5
 800d282:	d1f2      	bne.n	800d26a <_Unlink+0x1a>
 800d284:	9a00      	ldr	r2, [sp, #0]
 800d286:	6852      	ldr	r2, [r2, #4]
 800d288:	605a      	str	r2, [r3, #4]
 800d28a:	f001 ff95 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d28e:	4668      	mov	r0, sp
 800d290:	f001 ff92 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d294:	b003      	add	sp, #12
 800d296:	bd30      	pop	{r4, r5, pc}
 800d298:	200054b8 	.word	0x200054b8

0800d29c <GUI_TIMER__GetFirstTimer>:
 800d29c:	2300      	movs	r3, #0
 800d29e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2a0:	6003      	str	r3, [r0, #0]
 800d2a2:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <GUI_TIMER__GetFirstTimer+0x2c>)
 800d2a4:	681c      	ldr	r4, [r3, #0]
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	b154      	cbz	r4, 800d2c0 <GUI_TIMER__GetFirstTimer+0x24>
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f001 ff76 	bl	800f19c <GUI_ALLOC_LockH>
 800d2b0:	ab02      	add	r3, sp, #8
 800d2b2:	6902      	ldr	r2, [r0, #16]
 800d2b4:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f001 ff7c 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	b003      	add	sp, #12
 800d2c4:	bd30      	pop	{r4, r5, pc}
 800d2c6:	bf00      	nop
 800d2c8:	200054b4 	.word	0x200054b4

0800d2cc <GUI_TIMER__GetNextTimerLin>:
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2d0:	600b      	str	r3, [r1, #0]
 800d2d2:	460e      	mov	r6, r1
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	b190      	cbz	r0, 800d2fe <GUI_TIMER__GetNextTimerLin+0x32>
 800d2d8:	f001 ff60 	bl	800f19c <GUI_ALLOC_LockH>
 800d2dc:	ad02      	add	r5, sp, #8
 800d2de:	6884      	ldr	r4, [r0, #8]
 800d2e0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d2e4:	b144      	cbz	r4, 800d2f8 <GUI_TIMER__GetNextTimerLin+0x2c>
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f001 ff66 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f001 ff55 	bl	800f19c <GUI_ALLOC_LockH>
 800d2f2:	6903      	ldr	r3, [r0, #16]
 800d2f4:	9001      	str	r0, [sp, #4]
 800d2f6:	6033      	str	r3, [r6, #0]
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	f001 ff5d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d2fe:	4620      	mov	r0, r4
 800d300:	b002      	add	sp, #8
 800d302:	bd70      	pop	{r4, r5, r6, pc}

0800d304 <GUI_TIMER_Delete>:
 800d304:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d306:	4604      	mov	r4, r0
 800d308:	b360      	cbz	r0, 800d364 <GUI_TIMER_Delete+0x60>
 800d30a:	4e17      	ldr	r6, [pc, #92]	; (800d368 <GUI_TIMER_Delete+0x64>)
 800d30c:	6835      	ldr	r5, [r6, #0]
 800d30e:	4285      	cmp	r5, r0
 800d310:	d10b      	bne.n	800d32a <GUI_TIMER_Delete+0x26>
 800d312:	f001 ff43 	bl	800f19c <GUI_ALLOC_LockH>
 800d316:	ab02      	add	r3, sp, #8
 800d318:	6882      	ldr	r2, [r0, #8]
 800d31a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d31e:	6032      	str	r2, [r6, #0]
 800d320:	4618      	mov	r0, r3
 800d322:	e017      	b.n	800d354 <GUI_TIMER_Delete+0x50>
 800d324:	4668      	mov	r0, sp
 800d326:	f001 ff47 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d32a:	b1ad      	cbz	r5, 800d358 <GUI_TIMER_Delete+0x54>
 800d32c:	4628      	mov	r0, r5
 800d32e:	f001 ff35 	bl	800f19c <GUI_ALLOC_LockH>
 800d332:	6885      	ldr	r5, [r0, #8]
 800d334:	ae02      	add	r6, sp, #8
 800d336:	42a5      	cmp	r5, r4
 800d338:	f846 0d08 	str.w	r0, [r6, #-8]!
 800d33c:	d1f2      	bne.n	800d324 <GUI_TIMER_Delete+0x20>
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 ff2c 	bl	800f19c <GUI_ALLOC_LockH>
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	6882      	ldr	r2, [r0, #8]
 800d348:	9001      	str	r0, [sp, #4]
 800d34a:	609a      	str	r2, [r3, #8]
 800d34c:	a801      	add	r0, sp, #4
 800d34e:	f001 ff33 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d352:	4668      	mov	r0, sp
 800d354:	f001 ff30 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d358:	4620      	mov	r0, r4
 800d35a:	f7ff ff79 	bl	800d250 <_Unlink>
 800d35e:	4620      	mov	r0, r4
 800d360:	f001 ff56 	bl	800f210 <GUI_ALLOC_Free>
 800d364:	b002      	add	sp, #8
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	200054b4 	.word	0x200054b4

0800d36c <GUI_TIMER_GetFlag>:
 800d36c:	b513      	push	{r0, r1, r4, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	b168      	cbz	r0, 800d38e <GUI_TIMER_GetFlag+0x22>
 800d372:	f001 ff13 	bl	800f19c <GUI_ALLOC_LockH>
 800d376:	ab02      	add	r3, sp, #8
 800d378:	8982      	ldrh	r2, [r0, #12]
 800d37a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d37e:	4214      	tst	r4, r2
 800d380:	4618      	mov	r0, r3
 800d382:	bf0c      	ite	eq
 800d384:	2400      	moveq	r4, #0
 800d386:	2401      	movne	r4, #1
 800d388:	f001 ff16 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800d38c:	e000      	b.n	800d390 <GUI_TIMER_GetFlag+0x24>
 800d38e:	2401      	movs	r4, #1
 800d390:	4620      	mov	r0, r4
 800d392:	b002      	add	sp, #8
 800d394:	bd10      	pop	{r4, pc}
	...

0800d398 <GUI__AlphaPreserveTrans>:
 800d398:	b510      	push	{r4, lr}
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <GUI__AlphaPreserveTrans+0x20>)
 800d39c:	781c      	ldrb	r4, [r3, #0]
 800d39e:	b120      	cbz	r0, 800d3aa <GUI__AlphaPreserveTrans+0x12>
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a8:	e002      	b.n	800d3b0 <GUI__AlphaPreserveTrans+0x18>
 800d3aa:	7018      	strb	r0, [r3, #0]
 800d3ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d3b0:	f004 f9d0 	bl	8011754 <LCD_AA_SetAndMask>
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	bd10      	pop	{r4, pc}
 800d3b8:	200056c4 	.word	0x200056c4

0800d3bc <GUI_SelectLayer>:
 800d3bc:	b570      	push	{r4, r5, r6, lr}
 800d3be:	4d08      	ldr	r5, [pc, #32]	; (800d3e0 <GUI_SelectLayer+0x24>)
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	2801      	cmp	r0, #1
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	7c5e      	ldrb	r6, [r3, #17]
 800d3c8:	d808      	bhi.n	800d3dc <GUI_SelectLayer+0x20>
 800d3ca:	f000 f9ad 	bl	800d728 <GUI_DEVICE__GetpDriver>
 800d3ce:	b128      	cbz	r0, 800d3dc <GUI_SelectLayer+0x20>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	745c      	strb	r4, [r3, #17]
 800d3d4:	f000 fc82 	bl	800dcdc <GUI_SelectLCD>
 800d3d8:	4b02      	ldr	r3, [pc, #8]	; (800d3e4 <GUI_SelectLayer+0x28>)
 800d3da:	601c      	str	r4, [r3, #0]
 800d3dc:	4630      	mov	r0, r6
 800d3de:	bd70      	pop	{r4, r5, r6, pc}
 800d3e0:	20000084 	.word	0x20000084
 800d3e4:	20005654 	.word	0x20005654

0800d3e8 <GUI_StoreKey>:
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <GUI_StoreKey+0xc>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	b902      	cbnz	r2, 800d3f0 <GUI_StoreKey+0x8>
 800d3ee:	6018      	str	r0, [r3, #0]
 800d3f0:	f7ff bf00 	b.w	800d1f4 <GUI_SignalEvent>
 800d3f4:	200054bc 	.word	0x200054bc

0800d3f8 <GUI_PollKeyMsg>:
 800d3f8:	4a0a      	ldr	r2, [pc, #40]	; (800d424 <GUI_PollKeyMsg+0x2c>)
 800d3fa:	490b      	ldr	r1, [pc, #44]	; (800d428 <GUI_PollKeyMsg+0x30>)
 800d3fc:	6813      	ldr	r3, [r2, #0]
 800d3fe:	6809      	ldr	r1, [r1, #0]
 800d400:	428b      	cmp	r3, r1
 800d402:	b510      	push	{r4, lr}
 800d404:	d00b      	beq.n	800d41e <GUI_PollKeyMsg+0x26>
 800d406:	4c09      	ldr	r4, [pc, #36]	; (800d42c <GUI_PollKeyMsg+0x34>)
 800d408:	42a3      	cmp	r3, r4
 800d40a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d40e:	bf14      	ite	ne
 800d410:	3308      	addne	r3, #8
 800d412:	3b50      	subeq	r3, #80	; 0x50
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	f7fb fa1d 	bl	8008854 <WM_OnKey>
 800d41a:	2001      	movs	r0, #1
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	2000      	movs	r0, #0
 800d420:	bd10      	pop	{r4, pc}
 800d422:	bf00      	nop
 800d424:	20000080 	.word	0x20000080
 800d428:	2000007c 	.word	0x2000007c
 800d42c:	20005510 	.word	0x20005510

0800d430 <GUI__DispStringInRect>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	b087      	sub	sp, #28
 800d436:	460c      	mov	r4, r1
 800d438:	9001      	str	r0, [sp, #4]
 800d43a:	4691      	mov	r9, r2
 800d43c:	461d      	mov	r5, r3
 800d43e:	f000 ff3f 	bl	800e2c0 <GUI_GetFontDistY>
 800d442:	9f01      	ldr	r7, [sp, #4]
 800d444:	4680      	mov	r8, r0
 800d446:	b124      	cbz	r4, 800d452 <GUI__DispStringInRect+0x22>
 800d448:	6820      	ldr	r0, [r4, #0]
 800d44a:	6861      	ldr	r1, [r4, #4]
 800d44c:	ab04      	add	r3, sp, #16
 800d44e:	c303      	stmia	r3!, {r0, r1}
 800d450:	e002      	b.n	800d458 <GUI__DispStringInRect+0x28>
 800d452:	a804      	add	r0, sp, #16
 800d454:	f000 fb76 	bl	800db44 <GUI_GetClientRect>
 800d458:	f019 0a0c 	ands.w	sl, r9, #12
 800d45c:	d002      	beq.n	800d464 <GUI__DispStringInRect+0x34>
 800d45e:	462c      	mov	r4, r5
 800d460:	2600      	movs	r6, #0
 800d462:	e016      	b.n	800d492 <GUI__DispStringInRect+0x62>
 800d464:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800d468:	e032      	b.n	800d4d0 <GUI__DispStringInRect+0xa0>
 800d46a:	4621      	mov	r1, r4
 800d46c:	9801      	ldr	r0, [sp, #4]
 800d46e:	f000 fe75 	bl	800e15c <GUI__GetLineNumChars>
 800d472:	f8dd b004 	ldr.w	fp, [sp, #4]
 800d476:	4601      	mov	r1, r0
 800d478:	1a24      	subs	r4, r4, r0
 800d47a:	4658      	mov	r0, fp
 800d47c:	f7ff fed6 	bl	800d22c <GUI_UC__NumChars2NumBytes>
 800d480:	eb0b 0300 	add.w	r3, fp, r0
 800d484:	a806      	add	r0, sp, #24
 800d486:	3601      	adds	r6, #1
 800d488:	f840 3d14 	str.w	r3, [r0, #-20]!
 800d48c:	f7ff fb50 	bl	800cb30 <GUI__HandleEOLine>
 800d490:	b908      	cbnz	r0, 800d496 <GUI__DispStringInRect+0x66>
 800d492:	2c00      	cmp	r4, #0
 800d494:	d1e9      	bne.n	800d46a <GUI__DispStringInRect+0x3a>
 800d496:	f1ba 0f08 	cmp.w	sl, #8
 800d49a:	d005      	beq.n	800d4a8 <GUI__DispStringInRect+0x78>
 800d49c:	f1ba 0f0c 	cmp.w	sl, #12
 800d4a0:	d008      	beq.n	800d4b4 <GUI__DispStringInRect+0x84>
 800d4a2:	f1ba 0f04 	cmp.w	sl, #4
 800d4a6:	d112      	bne.n	800d4ce <GUI__DispStringInRect+0x9e>
 800d4a8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d4ac:	fb08 4416 	mls	r4, r8, r6, r4
 800d4b0:	3401      	adds	r4, #1
 800d4b2:	e00d      	b.n	800d4d0 <GUI__DispStringInRect+0xa0>
 800d4b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d4b8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d4bc:	1ae4      	subs	r4, r4, r3
 800d4be:	3401      	adds	r4, #1
 800d4c0:	fb08 4416 	mls	r4, r8, r6, r4
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	fb94 f4f2 	sdiv	r4, r4, r2
 800d4ca:	441c      	add	r4, r3
 800d4cc:	e000      	b.n	800d4d0 <GUI__DispStringInRect+0xa0>
 800d4ce:	2400      	movs	r4, #0
 800d4d0:	9701      	str	r7, [sp, #4]
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	d04b      	beq.n	800d570 <GUI__DispStringInRect+0x140>
 800d4d8:	4629      	mov	r1, r5
 800d4da:	9801      	ldr	r0, [sp, #4]
 800d4dc:	f000 fe3e 	bl	800e15c <GUI__GetLineNumChars>
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	1a2d      	subs	r5, r5, r0
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	9801      	ldr	r0, [sp, #4]
 800d4e8:	f000 fe66 	bl	800e1b8 <GUI__GetLineDistX>
 800d4ec:	f009 0303 	and.w	r3, r9, #3
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d00f      	beq.n	800d514 <GUI__DispStringInRect+0xe4>
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d003      	beq.n	800d500 <GUI__DispStringInRect+0xd0>
 800d4f8:	b983      	cbnz	r3, 800d51c <GUI__DispStringInRect+0xec>
 800d4fa:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800d4fe:	e00d      	b.n	800d51c <GUI__DispStringInRect+0xec>
 800d500:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d504:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d508:	1ab6      	subs	r6, r6, r2
 800d50a:	1a36      	subs	r6, r6, r0
 800d50c:	fb96 f6f3 	sdiv	r6, r6, r3
 800d510:	4416      	add	r6, r2
 800d512:	e003      	b.n	800d51c <GUI__DispStringInRect+0xec>
 800d514:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d518:	1a36      	subs	r6, r6, r0
 800d51a:	3601      	adds	r6, #1
 800d51c:	4b16      	ldr	r3, [pc, #88]	; (800d578 <GUI__DispStringInRect+0x148>)
 800d51e:	6819      	ldr	r1, [r3, #0]
 800d520:	3801      	subs	r0, #1
 800d522:	b2a3      	uxth	r3, r4
 800d524:	b2b2      	uxth	r2, r6
 800d526:	848b      	strh	r3, [r1, #36]	; 0x24
 800d528:	4430      	add	r0, r6
 800d52a:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d52e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d532:	4423      	add	r3, r4
 800d534:	844a      	strh	r2, [r1, #34]	; 0x22
 800d536:	f8ad 2008 	strh.w	r2, [sp, #8]
 800d53a:	4639      	mov	r1, r7
 800d53c:	aa02      	add	r2, sp, #8
 800d53e:	f8ad 000c 	strh.w	r0, [sp, #12]
 800d542:	9801      	ldr	r0, [sp, #4]
 800d544:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d548:	f000 fe66 	bl	800e218 <GUI__DispLine>
 800d54c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d550:	4639      	mov	r1, r7
 800d552:	4650      	mov	r0, sl
 800d554:	f7ff fe6a 	bl	800d22c <GUI_UC__NumChars2NumBytes>
 800d558:	af06      	add	r7, sp, #24
 800d55a:	4450      	add	r0, sl
 800d55c:	f847 0d14 	str.w	r0, [r7, #-20]!
 800d560:	f000 feae 	bl	800e2c0 <GUI_GetFontDistY>
 800d564:	4404      	add	r4, r0
 800d566:	4638      	mov	r0, r7
 800d568:	f7ff fae2 	bl	800cb30 <GUI__HandleEOLine>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d0b1      	beq.n	800d4d4 <GUI__DispStringInRect+0xa4>
 800d570:	b007      	add	sp, #28
 800d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d576:	bf00      	nop
 800d578:	20000084 	.word	0x20000084

0800d57c <GUI_DispStringInRectMax>:
 800d57c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d580:	460c      	mov	r4, r1
 800d582:	4690      	mov	r8, r2
 800d584:	461f      	mov	r7, r3
 800d586:	4606      	mov	r6, r0
 800d588:	b1c0      	cbz	r0, 800d5bc <GUI_DispStringInRectMax+0x40>
 800d58a:	b169      	cbz	r1, 800d5a8 <GUI_DispStringInRectMax+0x2c>
 800d58c:	4608      	mov	r0, r1
 800d58e:	f7fb fa83 	bl	8008a98 <WM_SetUserClipRect>
 800d592:	4605      	mov	r5, r0
 800d594:	b148      	cbz	r0, 800d5aa <GUI_DispStringInRectMax+0x2e>
 800d596:	4668      	mov	r0, sp
 800d598:	4621      	mov	r1, r4
 800d59a:	462a      	mov	r2, r5
 800d59c:	f7ff fafa 	bl	800cb94 <GUI__IntersectRects>
 800d5a0:	4668      	mov	r0, sp
 800d5a2:	f7fb fa79 	bl	8008a98 <WM_SetUserClipRect>
 800d5a6:	e000      	b.n	800d5aa <GUI_DispStringInRectMax+0x2e>
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	f7ff ff3d 	bl	800d430 <GUI__DispStringInRect>
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f7fb fa6e 	bl	8008a98 <WM_SetUserClipRect>
 800d5bc:	b002      	add	sp, #8
 800d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5c2 <GUI_DispStringInRect>:
 800d5c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d5c6:	f7ff bfd9 	b.w	800d57c <GUI_DispStringInRectMax>

0800d5ca <GUI_WrapGetNumLines>:
 800d5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	460e      	mov	r6, r1
 800d5d0:	4617      	mov	r7, r2
 800d5d2:	2400      	movs	r4, #0
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	463a      	mov	r2, r7
 800d5da:	f004 f96d 	bl	80118b8 <GUI__WrapGetNumBytesToNextLine>
 800d5de:	b110      	cbz	r0, 800d5e6 <GUI_WrapGetNumLines+0x1c>
 800d5e0:	4405      	add	r5, r0
 800d5e2:	3401      	adds	r4, #1
 800d5e4:	e7f6      	b.n	800d5d4 <GUI_WrapGetNumLines+0xa>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5ea <GUI_DispStringInRectWrap>:
 800d5ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ee:	b089      	sub	sp, #36	; 0x24
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	9202      	str	r2, [sp, #8]
 800d5f4:	9303      	str	r3, [sp, #12]
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	f000 8092 	beq.w	800d722 <GUI_DispStringInRectWrap+0x138>
 800d5fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800d602:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800d606:	884e      	ldrh	r6, [r1, #2]
 800d608:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800d60c:	fa0f f289 	sxth.w	r2, r9
 800d610:	fa0f f38a 	sxth.w	r3, sl
 800d614:	1ad3      	subs	r3, r2, r3
 800d616:	3301      	adds	r3, #1
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	f000 fe51 	bl	800e2c0 <GUI_GetFontDistY>
 800d61e:	9902      	ldr	r1, [sp, #8]
 800d620:	f011 070c 	ands.w	r7, r1, #12
 800d624:	4680      	mov	r8, r0
 800d626:	d01b      	beq.n	800d660 <GUI_DispStringInRectWrap+0x76>
 800d628:	4628      	mov	r0, r5
 800d62a:	9901      	ldr	r1, [sp, #4]
 800d62c:	9a03      	ldr	r2, [sp, #12]
 800d62e:	f7ff ffcc 	bl	800d5ca <GUI_WrapGetNumLines>
 800d632:	2f08      	cmp	r7, #8
 800d634:	d003      	beq.n	800d63e <GUI_DispStringInRectWrap+0x54>
 800d636:	2f0c      	cmp	r7, #12
 800d638:	d006      	beq.n	800d648 <GUI_DispStringInRectWrap+0x5e>
 800d63a:	2f04      	cmp	r7, #4
 800d63c:	d110      	bne.n	800d660 <GUI_DispStringInRectWrap+0x76>
 800d63e:	f10b 0601 	add.w	r6, fp, #1
 800d642:	fb00 6618 	mls	r6, r0, r8, r6
 800d646:	e00a      	b.n	800d65e <GUI_DispStringInRectWrap+0x74>
 800d648:	b232      	sxth	r2, r6
 800d64a:	fa0f f38b 	sxth.w	r3, fp
 800d64e:	1a9b      	subs	r3, r3, r2
 800d650:	3301      	adds	r3, #1
 800d652:	fb08 3010 	mls	r0, r8, r0, r3
 800d656:	2302      	movs	r3, #2
 800d658:	fb90 f0f3 	sdiv	r0, r0, r3
 800d65c:	4406      	add	r6, r0
 800d65e:	b2b6      	uxth	r6, r6
 800d660:	4620      	mov	r0, r4
 800d662:	f7fb fa19 	bl	8008a98 <WM_SetUserClipRect>
 800d666:	4607      	mov	r7, r0
 800d668:	b178      	cbz	r0, 800d68a <GUI_DispStringInRectWrap+0xa0>
 800d66a:	a804      	add	r0, sp, #16
 800d66c:	4621      	mov	r1, r4
 800d66e:	463a      	mov	r2, r7
 800d670:	f8ad a010 	strh.w	sl, [sp, #16]
 800d674:	f8ad 6012 	strh.w	r6, [sp, #18]
 800d678:	f8ad 9014 	strh.w	r9, [sp, #20]
 800d67c:	f8ad b016 	strh.w	fp, [sp, #22]
 800d680:	f7ff fa88 	bl	800cb94 <GUI__IntersectRects>
 800d684:	a804      	add	r0, sp, #16
 800d686:	f7fb fa07 	bl	8008a98 <WM_SetUserClipRect>
 800d68a:	9901      	ldr	r1, [sp, #4]
 800d68c:	9a03      	ldr	r2, [sp, #12]
 800d68e:	4628      	mov	r0, r5
 800d690:	f004 f8e0 	bl	8011854 <GUI__WrapGetNumCharsDisp>
 800d694:	eb06 0b08 	add.w	fp, r6, r8
 800d698:	4602      	mov	r2, r0
 800d69a:	fa1f fb8b 	uxth.w	fp, fp
 800d69e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d6aa:	9200      	str	r2, [sp, #0]
 800d6ac:	f8ad a018 	strh.w	sl, [sp, #24]
 800d6b0:	f8ad 601a 	strh.w	r6, [sp, #26]
 800d6b4:	f8ad 901c 	strh.w	r9, [sp, #28]
 800d6b8:	f000 fd7e 	bl	800e1b8 <GUI__GetLineDistX>
 800d6bc:	9902      	ldr	r1, [sp, #8]
 800d6be:	9a00      	ldr	r2, [sp, #0]
 800d6c0:	f001 0303 	and.w	r3, r1, #3
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d014      	beq.n	800d6f2 <GUI_DispStringInRectWrap+0x108>
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d004      	beq.n	800d6d6 <GUI_DispStringInRectWrap+0xec>
 800d6cc:	b9b3      	cbnz	r3, 800d6fc <GUI_DispStringInRectWrap+0x112>
 800d6ce:	8823      	ldrh	r3, [r4, #0]
 800d6d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d6d4:	e012      	b.n	800d6fc <GUI_DispStringInRectWrap+0x112>
 800d6d6:	8821      	ldrh	r1, [r4, #0]
 800d6d8:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800d6dc:	b20e      	sxth	r6, r1
 800d6de:	ebc6 060e 	rsb	r6, r6, lr
 800d6e2:	1a30      	subs	r0, r6, r0
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	fb90 f3f3 	sdiv	r3, r0, r3
 800d6ea:	4419      	add	r1, r3
 800d6ec:	f8ad 1018 	strh.w	r1, [sp, #24]
 800d6f0:	e004      	b.n	800d6fc <GUI_DispStringInRectWrap+0x112>
 800d6f2:	88a3      	ldrh	r3, [r4, #4]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	1a18      	subs	r0, r3, r0
 800d6f8:	f8ad 0018 	strh.w	r0, [sp, #24]
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	4611      	mov	r1, r2
 800d700:	aa06      	add	r2, sp, #24
 800d702:	f000 fd89 	bl	800e218 <GUI__DispLine>
 800d706:	4628      	mov	r0, r5
 800d708:	9901      	ldr	r1, [sp, #4]
 800d70a:	9a03      	ldr	r2, [sp, #12]
 800d70c:	f004 f8d4 	bl	80118b8 <GUI__WrapGetNumBytesToNextLine>
 800d710:	4405      	add	r5, r0
 800d712:	fa1f f68b 	uxth.w	r6, fp
 800d716:	782b      	ldrb	r3, [r5, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1b6      	bne.n	800d68a <GUI_DispStringInRectWrap+0xa0>
 800d71c:	4638      	mov	r0, r7
 800d71e:	f7fb f9bb 	bl	8008a98 <WM_SetUserClipRect>
 800d722:	b009      	add	sp, #36	; 0x24
 800d724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d728 <GUI_DEVICE__GetpDriver>:
 800d728:	2801      	cmp	r0, #1
 800d72a:	dc09      	bgt.n	800d740 <GUI_DEVICE__GetpDriver+0x18>
 800d72c:	4b05      	ldr	r3, [pc, #20]	; (800d744 <GUI_DEVICE__GetpDriver+0x1c>)
 800d72e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d732:	b120      	cbz	r0, 800d73e <GUI_DEVICE__GetpDriver+0x16>
 800d734:	68c3      	ldr	r3, [r0, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	b11b      	cbz	r3, 800d742 <GUI_DEVICE__GetpDriver+0x1a>
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	e7f9      	b.n	800d732 <GUI_DEVICE__GetpDriver+0xa>
 800d73e:	4770      	bx	lr
 800d740:	2000      	movs	r0, #0
 800d742:	4770      	bx	lr
 800d744:	200056dc 	.word	0x200056dc

0800d748 <GUI_DEVICE_Delete>:
 800d748:	f001 bd14 	b.w	800f174 <GUI_ALLOC_FreeFixedBlock>

0800d74c <GUI_DEVICE_Create>:
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d750:	4606      	mov	r6, r0
 800d752:	460d      	mov	r5, r1
 800d754:	4617      	mov	r7, r2
 800d756:	461c      	mov	r4, r3
 800d758:	dd01      	ble.n	800d75e <GUI_DEVICE_Create+0x12>
 800d75a:	2000      	movs	r0, #0
 800d75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d75e:	201c      	movs	r0, #28
 800d760:	f001 fdec 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 800d764:	2800      	cmp	r0, #0
 800d766:	d0f8      	beq.n	800d75a <GUI_DEVICE_Create+0xe>
 800d768:	b10d      	cbz	r5, 800d76e <GUI_DEVICE_Create+0x22>
 800d76a:	6105      	str	r5, [r0, #16]
 800d76c:	e009      	b.n	800d782 <GUI_DEVICE_Create+0x36>
 800d76e:	4b09      	ldr	r3, [pc, #36]	; (800d794 <GUI_DEVICE_Create+0x48>)
 800d770:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d774:	b129      	cbz	r1, 800d782 <GUI_DEVICE_Create+0x36>
 800d776:	680b      	ldr	r3, [r1, #0]
 800d778:	b10b      	cbz	r3, 800d77e <GUI_DEVICE_Create+0x32>
 800d77a:	4619      	mov	r1, r3
 800d77c:	e7fb      	b.n	800d776 <GUI_DEVICE_Create+0x2a>
 800d77e:	690b      	ldr	r3, [r1, #16]
 800d780:	6103      	str	r3, [r0, #16]
 800d782:	2300      	movs	r3, #0
 800d784:	6083      	str	r3, [r0, #8]
 800d786:	6184      	str	r4, [r0, #24]
 800d788:	8287      	strh	r7, [r0, #20]
 800d78a:	60c6      	str	r6, [r0, #12]
 800d78c:	6003      	str	r3, [r0, #0]
 800d78e:	6043      	str	r3, [r0, #4]
 800d790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d792:	bf00      	nop
 800d794:	200056dc 	.word	0x200056dc

0800d798 <GUI_DEVICE_Unlink>:
 800d798:	6981      	ldr	r1, [r0, #24]
 800d79a:	4a0b      	ldr	r2, [pc, #44]	; (800d7c8 <GUI_DEVICE_Unlink+0x30>)
 800d79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7a0:	4283      	cmp	r3, r0
 800d7a2:	d105      	bne.n	800d7b0 <GUI_DEVICE_Unlink+0x18>
 800d7a4:	6803      	ldr	r3, [r0, #0]
 800d7a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d7aa:	b10b      	cbz	r3, 800d7b0 <GUI_DEVICE_Unlink+0x18>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	605a      	str	r2, [r3, #4]
 800d7b0:	6843      	ldr	r3, [r0, #4]
 800d7b2:	b10b      	cbz	r3, 800d7b8 <GUI_DEVICE_Unlink+0x20>
 800d7b4:	6802      	ldr	r2, [r0, #0]
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	6802      	ldr	r2, [r0, #0]
 800d7ba:	b102      	cbz	r2, 800d7be <GUI_DEVICE_Unlink+0x26>
 800d7bc:	6053      	str	r3, [r2, #4]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	6043      	str	r3, [r0, #4]
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	200056dc 	.word	0x200056dc

0800d7cc <GUI_DEVICE_Link>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	b908      	cbnz	r0, 800d7d4 <GUI_DEVICE_Link+0x8>
 800d7d0:	2001      	movs	r0, #1
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	6982      	ldr	r2, [r0, #24]
 800d7d6:	2a01      	cmp	r2, #1
 800d7d8:	dcfa      	bgt.n	800d7d0 <GUI_DEVICE_Link+0x4>
 800d7da:	4b1b      	ldr	r3, [pc, #108]	; (800d848 <GUI_DEVICE_Link+0x7c>)
 800d7dc:	7819      	ldrb	r1, [r3, #0]
 800d7de:	428a      	cmp	r2, r1
 800d7e0:	bfa4      	itt	ge
 800d7e2:	1c51      	addge	r1, r2, #1
 800d7e4:	7019      	strbge	r1, [r3, #0]
 800d7e6:	4919      	ldr	r1, [pc, #100]	; (800d84c <GUI_DEVICE_Link+0x80>)
 800d7e8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800d7ec:	460d      	mov	r5, r1
 800d7ee:	b913      	cbnz	r3, 800d7f6 <GUI_DEVICE_Link+0x2a>
 800d7f0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800d7f4:	e01a      	b.n	800d82c <GUI_DEVICE_Link+0x60>
 800d7f6:	6859      	ldr	r1, [r3, #4]
 800d7f8:	b109      	cbz	r1, 800d7fe <GUI_DEVICE_Link+0x32>
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	e7fb      	b.n	800d7f6 <GUI_DEVICE_Link+0x2a>
 800d7fe:	68c1      	ldr	r1, [r0, #12]
 800d800:	680e      	ldr	r6, [r1, #0]
 800d802:	68d9      	ldr	r1, [r3, #12]
 800d804:	680c      	ldr	r4, [r1, #0]
 800d806:	42b4      	cmp	r4, r6
 800d808:	dd03      	ble.n	800d812 <GUI_DEVICE_Link+0x46>
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1f8      	bne.n	800d802 <GUI_DEVICE_Link+0x36>
 800d810:	e7de      	b.n	800d7d0 <GUI_DEVICE_Link+0x4>
 800d812:	d102      	bne.n	800d81a <GUI_DEVICE_Link+0x4e>
 800d814:	8a81      	ldrh	r1, [r0, #20]
 800d816:	2901      	cmp	r1, #1
 800d818:	d00f      	beq.n	800d83a <GUI_DEVICE_Link+0x6e>
 800d81a:	6859      	ldr	r1, [r3, #4]
 800d81c:	b189      	cbz	r1, 800d842 <GUI_DEVICE_Link+0x76>
 800d81e:	6008      	str	r0, [r1, #0]
 800d820:	6041      	str	r1, [r0, #4]
 800d822:	6058      	str	r0, [r3, #4]
 800d824:	4298      	cmp	r0, r3
 800d826:	bf08      	it	eq
 800d828:	2300      	moveq	r3, #0
 800d82a:	6003      	str	r3, [r0, #0]
 800d82c:	2000      	movs	r0, #0
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	68cb      	ldr	r3, [r1, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	42a3      	cmp	r3, r4
 800d836:	460b      	mov	r3, r1
 800d838:	dbef      	blt.n	800d81a <GUI_DEVICE_Link+0x4e>
 800d83a:	6819      	ldr	r1, [r3, #0]
 800d83c:	2900      	cmp	r1, #0
 800d83e:	d1f7      	bne.n	800d830 <GUI_DEVICE_Link+0x64>
 800d840:	e7eb      	b.n	800d81a <GUI_DEVICE_Link+0x4e>
 800d842:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800d846:	e7ec      	b.n	800d822 <GUI_DEVICE_Link+0x56>
 800d848:	2000568a 	.word	0x2000568a
 800d84c:	200056dc 	.word	0x200056dc

0800d850 <GUI_DEVICE_CreateAndLink>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	461d      	mov	r5, r3
 800d854:	f7ff ff7a 	bl	800d74c <GUI_DEVICE_Create>
 800d858:	4604      	mov	r4, r0
 800d85a:	b148      	cbz	r0, 800d870 <GUI_DEVICE_CreateAndLink+0x20>
 800d85c:	f7ff ffb6 	bl	800d7cc <GUI_DEVICE_Link>
 800d860:	68e3      	ldr	r3, [r4, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	b923      	cbnz	r3, 800d870 <GUI_DEVICE_CreateAndLink+0x20>
 800d866:	4b03      	ldr	r3, [pc, #12]	; (800d874 <GUI_DEVICE_CreateAndLink+0x24>)
 800d868:	3516      	adds	r5, #22
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800d870:	4620      	mov	r0, r4
 800d872:	bd38      	pop	{r3, r4, r5, pc}
 800d874:	20000084 	.word	0x20000084

0800d878 <_OnExit>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <_OnExit+0x30>)
 800d87c:	4e0b      	ldr	r6, [pc, #44]	; (800d8ac <_OnExit+0x34>)
 800d87e:	4d0c      	ldr	r5, [pc, #48]	; (800d8b0 <_OnExit+0x38>)
 800d880:	2400      	movs	r4, #0
 800d882:	601c      	str	r4, [r3, #0]
 800d884:	4621      	mov	r1, r4
 800d886:	6833      	ldr	r3, [r6, #0]
 800d888:	2270      	movs	r2, #112	; 0x70
 800d88a:	4628      	mov	r0, r5
 800d88c:	4798      	blx	r3
 800d88e:	6833      	ldr	r3, [r6, #0]
 800d890:	4808      	ldr	r0, [pc, #32]	; (800d8b4 <_OnExit+0x3c>)
 800d892:	4621      	mov	r1, r4
 800d894:	2208      	movs	r2, #8
 800d896:	4798      	blx	r3
 800d898:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <_OnExit+0x40>)
 800d89a:	601d      	str	r5, [r3, #0]
 800d89c:	4b07      	ldr	r3, [pc, #28]	; (800d8bc <_OnExit+0x44>)
 800d89e:	701c      	strb	r4, [r3, #0]
 800d8a0:	4b07      	ldr	r3, [pc, #28]	; (800d8c0 <_OnExit+0x48>)
 800d8a2:	601c      	str	r4, [r3, #0]
 800d8a4:	bd70      	pop	{r4, r5, r6, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20005598 	.word	0x20005598
 800d8ac:	20000070 	.word	0x20000070
 800d8b0:	20005528 	.word	0x20005528
 800d8b4:	200056dc 	.word	0x200056dc
 800d8b8:	20000084 	.word	0x20000084
 800d8bc:	200056c4 	.word	0x200056c4
 800d8c0:	2000569c 	.word	0x2000569c

0800d8c4 <_InitContext>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4d19      	ldr	r5, [pc, #100]	; (800d92c <_InitContext+0x68>)
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	1d1a      	adds	r2, r3, #4
 800d8cc:	63da      	str	r2, [r3, #60]	; 0x3c
 800d8ce:	f103 0208 	add.w	r2, r3, #8
 800d8d2:	639b      	str	r3, [r3, #56]	; 0x38
 800d8d4:	641b      	str	r3, [r3, #64]	; 0x40
 800d8d6:	6142      	str	r2, [r0, #20]
 800d8d8:	7c5a      	ldrb	r2, [r3, #17]
 800d8da:	4b15      	ldr	r3, [pc, #84]	; (800d930 <_InitContext+0x6c>)
 800d8dc:	4604      	mov	r4, r0
 800d8de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d8e2:	68c3      	ldr	r3, [r0, #12]
 800d8e4:	f104 0108 	add.w	r1, r4, #8
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ea:	4798      	blx	r3
 800d8ec:	4b11      	ldr	r3, [pc, #68]	; (800d934 <_InitContext+0x70>)
 800d8ee:	6663      	str	r3, [r4, #100]	; 0x64
 800d8f0:	4b11      	ldr	r3, [pc, #68]	; (800d938 <_InitContext+0x74>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	61e3      	str	r3, [r4, #28]
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	6163      	str	r3, [r4, #20]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	7623      	strb	r3, [r4, #24]
 800d900:	f7fa fe98 	bl	8008634 <WM_GetDesktopWindow>
 800d904:	2303      	movs	r3, #3
 800d906:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800d90a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800d90e:	6323      	str	r3, [r4, #48]	; 0x30
 800d910:	6363      	str	r3, [r4, #52]	; 0x34
 800d912:	4b0a      	ldr	r3, [pc, #40]	; (800d93c <_InitContext+0x78>)
 800d914:	64a0      	str	r0, [r4, #72]	; 0x48
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	f7ff f8fa 	bl	800cb10 <LCD_SetBkColor>
 800d91c:	4b08      	ldr	r3, [pc, #32]	; (800d940 <_InitContext+0x7c>)
 800d91e:	6818      	ldr	r0, [r3, #0]
 800d920:	f7ff f8fe 	bl	800cb20 <LCD_SetColor>
 800d924:	4b07      	ldr	r3, [pc, #28]	; (800d944 <_InitContext+0x80>)
 800d926:	4a08      	ldr	r2, [pc, #32]	; (800d948 <_InitContext+0x84>)
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	20000084 	.word	0x20000084
 800d930:	200056dc 	.word	0x200056dc
 800d934:	080151d4 	.word	0x080151d4
 800d938:	20000088 	.word	0x20000088
 800d93c:	20005524 	.word	0x20005524
 800d940:	2000008c 	.word	0x2000008c
 800d944:	200056d4 	.word	0x200056d4
 800d948:	08015cfc 	.word	0x08015cfc

0800d94c <GUI_SetDefaultFont>:
 800d94c:	4b01      	ldr	r3, [pc, #4]	; (800d954 <GUI_SetDefaultFont+0x8>)
 800d94e:	6018      	str	r0, [r3, #0]
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20000088 	.word	0x20000088

0800d958 <GUI_ClearRect>:
 800d958:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d95c:	4607      	mov	r7, r0
 800d95e:	2004      	movs	r0, #4
 800d960:	469a      	mov	sl, r3
 800d962:	460e      	mov	r6, r1
 800d964:	4691      	mov	r9, r2
 800d966:	f7fe fd81 	bl	800c46c <LCD_SetDrawMode>
 800d96a:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <GUI_ClearRect+0x60>)
 800d96c:	681c      	ldr	r4, [r3, #0]
 800d96e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d970:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800d972:	442f      	add	r7, r5
 800d974:	4426      	add	r6, r4
 800d976:	4680      	mov	r8, r0
 800d978:	444d      	add	r5, r9
 800d97a:	4454      	add	r4, sl
 800d97c:	4668      	mov	r0, sp
 800d97e:	f8ad 7000 	strh.w	r7, [sp]
 800d982:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d986:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d98a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d98e:	f7fc f899 	bl	8009ac4 <WM__InitIVRSearch>
 800d992:	b928      	cbnz	r0, 800d9a0 <GUI_ClearRect+0x48>
 800d994:	4640      	mov	r0, r8
 800d996:	f7fe fd69 	bl	800c46c <LCD_SetDrawMode>
 800d99a:	b002      	add	sp, #8
 800d99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4623      	mov	r3, r4
 800d9a8:	f7fe fde2 	bl	800c570 <LCD_FillRect>
 800d9ac:	f7fb ffc8 	bl	8009940 <WM__GetNextIVR>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d1f5      	bne.n	800d9a0 <GUI_ClearRect+0x48>
 800d9b4:	e7ee      	b.n	800d994 <GUI_ClearRect+0x3c>
 800d9b6:	bf00      	nop
 800d9b8:	20000084 	.word	0x20000084

0800d9bc <GUI_Clear>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	2000      	movs	r0, #0
 800d9c0:	4601      	mov	r1, r0
 800d9c2:	f000 f949 	bl	800dc58 <GUI_GotoXY>
 800d9c6:	4804      	ldr	r0, [pc, #16]	; (800d9d8 <GUI_Clear+0x1c>)
 800d9c8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9d4:	f7ff bfc0 	b.w	800d958 <GUI_ClearRect>
 800d9d8:	ffffc001 	.word	0xffffc001

0800d9dc <GUI__RegisterExit>:
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <GUI__RegisterExit+0x20>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
 800d9ec:	4b03      	ldr	r3, [pc, #12]	; (800d9fc <GUI__RegisterExit+0x20>)
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	20005518 	.word	0x20005518

0800da00 <GUI__Config>:
 800da00:	b508      	push	{r3, lr}
 800da02:	4b08      	ldr	r3, [pc, #32]	; (800da24 <GUI__Config+0x24>)
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	b962      	cbnz	r2, 800da22 <GUI__Config+0x22>
 800da08:	2201      	movs	r2, #1
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	f7f2 fdba 	bl	8000584 <GUI_X_Config>
 800da10:	f7f2 ff90 	bl	8000934 <LCD_X_Config>
 800da14:	4804      	ldr	r0, [pc, #16]	; (800da28 <GUI__Config+0x28>)
 800da16:	4b05      	ldr	r3, [pc, #20]	; (800da2c <GUI__Config+0x2c>)
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800da1e:	f7ff bfdd 	b.w	800d9dc <GUI__RegisterExit>
 800da22:	bd08      	pop	{r3, pc}
 800da24:	20005598 	.word	0x20005598
 800da28:	2000551c 	.word	0x2000551c
 800da2c:	0800d879 	.word	0x0800d879

0800da30 <GUI_Init>:
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	4b26      	ldr	r3, [pc, #152]	; (800dad0 <GUI_Init+0xa0>)
 800da38:	4a25      	ldr	r2, [pc, #148]	; (800dad0 <GUI_Init+0xa0>)
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	f022 0201 	bic.w	r2, r2, #1
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	4b24      	ldr	r3, [pc, #144]	; (800dad4 <GUI_Init+0xa4>)
 800da44:	2201      	movs	r2, #1
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	bf00      	nop
 800da4a:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <GUI_Init+0xa4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1fb      	bne.n	800da4a <GUI_Init+0x1a>
 800da52:	4b21      	ldr	r3, [pc, #132]	; (800dad8 <GUI_Init+0xa8>)
 800da54:	4a21      	ldr	r2, [pc, #132]	; (800dadc <GUI_Init+0xac>)
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	4b1f      	ldr	r3, [pc, #124]	; (800dad8 <GUI_Init+0xa8>)
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	4b20      	ldr	r3, [pc, #128]	; (800dae0 <GUI_Init+0xb0>)
 800da5e:	429a      	cmp	r2, r3
 800da60:	d000      	beq.n	800da64 <GUI_Init+0x34>
 800da62:	e7fe      	b.n	800da62 <GUI_Init+0x32>
 800da64:	f7ff ffcc 	bl	800da00 <GUI__Config>
 800da68:	4b1e      	ldr	r3, [pc, #120]	; (800dae4 <GUI_Init+0xb4>)
 800da6a:	222e      	movs	r2, #46	; 0x2e
 800da6c:	701a      	strb	r2, [r3, #0]
 800da6e:	f7f2 fd99 	bl	80005a4 <GUI_X_Init>
 800da72:	481d      	ldr	r0, [pc, #116]	; (800dae8 <GUI_Init+0xb8>)
 800da74:	f7ff ff26 	bl	800d8c4 <_InitContext>
 800da78:	f7fe ff9e 	bl	800c9b8 <emWin_LCD_Init>
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	f7fe fc7f 	bl	800c380 <LCD_GetXSizeDisplay>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d004      	beq.n	800da92 <GUI_Init+0x62>
 800da88:	f7fe fc80 	bl	800c38c <LCD_GetYSizeDisplay>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d109      	bne.n	800daa6 <GUI_Init+0x76>
 800da92:	f7fe fc61 	bl	800c358 <LCD_GetXSizeMax>
 800da96:	4604      	mov	r4, r0
 800da98:	f7fe fc61 	bl	800c35e <LCD_GetYSizeMax>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4620      	mov	r0, r4
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7fe fc63 	bl	800c36c <LCD_SetDisplaySize>
 800daa6:	2000      	movs	r0, #0
 800daa8:	2100      	movs	r1, #0
 800daaa:	f000 f939 	bl	800dd20 <GUI_SetOrg>
 800daae:	f7fc fa15 	bl	8009edc <WM_Init>
 800dab2:	4b0e      	ldr	r3, [pc, #56]	; (800daec <GUI_Init+0xbc>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <GUI_Init+0x90>
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <GUI_Init+0xbc>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4798      	blx	r3
 800dac0:	4b0b      	ldr	r3, [pc, #44]	; (800daf0 <GUI_Init+0xc0>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd90      	pop	{r4, r7, pc}
 800dad0:	e0002000 	.word	0xe0002000
 800dad4:	40023008 	.word	0x40023008
 800dad8:	40023000 	.word	0x40023000
 800dadc:	f407a5c2 	.word	0xf407a5c2
 800dae0:	b5e8b5cd 	.word	0xb5e8b5cd
 800dae4:	20005690 	.word	0x20005690
 800dae8:	20005528 	.word	0x20005528
 800daec:	200056b4 	.word	0x200056b4
 800daf0:	200056bc 	.word	0x200056bc

0800daf4 <GUI_CalcColorDist>:
 800daf4:	b2cb      	uxtb	r3, r1
 800daf6:	b2c2      	uxtb	r2, r0
 800daf8:	1ad2      	subs	r2, r2, r3
 800dafa:	b292      	uxth	r2, r2
 800dafc:	b293      	uxth	r3, r2
 800dafe:	b530      	push	{r4, r5, lr}
 800db00:	041c      	lsls	r4, r3, #16
 800db02:	bf48      	it	mi
 800db04:	4253      	negmi	r3, r2
 800db06:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800db0a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800db0e:	ebc5 0202 	rsb	r2, r5, r2
 800db12:	bf48      	it	mi
 800db14:	b29b      	uxthmi	r3, r3
 800db16:	b292      	uxth	r2, r2
 800db18:	0c09      	lsrs	r1, r1, #16
 800db1a:	fb13 f403 	smulbb	r4, r3, r3
 800db1e:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800db22:	b293      	uxth	r3, r2
 800db24:	041d      	lsls	r5, r3, #16
 800db26:	b289      	uxth	r1, r1
 800db28:	b288      	uxth	r0, r1
 800db2a:	bf44      	itt	mi
 800db2c:	4253      	negmi	r3, r2
 800db2e:	b29b      	uxthmi	r3, r3
 800db30:	0402      	lsls	r2, r0, #16
 800db32:	bf48      	it	mi
 800db34:	4248      	negmi	r0, r1
 800db36:	fb13 4303 	smlabb	r3, r3, r3, r4
 800db3a:	bf48      	it	mi
 800db3c:	b280      	uxthmi	r0, r0
 800db3e:	fb00 3000 	mla	r0, r0, r0, r3
 800db42:	bd30      	pop	{r4, r5, pc}

0800db44 <GUI_GetClientRect>:
 800db44:	b108      	cbz	r0, 800db4a <GUI_GetClientRect+0x6>
 800db46:	f7fa bd59 	b.w	80085fc <WM_GetClientRect>
 800db4a:	4770      	bx	lr

0800db4c <GUI_GetBkColor>:
 800db4c:	b508      	push	{r3, lr}
 800db4e:	f003 fd89 	bl	8011664 <LCD_GetBkColorIndex>
 800db52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db56:	f7fe bf93 	b.w	800ca80 <LCD_Index2Color>

0800db5a <GUI_GetColor>:
 800db5a:	b508      	push	{r3, lr}
 800db5c:	f003 fd8a 	bl	8011674 <LCD_GetColorIndex>
 800db60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db64:	f7fe bf8c 	b.w	800ca80 <LCD_Index2Color>

0800db68 <GUI_GetOrg>:
 800db68:	4b04      	ldr	r3, [pc, #16]	; (800db7c <GUI_GetOrg+0x14>)
 800db6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db6e:	6003      	str	r3, [r0, #0]
 800db70:	4b03      	ldr	r3, [pc, #12]	; (800db80 <GUI_GetOrg+0x18>)
 800db72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db76:	600b      	str	r3, [r1, #0]
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	200056b0 	.word	0x200056b0
 800db80:	200056a0 	.word	0x200056a0

0800db84 <GUI_GetYSizeOfFont>:
 800db84:	7e02      	ldrb	r2, [r0, #24]
 800db86:	7ec0      	ldrb	r0, [r0, #27]
 800db88:	4350      	muls	r0, r2
 800db8a:	4770      	bx	lr

0800db8c <GUI_MergeRect>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	b338      	cbz	r0, 800dbe0 <GUI_MergeRect+0x54>
 800db90:	b309      	cbz	r1, 800dbd6 <GUI_MergeRect+0x4a>
 800db92:	b30a      	cbz	r2, 800dbd8 <GUI_MergeRect+0x4c>
 800db94:	f9b1 4000 	ldrsh.w	r4, [r1]
 800db98:	f9b2 3000 	ldrsh.w	r3, [r2]
 800db9c:	429c      	cmp	r4, r3
 800db9e:	bfb8      	it	lt
 800dba0:	4623      	movlt	r3, r4
 800dba2:	8003      	strh	r3, [r0, #0]
 800dba4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800dba8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800dbac:	429c      	cmp	r4, r3
 800dbae:	bfb8      	it	lt
 800dbb0:	4623      	movlt	r3, r4
 800dbb2:	8043      	strh	r3, [r0, #2]
 800dbb4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800dbb8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800dbbc:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800dbc0:	429c      	cmp	r4, r3
 800dbc2:	bfa8      	it	ge
 800dbc4:	4623      	movge	r3, r4
 800dbc6:	8083      	strh	r3, [r0, #4]
 800dbc8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800dbcc:	4299      	cmp	r1, r3
 800dbce:	bfa8      	it	ge
 800dbd0:	460b      	movge	r3, r1
 800dbd2:	80c3      	strh	r3, [r0, #6]
 800dbd4:	bd10      	pop	{r4, pc}
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	680b      	ldr	r3, [r1, #0]
 800dbda:	6003      	str	r3, [r0, #0]
 800dbdc:	684b      	ldr	r3, [r1, #4]
 800dbde:	6043      	str	r3, [r0, #4]
 800dbe0:	bd10      	pop	{r4, pc}

0800dbe2 <GUI_MoveRect>:
 800dbe2:	b168      	cbz	r0, 800dc00 <GUI_MoveRect+0x1e>
 800dbe4:	8803      	ldrh	r3, [r0, #0]
 800dbe6:	b289      	uxth	r1, r1
 800dbe8:	440b      	add	r3, r1
 800dbea:	8003      	strh	r3, [r0, #0]
 800dbec:	8883      	ldrh	r3, [r0, #4]
 800dbee:	4419      	add	r1, r3
 800dbf0:	8843      	ldrh	r3, [r0, #2]
 800dbf2:	8081      	strh	r1, [r0, #4]
 800dbf4:	b292      	uxth	r2, r2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	8043      	strh	r3, [r0, #2]
 800dbfa:	88c3      	ldrh	r3, [r0, #6]
 800dbfc:	441a      	add	r2, r3
 800dbfe:	80c2      	strh	r2, [r0, #6]
 800dc00:	4770      	bx	lr
	...

0800dc04 <GUI_Exec1>:
 800dc04:	4b0c      	ldr	r3, [pc, #48]	; (800dc38 <GUI_Exec1+0x34>)
 800dc06:	b510      	push	{r4, lr}
 800dc08:	681c      	ldr	r4, [r3, #0]
 800dc0a:	b11c      	cbz	r4, 800dc14 <GUI_Exec1+0x10>
 800dc0c:	47a0      	blx	r4
 800dc0e:	1c04      	adds	r4, r0, #0
 800dc10:	bf18      	it	ne
 800dc12:	2401      	movne	r4, #1
 800dc14:	f7fc f8bc 	bl	8009d90 <WM_Exec>
 800dc18:	4b08      	ldr	r3, [pc, #32]	; (800dc3c <GUI_Exec1+0x38>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	bf18      	it	ne
 800dc20:	2401      	movne	r4, #1
 800dc22:	b11b      	cbz	r3, 800dc2c <GUI_Exec1+0x28>
 800dc24:	4798      	blx	r3
 800dc26:	2800      	cmp	r0, #0
 800dc28:	bf18      	it	ne
 800dc2a:	2401      	movne	r4, #1
 800dc2c:	4b04      	ldr	r3, [pc, #16]	; (800dc40 <GUI_Exec1+0x3c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	b103      	cbz	r3, 800dc34 <GUI_Exec1+0x30>
 800dc32:	4798      	blx	r3
 800dc34:	4620      	mov	r0, r4
 800dc36:	bd10      	pop	{r4, pc}
 800dc38:	200056ac 	.word	0x200056ac
 800dc3c:	200056d8 	.word	0x200056d8
 800dc40:	200056d0 	.word	0x200056d0

0800dc44 <GUI_Exec>:
 800dc44:	b510      	push	{r4, lr}
 800dc46:	2400      	movs	r4, #0
 800dc48:	f7ff ffdc 	bl	800dc04 <GUI_Exec1>
 800dc4c:	b108      	cbz	r0, 800dc52 <GUI_Exec+0xe>
 800dc4e:	2401      	movs	r4, #1
 800dc50:	e7fa      	b.n	800dc48 <GUI_Exec+0x4>
 800dc52:	4620      	mov	r0, r4
 800dc54:	bd10      	pop	{r4, pc}
	...

0800dc58 <GUI_GotoXY>:
 800dc58:	4b02      	ldr	r3, [pc, #8]	; (800dc64 <GUI_GotoXY+0xc>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	8458      	strh	r0, [r3, #34]	; 0x22
 800dc5e:	8499      	strh	r1, [r3, #36]	; 0x24
 800dc60:	2000      	movs	r0, #0
 800dc62:	4770      	bx	lr
 800dc64:	20000084 	.word	0x20000084

0800dc68 <GUI_SetPenSize>:
 800dc68:	4b02      	ldr	r3, [pc, #8]	; (800dc74 <GUI_SetPenSize+0xc>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	7e1a      	ldrb	r2, [r3, #24]
 800dc6e:	7618      	strb	r0, [r3, #24]
 800dc70:	4610      	mov	r0, r2
 800dc72:	4770      	bx	lr
 800dc74:	20000084 	.word	0x20000084

0800dc78 <GUI_RectsIntersect>:
 800dc78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dc7c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	dc14      	bgt.n	800dcae <GUI_RectsIntersect+0x36>
 800dc84:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800dc88:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	dc0e      	bgt.n	800dcae <GUI_RectsIntersect+0x36>
 800dc90:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dc94:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	dc08      	bgt.n	800dcae <GUI_RectsIntersect+0x36>
 800dc9c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dca0:	f9b1 2000 	ldrsh.w	r2, [r1]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	bfcc      	ite	gt
 800dca8:	2000      	movgt	r0, #0
 800dcaa:	2001      	movle	r0, #1
 800dcac:	4770      	bx	lr
 800dcae:	2000      	movs	r0, #0
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <GUI_SaveContext_W>:
 800dcb4:	b508      	push	{r3, lr}
 800dcb6:	4b03      	ldr	r3, [pc, #12]	; (800dcc4 <GUI_SaveContext_W+0x10>)
 800dcb8:	2270      	movs	r2, #112	; 0x70
 800dcba:	6819      	ldr	r1, [r3, #0]
 800dcbc:	f004 fc02 	bl	80124c4 <memcpy>
 800dcc0:	bd08      	pop	{r3, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20000084 	.word	0x20000084

0800dcc8 <GUI_RestoreContext>:
 800dcc8:	b508      	push	{r3, lr}
 800dcca:	4b03      	ldr	r3, [pc, #12]	; (800dcd8 <GUI_RestoreContext+0x10>)
 800dccc:	4601      	mov	r1, r0
 800dcce:	2270      	movs	r2, #112	; 0x70
 800dcd0:	6818      	ldr	r0, [r3, #0]
 800dcd2:	f004 fbf7 	bl	80124c4 <memcpy>
 800dcd6:	bd08      	pop	{r3, pc}
 800dcd8:	20000084 	.word	0x20000084

0800dcdc <GUI_SelectLCD>:
 800dcdc:	b508      	push	{r3, lr}
 800dcde:	f003 fb7d 	bl	80113dc <LCD_SelectLCD>
 800dce2:	f7fe fa47 	bl	800c174 <LCD_UpdateColorIndices>
 800dce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dcea:	f7fc b88d 	b.w	8009e08 <WM_Activate>

0800dcee <GUI_SetBkColor>:
 800dcee:	f7fe bf0f 	b.w	800cb10 <LCD_SetBkColor>

0800dcf2 <GUI_SetColor>:
 800dcf2:	f7fe bf15 	b.w	800cb20 <LCD_SetColor>

0800dcf6 <GUI_SetDrawMode>:
 800dcf6:	f7fe bbb9 	b.w	800c46c <LCD_SetDrawMode>
	...

0800dcfc <GUI_SetFont>:
 800dcfc:	4b03      	ldr	r3, [pc, #12]	; (800dd0c <GUI_SetFont+0x10>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	69d9      	ldr	r1, [r3, #28]
 800dd02:	b100      	cbz	r0, 800dd06 <GUI_SetFont+0xa>
 800dd04:	61d8      	str	r0, [r3, #28]
 800dd06:	4608      	mov	r0, r1
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	20000084 	.word	0x20000084

0800dd10 <GUI_SetLineStyle>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <GUI_SetLineStyle+0xc>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	7e9a      	ldrb	r2, [r3, #26]
 800dd16:	7698      	strb	r0, [r3, #26]
 800dd18:	4610      	mov	r0, r2
 800dd1a:	4770      	bx	lr
 800dd1c:	20000084 	.word	0x20000084

0800dd20 <GUI_SetOrg>:
 800dd20:	460a      	mov	r2, r1
 800dd22:	4908      	ldr	r1, [pc, #32]	; (800dd44 <GUI_SetOrg+0x24>)
 800dd24:	b510      	push	{r4, lr}
 800dd26:	8008      	strh	r0, [r1, #0]
 800dd28:	4907      	ldr	r1, [pc, #28]	; (800dd48 <GUI_SetOrg+0x28>)
 800dd2a:	800a      	strh	r2, [r1, #0]
 800dd2c:	4907      	ldr	r1, [pc, #28]	; (800dd4c <GUI_SetOrg+0x2c>)
 800dd2e:	6809      	ldr	r1, [r1, #0]
 800dd30:	4603      	mov	r3, r0
 800dd32:	7c48      	ldrb	r0, [r1, #17]
 800dd34:	4906      	ldr	r1, [pc, #24]	; (800dd50 <GUI_SetOrg+0x30>)
 800dd36:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800dd3a:	68c1      	ldr	r1, [r0, #12]
 800dd3c:	6a0c      	ldr	r4, [r1, #32]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	47a0      	blx	r4
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	200056b0 	.word	0x200056b0
 800dd48:	200056a0 	.word	0x200056a0
 800dd4c:	20000084 	.word	0x20000084
 800dd50:	200056dc 	.word	0x200056dc

0800dd54 <GUI_SetTextAlign>:
 800dd54:	4b03      	ldr	r3, [pc, #12]	; (800dd64 <GUI_SetTextAlign+0x10>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800dd5c:	8598      	strh	r0, [r3, #44]	; 0x2c
 800dd5e:	4610      	mov	r0, r2
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20000084 	.word	0x20000084

0800dd68 <GUI_SetTextMode>:
 800dd68:	4b03      	ldr	r3, [pc, #12]	; (800dd78 <GUI_SetTextMode+0x10>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800dd70:	8558      	strh	r0, [r3, #42]	; 0x2a
 800dd72:	4610      	mov	r0, r2
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	20000084 	.word	0x20000084

0800dd7c <GL_SetDefault>:
 800dd7c:	b508      	push	{r3, lr}
 800dd7e:	4b0e      	ldr	r3, [pc, #56]	; (800ddb8 <GL_SetDefault+0x3c>)
 800dd80:	6818      	ldr	r0, [r3, #0]
 800dd82:	f7fe fec5 	bl	800cb10 <LCD_SetBkColor>
 800dd86:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <GL_SetDefault+0x40>)
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f7fe fec9 	bl	800cb20 <LCD_SetColor>
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f7ff ff6a 	bl	800dc68 <GUI_SetPenSize>
 800dd94:	2000      	movs	r0, #0
 800dd96:	f7ff ffdd 	bl	800dd54 <GUI_SetTextAlign>
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	f7ff ffe4 	bl	800dd68 <GUI_SetTextMode>
 800dda0:	2000      	movs	r0, #0
 800dda2:	f7ff ffa8 	bl	800dcf6 <GUI_SetDrawMode>
 800dda6:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <GL_SetDefault+0x44>)
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f7ff ffa7 	bl	800dcfc <GUI_SetFont>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ddb4:	f7ff bfac 	b.w	800dd10 <GUI_SetLineStyle>
 800ddb8:	20005524 	.word	0x20005524
 800ddbc:	2000008c 	.word	0x2000008c
 800ddc0:	20000088 	.word	0x20000088

0800ddc4 <GUIPROP__FindChar>:
 800ddc4:	b138      	cbz	r0, 800ddd6 <GUIPROP__FindChar+0x12>
 800ddc6:	8803      	ldrh	r3, [r0, #0]
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	d802      	bhi.n	800ddd2 <GUIPROP__FindChar+0xe>
 800ddcc:	8843      	ldrh	r3, [r0, #2]
 800ddce:	428b      	cmp	r3, r1
 800ddd0:	d201      	bcs.n	800ddd6 <GUIPROP__FindChar+0x12>
 800ddd2:	6880      	ldr	r0, [r0, #8]
 800ddd4:	e7f6      	b.n	800ddc4 <GUIPROP__FindChar>
 800ddd6:	4770      	bx	lr

0800ddd8 <GUIPROP_DispChar>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	4c38      	ldr	r4, [pc, #224]	; (800dec0 <GUIPROP_DispChar+0xe8>)
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	4605      	mov	r5, r0
 800dde8:	b089      	sub	sp, #36	; 0x24
 800ddea:	69d8      	ldr	r0, [r3, #28]
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7ff ffe9 	bl	800ddc4 <GUIPROP__FindChar>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d061      	beq.n	800deba <GUIPROP_DispChar+0xe2>
 800ddf6:	f8b0 8000 	ldrh.w	r8, [r0]
 800ddfa:	6847      	ldr	r7, [r0, #4]
 800ddfc:	ebc8 0805 	rsb	r8, r8, r5
 800de00:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800de04:	4648      	mov	r0, r9
 800de06:	f896 b002 	ldrb.w	fp, [r6, #2]
 800de0a:	f7fe fb2f 	bl	800c46c <LCD_SetDrawMode>
 800de0e:	6825      	ldr	r5, [r4, #0]
 800de10:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800de14:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800de18:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800de1c:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800de20:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800de24:	9306      	str	r3, [sp, #24]
 800de26:	4682      	mov	sl, r0
 800de28:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800de2c:	f8cd c000 	str.w	ip, [sp]
 800de30:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800de34:	f8cd e004 	str.w	lr, [sp, #4]
 800de38:	f04f 0e01 	mov.w	lr, #1
 800de3c:	f8cd b00c 	str.w	fp, [sp, #12]
 800de40:	f8cd e008 	str.w	lr, [sp, #8]
 800de44:	6873      	ldr	r3, [r6, #4]
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800de4a:	9b06      	ldr	r3, [sp, #24]
 800de4c:	9505      	str	r5, [sp, #20]
 800de4e:	f7fe fc97 	bl	800c780 <LCD_DrawBitmap>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	69da      	ldr	r2, [r3, #28]
 800de56:	f892 b019 	ldrb.w	fp, [r2, #25]
 800de5a:	7e11      	ldrb	r1, [r2, #24]
 800de5c:	458b      	cmp	fp, r1
 800de5e:	d920      	bls.n	800dea2 <GUIPROP_DispChar+0xca>
 800de60:	f1b9 0f02 	cmp.w	r9, #2
 800de64:	7ed5      	ldrb	r5, [r2, #27]
 800de66:	d01c      	beq.n	800dea2 <GUIPROP_DispChar+0xca>
 800de68:	9107      	str	r1, [sp, #28]
 800de6a:	f7ff fe76 	bl	800db5a <GUI_GetColor>
 800de6e:	4681      	mov	r9, r0
 800de70:	f7ff fe6c 	bl	800db4c <GUI_GetBkColor>
 800de74:	f7ff ff3d 	bl	800dcf2 <GUI_SetColor>
 800de78:	6824      	ldr	r4, [r4, #0]
 800de7a:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800de7e:	69e2      	ldr	r2, [r4, #28]
 800de80:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800de84:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800de88:	7ed2      	ldrb	r2, [r2, #27]
 800de8a:	9907      	ldr	r1, [sp, #28]
 800de8c:	fb07 0202 	mla	r2, r7, r2, r0
 800de90:	fb01 3105 	mla	r1, r1, r5, r3
 800de94:	fb0b 3305 	mla	r3, fp, r5, r3
 800de98:	f7fe fb6a 	bl	800c570 <LCD_FillRect>
 800de9c:	4648      	mov	r0, r9
 800de9e:	f7ff ff28 	bl	800dcf2 <GUI_SetColor>
 800dea2:	4650      	mov	r0, sl
 800dea4:	f7fe fae2 	bl	800c46c <LCD_SetDrawMode>
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <GUIPROP_DispChar+0xe8>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	69da      	ldr	r2, [r3, #28]
 800deae:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800deb0:	7e90      	ldrb	r0, [r2, #26]
 800deb2:	7872      	ldrb	r2, [r6, #1]
 800deb4:	fb00 1202 	mla	r2, r0, r2, r1
 800deb8:	845a      	strh	r2, [r3, #34]	; 0x22
 800deba:	b009      	add	sp, #36	; 0x24
 800debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec0:	20000084 	.word	0x20000084

0800dec4 <GUIPROP_GetCharDistX>:
 800dec4:	4b0d      	ldr	r3, [pc, #52]	; (800defc <GUIPROP_GetCharDistX+0x38>)
 800dec6:	b570      	push	{r4, r5, r6, lr}
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	69dd      	ldr	r5, [r3, #28]
 800decc:	4606      	mov	r6, r0
 800dece:	460c      	mov	r4, r1
 800ded0:	69e8      	ldr	r0, [r5, #28]
 800ded2:	4631      	mov	r1, r6
 800ded4:	f7ff ff76 	bl	800ddc4 <GUIPROP__FindChar>
 800ded8:	b170      	cbz	r0, 800def8 <GUIPROP_GetCharDistX+0x34>
 800deda:	8803      	ldrh	r3, [r0, #0]
 800dedc:	6842      	ldr	r2, [r0, #4]
 800dede:	1af6      	subs	r6, r6, r3
 800dee0:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800dee4:	7858      	ldrb	r0, [r3, #1]
 800dee6:	7eab      	ldrb	r3, [r5, #26]
 800dee8:	fb10 f003 	smulbb	r0, r0, r3
 800deec:	b124      	cbz	r4, 800def8 <GUIPROP_GetCharDistX+0x34>
 800deee:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800def2:	fb12 f303 	smulbb	r3, r2, r3
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	bd70      	pop	{r4, r5, r6, pc}
 800defa:	bf00      	nop
 800defc:	20000084 	.word	0x20000084

0800df00 <GUIPROP_GetFontInfo>:
 800df00:	2301      	movs	r3, #1
 800df02:	800b      	strh	r3, [r1, #0]
 800df04:	4770      	bx	lr

0800df06 <GUIPROP_IsInFont>:
 800df06:	b508      	push	{r3, lr}
 800df08:	69c0      	ldr	r0, [r0, #28]
 800df0a:	f7ff ff5b 	bl	800ddc4 <GUIPROP__FindChar>
 800df0e:	3000      	adds	r0, #0
 800df10:	bf18      	it	ne
 800df12:	2001      	movne	r0, #1
 800df14:	bd08      	pop	{r3, pc}
	...

0800df18 <GUIMONO_DispChar>:
 800df18:	4b52      	ldr	r3, [pc, #328]	; (800e064 <GUIMONO_DispChar+0x14c>)
 800df1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	69d9      	ldr	r1, [r3, #28]
 800df22:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800df24:	69cc      	ldr	r4, [r1, #28]
 800df26:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800df28:	89a2      	ldrh	r2, [r4, #12]
 800df2a:	4290      	cmp	r0, r2
 800df2c:	b08b      	sub	sp, #44	; 0x2c
 800df2e:	d308      	bcc.n	800df42 <GUIMONO_DispChar+0x2a>
 800df30:	89e6      	ldrh	r6, [r4, #14]
 800df32:	4286      	cmp	r6, r0
 800df34:	d305      	bcc.n	800df42 <GUIMONO_DispChar+0x2a>
 800df36:	f8d4 9000 	ldr.w	r9, [r4]
 800df3a:	1a82      	subs	r2, r0, r2
 800df3c:	f04f 3bff 	mov.w	fp, #4294967295
 800df40:	e015      	b.n	800df6e <GUIMONO_DispChar+0x56>
 800df42:	68a2      	ldr	r2, [r4, #8]
 800df44:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800df48:	2a00      	cmp	r2, #0
 800df4a:	f000 8081 	beq.w	800e050 <GUIMONO_DispChar+0x138>
 800df4e:	8816      	ldrh	r6, [r2, #0]
 800df50:	42b0      	cmp	r0, r6
 800df52:	d37d      	bcc.n	800e050 <GUIMONO_DispChar+0x138>
 800df54:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800df58:	4584      	cmp	ip, r0
 800df5a:	d379      	bcc.n	800e050 <GUIMONO_DispChar+0x138>
 800df5c:	6852      	ldr	r2, [r2, #4]
 800df5e:	1b80      	subs	r0, r0, r6
 800df60:	b280      	uxth	r0, r0
 800df62:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800df66:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800df6a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800df6e:	1c50      	adds	r0, r2, #1
 800df70:	d06e      	beq.n	800e050 <GUIMONO_DispChar+0x138>
 800df72:	f891 8018 	ldrb.w	r8, [r1, #24]
 800df76:	7ca1      	ldrb	r1, [r4, #18]
 800df78:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800df7c:	7c26      	ldrb	r6, [r4, #16]
 800df7e:	9206      	str	r2, [sp, #24]
 800df80:	fb18 f101 	smulbb	r1, r8, r1
 800df84:	9107      	str	r1, [sp, #28]
 800df86:	fa0f f18a 	sxth.w	r1, sl
 800df8a:	4608      	mov	r0, r1
 800df8c:	9108      	str	r1, [sp, #32]
 800df8e:	f7fe fa6d 	bl	800c46c <LCD_SetDrawMode>
 800df92:	4934      	ldr	r1, [pc, #208]	; (800e064 <GUIMONO_DispChar+0x14c>)
 800df94:	9009      	str	r0, [sp, #36]	; 0x24
 800df96:	680b      	ldr	r3, [r1, #0]
 800df98:	9a06      	ldr	r2, [sp, #24]
 800df9a:	69d9      	ldr	r1, [r3, #28]
 800df9c:	7e88      	ldrb	r0, [r1, #26]
 800df9e:	9000      	str	r0, [sp, #0]
 800dfa0:	7ec9      	ldrb	r1, [r1, #27]
 800dfa2:	9101      	str	r1, [sp, #4]
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	9102      	str	r1, [sp, #8]
 800dfa8:	7ca1      	ldrb	r1, [r4, #18]
 800dfaa:	9103      	str	r1, [sp, #12]
 800dfac:	9907      	ldr	r1, [sp, #28]
 800dfae:	fb01 9202 	mla	r2, r1, r2, r9
 800dfb2:	9204      	str	r2, [sp, #16]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	9305      	str	r3, [sp, #20]
 800dfb8:	b23f      	sxth	r7, r7
 800dfba:	b22d      	sxth	r5, r5
 800dfbc:	4638      	mov	r0, r7
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	4643      	mov	r3, r8
 800dfc4:	f7fe fbdc 	bl	800c780 <LCD_DrawBitmap>
 800dfc8:	f1bb 3fff 	cmp.w	fp, #4294967295
 800dfcc:	d01b      	beq.n	800e006 <GUIMONO_DispChar+0xee>
 800dfce:	f04a 0002 	orr.w	r0, sl, #2
 800dfd2:	b200      	sxth	r0, r0
 800dfd4:	f7fe fa4a 	bl	800c46c <LCD_SetDrawMode>
 800dfd8:	4a22      	ldr	r2, [pc, #136]	; (800e064 <GUIMONO_DispChar+0x14c>)
 800dfda:	6813      	ldr	r3, [r2, #0]
 800dfdc:	69da      	ldr	r2, [r3, #28]
 800dfde:	7e91      	ldrb	r1, [r2, #26]
 800dfe0:	9100      	str	r1, [sp, #0]
 800dfe2:	7ed2      	ldrb	r2, [r2, #27]
 800dfe4:	9201      	str	r2, [sp, #4]
 800dfe6:	2101      	movs	r1, #1
 800dfe8:	9102      	str	r1, [sp, #8]
 800dfea:	9907      	ldr	r1, [sp, #28]
 800dfec:	7ca2      	ldrb	r2, [r4, #18]
 800dfee:	9203      	str	r2, [sp, #12]
 800dff0:	fb01 920b 	mla	r2, r1, fp, r9
 800dff4:	9204      	str	r2, [sp, #16]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff8:	9305      	str	r3, [sp, #20]
 800dffa:	4638      	mov	r0, r7
 800dffc:	4629      	mov	r1, r5
 800dffe:	4632      	mov	r2, r6
 800e000:	4643      	mov	r3, r8
 800e002:	f7fe fbbd 	bl	800c780 <LCD_DrawBitmap>
 800e006:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800e064 <GUIMONO_DispChar+0x14c>
 800e00a:	f8d8 3000 	ldr.w	r3, [r8]
 800e00e:	69db      	ldr	r3, [r3, #28]
 800e010:	7e5a      	ldrb	r2, [r3, #25]
 800e012:	7e1b      	ldrb	r3, [r3, #24]
 800e014:	429a      	cmp	r2, r3
 800e016:	d917      	bls.n	800e048 <GUIMONO_DispChar+0x130>
 800e018:	9a08      	ldr	r2, [sp, #32]
 800e01a:	2a02      	cmp	r2, #2
 800e01c:	d014      	beq.n	800e048 <GUIMONO_DispChar+0x130>
 800e01e:	f08a 0004 	eor.w	r0, sl, #4
 800e022:	b200      	sxth	r0, r0
 800e024:	f7fe fa22 	bl	800c46c <LCD_SetDrawMode>
 800e028:	f8d8 3000 	ldr.w	r3, [r8]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	f893 e018 	ldrb.w	lr, [r3, #24]
 800e032:	7ed9      	ldrb	r1, [r3, #27]
 800e034:	7e9a      	ldrb	r2, [r3, #26]
 800e036:	7e5b      	ldrb	r3, [r3, #25]
 800e038:	4638      	mov	r0, r7
 800e03a:	fb0e 5101 	mla	r1, lr, r1, r5
 800e03e:	fb06 7202 	mla	r2, r6, r2, r7
 800e042:	442b      	add	r3, r5
 800e044:	f7fe fa94 	bl	800c570 <LCD_FillRect>
 800e048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e04a:	b2d8      	uxtb	r0, r3
 800e04c:	f7fe fa0e 	bl	800c46c <LCD_SetDrawMode>
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <GUIMONO_DispChar+0x14c>)
 800e052:	7c61      	ldrb	r1, [r4, #17]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e058:	440a      	add	r2, r1
 800e05a:	845a      	strh	r2, [r3, #34]	; 0x22
 800e05c:	b00b      	add	sp, #44	; 0x2c
 800e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e062:	bf00      	nop
 800e064:	20000084 	.word	0x20000084

0800e068 <GUIMONO_GetCharDistX>:
 800e068:	4b04      	ldr	r3, [pc, #16]	; (800e07c <GUIMONO_GetCharDistX+0x14>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	b109      	cbz	r1, 800e076 <GUIMONO_GetCharDistX+0xe>
 800e072:	7c1a      	ldrb	r2, [r3, #16]
 800e074:	600a      	str	r2, [r1, #0]
 800e076:	7c58      	ldrb	r0, [r3, #17]
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	20000084 	.word	0x20000084

0800e080 <GUIMONO_GetFontInfo>:
 800e080:	2302      	movs	r3, #2
 800e082:	800b      	strh	r3, [r1, #0]
 800e084:	4770      	bx	lr

0800e086 <GUIMONO_IsInFont>:
 800e086:	69c3      	ldr	r3, [r0, #28]
 800e088:	899a      	ldrh	r2, [r3, #12]
 800e08a:	428a      	cmp	r2, r1
 800e08c:	d802      	bhi.n	800e094 <GUIMONO_IsInFont+0xe>
 800e08e:	89da      	ldrh	r2, [r3, #14]
 800e090:	428a      	cmp	r2, r1
 800e092:	d20f      	bcs.n	800e0b4 <GUIMONO_IsInFont+0x2e>
 800e094:	6898      	ldr	r0, [r3, #8]
 800e096:	b180      	cbz	r0, 800e0ba <GUIMONO_IsInFont+0x34>
 800e098:	8803      	ldrh	r3, [r0, #0]
 800e09a:	4299      	cmp	r1, r3
 800e09c:	d30c      	bcc.n	800e0b8 <GUIMONO_IsInFont+0x32>
 800e09e:	8842      	ldrh	r2, [r0, #2]
 800e0a0:	428a      	cmp	r2, r1
 800e0a2:	d309      	bcc.n	800e0b8 <GUIMONO_IsInFont+0x32>
 800e0a4:	1ac9      	subs	r1, r1, r3
 800e0a6:	6842      	ldr	r2, [r0, #4]
 800e0a8:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800e0ac:	43c0      	mvns	r0, r0
 800e0ae:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800e0b2:	4770      	bx	lr
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	4770      	bx	lr
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	4770      	bx	lr

0800e0bc <_Log2VisBuffered>:
 800e0bc:	4770      	bx	lr
	...

0800e0c0 <_DispLine>:
 800e0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0c2:	4615      	mov	r5, r2
 800e0c4:	ab02      	add	r3, sp, #8
 800e0c6:	4a21      	ldr	r2, [pc, #132]	; (800e14c <_DispLine+0x8c>)
 800e0c8:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e0cc:	9001      	str	r0, [sp, #4]
 800e0ce:	6812      	ldr	r2, [r2, #0]
 800e0d0:	4c1f      	ldr	r4, [pc, #124]	; (800e150 <_DispLine+0x90>)
 800e0d2:	4669      	mov	r1, sp
 800e0d4:	4790      	blx	r2
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	9001      	str	r0, [sp, #4]
 800e0da:	6958      	ldr	r0, [r3, #20]
 800e0dc:	b938      	cbnz	r0, 800e0ee <_DispLine+0x2e>
 800e0de:	2001      	movs	r0, #1
 800e0e0:	f7fe fed6 	bl	800ce90 <GUI__ManageCache>
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	69d3      	ldr	r3, [r2, #28]
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	b933      	cbnz	r3, 800e0fa <_DispLine+0x3a>
 800e0ec:	e023      	b.n	800e136 <_DispLine+0x76>
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7ff fdc2 	bl	800dc78 <GUI_RectsIntersect>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d1f2      	bne.n	800e0de <_DispLine+0x1e>
 800e0f8:	e025      	b.n	800e146 <_DispLine+0x86>
 800e0fa:	4c16      	ldr	r4, [pc, #88]	; (800e154 <_DispLine+0x94>)
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	6821      	ldr	r1, [r4, #0]
 800e100:	b141      	cbz	r1, 800e114 <_DispLine+0x54>
 800e102:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800e106:	9801      	ldr	r0, [sp, #4]
 800e108:	9900      	ldr	r1, [sp, #0]
 800e10a:	4798      	blx	r3
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	4628      	mov	r0, r5
 800e110:	4798      	blx	r3
 800e112:	e015      	b.n	800e140 <_DispLine+0x80>
 800e114:	9801      	ldr	r0, [sp, #4]
 800e116:	9900      	ldr	r1, [sp, #0]
 800e118:	4798      	blx	r3
 800e11a:	e011      	b.n	800e140 <_DispLine+0x80>
 800e11c:	a801      	add	r0, sp, #4
 800e11e:	f7ff f871 	bl	800d204 <GUI_UC__GetCharCodeInc>
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4605      	mov	r5, r0
 800e12a:	4798      	blx	r3
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <_DispLine+0x98>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	b10b      	cbz	r3, 800e136 <_DispLine+0x76>
 800e132:	4628      	mov	r0, r5
 800e134:	4798      	blx	r3
 800e136:	9b00      	ldr	r3, [sp, #0]
 800e138:	3b01      	subs	r3, #1
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	daed      	bge.n	800e11c <_DispLine+0x5c>
 800e140:	2000      	movs	r0, #0
 800e142:	f7fe fea5 	bl	800ce90 <GUI__ManageCache>
 800e146:	b003      	add	sp, #12
 800e148:	bd30      	pop	{r4, r5, pc}
 800e14a:	bf00      	nop
 800e14c:	20000090 	.word	0x20000090
 800e150:	20000084 	.word	0x20000084
 800e154:	200056a8 	.word	0x200056a8
 800e158:	200056b8 	.word	0x200056b8

0800e15c <GUI__GetLineNumChars>:
 800e15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e15e:	460d      	mov	r5, r1
 800e160:	9001      	str	r0, [sp, #4]
 800e162:	4604      	mov	r4, r0
 800e164:	b198      	cbz	r0, 800e18e <GUI__GetLineNumChars+0x32>
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <GUI__GetLineNumChars+0x38>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69db      	ldr	r3, [r3, #28]
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	b10b      	cbz	r3, 800e174 <GUI__GetLineNumChars+0x18>
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	b90b      	cbnz	r3, 800e178 <GUI__GetLineNumChars+0x1c>
 800e174:	2400      	movs	r4, #0
 800e176:	e008      	b.n	800e18a <GUI__GetLineNumChars+0x2e>
 800e178:	4798      	blx	r3
 800e17a:	e009      	b.n	800e190 <GUI__GetLineNumChars+0x34>
 800e17c:	a801      	add	r0, sp, #4
 800e17e:	f7ff f841 	bl	800d204 <GUI_UC__GetCharCodeInc>
 800e182:	b120      	cbz	r0, 800e18e <GUI__GetLineNumChars+0x32>
 800e184:	280a      	cmp	r0, #10
 800e186:	d002      	beq.n	800e18e <GUI__GetLineNumChars+0x32>
 800e188:	3401      	adds	r4, #1
 800e18a:	42ac      	cmp	r4, r5
 800e18c:	dbf6      	blt.n	800e17c <GUI__GetLineNumChars+0x20>
 800e18e:	4620      	mov	r0, r4
 800e190:	b003      	add	sp, #12
 800e192:	bd30      	pop	{r4, r5, pc}
 800e194:	20000084 	.word	0x20000084

0800e198 <GUI__GetOverlap>:
 800e198:	b513      	push	{r0, r1, r4, lr}
 800e19a:	a902      	add	r1, sp, #8
 800e19c:	2400      	movs	r4, #0
 800e19e:	f841 4d04 	str.w	r4, [r1, #-4]!
 800e1a2:	f000 f89f 	bl	800e2e4 <GUI_GetCharDistXEx>
 800e1a6:	9b01      	ldr	r3, [sp, #4]
 800e1a8:	4283      	cmp	r3, r0
 800e1aa:	bfcc      	ite	gt
 800e1ac:	ebc0 0003 	rsbgt	r0, r0, r3
 800e1b0:	4620      	movle	r0, r4
 800e1b2:	b002      	add	sp, #8
 800e1b4:	bd10      	pop	{r4, pc}
	...

0800e1b8 <GUI__GetLineDistX>:
 800e1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1ba:	4a15      	ldr	r2, [pc, #84]	; (800e210 <GUI__GetLineDistX+0x58>)
 800e1bc:	9001      	str	r0, [sp, #4]
 800e1be:	ab02      	add	r3, sp, #8
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e1c6:	4669      	mov	r1, sp
 800e1c8:	4790      	blx	r2
 800e1ca:	9001      	str	r0, [sp, #4]
 800e1cc:	b1f0      	cbz	r0, 800e20c <GUI__GetLineDistX+0x54>
 800e1ce:	4b11      	ldr	r3, [pc, #68]	; (800e214 <GUI__GetLineDistX+0x5c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	69db      	ldr	r3, [r3, #28]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	b10b      	cbz	r3, 800e1dc <GUI__GetLineDistX+0x24>
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	b913      	cbnz	r3, 800e1e2 <GUI__GetLineDistX+0x2a>
 800e1dc:	2500      	movs	r5, #0
 800e1de:	462c      	mov	r4, r5
 800e1e0:	e002      	b.n	800e1e8 <GUI__GetLineDistX+0x30>
 800e1e2:	9900      	ldr	r1, [sp, #0]
 800e1e4:	4798      	blx	r3
 800e1e6:	e011      	b.n	800e20c <GUI__GetLineDistX+0x54>
 800e1e8:	9b00      	ldr	r3, [sp, #0]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	db07      	blt.n	800e202 <GUI__GetLineDistX+0x4a>
 800e1f2:	a801      	add	r0, sp, #4
 800e1f4:	f7ff f806 	bl	800d204 <GUI_UC__GetCharCodeInc>
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	f000 f869 	bl	800e2d0 <GUI_GetCharDistX>
 800e1fe:	4404      	add	r4, r0
 800e200:	e7f2      	b.n	800e1e8 <GUI__GetLineDistX+0x30>
 800e202:	4628      	mov	r0, r5
 800e204:	f7ff ffc8 	bl	800e198 <GUI__GetOverlap>
 800e208:	4420      	add	r0, r4
 800e20a:	e7ff      	b.n	800e20c <GUI__GetLineDistX+0x54>
 800e20c:	b003      	add	sp, #12
 800e20e:	bd30      	pop	{r4, r5, pc}
 800e210:	20000090 	.word	0x20000090
 800e214:	20000084 	.word	0x20000084

0800e218 <GUI__DispLine>:
 800e218:	4b27      	ldr	r3, [pc, #156]	; (800e2b8 <GUI__DispLine+0xa0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e21e:	4605      	mov	r5, r0
 800e220:	460c      	mov	r4, r1
 800e222:	b163      	cbz	r3, 800e23e <GUI__DispLine+0x26>
 800e224:	2000      	movs	r0, #0
 800e226:	f7fb fc4d 	bl	8009ac4 <WM__InitIVRSearch>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d041      	beq.n	800e2b2 <GUI__DispLine+0x9a>
 800e22e:	4628      	mov	r0, r5
 800e230:	4621      	mov	r1, r4
 800e232:	466a      	mov	r2, sp
 800e234:	f7ff ff44 	bl	800e0c0 <_DispLine>
 800e238:	f7fb fb82 	bl	8009940 <WM__GetNextIVR>
 800e23c:	e7f5      	b.n	800e22a <GUI__DispLine+0x12>
 800e23e:	6810      	ldr	r0, [r2, #0]
 800e240:	6851      	ldr	r1, [r2, #4]
 800e242:	4e1e      	ldr	r6, [pc, #120]	; (800e2bc <GUI__DispLine+0xa4>)
 800e244:	466b      	mov	r3, sp
 800e246:	c303      	stmia	r3!, {r0, r1}
 800e248:	6833      	ldr	r3, [r6, #0]
 800e24a:	f8bd 1000 	ldrh.w	r1, [sp]
 800e24e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800e252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e256:	4411      	add	r1, r2
 800e258:	f8ad 1000 	strh.w	r1, [sp]
 800e25c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e260:	4419      	add	r1, r3
 800e262:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e266:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e26a:	440a      	add	r2, r1
 800e26c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e274:	4668      	mov	r0, sp
 800e276:	4413      	add	r3, r2
 800e278:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e27c:	f7fb fc22 	bl	8009ac4 <WM__InitIVRSearch>
 800e280:	6833      	ldr	r3, [r6, #0]
 800e282:	b940      	cbnz	r0, 800e296 <GUI__DispLine+0x7e>
 800e284:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e288:	1a8a      	subs	r2, r1, r2
 800e28a:	845a      	strh	r2, [r3, #34]	; 0x22
 800e28c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e28e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e290:	1a8a      	subs	r2, r1, r2
 800e292:	849a      	strh	r2, [r3, #36]	; 0x24
 800e294:	e00d      	b.n	800e2b2 <GUI__DispLine+0x9a>
 800e296:	f8bd 2000 	ldrh.w	r2, [sp]
 800e29a:	845a      	strh	r2, [r3, #34]	; 0x22
 800e29c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e2a0:	849a      	strh	r2, [r3, #36]	; 0x24
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	466a      	mov	r2, sp
 800e2a8:	f7ff ff0a 	bl	800e0c0 <_DispLine>
 800e2ac:	f7fb fb48 	bl	8009940 <WM__GetNextIVR>
 800e2b0:	e7e6      	b.n	800e280 <GUI__DispLine+0x68>
 800e2b2:	b002      	add	sp, #8
 800e2b4:	bd70      	pop	{r4, r5, r6, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20005694 	.word	0x20005694
 800e2bc:	20000084 	.word	0x20000084

0800e2c0 <GUI_GetFontDistY>:
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <GUI_GetFontDistY+0xc>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	7e58      	ldrb	r0, [r3, #25]
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	20000084 	.word	0x20000084

0800e2d0 <GUI_GetCharDistX>:
 800e2d0:	b508      	push	{r3, lr}
 800e2d2:	4b03      	ldr	r3, [pc, #12]	; (800e2e0 <GUI_GetCharDistX+0x10>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	2100      	movs	r1, #0
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	4798      	blx	r3
 800e2de:	bd08      	pop	{r3, pc}
 800e2e0:	20000084 	.word	0x20000084

0800e2e4 <GUI_GetCharDistXEx>:
 800e2e4:	b508      	push	{r3, lr}
 800e2e6:	4b03      	ldr	r3, [pc, #12]	; (800e2f4 <GUI_GetCharDistXEx+0x10>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	69db      	ldr	r3, [r3, #28]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	4798      	blx	r3
 800e2f0:	bd08      	pop	{r3, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20000084 	.word	0x20000084

0800e2f8 <_GetClipParam>:
 800e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2fa:	4f33      	ldr	r7, [pc, #204]	; (800e3c8 <_GetClipParam+0xd0>)
 800e2fc:	9c07      	ldr	r4, [sp, #28]
 800e2fe:	683f      	ldr	r7, [r7, #0]
 800e300:	9e05      	ldr	r6, [sp, #20]
 800e302:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 800e306:	9d06      	ldr	r5, [sp, #24]
 800e308:	ebc0 0c0c 	rsb	ip, r0, ip
 800e30c:	f1bc 0f00 	cmp.w	ip, #0
 800e310:	bfc8      	it	gt
 800e312:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 800e316:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 800e31a:	ebc1 0c0c 	rsb	ip, r1, ip
 800e31e:	f1bc 0f00 	cmp.w	ip, #0
 800e322:	bfc8      	it	gt
 800e324:	f8c4 c010 	strgt.w	ip, [r4, #16]
 800e328:	4410      	add	r0, r2
 800e32a:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 800e32e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e332:	3801      	subs	r0, #1
 800e334:	4419      	add	r1, r3
 800e336:	ebcc 0000 	rsb	r0, ip, r0
 800e33a:	3901      	subs	r1, #1
 800e33c:	2800      	cmp	r0, #0
 800e33e:	ebc2 0101 	rsb	r1, r2, r1
 800e342:	bfc8      	it	gt
 800e344:	60a0      	strgt	r0, [r4, #8]
 800e346:	2900      	cmp	r1, #0
 800e348:	bfc8      	it	gt
 800e34a:	6161      	strgt	r1, [r4, #20]
 800e34c:	2e08      	cmp	r6, #8
 800e34e:	d024      	beq.n	800e39a <_GetClipParam+0xa2>
 800e350:	dc04      	bgt.n	800e35c <_GetClipParam+0x64>
 800e352:	2e01      	cmp	r6, #1
 800e354:	d00f      	beq.n	800e376 <_GetClipParam+0x7e>
 800e356:	2e04      	cmp	r6, #4
 800e358:	d016      	beq.n	800e388 <_GetClipParam+0x90>
 800e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35c:	2e18      	cmp	r6, #24
 800e35e:	d021      	beq.n	800e3a4 <_GetClipParam+0xac>
 800e360:	2e20      	cmp	r6, #32
 800e362:	d028      	beq.n	800e3b6 <_GetClipParam+0xbe>
 800e364:	2e10      	cmp	r6, #16
 800e366:	d12e      	bne.n	800e3c6 <_GetClipParam+0xce>
 800e368:	68e3      	ldr	r3, [r4, #12]
 800e36a:	68a2      	ldr	r2, [r4, #8]
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800e374:	e025      	b.n	800e3c2 <_GetClipParam+0xca>
 800e376:	68e3      	ldr	r3, [r4, #12]
 800e378:	10db      	asrs	r3, r3, #3
 800e37a:	00da      	lsls	r2, r3, #3
 800e37c:	60e2      	str	r2, [r4, #12]
 800e37e:	68a2      	ldr	r2, [r4, #8]
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 800e386:	e01c      	b.n	800e3c2 <_GetClipParam+0xca>
 800e388:	68e3      	ldr	r3, [r4, #12]
 800e38a:	105b      	asrs	r3, r3, #1
 800e38c:	005a      	lsls	r2, r3, #1
 800e38e:	60e2      	str	r2, [r4, #12]
 800e390:	68a2      	ldr	r2, [r4, #8]
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 800e398:	e013      	b.n	800e3c2 <_GetClipParam+0xca>
 800e39a:	68a2      	ldr	r2, [r4, #8]
 800e39c:	68e3      	ldr	r3, [r4, #12]
 800e39e:	6023      	str	r3, [r4, #0]
 800e3a0:	1aad      	subs	r5, r5, r2
 800e3a2:	e00e      	b.n	800e3c2 <_GetClipParam+0xca>
 800e3a4:	68e3      	ldr	r3, [r4, #12]
 800e3a6:	68a2      	ldr	r2, [r4, #8]
 800e3a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e3ac:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	4415      	add	r5, r2
 800e3b4:	e005      	b.n	800e3c2 <_GetClipParam+0xca>
 800e3b6:	68e3      	ldr	r3, [r4, #12]
 800e3b8:	68a2      	ldr	r2, [r4, #8]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 800e3c2:	1aeb      	subs	r3, r5, r3
 800e3c4:	6063      	str	r3, [r4, #4]
 800e3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c8:	20000084 	.word	0x20000084

0800e3cc <_GetBitfieldsPara>:
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	600b      	str	r3, [r1, #0]
 800e3d0:	07c3      	lsls	r3, r0, #31
 800e3d2:	d403      	bmi.n	800e3dc <_GetBitfieldsPara+0x10>
 800e3d4:	680b      	ldr	r3, [r1, #0]
 800e3d6:	0840      	lsrs	r0, r0, #1
 800e3d8:	3301      	adds	r3, #1
 800e3da:	e7f8      	b.n	800e3ce <_GetBitfieldsPara+0x2>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	6013      	str	r3, [r2, #0]
 800e3e0:	07c3      	lsls	r3, r0, #31
 800e3e2:	d503      	bpl.n	800e3ec <_GetBitfieldsPara+0x20>
 800e3e4:	6813      	ldr	r3, [r2, #0]
 800e3e6:	0840      	lsrs	r0, r0, #1
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	e7f8      	b.n	800e3de <_GetBitfieldsPara+0x12>
 800e3ec:	4770      	bx	lr

0800e3ee <_DrawLine_RGB>:
 800e3ee:	6983      	ldr	r3, [r0, #24]
 800e3f0:	b513      	push	{r0, r1, r4, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	b1c3      	cbz	r3, 800e428 <_DrawLine_RGB+0x3a>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	6063      	str	r3, [r4, #4]
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	68e2      	ldr	r2, [r4, #12]
 800e3fe:	4293      	cmp	r3, r2
 800e400:	da2b      	bge.n	800e45a <_DrawLine_RGB+0x6c>
 800e402:	6921      	ldr	r1, [r4, #16]
 800e404:	6822      	ldr	r2, [r4, #0]
 800e406:	a802      	add	r0, sp, #8
 800e408:	fb01 2303 	mla	r3, r1, r3, r2
 800e40c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e410:	f7fe fc28 	bl	800cc64 <GUI__Read32>
 800e414:	69a3      	ldr	r3, [r4, #24]
 800e416:	4798      	blx	r3
 800e418:	6963      	ldr	r3, [r4, #20]
 800e41a:	4798      	blx	r3
 800e41c:	69e3      	ldr	r3, [r4, #28]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4798      	blx	r3
 800e422:	6863      	ldr	r3, [r4, #4]
 800e424:	3301      	adds	r3, #1
 800e426:	e7e7      	b.n	800e3f8 <_DrawLine_RGB+0xa>
 800e428:	6063      	str	r3, [r4, #4]
 800e42a:	6863      	ldr	r3, [r4, #4]
 800e42c:	68e2      	ldr	r2, [r4, #12]
 800e42e:	4293      	cmp	r3, r2
 800e430:	da13      	bge.n	800e45a <_DrawLine_RGB+0x6c>
 800e432:	6922      	ldr	r2, [r4, #16]
 800e434:	6821      	ldr	r1, [r4, #0]
 800e436:	435a      	muls	r2, r3
 800e438:	188b      	adds	r3, r1, r2
 800e43a:	9301      	str	r3, [sp, #4]
 800e43c:	7858      	ldrb	r0, [r3, #1]
 800e43e:	5c8a      	ldrb	r2, [r1, r2]
 800e440:	0200      	lsls	r0, r0, #8
 800e442:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e446:	789a      	ldrb	r2, [r3, #2]
 800e448:	6963      	ldr	r3, [r4, #20]
 800e44a:	4310      	orrs	r0, r2
 800e44c:	4798      	blx	r3
 800e44e:	69e3      	ldr	r3, [r4, #28]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	4798      	blx	r3
 800e454:	6863      	ldr	r3, [r4, #4]
 800e456:	3301      	adds	r3, #1
 800e458:	e7e6      	b.n	800e428 <_DrawLine_RGB+0x3a>
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	b113      	cbz	r3, 800e464 <_DrawLine_RGB+0x76>
 800e45e:	69e3      	ldr	r3, [r4, #28]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	4798      	blx	r3
 800e464:	b002      	add	sp, #8
 800e466:	bd10      	pop	{r4, pc}

0800e468 <_NextPixel_FlushBuffer>:
 800e468:	b530      	push	{r4, r5, lr}
 800e46a:	4c10      	ldr	r4, [pc, #64]	; (800e4ac <_NextPixel_FlushBuffer+0x44>)
 800e46c:	6a22      	ldr	r2, [r4, #32]
 800e46e:	b089      	sub	sp, #36	; 0x24
 800e470:	2101      	movs	r1, #1
 800e472:	428a      	cmp	r2, r1
 800e474:	f04f 0300 	mov.w	r3, #0
 800e478:	9306      	str	r3, [sp, #24]
 800e47a:	9202      	str	r2, [sp, #8]
 800e47c:	bf08      	it	eq
 800e47e:	ab06      	addeq	r3, sp, #24
 800e480:	6962      	ldr	r2, [r4, #20]
 800e482:	9305      	str	r3, [sp, #20]
 800e484:	2500      	movs	r5, #0
 800e486:	9100      	str	r1, [sp, #0]
 800e488:	9101      	str	r1, [sp, #4]
 800e48a:	9503      	str	r5, [sp, #12]
 800e48c:	9204      	str	r2, [sp, #16]
 800e48e:	1d20      	adds	r0, r4, #4
 800e490:	9107      	str	r1, [sp, #28]
 800e492:	2301      	movs	r3, #1
 800e494:	c807      	ldmia	r0, {r0, r1, r2}
 800e496:	f7fe f973 	bl	800c780 <LCD_DrawBitmap>
 800e49a:	6862      	ldr	r2, [r4, #4]
 800e49c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e49e:	62a5      	str	r5, [r4, #40]	; 0x28
 800e4a0:	4413      	add	r3, r2
 800e4a2:	6063      	str	r3, [r4, #4]
 800e4a4:	6963      	ldr	r3, [r4, #20]
 800e4a6:	61a3      	str	r3, [r4, #24]
 800e4a8:	b009      	add	sp, #36	; 0x24
 800e4aa:	bd30      	pop	{r4, r5, pc}
 800e4ac:	2000559c 	.word	0x2000559c

0800e4b0 <_NextPixel_NextLine>:
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	4c06      	ldr	r4, [pc, #24]	; (800e4cc <_NextPixel_NextLine+0x1c>)
 800e4b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4b6:	b10b      	cbz	r3, 800e4bc <_NextPixel_NextLine+0xc>
 800e4b8:	f7ff ffd6 	bl	800e468 <_NextPixel_FlushBuffer>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	60a3      	str	r3, [r4, #8]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ca:	bd10      	pop	{r4, pc}
 800e4cc:	2000559c 	.word	0x2000559c

0800e4d0 <_NextPixel_SetPixel>:
 800e4d0:	4b33      	ldr	r3, [pc, #204]	; (800e5a0 <_NextPixel_SetPixel+0xd0>)
 800e4d2:	69da      	ldr	r2, [r3, #28]
 800e4d4:	2a02      	cmp	r2, #2
 800e4d6:	b570      	push	{r4, r5, r6, lr}
 800e4d8:	d04e      	beq.n	800e578 <_NextPixel_SetPixel+0xa8>
 800e4da:	2a04      	cmp	r2, #4
 800e4dc:	d050      	beq.n	800e580 <_NextPixel_SetPixel+0xb0>
 800e4de:	2a01      	cmp	r2, #1
 800e4e0:	d152      	bne.n	800e588 <_NextPixel_SetPixel+0xb8>
 800e4e2:	6a19      	ldr	r1, [r3, #32]
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	3901      	subs	r1, #1
 800e4e8:	2907      	cmp	r1, #7
 800e4ea:	d84d      	bhi.n	800e588 <_NextPixel_SetPixel+0xb8>
 800e4ec:	e8df f001 	tbb	[pc, r1]
 800e4f0:	264c1504 	.word	0x264c1504
 800e4f4:	404c4c4c 	.word	0x404c4c4c
 800e4f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e4fa:	7816      	ldrb	r6, [r2, #0]
 800e4fc:	4928      	ldr	r1, [pc, #160]	; (800e5a0 <_NextPixel_SetPixel+0xd0>)
 800e4fe:	f1c4 0407 	rsb	r4, r4, #7
 800e502:	2501      	movs	r5, #1
 800e504:	40a5      	lsls	r5, r4
 800e506:	ea26 0505 	bic.w	r5, r6, r5
 800e50a:	fa00 f404 	lsl.w	r4, r0, r4
 800e50e:	ea45 0004 	orr.w	r0, r5, r4
 800e512:	7010      	strb	r0, [r2, #0]
 800e514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e516:	3201      	adds	r2, #1
 800e518:	e020      	b.n	800e55c <_NextPixel_SetPixel+0x8c>
 800e51a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e51c:	7816      	ldrb	r6, [r2, #0]
 800e51e:	4920      	ldr	r1, [pc, #128]	; (800e5a0 <_NextPixel_SetPixel+0xd0>)
 800e520:	f1c4 0406 	rsb	r4, r4, #6
 800e524:	2503      	movs	r5, #3
 800e526:	40a5      	lsls	r5, r4
 800e528:	ea26 0505 	bic.w	r5, r6, r5
 800e52c:	fa00 f404 	lsl.w	r4, r0, r4
 800e530:	ea45 0004 	orr.w	r0, r5, r4
 800e534:	7010      	strb	r0, [r2, #0]
 800e536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e538:	3202      	adds	r2, #2
 800e53a:	e00f      	b.n	800e55c <_NextPixel_SetPixel+0x8c>
 800e53c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e53e:	7816      	ldrb	r6, [r2, #0]
 800e540:	4917      	ldr	r1, [pc, #92]	; (800e5a0 <_NextPixel_SetPixel+0xd0>)
 800e542:	f1c4 0404 	rsb	r4, r4, #4
 800e546:	250f      	movs	r5, #15
 800e548:	40a5      	lsls	r5, r4
 800e54a:	ea26 0505 	bic.w	r5, r6, r5
 800e54e:	fa00 f404 	lsl.w	r4, r0, r4
 800e552:	ea45 0004 	orr.w	r0, r5, r4
 800e556:	7010      	strb	r0, [r2, #0]
 800e558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55a:	3204      	adds	r2, #4
 800e55c:	2a08      	cmp	r2, #8
 800e55e:	d001      	beq.n	800e564 <_NextPixel_SetPixel+0x94>
 800e560:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e562:	e011      	b.n	800e588 <_NextPixel_SetPixel+0xb8>
 800e564:	2200      	movs	r2, #0
 800e566:	62ca      	str	r2, [r1, #44]	; 0x2c
 800e568:	698a      	ldr	r2, [r1, #24]
 800e56a:	3201      	adds	r2, #1
 800e56c:	618a      	str	r2, [r1, #24]
 800e56e:	e00b      	b.n	800e588 <_NextPixel_SetPixel+0xb8>
 800e570:	7010      	strb	r0, [r2, #0]
 800e572:	699a      	ldr	r2, [r3, #24]
 800e574:	3201      	adds	r2, #1
 800e576:	e006      	b.n	800e586 <_NextPixel_SetPixel+0xb6>
 800e578:	699a      	ldr	r2, [r3, #24]
 800e57a:	f822 0b02 	strh.w	r0, [r2], #2
 800e57e:	e002      	b.n	800e586 <_NextPixel_SetPixel+0xb6>
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	f842 0b04 	str.w	r0, [r2], #4
 800e586:	619a      	str	r2, [r3, #24]
 800e588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e58a:	3201      	adds	r2, #1
 800e58c:	629a      	str	r2, [r3, #40]	; 0x28
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	429a      	cmp	r2, r3
 800e592:	d103      	bne.n	800e59c <_NextPixel_SetPixel+0xcc>
 800e594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e598:	f7ff bf66 	b.w	800e468 <_NextPixel_FlushBuffer>
 800e59c:	bd70      	pop	{r4, r5, r6, pc}
 800e59e:	bf00      	nop
 800e5a0:	2000559c 	.word	0x2000559c

0800e5a4 <_NextPixel_End>:
 800e5a4:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <_NextPixel_End+0x20>)
 800e5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	461c      	mov	r4, r3
 800e5ac:	b10a      	cbz	r2, 800e5b2 <_NextPixel_End+0xe>
 800e5ae:	f7ff ff5b 	bl	800e468 <_NextPixel_FlushBuffer>
 800e5b2:	4805      	ldr	r0, [pc, #20]	; (800e5c8 <_NextPixel_End+0x24>)
 800e5b4:	f000 fe00 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800e5b8:	6920      	ldr	r0, [r4, #16]
 800e5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5be:	f000 be27 	b.w	800f210 <GUI_ALLOC_Free>
 800e5c2:	bf00      	nop
 800e5c4:	2000559c 	.word	0x2000559c
 800e5c8:	200055b0 	.word	0x200055b0

0800e5cc <_NextPixel_Start>:
 800e5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d0:	469a      	mov	sl, r3
 800e5d2:	4b1f      	ldr	r3, [pc, #124]	; (800e650 <_NextPixel_Start+0x84>)
 800e5d4:	4c1f      	ldr	r4, [pc, #124]	; (800e654 <_NextPixel_Start+0x88>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	1a12      	subs	r2, r2, r0
 800e5da:	3201      	adds	r2, #1
 800e5dc:	4606      	mov	r6, r0
 800e5de:	7c58      	ldrb	r0, [r3, #17]
 800e5e0:	60e2      	str	r2, [r4, #12]
 800e5e2:	f7fd fe83 	bl	800c2ec <GUI_GetBitsPerPixelEx>
 800e5e6:	2817      	cmp	r0, #23
 800e5e8:	bfc8      	it	gt
 800e5ea:	2020      	movgt	r0, #32
 800e5ec:	2808      	cmp	r0, #8
 800e5ee:	6220      	str	r0, [r4, #32]
 800e5f0:	dd04      	ble.n	800e5fc <_NextPixel_Start+0x30>
 800e5f2:	2810      	cmp	r0, #16
 800e5f4:	bfcc      	ite	gt
 800e5f6:	2504      	movgt	r5, #4
 800e5f8:	2502      	movle	r5, #2
 800e5fa:	e000      	b.n	800e5fe <_NextPixel_Start+0x32>
 800e5fc:	2501      	movs	r5, #1
 800e5fe:	68e3      	ldr	r3, [r4, #12]
 800e600:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e654 <_NextPixel_Start+0x88>
 800e604:	fb03 f805 	mul.w	r8, r3, r5
 800e608:	f000 feea 	bl	800f3e0 <GUI_ALLOC_GetMaxSize>
 800e60c:	4540      	cmp	r0, r8
 800e60e:	bf3a      	itte	cc
 800e610:	fbb0 f0f5 	udivcc	r0, r0, r5
 800e614:	4368      	mulcc	r0, r5
 800e616:	4640      	movcs	r0, r8
 800e618:	fb90 f0f5 	sdiv	r0, r0, r5
 800e61c:	6260      	str	r0, [r4, #36]	; 0x24
 800e61e:	2700      	movs	r7, #0
 800e620:	4640      	mov	r0, r8
 800e622:	62a7      	str	r7, [r4, #40]	; 0x28
 800e624:	6066      	str	r6, [r4, #4]
 800e626:	6026      	str	r6, [r4, #0]
 800e628:	f8c4 a008 	str.w	sl, [r4, #8]
 800e62c:	61e5      	str	r5, [r4, #28]
 800e62e:	62e7      	str	r7, [r4, #44]	; 0x2c
 800e630:	f000 ff80 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 800e634:	6120      	str	r0, [r4, #16]
 800e636:	b140      	cbz	r0, 800e64a <_NextPixel_Start+0x7e>
 800e638:	f000 fdb0 	bl	800f19c <GUI_ALLOC_LockH>
 800e63c:	f8c9 0014 	str.w	r0, [r9, #20]
 800e640:	f8c9 0018 	str.w	r0, [r9, #24]
 800e644:	4638      	mov	r0, r7
 800e646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64a:	2001      	movs	r0, #1
 800e64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e650:	20000084 	.word	0x20000084
 800e654:	2000559c 	.word	0x2000559c

0800e658 <_GetEarlyOut.isra.0>:
 800e658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e65c:	6807      	ldr	r7, [r0, #0]
 800e65e:	680e      	ldr	r6, [r1, #0]
 800e660:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e664:	9c08      	ldr	r4, [sp, #32]
 800e666:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e66a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e66c:	eb07 0906 	add.w	r9, r7, r6
 800e670:	681f      	ldr	r7, [r3, #0]
 800e672:	f8c0 9000 	str.w	r9, [r0]
 800e676:	2f00      	cmp	r7, #0
 800e678:	dd04      	ble.n	800e684 <_GetEarlyOut.isra.0+0x2c>
 800e67a:	3f01      	subs	r7, #1
 800e67c:	6027      	str	r7, [r4, #0]
 800e67e:	f04f 37ff 	mov.w	r7, #4294967295
 800e682:	e005      	b.n	800e690 <_GetEarlyOut.isra.0+0x38>
 800e684:	d004      	beq.n	800e690 <_GetEarlyOut.isra.0+0x38>
 800e686:	427f      	negs	r7, r7
 800e688:	2600      	movs	r6, #0
 800e68a:	601f      	str	r7, [r3, #0]
 800e68c:	6026      	str	r6, [r4, #0]
 800e68e:	2701      	movs	r7, #1
 800e690:	f8c8 7000 	str.w	r7, [r8]
 800e694:	2f00      	cmp	r7, #0
 800e696:	d032      	beq.n	800e6fe <_GetEarlyOut.isra.0+0xa6>
 800e698:	690f      	ldr	r7, [r1, #16]
 800e69a:	694e      	ldr	r6, [r1, #20]
 800e69c:	443e      	add	r6, r7
 800e69e:	681f      	ldr	r7, [r3, #0]
 800e6a0:	1bbe      	subs	r6, r7, r6
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	601e      	str	r6, [r3, #0]
 800e6a6:	dd2a      	ble.n	800e6fe <_GetEarlyOut.isra.0+0xa6>
 800e6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	da08      	bge.n	800e6c2 <_GetEarlyOut.isra.0+0x6a>
 800e6b0:	694b      	ldr	r3, [r1, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	dd0e      	ble.n	800e6d4 <_GetEarlyOut.isra.0+0x7c>
 800e6b6:	fb03 9605 	mla	r6, r3, r5, r9
 800e6ba:	6006      	str	r6, [r0, #0]
 800e6bc:	6820      	ldr	r0, [r4, #0]
 800e6be:	1ac3      	subs	r3, r0, r3
 800e6c0:	e007      	b.n	800e6d2 <_GetEarlyOut.isra.0+0x7a>
 800e6c2:	690b      	ldr	r3, [r1, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dd05      	ble.n	800e6d4 <_GetEarlyOut.isra.0+0x7c>
 800e6c8:	fb03 9605 	mla	r6, r3, r5, r9
 800e6cc:	6006      	str	r6, [r0, #0]
 800e6ce:	6820      	ldr	r0, [r4, #0]
 800e6d0:	4403      	add	r3, r0
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	6888      	ldr	r0, [r1, #8]
 800e6d6:	68cb      	ldr	r3, [r1, #12]
 800e6d8:	4403      	add	r3, r0
 800e6da:	6810      	ldr	r0, [r2, #0]
 800e6dc:	1ac3      	subs	r3, r0, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	dd0c      	ble.n	800e6fe <_GetEarlyOut.isra.0+0xa6>
 800e6e4:	f8dc 2000 	ldr.w	r2, [ip]
 800e6e8:	68cb      	ldr	r3, [r1, #12]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f8cc 3000 	str.w	r3, [ip]
 800e6f0:	684b      	ldr	r3, [r1, #4]
 800e6f2:	1aed      	subs	r5, r5, r3
 800e6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	601d      	str	r5, [r3, #0]
 800e6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	2001      	movs	r0, #1
 800e700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e704 <GUI_BMP__ReadData>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	4604      	mov	r4, r0
 800e708:	460d      	mov	r5, r1
 800e70a:	b10b      	cbz	r3, 800e710 <GUI_BMP__ReadData+0xc>
 800e70c:	2300      	movs	r3, #0
 800e70e:	6043      	str	r3, [r0, #4]
 800e710:	4611      	mov	r1, r2
 800e712:	6826      	ldr	r6, [r4, #0]
 800e714:	68a0      	ldr	r0, [r4, #8]
 800e716:	6863      	ldr	r3, [r4, #4]
 800e718:	462a      	mov	r2, r5
 800e71a:	47b0      	blx	r6
 800e71c:	42a8      	cmp	r0, r5
 800e71e:	d104      	bne.n	800e72a <GUI_BMP__ReadData+0x26>
 800e720:	6863      	ldr	r3, [r4, #4]
 800e722:	441d      	add	r5, r3
 800e724:	6065      	str	r5, [r4, #4]
 800e726:	2000      	movs	r0, #0
 800e728:	bd70      	pop	{r4, r5, r6, pc}
 800e72a:	2001      	movs	r0, #1
 800e72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e730 <GUI_BMP__ReadPalette>:
 800e730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e732:	4606      	mov	r6, r0
 800e734:	460d      	mov	r5, r1
 800e736:	2400      	movs	r4, #0
 800e738:	42ac      	cmp	r4, r5
 800e73a:	da17      	bge.n	800e76c <GUI_BMP__ReadPalette+0x3c>
 800e73c:	2104      	movs	r1, #4
 800e73e:	4630      	mov	r0, r6
 800e740:	eb0d 0201 	add.w	r2, sp, r1
 800e744:	2300      	movs	r3, #0
 800e746:	f7ff ffdd 	bl	800e704 <GUI_BMP__ReadData>
 800e74a:	b988      	cbnz	r0, 800e770 <GUI_BMP__ReadPalette+0x40>
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	4a0a      	ldr	r2, [pc, #40]	; (800e778 <GUI_BMP__ReadPalette+0x48>)
 800e750:	7858      	ldrb	r0, [r3, #1]
 800e752:	6817      	ldr	r7, [r2, #0]
 800e754:	781a      	ldrb	r2, [r3, #0]
 800e756:	789b      	ldrb	r3, [r3, #2]
 800e758:	0200      	lsls	r0, r0, #8
 800e75a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e75e:	4318      	orrs	r0, r3
 800e760:	f7fe f97e 	bl	800ca60 <LCD_Color2Index>
 800e764:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800e768:	3401      	adds	r4, #1
 800e76a:	e7e5      	b.n	800e738 <GUI_BMP__ReadPalette+0x8>
 800e76c:	2000      	movs	r0, #0
 800e76e:	e000      	b.n	800e772 <GUI_BMP__ReadPalette+0x42>
 800e770:	2001      	movs	r0, #1
 800e772:	b003      	add	sp, #12
 800e774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e776:	bf00      	nop
 800e778:	200057dc 	.word	0x200057dc

0800e77c <_ManageBitfields.part.2>:
 800e77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77e:	2300      	movs	r3, #0
 800e780:	2110      	movs	r1, #16
 800e782:	aa01      	add	r2, sp, #4
 800e784:	f7ff ffbe 	bl	800e704 <GUI_BMP__ReadData>
 800e788:	4605      	mov	r5, r0
 800e78a:	bb10      	cbnz	r0, 800e7d2 <_ManageBitfields.part.2+0x56>
 800e78c:	a801      	add	r0, sp, #4
 800e78e:	f7fe fa69 	bl	800cc64 <GUI__Read32>
 800e792:	4c12      	ldr	r4, [pc, #72]	; (800e7dc <_ManageBitfields.part.2+0x60>)
 800e794:	6020      	str	r0, [r4, #0]
 800e796:	a801      	add	r0, sp, #4
 800e798:	f7fe fa64 	bl	800cc64 <GUI__Read32>
 800e79c:	6060      	str	r0, [r4, #4]
 800e79e:	a801      	add	r0, sp, #4
 800e7a0:	f7fe fa60 	bl	800cc64 <GUI__Read32>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	60a0      	str	r0, [r4, #8]
 800e7a8:	f104 0218 	add.w	r2, r4, #24
 800e7ac:	f851 0b0c 	ldr.w	r0, [r1], #12
 800e7b0:	f7ff fe0c 	bl	800e3cc <_GetBitfieldsPara>
 800e7b4:	6860      	ldr	r0, [r4, #4]
 800e7b6:	f104 0110 	add.w	r1, r4, #16
 800e7ba:	f104 021c 	add.w	r2, r4, #28
 800e7be:	f7ff fe05 	bl	800e3cc <_GetBitfieldsPara>
 800e7c2:	68a0      	ldr	r0, [r4, #8]
 800e7c4:	f104 0114 	add.w	r1, r4, #20
 800e7c8:	f104 0220 	add.w	r2, r4, #32
 800e7cc:	f7ff fdfe 	bl	800e3cc <_GetBitfieldsPara>
 800e7d0:	e000      	b.n	800e7d4 <_ManageBitfields.part.2+0x58>
 800e7d2:	2501      	movs	r5, #1
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	b003      	add	sp, #12
 800e7d8:	bd30      	pop	{r4, r5, pc}
 800e7da:	bf00      	nop
 800e7dc:	200055cc 	.word	0x200055cc

0800e7e0 <_Index2ColorBitfields>:
 800e7e0:	4b15      	ldr	r3, [pc, #84]	; (800e838 <_Index2ColorBitfields+0x58>)
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	6919      	ldr	r1, [r3, #16]
 800e7e6:	4002      	ands	r2, r0
 800e7e8:	40ca      	lsrs	r2, r1
 800e7ea:	69d9      	ldr	r1, [r3, #28]
 800e7ec:	b530      	push	{r4, r5, lr}
 800e7ee:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	fa02 f101 	lsl.w	r1, r2, r1
 800e7f8:	3901      	subs	r1, #1
 800e7fa:	fbb5 f5f1 	udiv	r5, r5, r1
 800e7fe:	6899      	ldr	r1, [r3, #8]
 800e800:	695c      	ldr	r4, [r3, #20]
 800e802:	4001      	ands	r1, r0
 800e804:	40e1      	lsrs	r1, r4
 800e806:	6a1c      	ldr	r4, [r3, #32]
 800e808:	fa02 f404 	lsl.w	r4, r2, r4
 800e80c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e810:	3c01      	subs	r4, #1
 800e812:	fbb1 f4f4 	udiv	r4, r1, r4
 800e816:	0424      	lsls	r4, r4, #16
 800e818:	6819      	ldr	r1, [r3, #0]
 800e81a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800e81e:	68dc      	ldr	r4, [r3, #12]
 800e820:	699b      	ldr	r3, [r3, #24]
 800e822:	4001      	ands	r1, r0
 800e824:	40e1      	lsrs	r1, r4
 800e826:	409a      	lsls	r2, r3
 800e828:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800e82c:	3a01      	subs	r2, #1
 800e82e:	fbb1 f0f2 	udiv	r0, r1, r2
 800e832:	4328      	orrs	r0, r5
 800e834:	bd30      	pop	{r4, r5, pc}
 800e836:	bf00      	nop
 800e838:	200055cc 	.word	0x200055cc

0800e83c <_DrawBitmap_RGB>:
 800e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e840:	b09d      	sub	sp, #116	; 0x74
 800e842:	af0a      	add	r7, sp, #40	; 0x28
 800e844:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800e848:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800e84c:	9107      	str	r1, [sp, #28]
 800e84e:	4606      	mov	r6, r0
 800e850:	468a      	mov	sl, r1
 800e852:	4614      	mov	r4, r2
 800e854:	2100      	movs	r1, #0
 800e856:	2218      	movs	r2, #24
 800e858:	4638      	mov	r0, r7
 800e85a:	469b      	mov	fp, r3
 800e85c:	9306      	str	r3, [sp, #24]
 800e85e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800e860:	f003 fe58 	bl	8012514 <memset>
 800e864:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e868:	e88d 0208 	stmia.w	sp, {r3, r9}
 800e86c:	4650      	mov	r0, sl
 800e86e:	4621      	mov	r1, r4
 800e870:	465a      	mov	r2, fp
 800e872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e874:	9702      	str	r7, [sp, #8]
 800e876:	f7ff fd3f 	bl	800e2f8 <_GetClipParam>
 800e87a:	ab07      	add	r3, sp, #28
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	ab12      	add	r3, sp, #72	; 0x48
 800e880:	9301      	str	r3, [sp, #4]
 800e882:	ab08      	add	r3, sp, #32
 800e884:	9302      	str	r3, [sp, #8]
 800e886:	ab09      	add	r3, sp, #36	; 0x24
 800e888:	9303      	str	r3, [sp, #12]
 800e88a:	f8cd 9010 	str.w	r9, [sp, #16]
 800e88e:	1d30      	adds	r0, r6, #4
 800e890:	4639      	mov	r1, r7
 800e892:	aa06      	add	r2, sp, #24
 800e894:	ab26      	add	r3, sp, #152	; 0x98
 800e896:	f7ff fedf 	bl	800e658 <_GetEarlyOut.isra.0>
 800e89a:	b108      	cbz	r0, 800e8a0 <_DrawBitmap_RGB+0x64>
 800e89c:	2400      	movs	r4, #0
 800e89e:	e04e      	b.n	800e93e <_DrawBitmap_RGB+0x102>
 800e8a0:	4b29      	ldr	r3, [pc, #164]	; (800e948 <_DrawBitmap_RGB+0x10c>)
 800e8a2:	4f2a      	ldr	r7, [pc, #168]	; (800e94c <_DrawBitmap_RGB+0x110>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	7c58      	ldrb	r0, [r3, #17]
 800e8a8:	f7fd fd4e 	bl	800c348 <GUI_GetpfColor2IndexEx>
 800e8ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e8ae:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800e950 <_DrawBitmap_RGB+0x114>
 800e8b2:	9015      	str	r0, [sp, #84]	; 0x54
 800e8b4:	42bd      	cmp	r5, r7
 800e8b6:	9316      	str	r3, [sp, #88]	; 0x58
 800e8b8:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800e8bc:	9807      	ldr	r0, [sp, #28]
 800e8be:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e8c0:	9a06      	ldr	r2, [sp, #24]
 800e8c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8c4:	d109      	bne.n	800e8da <_DrawBitmap_RGB+0x9e>
 800e8c6:	4421      	add	r1, r4
 800e8c8:	4402      	add	r2, r0
 800e8ca:	440b      	add	r3, r1
 800e8cc:	f8de 4000 	ldr.w	r4, [lr]
 800e8d0:	3a01      	subs	r2, #1
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	47a0      	blx	r4
 800e8d6:	b148      	cbz	r0, 800e8ec <_DrawBitmap_RGB+0xb0>
 800e8d8:	e01b      	b.n	800e912 <_DrawBitmap_RGB+0xd6>
 800e8da:	440c      	add	r4, r1
 800e8dc:	9419      	str	r4, [sp, #100]	; 0x64
 800e8de:	4402      	add	r2, r0
 800e8e0:	441c      	add	r4, r3
 800e8e2:	3a01      	subs	r2, #1
 800e8e4:	3c01      	subs	r4, #1
 800e8e6:	9018      	str	r0, [sp, #96]	; 0x60
 800e8e8:	921a      	str	r2, [sp, #104]	; 0x68
 800e8ea:	941b      	str	r4, [sp, #108]	; 0x6c
 800e8ec:	9b06      	ldr	r3, [sp, #24]
 800e8ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e8f6:	9311      	str	r3, [sp, #68]	; 0x44
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8fc:	aa10      	add	r2, sp, #64	; 0x40
 800e8fe:	2300      	movs	r3, #0
 800e900:	f7ff ff00 	bl	800e704 <GUI_BMP__ReadData>
 800e904:	4604      	mov	r4, r0
 800e906:	b130      	cbz	r0, 800e916 <_DrawBitmap_RGB+0xda>
 800e908:	42bd      	cmp	r5, r7
 800e90a:	d102      	bne.n	800e912 <_DrawBitmap_RGB+0xd6>
 800e90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	4798      	blx	r3
 800e912:	2401      	movs	r4, #1
 800e914:	e013      	b.n	800e93e <_DrawBitmap_RGB+0x102>
 800e916:	a810      	add	r0, sp, #64	; 0x40
 800e918:	47a8      	blx	r5
 800e91a:	6872      	ldr	r2, [r6, #4]
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	4413      	add	r3, r2
 800e920:	6073      	str	r3, [r6, #4]
 800e922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e924:	9b08      	ldr	r3, [sp, #32]
 800e926:	4413      	add	r3, r2
 800e928:	9312      	str	r3, [sp, #72]	; 0x48
 800e92a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e92c:	3b01      	subs	r3, #1
 800e92e:	9326      	str	r3, [sp, #152]	; 0x98
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e1      	bne.n	800e8f8 <_DrawBitmap_RGB+0xbc>
 800e934:	42bd      	cmp	r5, r7
 800e936:	d1b1      	bne.n	800e89c <_DrawBitmap_RGB+0x60>
 800e938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	4798      	blx	r3
 800e93e:	4620      	mov	r0, r4
 800e940:	b01d      	add	sp, #116	; 0x74
 800e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e946:	bf00      	nop
 800e948:	20000084 	.word	0x20000084
 800e94c:	0800e3ef 	.word	0x0800e3ef
 800e950:	20000098 	.word	0x20000098

0800e954 <_DrawBitmap_16bpp>:
 800e954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e958:	461f      	mov	r7, r3
 800e95a:	b093      	sub	sp, #76	; 0x4c
 800e95c:	ea4f 1807 	mov.w	r8, r7, lsl #4
 800e960:	ac0c      	add	r4, sp, #48	; 0x30
 800e962:	f108 081f 	add.w	r8, r8, #31
 800e966:	4605      	mov	r5, r0
 800e968:	4689      	mov	r9, r1
 800e96a:	9107      	str	r1, [sp, #28]
 800e96c:	4616      	mov	r6, r2
 800e96e:	2100      	movs	r1, #0
 800e970:	2218      	movs	r2, #24
 800e972:	4620      	mov	r0, r4
 800e974:	ea4f 1868 	mov.w	r8, r8, asr #5
 800e978:	9306      	str	r3, [sp, #24]
 800e97a:	f003 fdcb 	bl	8012514 <memset>
 800e97e:	463a      	mov	r2, r7
 800e980:	2310      	movs	r3, #16
 800e982:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800e986:	e88d 0088 	stmia.w	sp, {r3, r7}
 800e98a:	4648      	mov	r0, r9
 800e98c:	4631      	mov	r1, r6
 800e98e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e990:	9402      	str	r4, [sp, #8]
 800e992:	f7ff fcb1 	bl	800e2f8 <_GetClipParam>
 800e996:	ab07      	add	r3, sp, #28
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	ab09      	add	r3, sp, #36	; 0x24
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	ab0a      	add	r3, sp, #40	; 0x28
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	ab0b      	add	r3, sp, #44	; 0x2c
 800e9a4:	9303      	str	r3, [sp, #12]
 800e9a6:	9704      	str	r7, [sp, #16]
 800e9a8:	1d28      	adds	r0, r5, #4
 800e9aa:	4621      	mov	r1, r4
 800e9ac:	aa06      	add	r2, sp, #24
 800e9ae:	ab1a      	add	r3, sp, #104	; 0x68
 800e9b0:	f7ff fe52 	bl	800e658 <_GetEarlyOut.isra.0>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d142      	bne.n	800ea3e <_DrawBitmap_16bpp+0xea>
 800e9b8:	4b23      	ldr	r3, [pc, #140]	; (800ea48 <_DrawBitmap_16bpp+0xf4>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	7c58      	ldrb	r0, [r3, #17]
 800e9be:	f7fd fcbb 	bl	800c338 <LCD_GetpfColor2IndexEx>
 800e9c2:	4607      	mov	r7, r0
 800e9c4:	b908      	cbnz	r0, 800e9ca <_DrawBitmap_16bpp+0x76>
 800e9c6:	2401      	movs	r4, #1
 800e9c8:	e03a      	b.n	800ea40 <_DrawBitmap_16bpp+0xec>
 800e9ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e9cc:	9807      	ldr	r0, [sp, #28]
 800e9ce:	9a06      	ldr	r2, [sp, #24]
 800e9d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e9d2:	4431      	add	r1, r6
 800e9d4:	4e1d      	ldr	r6, [pc, #116]	; (800ea4c <_DrawBitmap_16bpp+0xf8>)
 800e9d6:	4402      	add	r2, r0
 800e9d8:	440b      	add	r3, r1
 800e9da:	6834      	ldr	r4, [r6, #0]
 800e9dc:	3a01      	subs	r2, #1
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	47a0      	blx	r4
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d1ef      	bne.n	800e9c6 <_DrawBitmap_16bpp+0x72>
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e9ea:	aa08      	add	r2, sp, #32
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f7ff fe89 	bl	800e704 <GUI_BMP__ReadData>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d1e6      	bne.n	800e9c6 <_DrawBitmap_16bpp+0x72>
 800e9f8:	4680      	mov	r8, r0
 800e9fa:	9b06      	ldr	r3, [sp, #24]
 800e9fc:	4598      	cmp	r8, r3
 800e9fe:	da0a      	bge.n	800ea16 <_DrawBitmap_16bpp+0xc2>
 800ea00:	a808      	add	r0, sp, #32
 800ea02:	f7fe f927 	bl	800cc54 <GUI__Read16>
 800ea06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea08:	4798      	blx	r3
 800ea0a:	47b8      	blx	r7
 800ea0c:	6873      	ldr	r3, [r6, #4]
 800ea0e:	4798      	blx	r3
 800ea10:	f108 0801 	add.w	r8, r8, #1
 800ea14:	e7f1      	b.n	800e9fa <_DrawBitmap_16bpp+0xa6>
 800ea16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea18:	b10b      	cbz	r3, 800ea1e <_DrawBitmap_16bpp+0xca>
 800ea1a:	68b3      	ldr	r3, [r6, #8]
 800ea1c:	4798      	blx	r3
 800ea1e:	686a      	ldr	r2, [r5, #4]
 800ea20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea22:	4413      	add	r3, r2
 800ea24:	606b      	str	r3, [r5, #4]
 800ea26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea2a:	4413      	add	r3, r2
 800ea2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ea30:	3b01      	subs	r3, #1
 800ea32:	931a      	str	r3, [sp, #104]	; 0x68
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1d6      	bne.n	800e9e6 <_DrawBitmap_16bpp+0x92>
 800ea38:	68f3      	ldr	r3, [r6, #12]
 800ea3a:	4798      	blx	r3
 800ea3c:	e000      	b.n	800ea40 <_DrawBitmap_16bpp+0xec>
 800ea3e:	2400      	movs	r4, #0
 800ea40:	4620      	mov	r0, r4
 800ea42:	b013      	add	sp, #76	; 0x4c
 800ea44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea48:	20000084 	.word	0x20000084
 800ea4c:	20000098 	.word	0x20000098

0800ea50 <GUI_BMP__Init>:
 800ea50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea54:	468b      	mov	fp, r1
 800ea56:	4692      	mov	sl, r2
 800ea58:	4698      	mov	r8, r3
 800ea5a:	2136      	movs	r1, #54	; 0x36
 800ea5c:	aa01      	add	r2, sp, #4
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4605      	mov	r5, r0
 800ea62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ea64:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ea66:	f7ff fe4d 	bl	800e704 <GUI_BMP__ReadData>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d15e      	bne.n	800eb2c <GUI_BMP__Init+0xdc>
 800ea6e:	a801      	add	r0, sp, #4
 800ea70:	f7fe f8f0 	bl	800cc54 <GUI__Read16>
 800ea74:	9b01      	ldr	r3, [sp, #4]
 800ea76:	4681      	mov	r9, r0
 800ea78:	330c      	adds	r3, #12
 800ea7a:	a801      	add	r0, sp, #4
 800ea7c:	9301      	str	r3, [sp, #4]
 800ea7e:	f7fe f8f1 	bl	800cc64 <GUI__Read32>
 800ea82:	4607      	mov	r7, r0
 800ea84:	a801      	add	r0, sp, #4
 800ea86:	f7fe f8ed 	bl	800cc64 <GUI__Read32>
 800ea8a:	f8cb 0000 	str.w	r0, [fp]
 800ea8e:	a801      	add	r0, sp, #4
 800ea90:	f7fe f8e8 	bl	800cc64 <GUI__Read32>
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	f8ca 0000 	str.w	r0, [sl]
 800ea9a:	3302      	adds	r3, #2
 800ea9c:	a801      	add	r0, sp, #4
 800ea9e:	9301      	str	r3, [sp, #4]
 800eaa0:	f7fe f8d8 	bl	800cc54 <GUI__Read16>
 800eaa4:	f8a8 0000 	strh.w	r0, [r8]
 800eaa8:	a801      	add	r0, sp, #4
 800eaaa:	f7fe f8db 	bl	800cc64 <GUI__Read32>
 800eaae:	9b01      	ldr	r3, [sp, #4]
 800eab0:	6030      	str	r0, [r6, #0]
 800eab2:	330c      	adds	r3, #12
 800eab4:	a801      	add	r0, sp, #4
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	f7fe f8d4 	bl	800cc64 <GUI__Read32>
 800eabc:	f8b8 3000 	ldrh.w	r3, [r8]
 800eac0:	2b08      	cmp	r3, #8
 800eac2:	d00f      	beq.n	800eae4 <GUI_BMP__Init+0x94>
 800eac4:	d805      	bhi.n	800ead2 <GUI_BMP__Init+0x82>
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d00a      	beq.n	800eae0 <GUI_BMP__Init+0x90>
 800eaca:	2b04      	cmp	r3, #4
 800eacc:	d12e      	bne.n	800eb2c <GUI_BMP__Init+0xdc>
 800eace:	2310      	movs	r3, #16
 800ead0:	e00c      	b.n	800eaec <GUI_BMP__Init+0x9c>
 800ead2:	2b18      	cmp	r3, #24
 800ead4:	d009      	beq.n	800eaea <GUI_BMP__Init+0x9a>
 800ead6:	2b20      	cmp	r3, #32
 800ead8:	d007      	beq.n	800eaea <GUI_BMP__Init+0x9a>
 800eada:	2b10      	cmp	r3, #16
 800eadc:	d126      	bne.n	800eb2c <GUI_BMP__Init+0xdc>
 800eade:	e004      	b.n	800eaea <GUI_BMP__Init+0x9a>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e003      	b.n	800eaec <GUI_BMP__Init+0x9c>
 800eae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eae8:	e000      	b.n	800eaec <GUI_BMP__Init+0x9c>
 800eaea:	2300      	movs	r3, #0
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	b10b      	cbz	r3, 800eaf6 <GUI_BMP__Init+0xa6>
 800eaf2:	b100      	cbz	r0, 800eaf6 <GUI_BMP__Init+0xa6>
 800eaf4:	6020      	str	r0, [r4, #0]
 800eaf6:	6833      	ldr	r3, [r6, #0]
 800eaf8:	2b03      	cmp	r3, #3
 800eafa:	d105      	bne.n	800eb08 <GUI_BMP__Init+0xb8>
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7ff fe3d 	bl	800e77c <_ManageBitfields.part.2>
 800eb02:	686b      	ldr	r3, [r5, #4]
 800eb04:	3b38      	subs	r3, #56	; 0x38
 800eb06:	e001      	b.n	800eb0c <GUI_BMP__Init+0xbc>
 800eb08:	686b      	ldr	r3, [r5, #4]
 800eb0a:	3b28      	subs	r3, #40	; 0x28
 800eb0c:	441f      	add	r7, r3
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	606f      	str	r7, [r5, #4]
 800eb12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb16:	dc09      	bgt.n	800eb2c <GUI_BMP__Init+0xdc>
 800eb18:	f644 5342 	movw	r3, #19778	; 0x4d42
 800eb1c:	4599      	cmp	r9, r3
 800eb1e:	d105      	bne.n	800eb2c <GUI_BMP__Init+0xdc>
 800eb20:	6830      	ldr	r0, [r6, #0]
 800eb22:	2803      	cmp	r0, #3
 800eb24:	bf94      	ite	ls
 800eb26:	2000      	movls	r0, #0
 800eb28:	2001      	movhi	r0, #1
 800eb2a:	e000      	b.n	800eb2e <GUI_BMP__Init+0xde>
 800eb2c:	2001      	movs	r0, #1
 800eb2e:	b003      	add	sp, #12
 800eb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb34 <GUI_BMP_DrawEx>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	b0a5      	sub	sp, #148	; 0x94
 800eb3a:	461d      	mov	r5, r3
 800eb3c:	ab10      	add	r3, sp, #64	; 0x40
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	ab11      	add	r3, sp, #68	; 0x44
 800eb42:	901b      	str	r0, [sp, #108]	; 0x6c
 800eb44:	911d      	str	r1, [sp, #116]	; 0x74
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	4617      	mov	r7, r2
 800eb4a:	a81b      	add	r0, sp, #108	; 0x6c
 800eb4c:	a90e      	add	r1, sp, #56	; 0x38
 800eb4e:	aa0f      	add	r2, sp, #60	; 0x3c
 800eb50:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800eb54:	f7ff ff7c 	bl	800ea50 <GUI_BMP__Init>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	f040 8229 	bne.w	800efb2 <GUI_BMP_DrawEx+0x47e>
 800eb60:	4b9e      	ldr	r3, [pc, #632]	; (800eddc <GUI_BMP_DrawEx+0x2a8>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800eb66:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800eb68:	eb05 0803 	add.w	r8, r5, r3
 800eb6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb6e:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 800eb72:	4407      	add	r7, r0
 800eb74:	3b01      	subs	r3, #1
 800eb76:	443b      	add	r3, r7
 800eb78:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800eb7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb7e:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800eb82:	3b01      	subs	r3, #1
 800eb84:	4443      	add	r3, r8
 800eb86:	a819      	add	r0, sp, #100	; 0x64
 800eb88:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800eb8c:	f7fa ff9a 	bl	8009ac4 <WM__InitIVRSearch>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	f000 8215 	beq.w	800efc0 <GUI_BMP_DrawEx+0x48c>
 800eb96:	9408      	str	r4, [sp, #32]
 800eb98:	46a1      	mov	r9, r4
 800eb9a:	9a08      	ldr	r2, [sp, #32]
 800eb9c:	b15a      	cbz	r2, 800ebb6 <GUI_BMP_DrawEx+0x82>
 800eb9e:	ab10      	add	r3, sp, #64	; 0x40
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	ab11      	add	r3, sp, #68	; 0x44
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	a81b      	add	r0, sp, #108	; 0x6c
 800eba8:	a90e      	add	r1, sp, #56	; 0x38
 800ebaa:	aa0f      	add	r2, sp, #60	; 0x3c
 800ebac:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800ebb0:	f7ff ff4e 	bl	800ea50 <GUI_BMP__Init>
 800ebb4:	4681      	mov	r9, r0
 800ebb6:	f1b9 0f00 	cmp.w	r9, #0
 800ebba:	f040 81f0 	bne.w	800ef9e <GUI_BMP_DrawEx+0x46a>
 800ebbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebc0:	9307      	str	r3, [sp, #28]
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	f200 81eb 	bhi.w	800ef9e <GUI_BMP_DrawEx+0x46a>
 800ebc8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ebcc:	00a40004 	.word	0x00a40004
 800ebd0:	01cd00a4 	.word	0x01cd00a4
 800ebd4:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800ebd8:	2c08      	cmp	r4, #8
 800ebda:	d012      	beq.n	800ec02 <GUI_BMP_DrawEx+0xce>
 800ebdc:	d805      	bhi.n	800ebea <GUI_BMP_DrawEx+0xb6>
 800ebde:	2c01      	cmp	r4, #1
 800ebe0:	d00f      	beq.n	800ec02 <GUI_BMP_DrawEx+0xce>
 800ebe2:	2c04      	cmp	r4, #4
 800ebe4:	f040 81d9 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ebe8:	e00b      	b.n	800ec02 <GUI_BMP_DrawEx+0xce>
 800ebea:	2c18      	cmp	r4, #24
 800ebec:	d071      	beq.n	800ecd2 <GUI_BMP_DrawEx+0x19e>
 800ebee:	2c20      	cmp	r4, #32
 800ebf0:	f000 8084 	beq.w	800ecfc <GUI_BMP_DrawEx+0x1c8>
 800ebf4:	2c10      	cmp	r4, #16
 800ebf6:	f040 81d0 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ebfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	4b78      	ldr	r3, [pc, #480]	; (800ede0 <GUI_BMP_DrawEx+0x2ac>)
 800ec00:	e1c3      	b.n	800ef8a <GUI_BMP_DrawEx+0x456>
 800ec02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ec06:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec08:	ae1e      	add	r6, sp, #120	; 0x78
 800ec0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec0c:	9712      	str	r7, [sp, #72]	; 0x48
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4630      	mov	r0, r6
 800ec12:	2218      	movs	r2, #24
 800ec14:	9314      	str	r3, [sp, #80]	; 0x50
 800ec16:	f003 fc7d 	bl	8012514 <memset>
 800ec1a:	a81b      	add	r0, sp, #108	; 0x6c
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	f7ff fd87 	bl	800e730 <GUI_BMP__ReadPalette>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	f040 81b9 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ec28:	2c04      	cmp	r4, #4
 800ec2a:	d005      	beq.n	800ec38 <GUI_BMP_DrawEx+0x104>
 800ec2c:	2c08      	cmp	r4, #8
 800ec2e:	d009      	beq.n	800ec44 <GUI_BMP_DrawEx+0x110>
 800ec30:	2c01      	cmp	r4, #1
 800ec32:	d10c      	bne.n	800ec4e <GUI_BMP_DrawEx+0x11a>
 800ec34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ec36:	e001      	b.n	800ec3c <GUI_BMP_DrawEx+0x108>
 800ec38:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ec3a:	00ad      	lsls	r5, r5, #2
 800ec3c:	351f      	adds	r5, #31
 800ec3e:	116d      	asrs	r5, r5, #5
 800ec40:	00ad      	lsls	r5, r5, #2
 800ec42:	e005      	b.n	800ec50 <GUI_BMP_DrawEx+0x11c>
 800ec44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ec46:	3503      	adds	r5, #3
 800ec48:	f025 0503 	bic.w	r5, r5, #3
 800ec4c:	e000      	b.n	800ec50 <GUI_BMP_DrawEx+0x11c>
 800ec4e:	4605      	mov	r5, r0
 800ec50:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ec52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec56:	4641      	mov	r1, r8
 800ec58:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 800ec5c:	f7ff fb4c 	bl	800e2f8 <_GetClipParam>
 800ec60:	ab12      	add	r3, sp, #72	; 0x48
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	ab16      	add	r3, sp, #88	; 0x58
 800ec66:	9301      	str	r3, [sp, #4]
 800ec68:	ab17      	add	r3, sp, #92	; 0x5c
 800ec6a:	9302      	str	r3, [sp, #8]
 800ec6c:	ab18      	add	r3, sp, #96	; 0x60
 800ec6e:	9303      	str	r3, [sp, #12]
 800ec70:	9504      	str	r5, [sp, #16]
 800ec72:	a81c      	add	r0, sp, #112	; 0x70
 800ec74:	4631      	mov	r1, r6
 800ec76:	aa13      	add	r2, sp, #76	; 0x4c
 800ec78:	ab14      	add	r3, sp, #80	; 0x50
 800ec7a:	f7ff fced 	bl	800e658 <_GetEarlyOut.isra.0>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f040 818d 	bne.w	800ef9e <GUI_BMP_DrawEx+0x46a>
 800ec84:	a81b      	add	r0, sp, #108	; 0x6c
 800ec86:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ec88:	aa15      	add	r2, sp, #84	; 0x54
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f7ff fd3a 	bl	800e704 <GUI_BMP__ReadData>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	f040 8182 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ec96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ec98:	9204      	str	r2, [sp, #16]
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	4a51      	ldr	r2, [pc, #324]	; (800ede4 <GUI_BMP_DrawEx+0x2b0>)
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	9303      	str	r3, [sp, #12]
 800eca4:	9402      	str	r4, [sp, #8]
 800eca6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	9205      	str	r2, [sp, #20]
 800ecac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ecae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ecb0:	4441      	add	r1, r8
 800ecb2:	f7fd fd65 	bl	800c780 <LCD_DrawBitmap>
 800ecb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ecb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ecba:	4413      	add	r3, r2
 800ecbc:	931c      	str	r3, [sp, #112]	; 0x70
 800ecbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ecc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecc2:	4413      	add	r3, r2
 800ecc4:	9316      	str	r3, [sp, #88]	; 0x58
 800ecc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	9314      	str	r3, [sp, #80]	; 0x50
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1d9      	bne.n	800ec84 <GUI_BMP_DrawEx+0x150>
 800ecd0:	e165      	b.n	800ef9e <GUI_BMP_DrawEx+0x46a>
 800ecd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecd6:	9200      	str	r2, [sp, #0]
 800ecd8:	435c      	muls	r4, r3
 800ecda:	341f      	adds	r4, #31
 800ecdc:	1164      	asrs	r4, r4, #5
 800ecde:	2203      	movs	r2, #3
 800ece0:	00a4      	lsls	r4, r4, #2
 800ece2:	9202      	str	r2, [sp, #8]
 800ece4:	9401      	str	r4, [sp, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	9203      	str	r2, [sp, #12]
 800ecea:	4a3f      	ldr	r2, [pc, #252]	; (800ede8 <GUI_BMP_DrawEx+0x2b4>)
 800ecec:	9204      	str	r2, [sp, #16]
 800ecee:	a81b      	add	r0, sp, #108	; 0x6c
 800ecf0:	4639      	mov	r1, r7
 800ecf2:	4642      	mov	r2, r8
 800ecf4:	f7ff fda2 	bl	800e83c <_DrawBitmap_RGB>
 800ecf8:	4681      	mov	r9, r0
 800ecfa:	e150      	b.n	800ef9e <GUI_BMP_DrawEx+0x46a>
 800ecfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed00:	9200      	str	r2, [sp, #0]
 800ed02:	009a      	lsls	r2, r3, #2
 800ed04:	9201      	str	r2, [sp, #4]
 800ed06:	2204      	movs	r2, #4
 800ed08:	9202      	str	r2, [sp, #8]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	9203      	str	r2, [sp, #12]
 800ed0e:	4a37      	ldr	r2, [pc, #220]	; (800edec <GUI_BMP_DrawEx+0x2b8>)
 800ed10:	6812      	ldr	r2, [r2, #0]
 800ed12:	e7eb      	b.n	800ecec <GUI_BMP_DrawEx+0x1b8>
 800ed14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed16:	9309      	str	r3, [sp, #36]	; 0x24
 800ed18:	4b30      	ldr	r3, [pc, #192]	; (800eddc <GUI_BMP_DrawEx+0x2a8>)
 800ed1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed22:	a81b      	add	r0, sp, #108	; 0x6c
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed28:	f7ff fd02 	bl	800e730 <GUI_BMP__ReadPalette>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f040 8134 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ed32:	4445      	add	r5, r8
 800ed34:	3d01      	subs	r5, #1
 800ed36:	463c      	mov	r4, r7
 800ed38:	a81b      	add	r0, sp, #108	; 0x6c
 800ed3a:	2102      	movs	r1, #2
 800ed3c:	aa1e      	add	r2, sp, #120	; 0x78
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f7ff fce0 	bl	800e704 <GUI_BMP__ReadData>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	f040 8128 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ed4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	921e      	str	r2, [sp, #120]	; 0x78
 800ed50:	f893 b000 	ldrb.w	fp, [r3]
 800ed54:	785e      	ldrb	r6, [r3, #1]
 800ed56:	f1bb 0f00 	cmp.w	fp, #0
 800ed5a:	f040 80c6 	bne.w	800eeea <GUI_BMP_DrawEx+0x3b6>
 800ed5e:	2e01      	cmp	r6, #1
 800ed60:	d019      	beq.n	800ed96 <GUI_BMP_DrawEx+0x262>
 800ed62:	d302      	bcc.n	800ed6a <GUI_BMP_DrawEx+0x236>
 800ed64:	2e02      	cmp	r6, #2
 800ed66:	d043      	beq.n	800edf0 <GUI_BMP_DrawEx+0x2bc>
 800ed68:	e062      	b.n	800ee30 <GUI_BMP_DrawEx+0x2fc>
 800ed6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed6c:	443a      	add	r2, r7
 800ed6e:	3a01      	subs	r2, #1
 800ed70:	4294      	cmp	r4, r2
 800ed72:	da0a      	bge.n	800ed8a <GUI_BMP_DrawEx+0x256>
 800ed74:	4b1b      	ldr	r3, [pc, #108]	; (800ede4 <GUI_BMP_DrawEx+0x2b0>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6819      	ldr	r1, [r3, #0]
 800ed7a:	4b18      	ldr	r3, [pc, #96]	; (800eddc <GUI_BMP_DrawEx+0x2a8>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed80:	4620      	mov	r0, r4
 800ed82:	6019      	str	r1, [r3, #0]
 800ed84:	4629      	mov	r1, r5
 800ed86:	f7fd fba7 	bl	800c4d8 <LCD_DrawHLine>
 800ed8a:	3d01      	subs	r5, #1
 800ed8c:	4545      	cmp	r5, r8
 800ed8e:	f2c0 8104 	blt.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ed92:	46ba      	mov	sl, r7
 800ed94:	e0e5      	b.n	800ef62 <GUI_BMP_DrawEx+0x42e>
 800ed96:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ed9a:	4e10      	ldr	r6, [pc, #64]	; (800eddc <GUI_BMP_DrawEx+0x2a8>)
 800ed9c:	44ba      	add	sl, r7
 800ed9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eda2:	4554      	cmp	r4, sl
 800eda4:	da0a      	bge.n	800edbc <GUI_BMP_DrawEx+0x288>
 800eda6:	4b0f      	ldr	r3, [pc, #60]	; (800ede4 <GUI_BMP_DrawEx+0x2b0>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	6833      	ldr	r3, [r6, #0]
 800edae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb0:	4620      	mov	r0, r4
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	4629      	mov	r1, r5
 800edb6:	4652      	mov	r2, sl
 800edb8:	f7fd fb8e 	bl	800c4d8 <LCD_DrawHLine>
 800edbc:	4545      	cmp	r5, r8
 800edbe:	f340 80fa 	ble.w	800efb6 <GUI_BMP_DrawEx+0x482>
 800edc2:	4b08      	ldr	r3, [pc, #32]	; (800ede4 <GUI_BMP_DrawEx+0x2b0>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	6833      	ldr	r3, [r6, #0]
 800edca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edcc:	4638      	mov	r0, r7
 800edce:	601a      	str	r2, [r3, #0]
 800edd0:	4641      	mov	r1, r8
 800edd2:	4652      	mov	r2, sl
 800edd4:	1e6b      	subs	r3, r5, #1
 800edd6:	f7fd fbcb 	bl	800c570 <LCD_FillRect>
 800edda:	e0ec      	b.n	800efb6 <GUI_BMP_DrawEx+0x482>
 800eddc:	20000084 	.word	0x20000084
 800ede0:	0800f57d 	.word	0x0800f57d
 800ede4:	200057dc 	.word	0x200057dc
 800ede8:	0800e3ef 	.word	0x0800e3ef
 800edec:	20000094 	.word	0x20000094
 800edf0:	a81b      	add	r0, sp, #108	; 0x6c
 800edf2:	4631      	mov	r1, r6
 800edf4:	aa1e      	add	r2, sp, #120	; 0x78
 800edf6:	465b      	mov	r3, fp
 800edf8:	f7ff fc84 	bl	800e704 <GUI_BMP__ReadData>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	f040 80cc 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ee02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ee04:	1c5a      	adds	r2, r3, #1
 800ee06:	921e      	str	r2, [sp, #120]	; 0x78
 800ee08:	f893 a000 	ldrb.w	sl, [r3]
 800ee0c:	785e      	ldrb	r6, [r3, #1]
 800ee0e:	4b6e      	ldr	r3, [pc, #440]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	4b6d      	ldr	r3, [pc, #436]	; (800efcc <GUI_BMP_DrawEx+0x498>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee1a:	1bae      	subs	r6, r5, r6
 800ee1c:	44a2      	add	sl, r4
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	4620      	mov	r0, r4
 800ee22:	462b      	mov	r3, r5
 800ee24:	4631      	mov	r1, r6
 800ee26:	4652      	mov	r2, sl
 800ee28:	f7fd fba2 	bl	800c570 <LCD_FillRect>
 800ee2c:	4635      	mov	r5, r6
 800ee2e:	e098      	b.n	800ef62 <GUI_BMP_DrawEx+0x42e>
 800ee30:	9a07      	ldr	r2, [sp, #28]
 800ee32:	2a02      	cmp	r2, #2
 800ee34:	d12a      	bne.n	800ee8c <GUI_BMP_DrawEx+0x358>
 800ee36:	1c73      	adds	r3, r6, #1
 800ee38:	ea4f 0a63 	mov.w	sl, r3, asr #1
 800ee3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ee3e:	a81b      	add	r0, sp, #108	; 0x6c
 800ee40:	4651      	mov	r1, sl
 800ee42:	aa1e      	add	r2, sp, #120	; 0x78
 800ee44:	465b      	mov	r3, fp
 800ee46:	f7ff fc5d 	bl	800e704 <GUI_BMP__ReadData>
 800ee4a:	4684      	mov	ip, r0
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	f040 80a4 	bne.w	800ef9a <GUI_BMP_DrawEx+0x466>
 800ee52:	2304      	movs	r3, #4
 800ee54:	9302      	str	r3, [sp, #8]
 800ee56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ee58:	9304      	str	r3, [sp, #16]
 800ee5a:	f04f 0b01 	mov.w	fp, #1
 800ee5e:	4b5a      	ldr	r3, [pc, #360]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800ee60:	f8cd a00c 	str.w	sl, [sp, #12]
 800ee64:	f8cd b000 	str.w	fp, [sp]
 800ee68:	f8cd b004 	str.w	fp, [sp, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	9305      	str	r3, [sp, #20]
 800ee70:	4632      	mov	r2, r6
 800ee72:	4620      	mov	r0, r4
 800ee74:	4629      	mov	r1, r5
 800ee76:	465b      	mov	r3, fp
 800ee78:	f8cd c018 	str.w	ip, [sp, #24]
 800ee7c:	f7fd fc80 	bl	800c780 <LCD_DrawBitmap>
 800ee80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee82:	eb04 0a06 	add.w	sl, r4, r6
 800ee86:	f012 0f02 	tst.w	r2, #2
 800ee8a:	e022      	b.n	800eed2 <GUI_BMP_DrawEx+0x39e>
 800ee8c:	a81b      	add	r0, sp, #108	; 0x6c
 800ee8e:	4631      	mov	r1, r6
 800ee90:	aa1e      	add	r2, sp, #120	; 0x78
 800ee92:	465b      	mov	r3, fp
 800ee94:	f7ff fc36 	bl	800e704 <GUI_BMP__ReadData>
 800ee98:	4684      	mov	ip, r0
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d17d      	bne.n	800ef9a <GUI_BMP_DrawEx+0x466>
 800ee9e:	2308      	movs	r3, #8
 800eea0:	9302      	str	r3, [sp, #8]
 800eea2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eea4:	9304      	str	r3, [sp, #16]
 800eea6:	f04f 0b01 	mov.w	fp, #1
 800eeaa:	4b47      	ldr	r3, [pc, #284]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800eeac:	f8cd b000 	str.w	fp, [sp]
 800eeb0:	f8cd b004 	str.w	fp, [sp, #4]
 800eeb4:	9603      	str	r6, [sp, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	9305      	str	r3, [sp, #20]
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	4632      	mov	r2, r6
 800eec0:	465b      	mov	r3, fp
 800eec2:	f8cd c018 	str.w	ip, [sp, #24]
 800eec6:	eb04 0a06 	add.w	sl, r4, r6
 800eeca:	f7fd fc59 	bl	800c780 <LCD_DrawBitmap>
 800eece:	f016 0f01 	tst.w	r6, #1
 800eed2:	f8dd c018 	ldr.w	ip, [sp, #24]
 800eed6:	d044      	beq.n	800ef62 <GUI_BMP_DrawEx+0x42e>
 800eed8:	a81b      	add	r0, sp, #108	; 0x6c
 800eeda:	4659      	mov	r1, fp
 800eedc:	aa1e      	add	r2, sp, #120	; 0x78
 800eede:	4663      	mov	r3, ip
 800eee0:	f7ff fc10 	bl	800e704 <GUI_BMP__ReadData>
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d03c      	beq.n	800ef62 <GUI_BMP_DrawEx+0x42e>
 800eee8:	e057      	b.n	800ef9a <GUI_BMP_DrawEx+0x466>
 800eeea:	9b07      	ldr	r3, [sp, #28]
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d128      	bne.n	800ef42 <GUI_BMP_DrawEx+0x40e>
 800eef0:	f006 030f 	and.w	r3, r6, #15
 800eef4:	0936      	lsrs	r6, r6, #4
 800eef6:	42b3      	cmp	r3, r6
 800eef8:	b21b      	sxth	r3, r3
 800eefa:	d003      	beq.n	800ef04 <GUI_BMP_DrawEx+0x3d0>
 800eefc:	00b6      	lsls	r6, r6, #2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	4682      	mov	sl, r0
 800ef02:	e004      	b.n	800ef0e <GUI_BMP_DrawEx+0x3da>
 800ef04:	4a30      	ldr	r2, [pc, #192]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800ef06:	6812      	ldr	r2, [r2, #0]
 800ef08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ef0c:	e01d      	b.n	800ef4a <GUI_BMP_DrawEx+0x416>
 800ef0e:	45da      	cmp	sl, fp
 800ef10:	eb0a 0004 	add.w	r0, sl, r4
 800ef14:	da12      	bge.n	800ef3c <GUI_BMP_DrawEx+0x408>
 800ef16:	4a2d      	ldr	r2, [pc, #180]	; (800efcc <GUI_BMP_DrawEx+0x498>)
 800ef18:	492b      	ldr	r1, [pc, #172]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800ef1a:	6812      	ldr	r2, [r2, #0]
 800ef1c:	6809      	ldr	r1, [r1, #0]
 800ef1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ef20:	f01a 0f01 	tst.w	sl, #1
 800ef24:	bf14      	ite	ne
 800ef26:	58c9      	ldrne	r1, [r1, r3]
 800ef28:	5989      	ldreq	r1, [r1, r6]
 800ef2a:	6011      	str	r1, [r2, #0]
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	9306      	str	r3, [sp, #24]
 800ef30:	f10a 0a01 	add.w	sl, sl, #1
 800ef34:	f7fd faa2 	bl	800c47c <LCD_DrawPixel>
 800ef38:	9b06      	ldr	r3, [sp, #24]
 800ef3a:	e7e8      	b.n	800ef0e <GUI_BMP_DrawEx+0x3da>
 800ef3c:	eb04 0a0b 	add.w	sl, r4, fp
 800ef40:	e00f      	b.n	800ef62 <GUI_BMP_DrawEx+0x42e>
 800ef42:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <GUI_BMP_DrawEx+0x494>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800ef4a:	4b20      	ldr	r3, [pc, #128]	; (800efcc <GUI_BMP_DrawEx+0x498>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef50:	eb04 0a0b 	add.w	sl, r4, fp
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	4620      	mov	r0, r4
 800ef58:	4629      	mov	r1, r5
 800ef5a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ef5e:	f7fd fabb 	bl	800c4d8 <LCD_DrawHLine>
 800ef62:	4654      	mov	r4, sl
 800ef64:	e6e8      	b.n	800ed38 <GUI_BMP_DrawEx+0x204>
 800ef66:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800ef6a:	2b10      	cmp	r3, #16
 800ef6c:	d00a      	beq.n	800ef84 <GUI_BMP_DrawEx+0x450>
 800ef6e:	2b20      	cmp	r3, #32
 800ef70:	d113      	bne.n	800ef9a <GUI_BMP_DrawEx+0x466>
 800ef72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef76:	9200      	str	r2, [sp, #0]
 800ef78:	009a      	lsls	r2, r3, #2
 800ef7a:	9201      	str	r2, [sp, #4]
 800ef7c:	2204      	movs	r2, #4
 800ef7e:	9202      	str	r2, [sp, #8]
 800ef80:	4a13      	ldr	r2, [pc, #76]	; (800efd0 <GUI_BMP_DrawEx+0x49c>)
 800ef82:	e6b1      	b.n	800ece8 <GUI_BMP_DrawEx+0x1b4>
 800ef84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef86:	9300      	str	r3, [sp, #0]
 800ef88:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <GUI_BMP_DrawEx+0x49c>)
 800ef8a:	9301      	str	r3, [sp, #4]
 800ef8c:	a81b      	add	r0, sp, #108	; 0x6c
 800ef8e:	4639      	mov	r1, r7
 800ef90:	4642      	mov	r2, r8
 800ef92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef94:	f7ff fcde 	bl	800e954 <_DrawBitmap_16bpp>
 800ef98:	e6ae      	b.n	800ecf8 <GUI_BMP_DrawEx+0x1c4>
 800ef9a:	f04f 0901 	mov.w	r9, #1
 800ef9e:	f7fa fccf 	bl	8009940 <WM__GetNextIVR>
 800efa2:	9a08      	ldr	r2, [sp, #32]
 800efa4:	3201      	adds	r2, #1
 800efa6:	9208      	str	r2, [sp, #32]
 800efa8:	2800      	cmp	r0, #0
 800efaa:	f47f adf6 	bne.w	800eb9a <GUI_BMP_DrawEx+0x66>
 800efae:	4648      	mov	r0, r9
 800efb0:	e006      	b.n	800efc0 <GUI_BMP_DrawEx+0x48c>
 800efb2:	2001      	movs	r0, #1
 800efb4:	e004      	b.n	800efc0 <GUI_BMP_DrawEx+0x48c>
 800efb6:	6833      	ldr	r3, [r6, #0]
 800efb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	e7ee      	b.n	800ef9e <GUI_BMP_DrawEx+0x46a>
 800efc0:	b025      	add	sp, #148	; 0x94
 800efc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc6:	bf00      	nop
 800efc8:	200057dc 	.word	0x200057dc
 800efcc:	20000084 	.word	0x20000084
 800efd0:	0800e7e1 	.word	0x0800e7e1

0800efd4 <_PushFreeBlock>:
 800efd4:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <_PushFreeBlock+0x20>)
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800efda:	3201      	adds	r2, #1
 800efdc:	b510      	push	{r4, lr}
 800efde:	605a      	str	r2, [r3, #4]
 800efe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efe2:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800efe6:	6061      	str	r1, [r4, #4]
 800efe8:	2100      	movs	r1, #0
 800efea:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800efee:	6258      	str	r0, [r3, #36]	; 0x24
 800eff0:	bd10      	pop	{r4, pc}
 800eff2:	bf00      	nop
 800eff4:	200056ec 	.word	0x200056ec

0800eff8 <_RemoveFreeBlock>:
 800eff8:	b510      	push	{r4, lr}
 800effa:	6842      	ldr	r2, [r0, #4]
 800effc:	230f      	movs	r3, #15
 800effe:	490d      	ldr	r1, [pc, #52]	; (800f034 <_RemoveFreeBlock+0x3c>)
 800f000:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800f004:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800f006:	42a2      	cmp	r2, r4
 800f008:	d203      	bcs.n	800f012 <_RemoveFreeBlock+0x1a>
 800f00a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f00e:	d2f6      	bcs.n	800effe <_RemoveFreeBlock+0x6>
 800f010:	bd10      	pop	{r4, pc}
 800f012:	2b0f      	cmp	r3, #15
 800f014:	d80c      	bhi.n	800f030 <_RemoveFreeBlock+0x38>
 800f016:	680c      	ldr	r4, [r1, #0]
 800f018:	1aa2      	subs	r2, r4, r2
 800f01a:	600a      	str	r2, [r1, #0]
 800f01c:	6882      	ldr	r2, [r0, #8]
 800f01e:	68c0      	ldr	r0, [r0, #12]
 800f020:	b102      	cbz	r2, 800f024 <_RemoveFreeBlock+0x2c>
 800f022:	6050      	str	r0, [r2, #4]
 800f024:	b108      	cbz	r0, 800f02a <_RemoveFreeBlock+0x32>
 800f026:	6002      	str	r2, [r0, #0]
 800f028:	bd10      	pop	{r4, pc}
 800f02a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f02e:	645a      	str	r2, [r3, #68]	; 0x44
 800f030:	bd10      	pop	{r4, pc}
 800f032:	bf00      	nop
 800f034:	200056ec 	.word	0x200056ec

0800f038 <_AddFreeMemory>:
 800f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03a:	4e26      	ldr	r6, [pc, #152]	; (800f0d4 <_AddFreeMemory+0x9c>)
 800f03c:	68f3      	ldr	r3, [r6, #12]
 800f03e:	1e5a      	subs	r2, r3, #1
 800f040:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800f042:	4605      	mov	r5, r0
 800f044:	4413      	add	r3, r2
 800f046:	1808      	adds	r0, r1, r0
 800f048:	4298      	cmp	r0, r3
 800f04a:	460c      	mov	r4, r1
 800f04c:	d805      	bhi.n	800f05a <_AddFreeMemory+0x22>
 800f04e:	594b      	ldr	r3, [r1, r5]
 800f050:	b91b      	cbnz	r3, 800f05a <_AddFreeMemory+0x22>
 800f052:	6843      	ldr	r3, [r0, #4]
 800f054:	441d      	add	r5, r3
 800f056:	f7ff ffcf 	bl	800eff8 <_RemoveFreeBlock>
 800f05a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800f05c:	429c      	cmp	r4, r3
 800f05e:	d90a      	bls.n	800f076 <_AddFreeMemory+0x3e>
 800f060:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800f064:	1be7      	subs	r7, r4, r7
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	b92b      	cbnz	r3, 800f076 <_AddFreeMemory+0x3e>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4638      	mov	r0, r7
 800f06e:	441d      	add	r5, r3
 800f070:	f7ff ffc2 	bl	800eff8 <_RemoveFreeBlock>
 800f074:	463c      	mov	r4, r7
 800f076:	230f      	movs	r3, #15
 800f078:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800f07c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f07e:	4295      	cmp	r5, r2
 800f080:	d203      	bcs.n	800f08a <_AddFreeMemory+0x52>
 800f082:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f086:	d2f7      	bcs.n	800f078 <_AddFreeMemory+0x40>
 800f088:	e022      	b.n	800f0d0 <_AddFreeMemory+0x98>
 800f08a:	2b0f      	cmp	r3, #15
 800f08c:	d820      	bhi.n	800f0d0 <_AddFreeMemory+0x98>
 800f08e:	3308      	adds	r3, #8
 800f090:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800f094:	1961      	adds	r1, r4, r5
 800f096:	6852      	ldr	r2, [r2, #4]
 800f098:	60a2      	str	r2, [r4, #8]
 800f09a:	2000      	movs	r0, #0
 800f09c:	e884 0021 	stmia.w	r4, {r0, r5}
 800f0a0:	6124      	str	r4, [r4, #16]
 800f0a2:	f841 5c04 	str.w	r5, [r1, #-4]
 800f0a6:	f104 0108 	add.w	r1, r4, #8
 800f0aa:	b102      	cbz	r2, 800f0ae <_AddFreeMemory+0x76>
 800f0ac:	6051      	str	r1, [r2, #4]
 800f0ae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f0b2:	60e0      	str	r0, [r4, #12]
 800f0b4:	6059      	str	r1, [r3, #4]
 800f0b6:	6833      	ldr	r3, [r6, #0]
 800f0b8:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800f0bc:	4a05      	ldr	r2, [pc, #20]	; (800f0d4 <_AddFreeMemory+0x9c>)
 800f0be:	442b      	add	r3, r5
 800f0c0:	6033      	str	r3, [r6, #0]
 800f0c2:	b929      	cbnz	r1, 800f0d0 <_AddFreeMemory+0x98>
 800f0c4:	68d1      	ldr	r1, [r2, #12]
 800f0c6:	1acb      	subs	r3, r1, r3
 800f0c8:	6891      	ldr	r1, [r2, #8]
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	bf38      	it	cc
 800f0ce:	6093      	strcc	r3, [r2, #8]
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d4:	200056ec 	.word	0x200056ec

0800f0d8 <_RemoveHoles>:
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <_RemoveHoles+0x98>)
 800f0da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0de:	68da      	ldr	r2, [r3, #12]
 800f0e0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800f0e2:	3a01      	subs	r2, #1
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	eb02 0904 	add.w	r9, r2, r4
 800f0ea:	469b      	mov	fp, r3
 800f0ec:	e894 0028 	ldmia.w	r4, {r3, r5}
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d133      	bne.n	800f15c <_RemoveHoles+0x84>
 800f0f4:	eb04 0805 	add.w	r8, r4, r5
 800f0f8:	45c8      	cmp	r8, r9
 800f0fa:	d22f      	bcs.n	800f15c <_RemoveHoles+0x84>
 800f0fc:	f854 c005 	ldr.w	ip, [r4, r5]
 800f100:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800f104:	f1bc 0f00 	cmp.w	ip, #0
 800f108:	d028      	beq.n	800f15c <_RemoveHoles+0x84>
 800f10a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800f10e:	4f18      	ldr	r7, [pc, #96]	; (800f170 <_RemoveHoles+0x98>)
 800f110:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d121      	bne.n	800f15c <_RemoveHoles+0x84>
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	4620      	mov	r0, r4
 800f11c:	e88d 1008 	stmia.w	sp, {r3, ip}
 800f120:	f7ff ff6a 	bl	800eff8 <_RemoveFreeBlock>
 800f124:	f8d8 1000 	ldr.w	r1, [r8]
 800f128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f12a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f12e:	4620      	mov	r0, r4
 800f130:	6054      	str	r4, [r2, #4]
 800f132:	4641      	mov	r1, r8
 800f134:	4632      	mov	r2, r6
 800f136:	f003 f9d3 	bl	80124e0 <memmove>
 800f13a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800f13e:	459c      	cmp	ip, r3
 800f140:	d102      	bne.n	800f148 <_RemoveHoles+0x70>
 800f142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f144:	1b5b      	subs	r3, r3, r5
 800f146:	637b      	str	r3, [r7, #52]	; 0x34
 800f148:	4628      	mov	r0, r5
 800f14a:	19a1      	adds	r1, r4, r6
 800f14c:	f7ff ff74 	bl	800f038 <_AddFreeMemory>
 800f150:	f1ba 0f00 	cmp.w	sl, #0
 800f154:	d001      	beq.n	800f15a <_RemoveHoles+0x82>
 800f156:	4582      	cmp	sl, r0
 800f158:	d905      	bls.n	800f166 <_RemoveHoles+0x8e>
 800f15a:	4635      	mov	r5, r6
 800f15c:	442c      	add	r4, r5
 800f15e:	454c      	cmp	r4, r9
 800f160:	d3c4      	bcc.n	800f0ec <_RemoveHoles+0x14>
 800f162:	2001      	movs	r0, #1
 800f164:	e000      	b.n	800f168 <_RemoveHoles+0x90>
 800f166:	2000      	movs	r0, #0
 800f168:	b003      	add	sp, #12
 800f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16e:	bf00      	nop
 800f170:	200056ec 	.word	0x200056ec

0800f174 <GUI_ALLOC_FreeFixedBlock>:
 800f174:	b128      	cbz	r0, 800f182 <GUI_ALLOC_FreeFixedBlock+0xe>
 800f176:	4a03      	ldr	r2, [pc, #12]	; (800f184 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800f178:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f17a:	6003      	str	r3, [r0, #0]
 800f17c:	b103      	cbz	r3, 800f180 <GUI_ALLOC_FreeFixedBlock+0xc>
 800f17e:	6058      	str	r0, [r3, #4]
 800f180:	63d0      	str	r0, [r2, #60]	; 0x3c
 800f182:	4770      	bx	lr
 800f184:	200056ec 	.word	0x200056ec

0800f188 <GUI_ALLOC_h2p>:
 800f188:	4b03      	ldr	r3, [pc, #12]	; (800f198 <GUI_ALLOC_h2p+0x10>)
 800f18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f18c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f190:	6840      	ldr	r0, [r0, #4]
 800f192:	3008      	adds	r0, #8
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	200056ec 	.word	0x200056ec

0800f19c <GUI_ALLOC_LockH>:
 800f19c:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <GUI_ALLOC_LockH+0x18>)
 800f19e:	69d9      	ldr	r1, [r3, #28]
 800f1a0:	3101      	adds	r1, #1
 800f1a2:	61d9      	str	r1, [r3, #28]
 800f1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a6:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800f1aa:	3101      	adds	r1, #1
 800f1ac:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800f1b0:	f7ff bfea 	b.w	800f188 <GUI_ALLOC_h2p>
 800f1b4:	200056ec 	.word	0x200056ec

0800f1b8 <GUI_ALLOC_UnlockH>:
 800f1b8:	b530      	push	{r4, r5, lr}
 800f1ba:	6802      	ldr	r2, [r0, #0]
 800f1bc:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <GUI_ALLOC_UnlockH+0x2c>)
 800f1be:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800f1c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1c4:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800f1c8:	2c01      	cmp	r4, #1
 800f1ca:	d903      	bls.n	800f1d4 <GUI_ALLOC_UnlockH+0x1c>
 800f1cc:	69dd      	ldr	r5, [r3, #28]
 800f1ce:	b10d      	cbz	r5, 800f1d4 <GUI_ALLOC_UnlockH+0x1c>
 800f1d0:	3d01      	subs	r5, #1
 800f1d2:	61dd      	str	r5, [r3, #28]
 800f1d4:	3c01      	subs	r4, #1
 800f1d6:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	6003      	str	r3, [r0, #0]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	bd30      	pop	{r4, r5, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200056ec 	.word	0x200056ec

0800f1e8 <GUI_ALLOC_AssignMemory>:
 800f1e8:	4b02      	ldr	r3, [pc, #8]	; (800f1f4 <GUI_ALLOC_AssignMemory+0xc>)
 800f1ea:	f021 0103 	bic.w	r1, r1, #3
 800f1ee:	6018      	str	r0, [r3, #0]
 800f1f0:	6059      	str	r1, [r3, #4]
 800f1f2:	4770      	bx	lr
 800f1f4:	200055f0 	.word	0x200055f0

0800f1f8 <GUI_ALLOC_GetSize>:
 800f1f8:	b130      	cbz	r0, 800f208 <GUI_ALLOC_GetSize+0x10>
 800f1fa:	4b04      	ldr	r3, [pc, #16]	; (800f20c <GUI_ALLOC_GetSize+0x14>)
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f202:	6843      	ldr	r3, [r0, #4]
 800f204:	6858      	ldr	r0, [r3, #4]
 800f206:	380c      	subs	r0, #12
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	200056ec 	.word	0x200056ec

0800f210 <GUI_ALLOC_Free>:
 800f210:	b510      	push	{r4, lr}
 800f212:	4604      	mov	r4, r0
 800f214:	b160      	cbz	r0, 800f230 <GUI_ALLOC_Free+0x20>
 800f216:	4b07      	ldr	r3, [pc, #28]	; (800f234 <GUI_ALLOC_Free+0x24>)
 800f218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f21a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f21e:	6859      	ldr	r1, [r3, #4]
 800f220:	6848      	ldr	r0, [r1, #4]
 800f222:	f7ff ff09 	bl	800f038 <_AddFreeMemory>
 800f226:	4620      	mov	r0, r4
 800f228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f22c:	f7ff bed2 	b.w	800efd4 <_PushFreeBlock>
 800f230:	bd10      	pop	{r4, pc}
 800f232:	bf00      	nop
 800f234:	200056ec 	.word	0x200056ec

0800f238 <_EnlargeBlocks>:
 800f238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23c:	4c23      	ldr	r4, [pc, #140]	; (800f2cc <_EnlargeBlocks+0x94>)
 800f23e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f240:	b93b      	cbnz	r3, 800f252 <_EnlargeBlocks+0x1a>
 800f242:	4b23      	ldr	r3, [pc, #140]	; (800f2d0 <_EnlargeBlocks+0x98>)
 800f244:	689d      	ldr	r5, [r3, #8]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	3508      	adds	r5, #8
 800f24a:	fbb3 f5f5 	udiv	r5, r3, r5
 800f24e:	3502      	adds	r5, #2
 800f250:	e003      	b.n	800f25a <_EnlargeBlocks+0x22>
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	1d1d      	adds	r5, r3, #4
 800f256:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800f25a:	00e8      	lsls	r0, r5, #3
 800f25c:	f000 f8f4 	bl	800f448 <_Alloc>
 800f260:	4680      	mov	r8, r0
 800f262:	b368      	cbz	r0, 800f2c0 <_EnlargeBlocks+0x88>
 800f264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f266:	6922      	ldr	r2, [r4, #16]
 800f268:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f26a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800f26e:	00d2      	lsls	r2, r2, #3
 800f270:	685e      	ldr	r6, [r3, #4]
 800f272:	4b18      	ldr	r3, [pc, #96]	; (800f2d4 <_EnlargeBlocks+0x9c>)
 800f274:	3608      	adds	r6, #8
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4630      	mov	r0, r6
 800f27a:	4798      	blx	r3
 800f27c:	6922      	ldr	r2, [r4, #16]
 800f27e:	6366      	str	r6, [r4, #52]	; 0x34
 800f280:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800f284:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800f288:	3104      	adds	r1, #4
 800f28a:	4613      	mov	r3, r2
 800f28c:	1e68      	subs	r0, r5, #1
 800f28e:	4283      	cmp	r3, r0
 800f290:	f101 0108 	add.w	r1, r1, #8
 800f294:	d203      	bcs.n	800f29e <_EnlargeBlocks+0x66>
 800f296:	3301      	adds	r3, #1
 800f298:	f841 3c08 	str.w	r3, [r1, #-8]
 800f29c:	e7f6      	b.n	800f28c <_EnlargeBlocks+0x54>
 800f29e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f2a2:	2600      	movs	r6, #0
 800f2a4:	605e      	str	r6, [r3, #4]
 800f2a6:	6863      	ldr	r3, [r4, #4]
 800f2a8:	6262      	str	r2, [r4, #36]	; 0x24
 800f2aa:	1a9b      	subs	r3, r3, r2
 800f2ac:	442b      	add	r3, r5
 800f2ae:	6063      	str	r3, [r4, #4]
 800f2b0:	6125      	str	r5, [r4, #16]
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	b13f      	cbz	r7, 800f2c6 <_EnlargeBlocks+0x8e>
 800f2b6:	f7ff ffab 	bl	800f210 <GUI_ALLOC_Free>
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ca:	bf00      	nop
 800f2cc:	200056ec 	.word	0x200056ec
 800f2d0:	200055f0 	.word	0x200055f0
 800f2d4:	20000074 	.word	0x20000074

0800f2d8 <_InitOnce>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4916      	ldr	r1, [pc, #88]	; (800f334 <_InitOnce+0x5c>)
 800f2dc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800f2e0:	bb3b      	cbnz	r3, 800f332 <_InitOnce+0x5a>
 800f2e2:	4a15      	ldr	r2, [pc, #84]	; (800f338 <_InitOnce+0x60>)
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800f2ea:	6893      	ldr	r3, [r2, #8]
 800f2ec:	b913      	cbnz	r3, 800f2f4 <_InitOnce+0x1c>
 800f2ee:	6853      	ldr	r3, [r2, #4]
 800f2f0:	089b      	lsrs	r3, r3, #2
 800f2f2:	6093      	str	r3, [r2, #8]
 800f2f4:	235a      	movs	r3, #90	; 0x5a
 800f2f6:	620b      	str	r3, [r1, #32]
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	2510      	movs	r5, #16
 800f2fc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800f300:	409d      	lsls	r5, r3
 800f302:	3301      	adds	r3, #1
 800f304:	2b10      	cmp	r3, #16
 800f306:	4c0b      	ldr	r4, [pc, #44]	; (800f334 <_InitOnce+0x5c>)
 800f308:	6405      	str	r5, [r0, #64]	; 0x40
 800f30a:	d1f6      	bne.n	800f2fa <_InitOnce+0x22>
 800f30c:	6850      	ldr	r0, [r2, #4]
 800f30e:	6811      	ldr	r1, [r2, #0]
 800f310:	63a1      	str	r1, [r4, #56]	; 0x38
 800f312:	2302      	movs	r3, #2
 800f314:	6123      	str	r3, [r4, #16]
 800f316:	f1a0 0314 	sub.w	r3, r0, #20
 800f31a:	440b      	add	r3, r1
 800f31c:	2501      	movs	r5, #1
 800f31e:	6363      	str	r3, [r4, #52]	; 0x34
 800f320:	60e0      	str	r0, [r4, #12]
 800f322:	605d      	str	r5, [r3, #4]
 800f324:	6265      	str	r5, [r4, #36]	; 0x24
 800f326:	6065      	str	r5, [r4, #4]
 800f328:	f7ff fe86 	bl	800f038 <_AddFreeMemory>
 800f32c:	f7ff ff84 	bl	800f238 <_EnlargeBlocks>
 800f330:	6325      	str	r5, [r4, #48]	; 0x30
 800f332:	bd38      	pop	{r3, r4, r5, pc}
 800f334:	200056ec 	.word	0x200056ec
 800f338:	200055f0 	.word	0x200055f0

0800f33c <GUI_ALLOC_GetFixedBlock>:
 800f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f340:	4605      	mov	r5, r0
 800f342:	4e26      	ldr	r6, [pc, #152]	; (800f3dc <GUI_ALLOC_GetFixedBlock+0xa0>)
 800f344:	3503      	adds	r5, #3
 800f346:	f7ff ffc7 	bl	800f2d8 <_InitOnce>
 800f34a:	f025 0503 	bic.w	r5, r5, #3
 800f34e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800f350:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800f352:	3504      	adds	r5, #4
 800f354:	429d      	cmp	r5, r3
 800f356:	bf38      	it	cc
 800f358:	461d      	movcc	r5, r3
 800f35a:	4614      	mov	r4, r2
 800f35c:	b12c      	cbz	r4, 800f36a <GUI_ALLOC_GetFixedBlock+0x2e>
 800f35e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f362:	42ab      	cmp	r3, r5
 800f364:	d02c      	beq.n	800f3c0 <GUI_ALLOC_GetFixedBlock+0x84>
 800f366:	6824      	ldr	r4, [r4, #0]
 800f368:	e7f8      	b.n	800f35c <GUI_ALLOC_GetFixedBlock+0x20>
 800f36a:	68f3      	ldr	r3, [r6, #12]
 800f36c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800f36e:	eb02 0803 	add.w	r8, r2, r3
 800f372:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f376:	ebc7 0708 	rsb	r7, r7, r8
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	b133      	cbz	r3, 800f38c <GUI_ALLOC_GetFixedBlock+0x50>
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff feaa 	bl	800f0d8 <_RemoveHoles>
 800f384:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800f388:	ebc7 0708 	rsb	r7, r7, r8
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	bb13      	cbnz	r3, 800f3d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	42ab      	cmp	r3, r5
 800f394:	db1f      	blt.n	800f3d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f396:	4638      	mov	r0, r7
 800f398:	1d1c      	adds	r4, r3, #4
 800f39a:	f7ff fe2d 	bl	800eff8 <_RemoveFreeBlock>
 800f39e:	68f3      	ldr	r3, [r6, #12]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	1b5b      	subs	r3, r3, r5
 800f3a4:	60f3      	str	r3, [r6, #12]
 800f3a6:	6973      	ldr	r3, [r6, #20]
 800f3a8:	1b64      	subs	r4, r4, r5
 800f3aa:	442b      	add	r3, r5
 800f3ac:	1b40      	subs	r0, r0, r5
 800f3ae:	443c      	add	r4, r7
 800f3b0:	6173      	str	r3, [r6, #20]
 800f3b2:	d002      	beq.n	800f3ba <GUI_ALLOC_GetFixedBlock+0x7e>
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	f7ff fe3f 	bl	800f038 <_AddFreeMemory>
 800f3ba:	f844 5c04 	str.w	r5, [r4, #-4]
 800f3be:	e00a      	b.n	800f3d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	b10b      	cbz	r3, 800f3c8 <GUI_ALLOC_GetFixedBlock+0x8c>
 800f3c4:	6861      	ldr	r1, [r4, #4]
 800f3c6:	6059      	str	r1, [r3, #4]
 800f3c8:	6861      	ldr	r1, [r4, #4]
 800f3ca:	b101      	cbz	r1, 800f3ce <GUI_ALLOC_GetFixedBlock+0x92>
 800f3cc:	600b      	str	r3, [r1, #0]
 800f3ce:	42a2      	cmp	r2, r4
 800f3d0:	d101      	bne.n	800f3d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3dc:	200056ec 	.word	0x200056ec

0800f3e0 <GUI_ALLOC_GetMaxSize>:
 800f3e0:	b508      	push	{r3, lr}
 800f3e2:	f7ff ff79 	bl	800f2d8 <_InitOnce>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	4b0b      	ldr	r3, [pc, #44]	; (800f418 <GUI_ALLOC_GetMaxSize+0x38>)
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f3f0:	b113      	cbz	r3, 800f3f8 <GUI_ALLOC_GetMaxSize+0x18>
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	e00b      	b.n	800f410 <GUI_ALLOC_GetMaxSize+0x30>
 800f3f8:	3a08      	subs	r2, #8
 800f3fa:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800f3fe:	d1f3      	bne.n	800f3e8 <GUI_ALLOC_GetMaxSize+0x8>
 800f400:	e7f8      	b.n	800f3f4 <GUI_ALLOC_GetMaxSize+0x14>
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	4290      	cmp	r0, r2
 800f408:	bf38      	it	cc
 800f40a:	4610      	movcc	r0, r2
 800f40c:	b113      	cbz	r3, 800f414 <GUI_ALLOC_GetMaxSize+0x34>
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1f6      	bne.n	800f402 <GUI_ALLOC_GetMaxSize+0x22>
 800f414:	380c      	subs	r0, #12
 800f416:	bd08      	pop	{r3, pc}
 800f418:	200056ec 	.word	0x200056ec

0800f41c <GUI_ALLOC_RequestSize>:
 800f41c:	b508      	push	{r3, lr}
 800f41e:	f7ff ffdf 	bl	800f3e0 <GUI_ALLOC_GetMaxSize>
 800f422:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800f426:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f42a:	4a06      	ldr	r2, [pc, #24]	; (800f444 <GUI_ALLOC_RequestSize+0x28>)
 800f42c:	d904      	bls.n	800f438 <GUI_ALLOC_RequestSize+0x1c>
 800f42e:	fb90 f0f3 	sdiv	r0, r0, r3
 800f432:	6a13      	ldr	r3, [r2, #32]
 800f434:	4358      	muls	r0, r3
 800f436:	bd08      	pop	{r3, pc}
 800f438:	6a12      	ldr	r2, [r2, #32]
 800f43a:	4350      	muls	r0, r2
 800f43c:	fbb0 f0f3 	udiv	r0, r0, r3
 800f440:	bd08      	pop	{r3, pc}
 800f442:	bf00      	nop
 800f444:	200056ec 	.word	0x200056ec

0800f448 <_Alloc>:
 800f448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f44c:	4d38      	ldr	r5, [pc, #224]	; (800f530 <_Alloc+0xe8>)
 800f44e:	4604      	mov	r4, r0
 800f450:	f7ff ff42 	bl	800f2d8 <_InitOnce>
 800f454:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800f456:	682b      	ldr	r3, [r5, #0]
 800f458:	42bc      	cmp	r4, r7
 800f45a:	bf24      	itt	cs
 800f45c:	1ce7      	addcs	r7, r4, #3
 800f45e:	f027 0703 	biccs.w	r7, r7, #3
 800f462:	370c      	adds	r7, #12
 800f464:	429f      	cmp	r7, r3
 800f466:	4c32      	ldr	r4, [pc, #200]	; (800f530 <_Alloc+0xe8>)
 800f468:	d83e      	bhi.n	800f4e8 <_Alloc+0xa0>
 800f46a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f46c:	6862      	ldr	r2, [r4, #4]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d90f      	bls.n	800f492 <_Alloc+0x4a>
 800f472:	686b      	ldr	r3, [r5, #4]
 800f474:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f476:	3b01      	subs	r3, #1
 800f478:	606b      	str	r3, [r5, #4]
 800f47a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f47c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800f480:	eb03 0209 	add.w	r2, r3, r9
 800f484:	6852      	ldr	r2, [r2, #4]
 800f486:	626a      	str	r2, [r5, #36]	; 0x24
 800f488:	2201      	movs	r2, #1
 800f48a:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800f48e:	b956      	cbnz	r6, 800f4a6 <_Alloc+0x5e>
 800f490:	e02a      	b.n	800f4e8 <_Alloc+0xa0>
 800f492:	3b01      	subs	r3, #1
 800f494:	6323      	str	r3, [r4, #48]	; 0x30
 800f496:	f7ff fecf 	bl	800f238 <_EnlargeBlocks>
 800f49a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f49c:	3301      	adds	r3, #1
 800f49e:	6323      	str	r3, [r4, #48]	; 0x30
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d0e6      	beq.n	800f472 <_Alloc+0x2a>
 800f4a4:	e020      	b.n	800f4e8 <_Alloc+0xa0>
 800f4a6:	230f      	movs	r3, #15
 800f4a8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f4ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f4ae:	4297      	cmp	r7, r2
 800f4b0:	d20c      	bcs.n	800f4cc <_Alloc+0x84>
 800f4b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f4b6:	d2f7      	bcs.n	800f4a8 <_Alloc+0x60>
 800f4b8:	e008      	b.n	800f4cc <_Alloc+0x84>
 800f4ba:	6894      	ldr	r4, [r2, #8]
 800f4bc:	b12c      	cbz	r4, 800f4ca <_Alloc+0x82>
 800f4be:	6862      	ldr	r2, [r4, #4]
 800f4c0:	4297      	cmp	r7, r2
 800f4c2:	d914      	bls.n	800f4ee <_Alloc+0xa6>
 800f4c4:	68a2      	ldr	r2, [r4, #8]
 800f4c6:	2a00      	cmp	r2, #0
 800f4c8:	d1f7      	bne.n	800f4ba <_Alloc+0x72>
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	2b0f      	cmp	r3, #15
 800f4ce:	d803      	bhi.n	800f4d8 <_Alloc+0x90>
 800f4d0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800f4d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f4d6:	e7f6      	b.n	800f4c6 <_Alloc+0x7e>
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f7ff fdfd 	bl	800f0d8 <_RemoveHoles>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d0e1      	beq.n	800f4a6 <_Alloc+0x5e>
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff fd76 	bl	800efd4 <_PushFreeBlock>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f4f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800f4f4:	ebc7 0208 	rsb	r2, r7, r8
 800f4f8:	330c      	adds	r3, #12
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	bf38      	it	cc
 800f500:	4647      	movcc	r7, r8
 800f502:	f7ff fd79 	bl	800eff8 <_RemoveFreeBlock>
 800f506:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f508:	444b      	add	r3, r9
 800f50a:	19e1      	adds	r1, r4, r7
 800f50c:	605c      	str	r4, [r3, #4]
 800f50e:	45b8      	cmp	r8, r7
 800f510:	f04f 0300 	mov.w	r3, #0
 800f514:	e884 00c0 	stmia.w	r4, {r6, r7}
 800f518:	60a3      	str	r3, [r4, #8]
 800f51a:	6124      	str	r4, [r4, #16]
 800f51c:	f841 7c04 	str.w	r7, [r1, #-4]
 800f520:	dd03      	ble.n	800f52a <_Alloc+0xe2>
 800f522:	ebc7 0008 	rsb	r0, r7, r8
 800f526:	f7ff fd87 	bl	800f038 <_AddFreeMemory>
 800f52a:	4630      	mov	r0, r6
 800f52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f530:	200056ec 	.word	0x200056ec

0800f534 <GUI_ALLOC_AllocNoInit>:
 800f534:	b108      	cbz	r0, 800f53a <GUI_ALLOC_AllocNoInit+0x6>
 800f536:	f7ff bf87 	b.w	800f448 <_Alloc>
 800f53a:	4770      	bx	lr

0800f53c <GUI_ALLOC_FreePtr>:
 800f53c:	b510      	push	{r4, lr}
 800f53e:	4604      	mov	r4, r0
 800f540:	6800      	ldr	r0, [r0, #0]
 800f542:	f7ff fe65 	bl	800f210 <GUI_ALLOC_Free>
 800f546:	2300      	movs	r3, #0
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	bd10      	pop	{r4, pc}

0800f54c <GUI_ALLOC_AllocZero>:
 800f54c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f54e:	4605      	mov	r5, r0
 800f550:	f7ff fff0 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 800f554:	4606      	mov	r6, r0
 800f556:	b160      	cbz	r0, 800f572 <GUI_ALLOC_AllocZero+0x26>
 800f558:	f7ff fe20 	bl	800f19c <GUI_ALLOC_LockH>
 800f55c:	ac02      	add	r4, sp, #8
 800f55e:	4b06      	ldr	r3, [pc, #24]	; (800f578 <GUI_ALLOC_AllocZero+0x2c>)
 800f560:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2100      	movs	r1, #0
 800f568:	462a      	mov	r2, r5
 800f56a:	4798      	blx	r3
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7ff fe23 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f572:	4630      	mov	r0, r6
 800f574:	b002      	add	sp, #8
 800f576:	bd70      	pop	{r4, r5, r6, pc}
 800f578:	20000070 	.word	0x20000070

0800f57c <LCD_Index2Color_M555>:
 800f57c:	4b07      	ldr	r3, [pc, #28]	; (800f59c <LCD_Index2Color_M555+0x20>)
 800f57e:	f000 021f 	and.w	r2, r0, #31
 800f582:	5c99      	ldrb	r1, [r3, r2]
 800f584:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800f588:	f3c0 1044 	ubfx	r0, r0, #5, #5
 800f58c:	5c9a      	ldrb	r2, [r3, r2]
 800f58e:	5c18      	ldrb	r0, [r3, r0]
 800f590:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800f594:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	08015b9a 	.word	0x08015b9a

0800f5a0 <LCD_Index2Color_888>:
 800f5a0:	4770      	bx	lr

0800f5a2 <LCD_Index2Color_8888>:
 800f5a2:	4770      	bx	lr

0800f5a4 <_Color2Index_8888>:
 800f5a4:	4770      	bx	lr

0800f5a6 <_GetIndexMask_8888>:
 800f5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5aa:	4770      	bx	lr

0800f5ac <_Color2IndexBulk>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	f850 4b04 	ldr.w	r4, [r0], #4
 800f5b2:	600c      	str	r4, [r1, #0]
 800f5b4:	3a01      	subs	r2, #1
 800f5b6:	4419      	add	r1, r3
 800f5b8:	d1f9      	bne.n	800f5ae <_Color2IndexBulk+0x2>
 800f5ba:	bd10      	pop	{r4, pc}

0800f5bc <_Index2ColorBulk>:
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	6804      	ldr	r4, [r0, #0]
 800f5c0:	f841 4b04 	str.w	r4, [r1], #4
 800f5c4:	3a01      	subs	r2, #1
 800f5c6:	4418      	add	r0, r3
 800f5c8:	d1f9      	bne.n	800f5be <_Index2ColorBulk+0x2>
 800f5ca:	bd10      	pop	{r4, pc}

0800f5cc <LCD_Index2Color_565>:
 800f5cc:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800f5d0:	4a06      	ldr	r2, [pc, #24]	; (800f5ec <LCD_Index2Color_565+0x20>)
 800f5d2:	5cd1      	ldrb	r1, [r2, r3]
 800f5d4:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <LCD_Index2Color_565+0x24>)
 800f5d6:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800f5da:	f000 001f 	and.w	r0, r0, #31
 800f5de:	5c9a      	ldrb	r2, [r3, r2]
 800f5e0:	5c18      	ldrb	r0, [r3, r0]
 800f5e2:	0412      	lsls	r2, r2, #16
 800f5e4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800f5e8:	4410      	add	r0, r2
 800f5ea:	4770      	bx	lr
 800f5ec:	08015bba 	.word	0x08015bba
 800f5f0:	08015b9a 	.word	0x08015b9a

0800f5f4 <_Color2Index_565>:
 800f5f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f5f8:	4a06      	ldr	r2, [pc, #24]	; (800f614 <_Color2Index_565+0x20>)
 800f5fa:	5cd1      	ldrb	r1, [r2, r3]
 800f5fc:	4b06      	ldr	r3, [pc, #24]	; (800f618 <_Color2Index_565+0x24>)
 800f5fe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f602:	b2c0      	uxtb	r0, r0
 800f604:	5c9a      	ldrb	r2, [r3, r2]
 800f606:	5c18      	ldrb	r0, [r3, r0]
 800f608:	02d2      	lsls	r2, r2, #11
 800f60a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800f60e:	4410      	add	r0, r2
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	08015bfa 	.word	0x08015bfa
 800f618:	08015a9a 	.word	0x08015a9a

0800f61c <_GetIndexMask_565>:
 800f61c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f620:	4770      	bx	lr
	...

0800f624 <_Color2IndexBulk>:
 800f624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f626:	f850 4b04 	ldr.w	r4, [r0], #4
 800f62a:	4e0a      	ldr	r6, [pc, #40]	; (800f654 <_Color2IndexBulk+0x30>)
 800f62c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800f630:	3a01      	subs	r2, #1
 800f632:	5d77      	ldrb	r7, [r6, r5]
 800f634:	4d08      	ldr	r5, [pc, #32]	; (800f658 <_Color2IndexBulk+0x34>)
 800f636:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800f63a:	b2e4      	uxtb	r4, r4
 800f63c:	5dae      	ldrb	r6, [r5, r6]
 800f63e:	5d2c      	ldrb	r4, [r5, r4]
 800f640:	ea4f 26c6 	mov.w	r6, r6, lsl #11
 800f644:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800f648:	4434      	add	r4, r6
 800f64a:	800c      	strh	r4, [r1, #0]
 800f64c:	4419      	add	r1, r3
 800f64e:	d1ea      	bne.n	800f626 <_Color2IndexBulk+0x2>
 800f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f652:	bf00      	nop
 800f654:	08015bfa 	.word	0x08015bfa
 800f658:	08015a9a 	.word	0x08015a9a

0800f65c <_Index2ColorBulk>:
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	1e54      	subs	r4, r2, #1
 800f660:	fb03 0004 	mla	r0, r3, r4, r0
 800f664:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800f668:	3c01      	subs	r4, #1
 800f66a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f66e:	8805      	ldrh	r5, [r0, #0]
 800f670:	4c0a      	ldr	r4, [pc, #40]	; (800f69c <_Index2ColorBulk+0x40>)
 800f672:	0aee      	lsrs	r6, r5, #11
 800f674:	f005 071f 	and.w	r7, r5, #31
 800f678:	5da6      	ldrb	r6, [r4, r6]
 800f67a:	5de4      	ldrb	r4, [r4, r7]
 800f67c:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800f680:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800f684:	4e06      	ldr	r6, [pc, #24]	; (800f6a0 <_Index2ColorBulk+0x44>)
 800f686:	5d75      	ldrb	r5, [r6, r5]
 800f688:	3a01      	subs	r2, #1
 800f68a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800f68e:	f841 4904 	str.w	r4, [r1], #-4
 800f692:	ebc3 0000 	rsb	r0, r3, r0
 800f696:	d1ea      	bne.n	800f66e <_Index2ColorBulk+0x12>
 800f698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f69a:	bf00      	nop
 800f69c:	08015b9a 	.word	0x08015b9a
 800f6a0:	08015bba 	.word	0x08015bba

0800f6a4 <WIDGET__GetInsideRect>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	460d      	mov	r5, r1
 800f6aa:	f7f9 fe55 	bl	8009358 <WM__GetClientRectWin>
 800f6ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6ba:	f7fd bae2 	b.w	800cc82 <GUI__ReduceRect>
	...

0800f6c0 <WIDGET__Init>:
 800f6c0:	4b02      	ldr	r3, [pc, #8]	; (800f6cc <WIDGET__Init+0xc>)
 800f6c2:	8642      	strh	r2, [r0, #50]	; 0x32
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f6c8:	8601      	strh	r1, [r0, #48]	; 0x30
 800f6ca:	4770      	bx	lr
 800f6cc:	200000a8 	.word	0x200000a8

0800f6d0 <WIDGET_SetState>:
 800f6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	f7ff fd61 	bl	800f19c <GUI_ALLOC_LockH>
 800f6da:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f6dc:	9001      	str	r0, [sp, #4]
 800f6de:	4294      	cmp	r4, r2
 800f6e0:	d003      	beq.n	800f6ea <WIDGET_SetState+0x1a>
 800f6e2:	8644      	strh	r4, [r0, #50]	; 0x32
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f7f9 ff81 	bl	80095ec <WM_InvalidateWindow>
 800f6ea:	a801      	add	r0, sp, #4
 800f6ec:	f7ff fd64 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f6f0:	b003      	add	sp, #12
 800f6f2:	bd30      	pop	{r4, r5, pc}

0800f6f4 <WIDGET_OrState>:
 800f6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	b178      	cbz	r0, 800f71c <WIDGET_OrState+0x28>
 800f6fc:	f7ff fd4e 	bl	800f19c <GUI_ALLOC_LockH>
 800f700:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800f702:	9001      	str	r0, [sp, #4]
 800f704:	ea04 0102 	and.w	r1, r4, r2
 800f708:	428c      	cmp	r4, r1
 800f70a:	d004      	beq.n	800f716 <WIDGET_OrState+0x22>
 800f70c:	4314      	orrs	r4, r2
 800f70e:	8644      	strh	r4, [r0, #50]	; 0x32
 800f710:	4628      	mov	r0, r5
 800f712:	f7f9 ff6b 	bl	80095ec <WM_InvalidateWindow>
 800f716:	a801      	add	r0, sp, #4
 800f718:	f7ff fd4e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f71c:	b003      	add	sp, #12
 800f71e:	bd30      	pop	{r4, r5, pc}

0800f720 <WIDGET_HandleActive>:
 800f720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f722:	460d      	mov	r5, r1
 800f724:	b085      	sub	sp, #20
 800f726:	4606      	mov	r6, r0
 800f728:	2800      	cmp	r0, #0
 800f72a:	f000 8095 	beq.w	800f858 <WIDGET_HandleActive+0x138>
 800f72e:	f7ff fd35 	bl	800f19c <GUI_ALLOC_LockH>
 800f732:	682b      	ldr	r3, [r5, #0]
 800f734:	9002      	str	r0, [sp, #8]
 800f736:	2b16      	cmp	r3, #22
 800f738:	d054      	beq.n	800f7e4 <WIDGET_HandleActive+0xc4>
 800f73a:	dc0c      	bgt.n	800f756 <WIDGET_HandleActive+0x36>
 800f73c:	2b11      	cmp	r3, #17
 800f73e:	d033      	beq.n	800f7a8 <WIDGET_HandleActive+0x88>
 800f740:	dc02      	bgt.n	800f748 <WIDGET_HandleActive+0x28>
 800f742:	2b0d      	cmp	r3, #13
 800f744:	d040      	beq.n	800f7c8 <WIDGET_HandleActive+0xa8>
 800f746:	e080      	b.n	800f84a <WIDGET_HandleActive+0x12a>
 800f748:	2b14      	cmp	r3, #20
 800f74a:	d079      	beq.n	800f840 <WIDGET_HandleActive+0x120>
 800f74c:	2b15      	cmp	r3, #21
 800f74e:	d17c      	bne.n	800f84a <WIDGET_HandleActive+0x12a>
 800f750:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800f754:	e072      	b.n	800f83c <WIDGET_HandleActive+0x11c>
 800f756:	2b1f      	cmp	r3, #31
 800f758:	d06d      	beq.n	800f836 <WIDGET_HandleActive+0x116>
 800f75a:	dc02      	bgt.n	800f762 <WIDGET_HandleActive+0x42>
 800f75c:	2b1e      	cmp	r3, #30
 800f75e:	d044      	beq.n	800f7ea <WIDGET_HandleActive+0xca>
 800f760:	e073      	b.n	800f84a <WIDGET_HandleActive+0x12a>
 800f762:	2b31      	cmp	r3, #49	; 0x31
 800f764:	d01e      	beq.n	800f7a4 <WIDGET_HandleActive+0x84>
 800f766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f76a:	d16e      	bne.n	800f84a <WIDGET_HandleActive+0x12a>
 800f76c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f76e:	6819      	ldr	r1, [r3, #0]
 800f770:	68eb      	ldr	r3, [r5, #12]
 800f772:	62c3      	str	r3, [r0, #44]	; 0x2c
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	a802      	add	r0, sp, #8
 800f778:	1acd      	subs	r5, r1, r3
 800f77a:	f7ff fd1d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f77e:	4630      	mov	r0, r6
 800f780:	f7ff fd0c 	bl	800f19c <GUI_ALLOC_LockH>
 800f784:	ac04      	add	r4, sp, #16
 800f786:	4269      	negs	r1, r5
 800f788:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f78c:	460a      	mov	r2, r1
 800f78e:	462b      	mov	r3, r5
 800f790:	9500      	str	r5, [sp, #0]
 800f792:	f7f8 fced 	bl	8008170 <WM__UpdateChildPositions>
 800f796:	4620      	mov	r0, r4
 800f798:	f7ff fd0e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7f9 ff25 	bl	80095ec <WM_InvalidateWindow>
 800f7a2:	e050      	b.n	800f846 <WIDGET_HandleActive+0x126>
 800f7a4:	2400      	movs	r4, #0
 800f7a6:	e041      	b.n	800f82c <WIDGET_HandleActive+0x10c>
 800f7a8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f7aa:	06d9      	lsls	r1, r3, #27
 800f7ac:	d54d      	bpl.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7ae:	68eb      	ldr	r3, [r5, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d04a      	beq.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7b4:	7a1b      	ldrb	r3, [r3, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d047      	beq.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7ba:	a802      	add	r0, sp, #8
 800f7bc:	f7ff fcfc 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	f7f9 f8f7 	bl	80089b4 <WM_SetFocus>
 800f7c6:	e040      	b.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7c8:	68eb      	ldr	r3, [r5, #12]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d03c      	beq.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7d0:	7a1b      	ldrb	r3, [r3, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d039      	beq.n	800f84a <WIDGET_HandleActive+0x12a>
 800f7d6:	a802      	add	r0, sp, #8
 800f7d8:	f7ff fcee 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f7dc:	4630      	mov	r0, r6
 800f7de:	f7f9 f9e1 	bl	8008ba4 <WM_BringToTop>
 800f7e2:	e030      	b.n	800f846 <WIDGET_HandleActive+0x126>
 800f7e4:	68eb      	ldr	r3, [r5, #12]
 800f7e6:	8603      	strh	r3, [r0, #48]	; 0x30
 800f7e8:	e02d      	b.n	800f846 <WIDGET_HandleActive+0x126>
 800f7ea:	68eb      	ldr	r3, [r5, #12]
 800f7ec:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d108      	bne.n	800f804 <WIDGET_HandleActive+0xe4>
 800f7f2:	06ca      	lsls	r2, r1, #27
 800f7f4:	d50d      	bpl.n	800f812 <WIDGET_HandleActive+0xf2>
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f041 0101 	orr.w	r1, r1, #1
 800f7fc:	f7ff ff68 	bl	800f6d0 <WIDGET_SetState>
 800f800:	2708      	movs	r7, #8
 800f802:	e008      	b.n	800f816 <WIDGET_HandleActive+0xf6>
 800f804:	f021 0101 	bic.w	r1, r1, #1
 800f808:	4630      	mov	r0, r6
 800f80a:	f7ff ff61 	bl	800f6d0 <WIDGET_SetState>
 800f80e:	2709      	movs	r7, #9
 800f810:	e001      	b.n	800f816 <WIDGET_HandleActive+0xf6>
 800f812:	f04f 37ff 	mov.w	r7, #4294967295
 800f816:	a802      	add	r0, sp, #8
 800f818:	f7ff fcce 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f81c:	1c7b      	adds	r3, r7, #1
 800f81e:	f04f 0400 	mov.w	r4, #0
 800f822:	d005      	beq.n	800f830 <WIDGET_HandleActive+0x110>
 800f824:	4630      	mov	r0, r6
 800f826:	4639      	mov	r1, r7
 800f828:	f7f9 f8b9 	bl	800899e <WM_NotifyParent>
 800f82c:	60ec      	str	r4, [r5, #12]
 800f82e:	e00d      	b.n	800f84c <WIDGET_HandleActive+0x12c>
 800f830:	2301      	movs	r3, #1
 800f832:	60eb      	str	r3, [r5, #12]
 800f834:	e00a      	b.n	800f84c <WIDGET_HandleActive+0x12c>
 800f836:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f838:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f83c:	60eb      	str	r3, [r5, #12]
 800f83e:	e002      	b.n	800f846 <WIDGET_HandleActive+0x126>
 800f840:	68e9      	ldr	r1, [r5, #12]
 800f842:	f7ff ff2f 	bl	800f6a4 <WIDGET__GetInsideRect>
 800f846:	2400      	movs	r4, #0
 800f848:	e000      	b.n	800f84c <WIDGET_HandleActive+0x12c>
 800f84a:	2401      	movs	r4, #1
 800f84c:	9b02      	ldr	r3, [sp, #8]
 800f84e:	b123      	cbz	r3, 800f85a <WIDGET_HandleActive+0x13a>
 800f850:	a802      	add	r0, sp, #8
 800f852:	f7ff fcb1 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f856:	e000      	b.n	800f85a <WIDGET_HandleActive+0x13a>
 800f858:	2401      	movs	r4, #1
 800f85a:	4620      	mov	r0, r4
 800f85c:	b005      	add	sp, #20
 800f85e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f860 <FRAMEWIN_DrawSkinFlex>:
 800f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f864:	4604      	mov	r4, r0
 800f866:	b090      	sub	sp, #64	; 0x40
 800f868:	6800      	ldr	r0, [r0, #0]
 800f86a:	4d9b      	ldr	r5, [pc, #620]	; (800fad8 <FRAMEWIN_DrawSkinFlex+0x278>)
 800f86c:	f7f8 fb70 	bl	8007f50 <FRAMEWIN_GetActive>
 800f870:	4b9a      	ldr	r3, [pc, #616]	; (800fadc <FRAMEWIN_DrawSkinFlex+0x27c>)
 800f872:	6866      	ldr	r6, [r4, #4]
 800f874:	2800      	cmp	r0, #0
 800f876:	bf18      	it	ne
 800f878:	461d      	movne	r5, r3
 800f87a:	2e1c      	cmp	r6, #28
 800f87c:	f200 81a6 	bhi.w	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800f880:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f884:	01a40191 	.word	0x01a40191
 800f888:	01a401a4 	.word	0x01a401a4
 800f88c:	012e01a4 	.word	0x012e01a4
 800f890:	01a401a4 	.word	0x01a401a4
 800f894:	01a401a4 	.word	0x01a401a4
 800f898:	002701a4 	.word	0x002701a4
 800f89c:	01a401a4 	.word	0x01a401a4
 800f8a0:	01a4017e 	.word	0x01a4017e
 800f8a4:	01a401a4 	.word	0x01a401a4
 800f8a8:	01a40145 	.word	0x01a40145
 800f8ac:	002301a4 	.word	0x002301a4
 800f8b0:	001f001d 	.word	0x001f001d
 800f8b4:	01a40021 	.word	0x01a40021
 800f8b8:	01a401a4 	.word	0x01a401a4
 800f8bc:	0025      	.short	0x0025
 800f8be:	69ee      	ldr	r6, [r5, #28]
 800f8c0:	e189      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8c2:	6a2e      	ldr	r6, [r5, #32]
 800f8c4:	e187      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8c6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f8c8:	e185      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8ca:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f8cc:	e183      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8ce:	696e      	ldr	r6, [r5, #20]
 800f8d0:	e181      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8d2:	231c      	movs	r3, #28
 800f8d4:	6820      	ldr	r0, [r4, #0]
 800f8d6:	9308      	str	r3, [sp, #32]
 800f8d8:	9007      	str	r0, [sp, #28]
 800f8da:	f7ff fc5f 	bl	800f19c <GUI_ALLOC_LockH>
 800f8de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8e0:	9005      	str	r0, [sp, #20]
 800f8e2:	a807      	add	r0, sp, #28
 800f8e4:	4798      	blx	r3
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	a805      	add	r0, sp, #20
 800f8ea:	f7ff fc65 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800f8ee:	2e01      	cmp	r6, #1
 800f8f0:	dd11      	ble.n	800f916 <FRAMEWIN_DrawSkinFlex+0xb6>
 800f8f2:	682b      	ldr	r3, [r5, #0]
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	686b      	ldr	r3, [r5, #4]
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	68ab      	ldr	r3, [r5, #8]
 800f8fc:	9302      	str	r3, [sp, #8]
 800f8fe:	6920      	ldr	r0, [r4, #16]
 800f900:	69a1      	ldr	r1, [r4, #24]
 800f902:	6962      	ldr	r2, [r4, #20]
 800f904:	4633      	mov	r3, r6
 800f906:	f002 f8c7 	bl	8011a98 <GUI__DrawTwinArc2>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	69a7      	ldr	r7, [r4, #24]
 800f90e:	eb06 0803 	add.w	r8, r6, r3
 800f912:	1bbf      	subs	r7, r7, r6
 800f914:	e02c      	b.n	800f970 <FRAMEWIN_DrawSkinFlex+0x110>
 800f916:	6828      	ldr	r0, [r5, #0]
 800f918:	f7fe f9eb 	bl	800dcf2 <GUI_SetColor>
 800f91c:	6921      	ldr	r1, [r4, #16]
 800f91e:	69ea      	ldr	r2, [r5, #28]
 800f920:	6960      	ldr	r0, [r4, #20]
 800f922:	440a      	add	r2, r1
 800f924:	3a01      	subs	r2, #1
 800f926:	f002 fb05 	bl	8011f34 <GUI_DrawHLine>
 800f92a:	69a2      	ldr	r2, [r4, #24]
 800f92c:	69e9      	ldr	r1, [r5, #28]
 800f92e:	6960      	ldr	r0, [r4, #20]
 800f930:	1a51      	subs	r1, r2, r1
 800f932:	3101      	adds	r1, #1
 800f934:	f002 fafe 	bl	8011f34 <GUI_DrawHLine>
 800f938:	6967      	ldr	r7, [r4, #20]
 800f93a:	6920      	ldr	r0, [r4, #16]
 800f93c:	3701      	adds	r7, #1
 800f93e:	4639      	mov	r1, r7
 800f940:	f002 fb1c 	bl	8011f7c <GUI_DrawPixel>
 800f944:	4639      	mov	r1, r7
 800f946:	69a0      	ldr	r0, [r4, #24]
 800f948:	f002 fb18 	bl	8011f7c <GUI_DrawPixel>
 800f94c:	6868      	ldr	r0, [r5, #4]
 800f94e:	f7fe f9d0 	bl	800dcf2 <GUI_SetColor>
 800f952:	6920      	ldr	r0, [r4, #16]
 800f954:	4639      	mov	r1, r7
 800f956:	3001      	adds	r0, #1
 800f958:	f002 fb10 	bl	8011f7c <GUI_DrawPixel>
 800f95c:	69a0      	ldr	r0, [r4, #24]
 800f95e:	4639      	mov	r1, r7
 800f960:	3801      	subs	r0, #1
 800f962:	f002 fb0b 	bl	8011f7c <GUI_DrawPixel>
 800f966:	6923      	ldr	r3, [r4, #16]
 800f968:	69a7      	ldr	r7, [r4, #24]
 800f96a:	f103 0802 	add.w	r8, r3, #2
 800f96e:	3f02      	subs	r7, #2
 800f970:	6828      	ldr	r0, [r5, #0]
 800f972:	f7fe f9be 	bl	800dcf2 <GUI_SetColor>
 800f976:	4641      	mov	r1, r8
 800f978:	463a      	mov	r2, r7
 800f97a:	6960      	ldr	r0, [r4, #20]
 800f97c:	f002 fada 	bl	8011f34 <GUI_DrawHLine>
 800f980:	6868      	ldr	r0, [r5, #4]
 800f982:	f7fe f9b6 	bl	800dcf2 <GUI_SetColor>
 800f986:	6960      	ldr	r0, [r4, #20]
 800f988:	4641      	mov	r1, r8
 800f98a:	3001      	adds	r0, #1
 800f98c:	463a      	mov	r2, r7
 800f98e:	f002 fad1 	bl	8011f34 <GUI_DrawHLine>
 800f992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f994:	2b02      	cmp	r3, #2
 800f996:	dd0a      	ble.n	800f9ae <FRAMEWIN_DrawSkinFlex+0x14e>
 800f998:	68a8      	ldr	r0, [r5, #8]
 800f99a:	f7fe f9aa 	bl	800dcf2 <GUI_SetColor>
 800f99e:	6961      	ldr	r1, [r4, #20]
 800f9a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f9a2:	440b      	add	r3, r1
 800f9a4:	4640      	mov	r0, r8
 800f9a6:	3102      	adds	r1, #2
 800f9a8:	463a      	mov	r2, r7
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	e01d      	b.n	800f9ea <FRAMEWIN_DrawSkinFlex+0x18a>
 800f9ae:	6a2a      	ldr	r2, [r5, #32]
 800f9b0:	42b2      	cmp	r2, r6
 800f9b2:	dd1c      	ble.n	800f9ee <FRAMEWIN_DrawSkinFlex+0x18e>
 800f9b4:	6967      	ldr	r7, [r4, #20]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	2e01      	cmp	r6, #1
 800f9ba:	f107 0802 	add.w	r8, r7, #2
 800f9be:	f340 8107 	ble.w	800fbd0 <FRAMEWIN_DrawSkinFlex+0x370>
 800f9c2:	4437      	add	r7, r6
 800f9c4:	18f0      	adds	r0, r6, r3
 800f9c6:	441a      	add	r2, r3
 800f9c8:	3a01      	subs	r2, #1
 800f9ca:	4641      	mov	r1, r8
 800f9cc:	463b      	mov	r3, r7
 800f9ce:	f002 fb19 	bl	8012004 <GUI_FillRect>
 800f9d2:	69a3      	ldr	r3, [r4, #24]
 800f9d4:	69e8      	ldr	r0, [r5, #28]
 800f9d6:	2e01      	cmp	r6, #1
 800f9d8:	ebc0 0003 	rsb	r0, r0, r3
 800f9dc:	bfcc      	ite	gt
 800f9de:	ebc6 0203 	rsbgt	r2, r6, r3
 800f9e2:	1e9a      	suble	r2, r3, #2
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	4641      	mov	r1, r8
 800f9e8:	463b      	mov	r3, r7
 800f9ea:	f002 fb0b 	bl	8012004 <GUI_FillRect>
 800f9ee:	6963      	ldr	r3, [r4, #20]
 800f9f0:	69e7      	ldr	r7, [r4, #28]
 800f9f2:	6828      	ldr	r0, [r5, #0]
 800f9f4:	2e01      	cmp	r6, #1
 800f9f6:	bfcc      	ite	gt
 800f9f8:	18f6      	addgt	r6, r6, r3
 800f9fa:	1c9e      	addle	r6, r3, #2
 800f9fc:	3f01      	subs	r7, #1
 800f9fe:	f7fe f978 	bl	800dcf2 <GUI_SetColor>
 800fa02:	463a      	mov	r2, r7
 800fa04:	6920      	ldr	r0, [r4, #16]
 800fa06:	4631      	mov	r1, r6
 800fa08:	f002 fada 	bl	8011fc0 <GUI_DrawVLine>
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4631      	mov	r1, r6
 800fa10:	69a0      	ldr	r0, [r4, #24]
 800fa12:	f002 fad5 	bl	8011fc0 <GUI_DrawVLine>
 800fa16:	69e7      	ldr	r7, [r4, #28]
 800fa18:	6868      	ldr	r0, [r5, #4]
 800fa1a:	f7fe f96a 	bl	800dcf2 <GUI_SetColor>
 800fa1e:	6920      	ldr	r0, [r4, #16]
 800fa20:	3f02      	subs	r7, #2
 800fa22:	3001      	adds	r0, #1
 800fa24:	4631      	mov	r1, r6
 800fa26:	463a      	mov	r2, r7
 800fa28:	f002 faca 	bl	8011fc0 <GUI_DrawVLine>
 800fa2c:	69a0      	ldr	r0, [r4, #24]
 800fa2e:	4631      	mov	r1, r6
 800fa30:	3801      	subs	r0, #1
 800fa32:	463a      	mov	r2, r7
 800fa34:	f002 fac4 	bl	8011fc0 <GUI_DrawVLine>
 800fa38:	69eb      	ldr	r3, [r5, #28]
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	dc02      	bgt.n	800fa44 <FRAMEWIN_DrawSkinFlex+0x1e4>
 800fa3e:	6a2b      	ldr	r3, [r5, #32]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	dd20      	ble.n	800fa86 <FRAMEWIN_DrawSkinFlex+0x226>
 800fa44:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fa46:	69e7      	ldr	r7, [r4, #28]
 800fa48:	68a8      	ldr	r0, [r5, #8]
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	bfcc      	ite	gt
 800fa4e:	ebc3 0707 	rsbgt	r7, r3, r7
 800fa52:	3f02      	suble	r7, #2
 800fa54:	f7fe f94d 	bl	800dcf2 <GUI_SetColor>
 800fa58:	69ea      	ldr	r2, [r5, #28]
 800fa5a:	2a02      	cmp	r2, #2
 800fa5c:	dd07      	ble.n	800fa6e <FRAMEWIN_DrawSkinFlex+0x20e>
 800fa5e:	6920      	ldr	r0, [r4, #16]
 800fa60:	4402      	add	r2, r0
 800fa62:	4631      	mov	r1, r6
 800fa64:	3002      	adds	r0, #2
 800fa66:	3a01      	subs	r2, #1
 800fa68:	463b      	mov	r3, r7
 800fa6a:	f002 facb 	bl	8012004 <GUI_FillRect>
 800fa6e:	6a2b      	ldr	r3, [r5, #32]
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	dd08      	ble.n	800fa86 <FRAMEWIN_DrawSkinFlex+0x226>
 800fa74:	69a2      	ldr	r2, [r4, #24]
 800fa76:	69e8      	ldr	r0, [r5, #28]
 800fa78:	1a10      	subs	r0, r2, r0
 800fa7a:	3001      	adds	r0, #1
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	3a02      	subs	r2, #2
 800fa80:	463b      	mov	r3, r7
 800fa82:	f002 fabf 	bl	8012004 <GUI_FillRect>
 800fa86:	6828      	ldr	r0, [r5, #0]
 800fa88:	f7fe f933 	bl	800dcf2 <GUI_SetColor>
 800fa8c:	6921      	ldr	r1, [r4, #16]
 800fa8e:	69a2      	ldr	r2, [r4, #24]
 800fa90:	69e0      	ldr	r0, [r4, #28]
 800fa92:	f002 fa4f 	bl	8011f34 <GUI_DrawHLine>
 800fa96:	6868      	ldr	r0, [r5, #4]
 800fa98:	f7fe f92b 	bl	800dcf2 <GUI_SetColor>
 800fa9c:	69e0      	ldr	r0, [r4, #28]
 800fa9e:	6921      	ldr	r1, [r4, #16]
 800faa0:	69a2      	ldr	r2, [r4, #24]
 800faa2:	3801      	subs	r0, #1
 800faa4:	3101      	adds	r1, #1
 800faa6:	3a01      	subs	r2, #1
 800faa8:	f002 fa44 	bl	8011f34 <GUI_DrawHLine>
 800faac:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800faae:	2e02      	cmp	r6, #2
 800fab0:	f340 808c 	ble.w	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800fab4:	6920      	ldr	r0, [r4, #16]
 800fab6:	69a2      	ldr	r2, [r4, #24]
 800fab8:	69e4      	ldr	r4, [r4, #28]
 800faba:	f100 0802 	add.w	r8, r0, #2
 800fabe:	68a8      	ldr	r0, [r5, #8]
 800fac0:	1e97      	subs	r7, r2, #2
 800fac2:	f7fe f916 	bl	800dcf2 <GUI_SetColor>
 800fac6:	1ba1      	subs	r1, r4, r6
 800fac8:	4640      	mov	r0, r8
 800faca:	3101      	adds	r1, #1
 800facc:	463a      	mov	r2, r7
 800face:	1ea3      	subs	r3, r4, #2
 800fad0:	f002 fa98 	bl	8012004 <GUI_FillRect>
 800fad4:	e07a      	b.n	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800fad6:	bf00      	nop
 800fad8:	200000d8 	.word	0x200000d8
 800fadc:	200000ac 	.word	0x200000ac
 800fae0:	8a20      	ldrh	r0, [r4, #16]
 800fae2:	8aa1      	ldrh	r1, [r4, #20]
 800fae4:	8b22      	ldrh	r2, [r4, #24]
 800fae6:	8ba3      	ldrh	r3, [r4, #28]
 800fae8:	68ec      	ldr	r4, [r5, #12]
 800faea:	9400      	str	r4, [sp, #0]
 800faec:	692c      	ldr	r4, [r5, #16]
 800faee:	f8ad 001c 	strh.w	r0, [sp, #28]
 800faf2:	f8ad 101e 	strh.w	r1, [sp, #30]
 800faf6:	f8ad 2020 	strh.w	r2, [sp, #32]
 800fafa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fafe:	9401      	str	r4, [sp, #4]
 800fb00:	b200      	sxth	r0, r0
 800fb02:	b209      	sxth	r1, r1
 800fb04:	b212      	sxth	r2, r2
 800fb06:	b21b      	sxth	r3, r3
 800fb08:	f002 fb80 	bl	801220c <GUI_DrawGradientV>
 800fb0c:	e05e      	b.n	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800fb0e:	8b2b      	ldrh	r3, [r5, #24]
 800fb10:	6922      	ldr	r2, [r4, #16]
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	441a      	add	r2, r3
 800fb16:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fb1a:	6962      	ldr	r2, [r4, #20]
 800fb1c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800fb20:	69a2      	ldr	r2, [r4, #24]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb28:	69e3      	ldr	r3, [r4, #28]
 800fb2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb2e:	f7ff fb35 	bl	800f19c <GUI_ALLOC_LockH>
 800fb32:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800fb34:	9005      	str	r0, [sp, #20]
 800fb36:	b1fb      	cbz	r3, 800fb78 <FRAMEWIN_DrawSkinFlex+0x318>
 800fb38:	2002      	movs	r0, #2
 800fb3a:	f7fe f915 	bl	800dd68 <GUI_SetTextMode>
 800fb3e:	9b05      	ldr	r3, [sp, #20]
 800fb40:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800fb44:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800fb48:	320e      	adds	r2, #14
 800fb4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fb4e:	6898      	ldr	r0, [r3, #8]
 800fb50:	f7fe f8cf 	bl	800dcf2 <GUI_SetColor>
 800fb54:	9b05      	ldr	r3, [sp, #20]
 800fb56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fb58:	f7fe f8d0 	bl	800dcfc <GUI_SetFont>
 800fb5c:	9b05      	ldr	r3, [sp, #20]
 800fb5e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800fb60:	f7ff fb1c 	bl	800f19c <GUI_ALLOC_LockH>
 800fb64:	9b05      	ldr	r3, [sp, #20]
 800fb66:	9006      	str	r0, [sp, #24]
 800fb68:	a907      	add	r1, sp, #28
 800fb6a:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800fb6e:	f7fd fd28 	bl	800d5c2 <GUI_DispStringInRect>
 800fb72:	a806      	add	r0, sp, #24
 800fb74:	f7ff fb20 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fb78:	a805      	add	r0, sp, #20
 800fb7a:	f7ff fb1d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fb7e:	e025      	b.n	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800fb80:	6923      	ldr	r3, [r4, #16]
 800fb82:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fb86:	6963      	ldr	r3, [r4, #20]
 800fb88:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fb8c:	69a3      	ldr	r3, [r4, #24]
 800fb8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb92:	68a8      	ldr	r0, [r5, #8]
 800fb94:	69e3      	ldr	r3, [r4, #28]
 800fb96:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb9a:	f7fe f8aa 	bl	800dcf2 <GUI_SetColor>
 800fb9e:	a807      	add	r0, sp, #28
 800fba0:	f002 fa52 	bl	8012048 <GUI_FillRectEx>
 800fba4:	e012      	b.n	800fbcc <FRAMEWIN_DrawSkinFlex+0x36c>
 800fba6:	6820      	ldr	r0, [r4, #0]
 800fba8:	f7ff faf8 	bl	800f19c <GUI_ALLOC_LockH>
 800fbac:	ab10      	add	r3, sp, #64	; 0x40
 800fbae:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800fbb2:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800fbb6:	f042 020c 	orr.w	r2, r2, #12
 800fbba:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff fafa 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fbc4:	6820      	ldr	r0, [r4, #0]
 800fbc6:	f7f8 fb67 	bl	8008298 <WM_SetHasTrans>
 800fbca:	e004      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800fbcc:	2600      	movs	r6, #0
 800fbce:	e002      	b.n	800fbd6 <FRAMEWIN_DrawSkinFlex+0x376>
 800fbd0:	1c98      	adds	r0, r3, #2
 800fbd2:	4647      	mov	r7, r8
 800fbd4:	e6f7      	b.n	800f9c6 <FRAMEWIN_DrawSkinFlex+0x166>
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	b010      	add	sp, #64	; 0x40
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbde:	bf00      	nop

0800fbe0 <_GetBorderSize>:
 800fbe0:	b570      	push	{r4, r5, r6, lr}
 800fbe2:	b08a      	sub	sp, #40	; 0x28
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	f7ff fad8 	bl	800f19c <GUI_ALLOC_LockH>
 800fbec:	ab0a      	add	r3, sp, #40	; 0x28
 800fbee:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800fbf0:	f843 0d28 	str.w	r0, [r3, #-40]!
 800fbf4:	4668      	mov	r0, sp
 800fbf6:	f7ff fadf 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fbfa:	9501      	str	r5, [sp, #4]
 800fbfc:	2c03      	cmp	r4, #3
 800fbfe:	d80b      	bhi.n	800fc18 <_GetBorderSize+0x38>
 800fc00:	e8df f004 	tbb	[pc, r4]
 800fc04:	08060402 	.word	0x08060402
 800fc08:	2318      	movs	r3, #24
 800fc0a:	e004      	b.n	800fc16 <_GetBorderSize+0x36>
 800fc0c:	2316      	movs	r3, #22
 800fc0e:	e002      	b.n	800fc16 <_GetBorderSize+0x36>
 800fc10:	2315      	movs	r3, #21
 800fc12:	e000      	b.n	800fc16 <_GetBorderSize+0x36>
 800fc14:	2317      	movs	r3, #23
 800fc16:	9302      	str	r3, [sp, #8]
 800fc18:	a801      	add	r0, sp, #4
 800fc1a:	47b0      	blx	r6
 800fc1c:	b00a      	add	sp, #40	; 0x28
 800fc1e:	bd70      	pop	{r4, r5, r6, pc}

0800fc20 <_Create>:
 800fc20:	b530      	push	{r4, r5, lr}
 800fc22:	b08b      	sub	sp, #44	; 0x2c
 800fc24:	4605      	mov	r5, r0
 800fc26:	f7ff fab9 	bl	800f19c <GUI_ALLOC_LockH>
 800fc2a:	ab0a      	add	r3, sp, #40	; 0x28
 800fc2c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fc2e:	f843 0d28 	str.w	r0, [r3, #-40]!
 800fc32:	4668      	mov	r0, sp
 800fc34:	6894      	ldr	r4, [r2, #8]
 800fc36:	f7ff fabf 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fc3a:	a80a      	add	r0, sp, #40	; 0x28
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	9302      	str	r3, [sp, #8]
 800fc40:	f840 5d24 	str.w	r5, [r0, #-36]!
 800fc44:	6863      	ldr	r3, [r4, #4]
 800fc46:	4798      	blx	r3
 800fc48:	b00b      	add	sp, #44	; 0x2c
 800fc4a:	bd30      	pop	{r4, r5, pc}

0800fc4c <_Paint>:
 800fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc50:	b091      	sub	sp, #68	; 0x44
 800fc52:	4604      	mov	r4, r0
 800fc54:	f7ff faa2 	bl	800f19c <GUI_ALLOC_LockH>
 800fc58:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fc5a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800fc5c:	9603      	str	r6, [sp, #12]
 800fc5e:	9006      	str	r0, [sp, #24]
 800fc60:	689e      	ldr	r6, [r3, #8]
 800fc62:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800fc64:	f7f7 feaa 	bl	80079bc <FRAMEWIN__CalcTitleHeight>
 800fc68:	4683      	mov	fp, r0
 800fc6a:	a810      	add	r0, sp, #64	; 0x40
 800fc6c:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 800fc70:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800fc74:	9204      	str	r2, [sp, #16]
 800fc76:	f7ff fa9f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f7f8 ff66 	bl	8008b4c <WM_GetWindowSizeX>
 800fc80:	4681      	mov	r9, r0
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7f8 ff77 	bl	8008b76 <WM_GetWindowSizeY>
 800fc88:	6832      	ldr	r2, [r6, #0]
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	4680      	mov	r8, r0
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4790      	blx	r2
 800fc92:	6832      	ldr	r2, [r6, #0]
 800fc94:	2103      	movs	r1, #3
 800fc96:	4607      	mov	r7, r0
 800fc98:	4620      	mov	r0, r4
 800fc9a:	4790      	blx	r2
 800fc9c:	6832      	ldr	r2, [r6, #0]
 800fc9e:	2100      	movs	r1, #0
 800fca0:	4682      	mov	sl, r0
 800fca2:	4620      	mov	r0, r4
 800fca4:	4790      	blx	r2
 800fca6:	6833      	ldr	r3, [r6, #0]
 800fca8:	9002      	str	r0, [sp, #8]
 800fcaa:	2102      	movs	r1, #2
 800fcac:	4620      	mov	r0, r4
 800fcae:	4798      	blx	r3
 800fcb0:	9005      	str	r0, [sp, #20]
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	9407      	str	r4, [sp, #28]
 800fcb6:	f7f9 ff05 	bl	8009ac4 <WM__InitIVRSearch>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d044      	beq.n	800fd48 <_Paint+0xfc>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	930c      	str	r3, [sp, #48]	; 0x30
 800fcc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcc4:	f109 33ff 	add.w	r3, r9, #4294967295
 800fcc8:	930d      	str	r3, [sp, #52]	; 0x34
 800fcca:	f108 33ff 	add.w	r3, r8, #4294967295
 800fcce:	930e      	str	r3, [sp, #56]	; 0x38
 800fcd0:	230b      	movs	r3, #11
 800fcd2:	9308      	str	r3, [sp, #32]
 800fcd4:	a807      	add	r0, sp, #28
 800fcd6:	47a8      	blx	r5
 800fcd8:	9b02      	ldr	r3, [sp, #8]
 800fcda:	9e04      	ldr	r6, [sp, #16]
 800fcdc:	970b      	str	r7, [sp, #44]	; 0x2c
 800fcde:	445b      	add	r3, fp
 800fce0:	fa03 f086 	sxtah	r0, r3, r6
 800fce4:	9e05      	ldr	r6, [sp, #20]
 800fce6:	930c      	str	r3, [sp, #48]	; 0x30
 800fce8:	ebc6 0108 	rsb	r1, r6, r8
 800fcec:	ebca 0209 	rsb	r2, sl, r9
 800fcf0:	3801      	subs	r0, #1
 800fcf2:	3901      	subs	r1, #1
 800fcf4:	3a01      	subs	r2, #1
 800fcf6:	4288      	cmp	r0, r1
 800fcf8:	bfd4      	ite	le
 800fcfa:	900e      	strle	r0, [sp, #56]	; 0x38
 800fcfc:	910e      	strgt	r1, [sp, #56]	; 0x38
 800fcfe:	210e      	movs	r1, #14
 800fd00:	9108      	str	r1, [sp, #32]
 800fd02:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fd06:	920d      	str	r2, [sp, #52]	; 0x34
 800fd08:	a807      	add	r0, sp, #28
 800fd0a:	47a8      	blx	r5
 800fd0c:	9b01      	ldr	r3, [sp, #4]
 800fd0e:	9a00      	ldr	r2, [sp, #0]
 800fd10:	9e02      	ldr	r6, [sp, #8]
 800fd12:	920d      	str	r2, [sp, #52]	; 0x34
 800fd14:	3b01      	subs	r3, #1
 800fd16:	930e      	str	r3, [sp, #56]	; 0x38
 800fd18:	2305      	movs	r3, #5
 800fd1a:	9308      	str	r3, [sp, #32]
 800fd1c:	970b      	str	r7, [sp, #44]	; 0x2c
 800fd1e:	960c      	str	r6, [sp, #48]	; 0x30
 800fd20:	a807      	add	r0, sp, #28
 800fd22:	47a8      	blx	r5
 800fd24:	a90b      	add	r1, sp, #44	; 0x2c
 800fd26:	aa0d      	add	r2, sp, #52	; 0x34
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f7f7 fe56 	bl	80079da <FRAMEWIN__GetTitleLimits>
 800fd2e:	2002      	movs	r0, #2
 800fd30:	f7fe f81a 	bl	800dd68 <GUI_SetTextMode>
 800fd34:	9803      	ldr	r0, [sp, #12]
 800fd36:	f7fd ffe1 	bl	800dcfc <GUI_SetFont>
 800fd3a:	2312      	movs	r3, #18
 800fd3c:	9308      	str	r3, [sp, #32]
 800fd3e:	a807      	add	r0, sp, #28
 800fd40:	47a8      	blx	r5
 800fd42:	f7f9 fdfd 	bl	8009940 <WM__GetNextIVR>
 800fd46:	e7b8      	b.n	800fcba <_Paint+0x6e>
 800fd48:	b011      	add	sp, #68	; 0x44
 800fd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd4e <WM_DeleteTimer>:
 800fd4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd50:	4605      	mov	r5, r0
 800fd52:	b168      	cbz	r0, 800fd70 <WM_DeleteTimer+0x22>
 800fd54:	f7ff fa22 	bl	800f19c <GUI_ALLOC_LockH>
 800fd58:	ac02      	add	r4, sp, #8
 800fd5a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800fd5e:	6800      	ldr	r0, [r0, #0]
 800fd60:	f7fd fad0 	bl	800d304 <GUI_TIMER_Delete>
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7ff fa27 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f7ff fa50 	bl	800f210 <GUI_ALLOC_Free>
 800fd70:	b003      	add	sp, #12
 800fd72:	bd30      	pop	{r4, r5, pc}

0800fd74 <WM__DeleteAssocTimer>:
 800fd74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd76:	4605      	mov	r5, r0
 800fd78:	a801      	add	r0, sp, #4
 800fd7a:	f7fd fa8f 	bl	800d29c <GUI_TIMER__GetFirstTimer>
 800fd7e:	4604      	mov	r4, r0
 800fd80:	b1dc      	cbz	r4, 800fdba <WM__DeleteAssocTimer+0x46>
 800fd82:	4620      	mov	r0, r4
 800fd84:	2101      	movs	r1, #1
 800fd86:	f7fd faf1 	bl	800d36c <GUI_TIMER_GetFlag>
 800fd8a:	9b01      	ldr	r3, [sp, #4]
 800fd8c:	b183      	cbz	r3, 800fdb0 <WM__DeleteAssocTimer+0x3c>
 800fd8e:	b178      	cbz	r0, 800fdb0 <WM__DeleteAssocTimer+0x3c>
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff f9f9 	bl	800f188 <GUI_ALLOC_h2p>
 800fd96:	6843      	ldr	r3, [r0, #4]
 800fd98:	42ab      	cmp	r3, r5
 800fd9a:	d109      	bne.n	800fdb0 <WM__DeleteAssocTimer+0x3c>
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	a901      	add	r1, sp, #4
 800fda0:	9e01      	ldr	r6, [sp, #4]
 800fda2:	f7fd fa93 	bl	800d2cc <GUI_TIMER__GetNextTimerLin>
 800fda6:	4604      	mov	r4, r0
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f7ff ffd0 	bl	800fd4e <WM_DeleteTimer>
 800fdae:	e7e7      	b.n	800fd80 <WM__DeleteAssocTimer+0xc>
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	a901      	add	r1, sp, #4
 800fdb4:	f7fd fa8a 	bl	800d2cc <GUI_TIMER__GetNextTimerLin>
 800fdb8:	e7e1      	b.n	800fd7e <WM__DeleteAssocTimer+0xa>
 800fdba:	b002      	add	sp, #8
 800fdbc:	bd70      	pop	{r4, r5, r6, pc}

0800fdbe <_Convert16>:
 800fdbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fdc6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fdca:	4605      	mov	r5, r0
 800fdcc:	460e      	mov	r6, r1
 800fdce:	4690      	mov	r8, r2
 800fdd0:	461f      	mov	r7, r3
 800fdd2:	4614      	mov	r4, r2
 800fdd4:	4689      	mov	r9, r1
 800fdd6:	f835 0b02 	ldrh.w	r0, [r5], #2
 800fdda:	47d8      	blx	fp
 800fddc:	47d0      	blx	sl
 800fdde:	3c01      	subs	r4, #1
 800fde0:	f849 0b04 	str.w	r0, [r9], #4
 800fde4:	d1f7      	bne.n	800fdd6 <_Convert16+0x18>
 800fde6:	2f1f      	cmp	r7, #31
 800fde8:	d806      	bhi.n	800fdf8 <_Convert16+0x3a>
 800fdea:	4630      	mov	r0, r6
 800fdec:	4641      	mov	r1, r8
 800fdee:	463a      	mov	r2, r7
 800fdf0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf4:	f001 bf04 	b.w	8011c00 <GUI__CompactPixelIndices>
 800fdf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdfc <_Convert8>:
 800fdfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800fe04:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fe08:	4605      	mov	r5, r0
 800fe0a:	460e      	mov	r6, r1
 800fe0c:	4690      	mov	r8, r2
 800fe0e:	461f      	mov	r7, r3
 800fe10:	4689      	mov	r9, r1
 800fe12:	4604      	mov	r4, r0
 800fe14:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fe18:	47d8      	blx	fp
 800fe1a:	47d0      	blx	sl
 800fe1c:	1b2b      	subs	r3, r5, r4
 800fe1e:	4443      	add	r3, r8
 800fe20:	f849 0b04 	str.w	r0, [r9], #4
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1f5      	bne.n	800fe14 <_Convert8+0x18>
 800fe28:	2f1f      	cmp	r7, #31
 800fe2a:	d806      	bhi.n	800fe3a <_Convert8+0x3e>
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	4641      	mov	r1, r8
 800fe30:	463a      	mov	r2, r7
 800fe32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe36:	f001 bee3 	b.w	8011c00 <GUI__CompactPixelIndices>
 800fe3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fe40 <GUI_MEMDEV__WriteToActiveOpaque>:
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	b09d      	sub	sp, #116	; 0x74
 800fe46:	4606      	mov	r6, r0
 800fe48:	910f      	str	r1, [sp, #60]	; 0x3c
 800fe4a:	920d      	str	r2, [sp, #52]	; 0x34
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	f000 8386 	beq.w	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800fe52:	f7ff f9a3 	bl	800f19c <GUI_ALLOC_LockH>
 800fe56:	ab1c      	add	r3, sp, #112	; 0x70
 800fe58:	6944      	ldr	r4, [r0, #20]
 800fe5a:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff f9aa 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7fb f823 	bl	800aeb0 <GUI_MEMDEV_GetBitsPerPixel>
 800fe6a:	2808      	cmp	r0, #8
 800fe6c:	4601      	mov	r1, r0
 800fe6e:	dd02      	ble.n	800fe76 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800fe70:	2c00      	cmp	r4, #0
 800fe72:	f000 81c3 	beq.w	80101fc <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800fe76:	2201      	movs	r2, #1
 800fe78:	f04f 0800 	mov.w	r8, #0
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	921b      	str	r2, [sp, #108]	; 0x6c
 800fe80:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800fe86:	f7ff f989 	bl	800f19c <GUI_ALLOC_LockH>
 800fe8a:	6803      	ldr	r3, [r0, #0]
 800fe8c:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 801049c <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	930e      	str	r3, [sp, #56]	; 0x38
 800fe9a:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800fe9e:	f8da 3000 	ldr.w	r3, [sl]
 800fea2:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800fea6:	6904      	ldr	r4, [r0, #16]
 800fea8:	6945      	ldr	r5, [r0, #20]
 800feaa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800feae:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800feb2:	7c58      	ldrb	r0, [r3, #17]
 800feb4:	9112      	str	r1, [sp, #72]	; 0x48
 800feb6:	f7fc fa19 	bl	800c2ec <GUI_GetBitsPerPixelEx>
 800feba:	f8da 3000 	ldr.w	r3, [sl]
 800febe:	9010      	str	r0, [sp, #64]	; 0x40
 800fec0:	7c58      	ldrb	r0, [r3, #17]
 800fec2:	f7fc fa31 	bl	800c328 <GUI_GetpfIndex2ColorEx>
 800fec6:	4603      	mov	r3, r0
 800fec8:	4658      	mov	r0, fp
 800feca:	9309      	str	r3, [sp, #36]	; 0x24
 800fecc:	f7ff f974 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800fed0:	2c08      	cmp	r4, #8
 800fed2:	4651      	mov	r1, sl
 800fed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed8:	d904      	bls.n	800fee4 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800feda:	2c10      	cmp	r4, #16
 800fedc:	bf8c      	ite	hi
 800fede:	2204      	movhi	r2, #4
 800fee0:	2202      	movls	r2, #2
 800fee2:	e005      	b.n	800fef0 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fee4:	2c01      	cmp	r4, #1
 800fee6:	d103      	bne.n	800fef0 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800fee8:	9411      	str	r4, [sp, #68]	; 0x44
 800feea:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800feee:	e000      	b.n	800fef2 <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800fef0:	9211      	str	r2, [sp, #68]	; 0x44
 800fef2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fef4:	4298      	cmp	r0, r3
 800fef6:	f000 80e2 	beq.w	80100be <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800fefa:	680b      	ldr	r3, [r1, #0]
 800fefc:	7c58      	ldrb	r0, [r3, #17]
 800fefe:	f7fc fa23 	bl	800c348 <GUI_GetpfColor2IndexEx>
 800ff02:	9013      	str	r0, [sp, #76]	; 0x4c
 800ff04:	00b8      	lsls	r0, r7, #2
 800ff06:	f7ff fb15 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 800ff0a:	900c      	str	r0, [sp, #48]	; 0x30
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f000 8326 	beq.w	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ff12:	4630      	mov	r0, r6
 800ff14:	f7fa f964 	bl	800a1e0 <GUI_MEMDEV_GetDataPtr>
 800ff18:	4606      	mov	r6, r0
 800ff1a:	2d00      	cmp	r5, #0
 800ff1c:	f000 80be 	beq.w	801009c <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800ff20:	4628      	mov	r0, r5
 800ff22:	f7ff f93b 	bl	800f19c <GUI_ALLOC_LockH>
 800ff26:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ff2a:	9018      	str	r0, [sp, #96]	; 0x60
 800ff2c:	f04f 0a00 	mov.w	sl, #0
 800ff30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff32:	4592      	cmp	sl, r2
 800ff34:	f280 80ae 	bge.w	8010094 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800ff38:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9319      	str	r3, [sp, #100]	; 0x64
 800ff3e:	6883      	ldr	r3, [r0, #8]
 800ff40:	a919      	add	r1, sp, #100	; 0x64
 800ff42:	695b      	ldr	r3, [r3, #20]
 800ff44:	4652      	mov	r2, sl
 800ff46:	4798      	blx	r3
 800ff48:	42b8      	cmp	r0, r7
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	d12f      	bne.n	800ffae <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800ff4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ff50:	f7ff f924 	bl	800f19c <GUI_ALLOC_LockH>
 800ff54:	2c08      	cmp	r4, #8
 800ff56:	4601      	mov	r1, r0
 800ff58:	9016      	str	r0, [sp, #88]	; 0x58
 800ff5a:	d909      	bls.n	800ff70 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800ff5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff60:	9200      	str	r2, [sp, #0]
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	4630      	mov	r0, r6
 800ff66:	463a      	mov	r2, r7
 800ff68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff6a:	f7ff ff28 	bl	800fdbe <_Convert16>
 800ff6e:	e008      	b.n	800ff82 <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800ff70:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ff72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ff74:	9000      	str	r0, [sp, #0]
 800ff76:	9201      	str	r2, [sp, #4]
 800ff78:	4630      	mov	r0, r6
 800ff7a:	463a      	mov	r2, r7
 800ff7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff7e:	f7ff ff3d 	bl	800fdfc <_Convert8>
 800ff82:	2301      	movs	r3, #1
 800ff84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff86:	9002      	str	r0, [sp, #8]
 800ff88:	ad1c      	add	r5, sp, #112	; 0x70
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	9301      	str	r3, [sp, #4]
 800ff90:	9203      	str	r2, [sp, #12]
 800ff92:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800ff96:	9204      	str	r2, [sp, #16]
 800ff98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ff9a:	f8cd 8014 	str.w	r8, [sp, #20]
 800ff9e:	4659      	mov	r1, fp
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	f7fc fbed 	bl	800c780 <LCD_DrawBitmap>
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f7ff f906 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 800ffac:	e060      	b.n	8010070 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ffae:	2c01      	cmp	r4, #1
 800ffb0:	d15c      	bne.n	801006c <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800ffb2:	2d00      	cmp	r5, #0
 800ffb4:	d05c      	beq.n	8010070 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ffb6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ffb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ffba:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffbe:	2208      	movs	r2, #8
 800ffc0:	fb90 f2f2 	sdiv	r2, r0, r2
 800ffc4:	4432      	add	r2, r6
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	9204      	str	r2, [sp, #16]
 800ffca:	f000 0207 	and.w	r2, r0, #7
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	4408      	add	r0, r1
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	9302      	str	r3, [sp, #8]
 800ffd6:	9206      	str	r2, [sp, #24]
 800ffd8:	4659      	mov	r1, fp
 800ffda:	462a      	mov	r2, r5
 800ffdc:	f8cd 8014 	str.w	r8, [sp, #20]
 800ffe0:	f7fc faf2 	bl	800c5c8 <LCD__DrawBitmap_1bpp>
 800ffe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffe6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ffe8:	441d      	add	r5, r3
 800ffea:	6883      	ldr	r3, [r0, #8]
 800ffec:	9519      	str	r5, [sp, #100]	; 0x64
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	a919      	add	r1, sp, #100	; 0x64
 800fff2:	4652      	mov	r2, sl
 800fff4:	4798      	blx	r3
 800fff6:	4605      	mov	r5, r0
 800fff8:	e7db      	b.n	800ffb2 <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800fffa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fffc:	f7ff f8ce 	bl	800f19c <GUI_ALLOC_LockH>
 8010000:	2c08      	cmp	r4, #8
 8010002:	4601      	mov	r1, r0
 8010004:	9016      	str	r0, [sp, #88]	; 0x58
 8010006:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010008:	d938      	bls.n	801007c <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 801000a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801000c:	9200      	str	r2, [sp, #0]
 801000e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	fb00 6002 	mla	r0, r0, r2, r6
 8010018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801001a:	462a      	mov	r2, r5
 801001c:	f7ff fecf 	bl	800fdbe <_Convert16>
 8010020:	2301      	movs	r3, #1
 8010022:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8010026:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	2200      	movs	r2, #0
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	9002      	str	r0, [sp, #8]
 8010030:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010032:	9203      	str	r2, [sp, #12]
 8010034:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010036:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 801003a:	9204      	str	r2, [sp, #16]
 801003c:	4408      	add	r0, r1
 801003e:	462a      	mov	r2, r5
 8010040:	4659      	mov	r1, fp
 8010042:	f8cd 8014 	str.w	r8, [sp, #20]
 8010046:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801004a:	f7fc fb99 	bl	800c780 <LCD_DrawBitmap>
 801004e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8010052:	4660      	mov	r0, ip
 8010054:	f7ff f8b0 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801005a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801005c:	441d      	add	r5, r3
 801005e:	6883      	ldr	r3, [r0, #8]
 8010060:	9519      	str	r5, [sp, #100]	; 0x64
 8010062:	695b      	ldr	r3, [r3, #20]
 8010064:	a919      	add	r1, sp, #100	; 0x64
 8010066:	4652      	mov	r2, sl
 8010068:	4798      	blx	r3
 801006a:	4605      	mov	r5, r0
 801006c:	2d00      	cmp	r5, #0
 801006e:	d1c4      	bne.n	800fffa <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 8010070:	444e      	add	r6, r9
 8010072:	f10a 0a01 	add.w	sl, sl, #1
 8010076:	f10b 0b01 	add.w	fp, fp, #1
 801007a:	e759      	b.n	800ff30 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 801007c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010082:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010084:	9201      	str	r2, [sp, #4]
 8010086:	fb00 6003 	mla	r0, r0, r3, r6
 801008a:	462a      	mov	r2, r5
 801008c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801008e:	f7ff feb5 	bl	800fdfc <_Convert8>
 8010092:	e7c5      	b.n	8010020 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 8010094:	a818      	add	r0, sp, #96	; 0x60
 8010096:	f7ff f88f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 801009a:	e00e      	b.n	80100ba <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 801009c:	2301      	movs	r3, #1
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	9301      	str	r3, [sp, #4]
 80100a2:	9004      	str	r0, [sp, #16]
 80100a4:	9402      	str	r4, [sp, #8]
 80100a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80100aa:	f8cd 8014 	str.w	r8, [sp, #20]
 80100ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80100b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80100b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100b4:	463a      	mov	r2, r7
 80100b6:	f7fc fb63 	bl	800c780 <LCD_DrawBitmap>
 80100ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80100bc:	e24d      	b.n	801055a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 80100be:	4630      	mov	r0, r6
 80100c0:	f7fa f88e 	bl	800a1e0 <GUI_MEMDEV_GetDataPtr>
 80100c4:	4606      	mov	r6, r0
 80100c6:	2d00      	cmp	r5, #0
 80100c8:	f000 808a 	beq.w	80101e0 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 80100cc:	4628      	mov	r0, r5
 80100ce:	f7ff f865 	bl	800f19c <GUI_ALLOC_LockH>
 80100d2:	2500      	movs	r5, #0
 80100d4:	9018      	str	r0, [sp, #96]	; 0x60
 80100d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100d8:	429d      	cmp	r5, r3
 80100da:	da7d      	bge.n	80101d8 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 80100dc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80100de:	2300      	movs	r3, #0
 80100e0:	9319      	str	r3, [sp, #100]	; 0x64
 80100e2:	6883      	ldr	r3, [r0, #8]
 80100e4:	a919      	add	r1, sp, #100	; 0x64
 80100e6:	695b      	ldr	r3, [r3, #20]
 80100e8:	462a      	mov	r2, r5
 80100ea:	4798      	blx	r3
 80100ec:	42b8      	cmp	r0, r7
 80100ee:	4682      	mov	sl, r0
 80100f0:	d124      	bne.n	801013c <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 80100f2:	46aa      	mov	sl, r5
 80100f4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80100f6:	6883      	ldr	r3, [r0, #8]
 80100f8:	f10a 0b01 	add.w	fp, sl, #1
 80100fc:	695b      	ldr	r3, [r3, #20]
 80100fe:	a919      	add	r1, sp, #100	; 0x64
 8010100:	465a      	mov	r2, fp
 8010102:	4798      	blx	r3
 8010104:	42b8      	cmp	r0, r7
 8010106:	d101      	bne.n	801010c <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 8010108:	46da      	mov	sl, fp
 801010a:	e7f3      	b.n	80100f4 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 801010c:	ebc5 0b0a 	rsb	fp, r5, sl
 8010110:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010112:	9604      	str	r6, [sp, #16]
 8010114:	2301      	movs	r3, #1
 8010116:	f10b 0b01 	add.w	fp, fp, #1
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	4429      	add	r1, r5
 8010120:	9402      	str	r4, [sp, #8]
 8010122:	f8cd 900c 	str.w	r9, [sp, #12]
 8010126:	f8cd 8014 	str.w	r8, [sp, #20]
 801012a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801012c:	463a      	mov	r2, r7
 801012e:	465b      	mov	r3, fp
 8010130:	f7fc fb26 	bl	800c780 <LCD_DrawBitmap>
 8010134:	fb09 660b 	mla	r6, r9, fp, r6
 8010138:	4655      	mov	r5, sl
 801013a:	e04b      	b.n	80101d4 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 801013c:	2c01      	cmp	r4, #1
 801013e:	d127      	bne.n	8010190 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8010140:	f1ba 0f00 	cmp.w	sl, #0
 8010144:	d022      	beq.n	801018c <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8010146:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010148:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801014a:	f8cd 900c 	str.w	r9, [sp, #12]
 801014e:	2208      	movs	r2, #8
 8010150:	fb90 f2f2 	sdiv	r2, r0, r2
 8010154:	4432      	add	r2, r6
 8010156:	9204      	str	r2, [sp, #16]
 8010158:	f000 0207 	and.w	r2, r0, #7
 801015c:	4408      	add	r0, r1
 801015e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010160:	9206      	str	r2, [sp, #24]
 8010162:	2301      	movs	r3, #1
 8010164:	4652      	mov	r2, sl
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	9301      	str	r3, [sp, #4]
 801016a:	9302      	str	r3, [sp, #8]
 801016c:	4429      	add	r1, r5
 801016e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010172:	f7fc fa29 	bl	800c5c8 <LCD__DrawBitmap_1bpp>
 8010176:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010178:	9818      	ldr	r0, [sp, #96]	; 0x60
 801017a:	4453      	add	r3, sl
 801017c:	9319      	str	r3, [sp, #100]	; 0x64
 801017e:	6883      	ldr	r3, [r0, #8]
 8010180:	a919      	add	r1, sp, #100	; 0x64
 8010182:	695b      	ldr	r3, [r3, #20]
 8010184:	462a      	mov	r2, r5
 8010186:	4798      	blx	r3
 8010188:	4682      	mov	sl, r0
 801018a:	e7d9      	b.n	8010140 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 801018c:	444e      	add	r6, r9
 801018e:	e021      	b.n	80101d4 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8010190:	f1ba 0f00 	cmp.w	sl, #0
 8010194:	d0fa      	beq.n	801018c <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8010196:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010198:	9911      	ldr	r1, [sp, #68]	; 0x44
 801019a:	9402      	str	r4, [sp, #8]
 801019c:	fb00 6201 	mla	r2, r0, r1, r6
 80101a0:	9204      	str	r2, [sp, #16]
 80101a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80101a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80101aa:	2301      	movs	r3, #1
 80101ac:	4410      	add	r0, r2
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4652      	mov	r2, sl
 80101b2:	9301      	str	r3, [sp, #4]
 80101b4:	4429      	add	r1, r5
 80101b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80101ba:	f7fc fae1 	bl	800c780 <LCD_DrawBitmap>
 80101be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101c0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80101c2:	4453      	add	r3, sl
 80101c4:	9319      	str	r3, [sp, #100]	; 0x64
 80101c6:	6883      	ldr	r3, [r0, #8]
 80101c8:	a919      	add	r1, sp, #100	; 0x64
 80101ca:	695b      	ldr	r3, [r3, #20]
 80101cc:	462a      	mov	r2, r5
 80101ce:	4798      	blx	r3
 80101d0:	4682      	mov	sl, r0
 80101d2:	e7dd      	b.n	8010190 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 80101d4:	3501      	adds	r5, #1
 80101d6:	e77e      	b.n	80100d6 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 80101d8:	a818      	add	r0, sp, #96	; 0x60
 80101da:	f7fe ffed 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80101de:	e1be      	b.n	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80101e0:	2301      	movs	r3, #1
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	9004      	str	r0, [sp, #16]
 80101e8:	9402      	str	r4, [sp, #8]
 80101ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80101ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80101f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80101f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80101f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101f8:	463a      	mov	r2, r7
 80101fa:	e041      	b.n	8010280 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 80101fc:	4630      	mov	r0, r6
 80101fe:	910a      	str	r1, [sp, #40]	; 0x28
 8010200:	f7fe ffcc 	bl	800f19c <GUI_ALLOC_LockH>
 8010204:	4682      	mov	sl, r0
 8010206:	a81c      	add	r0, sp, #112	; 0x70
 8010208:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801020c:	f840 ad10 	str.w	sl, [r0, #-16]!
 8010210:	f8da 4000 	ldr.w	r4, [sl]
 8010214:	9210      	str	r2, [sp, #64]	; 0x40
 8010216:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801021a:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 801021e:	4c9e      	ldr	r4, [pc, #632]	; (8010498 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 8010220:	b213      	sxth	r3, r2
 8010222:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010226:	920b      	str	r2, [sp, #44]	; 0x2c
 8010228:	9309      	str	r3, [sp, #36]	; 0x24
 801022a:	f7fe ffc5 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 801022e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010232:	900e      	str	r0, [sp, #56]	; 0x38
 8010234:	4899      	ldr	r0, [pc, #612]	; (801049c <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 8010236:	6800      	ldr	r0, [r0, #0]
 8010238:	7c40      	ldrb	r0, [r0, #17]
 801023a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 801023e:	6925      	ldr	r5, [r4, #16]
 8010240:	f8d5 8000 	ldr.w	r8, [r5]
 8010244:	f7fc f852 	bl	800c2ec <GUI_GetBitsPerPixelEx>
 8010248:	2808      	cmp	r0, #8
 801024a:	fa0f fb87 	sxth.w	fp, r7
 801024e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010254:	d904      	bls.n	8010260 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8010256:	2810      	cmp	r0, #16
 8010258:	bf8c      	ite	hi
 801025a:	2404      	movhi	r4, #4
 801025c:	2402      	movls	r4, #2
 801025e:	e000      	b.n	8010262 <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 8010260:	2401      	movs	r4, #1
 8010262:	45a9      	cmp	r9, r5
 8010264:	d10f      	bne.n	8010286 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 8010266:	2001      	movs	r0, #1
 8010268:	9203      	str	r2, [sp, #12]
 801026a:	f10a 0218 	add.w	r2, sl, #24
 801026e:	9000      	str	r0, [sp, #0]
 8010270:	9001      	str	r0, [sp, #4]
 8010272:	9102      	str	r1, [sp, #8]
 8010274:	9204      	str	r2, [sp, #16]
 8010276:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010278:	990d      	ldr	r1, [sp, #52]	; 0x34
 801027a:	2200      	movs	r2, #0
 801027c:	9205      	str	r2, [sp, #20]
 801027e:	465a      	mov	r2, fp
 8010280:	f7fc fa7e 	bl	800c780 <LCD_DrawBitmap>
 8010284:	e16b      	b.n	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010286:	2920      	cmp	r1, #32
 8010288:	f040 808e 	bne.w	80103a8 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 801028c:	fb0b f004 	mul.w	r0, fp, r4
 8010290:	f7ff f950 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 8010294:	900e      	str	r0, [sp, #56]	; 0x38
 8010296:	2800      	cmp	r0, #0
 8010298:	f000 8161 	beq.w	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 801029c:	f7fe ff7e 	bl	800f19c <GUI_ALLOC_LockH>
 80102a0:	901a      	str	r0, [sp, #104]	; 0x68
 80102a2:	4630      	mov	r0, r6
 80102a4:	f7fe ff7a 	bl	800f19c <GUI_ALLOC_LockH>
 80102a8:	9018      	str	r0, [sp, #96]	; 0x60
 80102aa:	692b      	ldr	r3, [r5, #16]
 80102ac:	f100 0a18 	add.w	sl, r0, #24
 80102b0:	ea4f 068b 	mov.w	r6, fp, lsl #2
 80102b4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d02f      	beq.n	801031c <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 80102bc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80102c0:	2c02      	cmp	r4, #2
 80102c2:	d003      	beq.n	80102cc <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 80102c4:	2c04      	cmp	r4, #4
 80102c6:	d001      	beq.n	80102cc <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 80102c8:	2c01      	cmp	r4, #1
 80102ca:	d106      	bne.n	80102da <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80102cc:	4650      	mov	r0, sl
 80102ce:	692f      	ldr	r7, [r5, #16]
 80102d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80102d2:	465a      	mov	r2, fp
 80102d4:	4623      	mov	r3, r4
 80102d6:	47b8      	blx	r7
 80102d8:	44b2      	add	sl, r6
 80102da:	2301      	movs	r3, #1
 80102dc:	2200      	movs	r2, #0
 80102de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	9301      	str	r3, [sp, #4]
 80102e4:	9203      	str	r2, [sp, #12]
 80102e6:	9104      	str	r1, [sp, #16]
 80102e8:	9205      	str	r2, [sp, #20]
 80102ea:	4641      	mov	r1, r8
 80102ec:	465a      	mov	r2, fp
 80102ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80102f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80102f4:	f7fc fa44 	bl	800c780 <LCD_DrawBitmap>
 80102f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80102fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102fc:	f108 0701 	add.w	r7, r8, #1
 8010300:	fa02 f381 	sxtah	r3, r2, r1
 8010304:	42bb      	cmp	r3, r7
 8010306:	d107      	bne.n	8010318 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8010308:	a818      	add	r0, sp, #96	; 0x60
 801030a:	f7fe ff55 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 801030e:	a81a      	add	r0, sp, #104	; 0x68
 8010310:	f7fe ff52 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010314:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010316:	e120      	b.n	801055a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010318:	46b8      	mov	r8, r7
 801031a:	e7d1      	b.n	80102c0 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 801031c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801031e:	2c02      	cmp	r4, #2
 8010320:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010322:	d00e      	beq.n	8010342 <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8010324:	2c04      	cmp	r4, #4
 8010326:	d018      	beq.n	801035a <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8010328:	2c01      	cmp	r4, #1
 801032a:	d125      	bne.n	8010378 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 801032c:	2300      	movs	r3, #0
 801032e:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010332:	9309      	str	r3, [sp, #36]	; 0x24
 8010334:	47c0      	blx	r8
 8010336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010338:	54f8      	strb	r0, [r7, r3]
 801033a:	3301      	adds	r3, #1
 801033c:	459b      	cmp	fp, r3
 801033e:	d1f6      	bne.n	801032e <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 8010340:	e019      	b.n	8010376 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8010342:	2300      	movs	r3, #0
 8010344:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010348:	9309      	str	r3, [sp, #36]	; 0x24
 801034a:	47c0      	blx	r8
 801034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034e:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 8010352:	3301      	adds	r3, #1
 8010354:	459b      	cmp	fp, r3
 8010356:	d1f5      	bne.n	8010344 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8010358:	e00d      	b.n	8010376 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 801035a:	465a      	mov	r2, fp
 801035c:	2300      	movs	r3, #0
 801035e:	f85a 0003 	ldr.w	r0, [sl, r3]
 8010362:	920b      	str	r2, [sp, #44]	; 0x2c
 8010364:	9309      	str	r3, [sp, #36]	; 0x24
 8010366:	47c0      	blx	r8
 8010368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801036a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036c:	3a01      	subs	r2, #1
 801036e:	50f8      	str	r0, [r7, r3]
 8010370:	f103 0304 	add.w	r3, r3, #4
 8010374:	d1f3      	bne.n	801035e <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8010376:	44b2      	add	sl, r6
 8010378:	2301      	movs	r3, #1
 801037a:	2200      	movs	r2, #0
 801037c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	9203      	str	r2, [sp, #12]
 8010384:	9104      	str	r1, [sp, #16]
 8010386:	9205      	str	r2, [sp, #20]
 8010388:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801038a:	f8cd 9008 	str.w	r9, [sp, #8]
 801038e:	4629      	mov	r1, r5
 8010390:	465a      	mov	r2, fp
 8010392:	f7fc f9f5 	bl	800c780 <LCD_DrawBitmap>
 8010396:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010398:	990d      	ldr	r1, [sp, #52]	; 0x34
 801039a:	1c6f      	adds	r7, r5, #1
 801039c:	fa01 f380 	sxtah	r3, r1, r0
 80103a0:	42bb      	cmp	r3, r7
 80103a2:	d0b1      	beq.n	8010308 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 80103a4:	463d      	mov	r5, r7
 80103a6:	e7ba      	b.n	801031e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80103a8:	2910      	cmp	r1, #16
 80103aa:	f040 80d8 	bne.w	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80103ae:	fa0f fa87 	sxth.w	sl, r7
 80103b2:	fb0a f004 	mul.w	r0, sl, r4
 80103b6:	f7ff f8bd 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 80103ba:	9012      	str	r0, [sp, #72]	; 0x48
 80103bc:	2800      	cmp	r0, #0
 80103be:	f000 80ce 	beq.w	801055e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80103c2:	f7fe feeb 	bl	800f19c <GUI_ALLOC_LockH>
 80103c6:	901a      	str	r0, [sp, #104]	; 0x68
 80103c8:	4630      	mov	r0, r6
 80103ca:	f7fe fee7 	bl	800f19c <GUI_ALLOC_LockH>
 80103ce:	9018      	str	r0, [sp, #96]	; 0x60
 80103d0:	692b      	ldr	r3, [r5, #16]
 80103d2:	f100 0618 	add.w	r6, r0, #24
 80103d6:	b113      	cbz	r3, 80103de <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 80103d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80103dc:	b92b      	cbnz	r3, 80103ea <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 80103de:	00e2      	lsls	r2, r4, #3
 80103e0:	b23f      	sxth	r7, r7
 80103e2:	9211      	str	r2, [sp, #68]	; 0x44
 80103e4:	007f      	lsls	r7, r7, #1
 80103e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80103e8:	e088      	b.n	80104fc <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 80103ea:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80103ee:	0080      	lsls	r0, r0, #2
 80103f0:	f7ff f8a0 	bl	800f534 <GUI_ALLOC_AllocNoInit>
 80103f4:	9011      	str	r0, [sp, #68]	; 0x44
 80103f6:	b118      	cbz	r0, 8010400 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 80103f8:	f7fe fed0 	bl	800f19c <GUI_ALLOC_LockH>
 80103fc:	9019      	str	r0, [sp, #100]	; 0x64
 80103fe:	e001      	b.n	8010404 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8010400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010402:	9319      	str	r3, [sp, #100]	; 0x64
 8010404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 80a0 	beq.w	801054c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 801040c:	b23f      	sxth	r7, r7
 801040e:	007f      	lsls	r7, r7, #1
 8010410:	970e      	str	r7, [sp, #56]	; 0x38
 8010412:	00e7      	lsls	r7, r4, #3
 8010414:	9713      	str	r7, [sp, #76]	; 0x4c
 8010416:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010418:	970c      	str	r7, [sp, #48]	; 0x30
 801041a:	2c02      	cmp	r4, #2
 801041c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010420:	d004      	beq.n	801042c <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 8010422:	2c04      	cmp	r4, #4
 8010424:	d007      	beq.n	8010436 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010426:	2c01      	cmp	r4, #1
 8010428:	d114      	bne.n	8010454 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 801042a:	e004      	b.n	8010436 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 801042c:	4630      	mov	r0, r6
 801042e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010430:	4652      	mov	r2, sl
 8010432:	4623      	mov	r3, r4
 8010434:	e003      	b.n	801043e <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8010436:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010438:	4630      	mov	r0, r6
 801043a:	4652      	mov	r2, sl
 801043c:	2302      	movs	r3, #2
 801043e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8010442:	47b8      	blx	r7
 8010444:	692f      	ldr	r7, [r5, #16]
 8010446:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010448:	4641      	mov	r1, r8
 801044a:	4652      	mov	r2, sl
 801044c:	4623      	mov	r3, r4
 801044e:	47b8      	blx	r7
 8010450:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010452:	443e      	add	r6, r7
 8010454:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010456:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010458:	9104      	str	r1, [sp, #16]
 801045a:	2301      	movs	r3, #1
 801045c:	2200      	movs	r2, #0
 801045e:	f107 0801 	add.w	r8, r7, #1
 8010462:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	9702      	str	r7, [sp, #8]
 801046a:	9203      	str	r2, [sp, #12]
 801046c:	9205      	str	r2, [sp, #20]
 801046e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010472:	465a      	mov	r2, fp
 8010474:	f7fc f984 	bl	800c780 <LCD_DrawBitmap>
 8010478:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801047a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801047c:	fa00 f387 	sxtah	r3, r0, r7
 8010480:	4543      	cmp	r3, r8
 8010482:	d002      	beq.n	801048a <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8010484:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010488:	e7c7      	b.n	801041a <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 801048a:	a819      	add	r0, sp, #100	; 0x64
 801048c:	f7fe fe94 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010490:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010492:	f7fe febd 	bl	800f210 <GUI_ALLOC_Free>
 8010496:	e059      	b.n	801054c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8010498:	200056dc 	.word	0x200056dc
 801049c:	20000084 	.word	0x20000084
 80104a0:	2c04      	cmp	r4, #4
 80104a2:	d041      	beq.n	8010528 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 80104a4:	2c01      	cmp	r4, #1
 80104a6:	d111      	bne.n	80104cc <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 80104a8:	464a      	mov	r2, r9
 80104aa:	4631      	mov	r1, r6
 80104ac:	f831 0b02 	ldrh.w	r0, [r1], #2
 80104b0:	910a      	str	r1, [sp, #40]	; 0x28
 80104b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80104b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104b6:	4798      	blx	r3
 80104b8:	47c0      	blx	r8
 80104ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104bc:	f802 0b01 	strb.w	r0, [r2], #1
 80104c0:	eb09 000a 	add.w	r0, r9, sl
 80104c4:	4282      	cmp	r2, r0
 80104c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104c8:	d1f0      	bne.n	80104ac <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 80104ca:	443e      	add	r6, r7
 80104cc:	2301      	movs	r3, #1
 80104ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80104d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	2200      	movs	r2, #0
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	9002      	str	r0, [sp, #8]
 80104da:	9203      	str	r2, [sp, #12]
 80104dc:	9104      	str	r1, [sp, #16]
 80104de:	9205      	str	r2, [sp, #20]
 80104e0:	4629      	mov	r1, r5
 80104e2:	465a      	mov	r2, fp
 80104e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80104e6:	f7fc f94b 	bl	800c780 <LCD_DrawBitmap>
 80104ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80104ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104ee:	f105 0901 	add.w	r9, r5, #1
 80104f2:	fa02 f381 	sxtah	r3, r2, r1
 80104f6:	454b      	cmp	r3, r9
 80104f8:	d028      	beq.n	801054c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 80104fa:	464d      	mov	r5, r9
 80104fc:	2c02      	cmp	r4, #2
 80104fe:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010502:	d1cd      	bne.n	80104a0 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8010504:	464b      	mov	r3, r9
 8010506:	4631      	mov	r1, r6
 8010508:	46d9      	mov	r9, fp
 801050a:	f831 0b02 	ldrh.w	r0, [r1], #2
 801050e:	910a      	str	r1, [sp, #40]	; 0x28
 8010510:	9309      	str	r3, [sp, #36]	; 0x24
 8010512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010514:	4790      	blx	r2
 8010516:	47c0      	blx	r8
 8010518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801051c:	f823 0b02 	strh.w	r0, [r3], #2
 8010520:	f1b9 0901 	subs.w	r9, r9, #1
 8010524:	d1f1      	bne.n	801050a <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010526:	e7d0      	b.n	80104ca <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010528:	464b      	mov	r3, r9
 801052a:	4631      	mov	r1, r6
 801052c:	46d9      	mov	r9, fp
 801052e:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010532:	910a      	str	r1, [sp, #40]	; 0x28
 8010534:	9309      	str	r3, [sp, #36]	; 0x24
 8010536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010538:	4790      	blx	r2
 801053a:	47c0      	blx	r8
 801053c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801053e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010540:	f843 0b04 	str.w	r0, [r3], #4
 8010544:	f1b9 0901 	subs.w	r9, r9, #1
 8010548:	d1f1      	bne.n	801052e <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 801054a:	e7be      	b.n	80104ca <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 801054c:	a818      	add	r0, sp, #96	; 0x60
 801054e:	f7fe fe33 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010552:	a81a      	add	r0, sp, #104	; 0x68
 8010554:	f7fe fe30 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010558:	9812      	ldr	r0, [sp, #72]	; 0x48
 801055a:	f7fe fe59 	bl	800f210 <GUI_ALLOC_Free>
 801055e:	b01d      	add	sp, #116	; 0x74
 8010560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010564 <GUI_MEMDEV__WriteToActiveAlpha>:
 8010564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	4d5f      	ldr	r5, [pc, #380]	; (80106e8 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 801056a:	4f60      	ldr	r7, [pc, #384]	; (80106ec <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	7c5b      	ldrb	r3, [r3, #17]
 8010570:	b091      	sub	sp, #68	; 0x44
 8010572:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8010576:	900d      	str	r0, [sp, #52]	; 0x34
 8010578:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801057c:	460e      	mov	r6, r1
 801057e:	4614      	mov	r4, r2
 8010580:	f7fe fe0c 	bl	800f19c <GUI_ALLOC_LockH>
 8010584:	4602      	mov	r2, r0
 8010586:	a810      	add	r0, sp, #64	; 0x40
 8010588:	6813      	ldr	r3, [r2, #0]
 801058a:	f840 2d08 	str.w	r2, [r0, #-8]!
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 801059a:	9309      	str	r3, [sp, #36]	; 0x24
 801059c:	f7fe fe0c 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80105a0:	682b      	ldr	r3, [r5, #0]
 80105a2:	7c5b      	ldrb	r3, [r3, #17]
 80105a4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80105a8:	68c3      	ldr	r3, [r0, #12]
 80105aa:	2108      	movs	r1, #8
 80105ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ae:	4798      	blx	r3
 80105b0:	2817      	cmp	r0, #23
 80105b2:	bf88      	it	hi
 80105b4:	2020      	movhi	r0, #32
 80105b6:	9008      	str	r0, [sp, #32]
 80105b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80105bc:	f8d8 2000 	ldr.w	r2, [r8]
 80105c0:	910a      	str	r1, [sp, #40]	; 0x28
 80105c2:	2000      	movs	r0, #0
 80105c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80105c6:	f7fc fe07 	bl	800d1d8 <GUI__AllocAlphaBuffer>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f040 8089 	bne.w	80106e2 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80105d0:	682a      	ldr	r2, [r5, #0]
 80105d2:	fa0f f78a 	sxth.w	r7, sl
 80105d6:	19f5      	adds	r5, r6, r7
 80105d8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80105dc:	3d01      	subs	r5, #1
 80105de:	1aed      	subs	r5, r5, r3
 80105e0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80105e4:	2d00      	cmp	r5, #0
 80105e6:	bfcc      	ite	gt
 80105e8:	ebc5 0507 	rsbgt	r5, r5, r7
 80105ec:	463d      	movle	r5, r7
 80105ee:	42b3      	cmp	r3, r6
 80105f0:	bfc3      	ittte	gt
 80105f2:	ebc6 0103 	rsbgt	r1, r6, r3
 80105f6:	ebc1 0505 	rsbgt	r5, r1, r5
 80105fa:	461e      	movgt	r6, r3
 80105fc:	2100      	movle	r1, #0
 80105fe:	2d00      	cmp	r5, #0
 8010600:	dd6f      	ble.n	80106e2 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010602:	fa0f f389 	sxth.w	r3, r9
 8010606:	18e0      	adds	r0, r4, r3
 8010608:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 801060c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010610:	3801      	subs	r0, #1
 8010612:	ebcc 0000 	rsb	r0, ip, r0
 8010616:	2800      	cmp	r0, #0
 8010618:	bfc8      	it	gt
 801061a:	ebc0 0303 	rsbgt	r3, r0, r3
 801061e:	4294      	cmp	r4, r2
 8010620:	bfbd      	ittte	lt
 8010622:	ebc4 0b02 	rsblt	fp, r4, r2
 8010626:	ebcb 0303 	rsblt	r3, fp, r3
 801062a:	4614      	movlt	r4, r2
 801062c:	f04f 0b00 	movge.w	fp, #0
 8010630:	2b00      	cmp	r3, #0
 8010632:	dd56      	ble.n	80106e2 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010634:	fb07 1b0b 	mla	fp, r7, fp, r1
 8010638:	18e3      	adds	r3, r4, r3
 801063a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801063e:	930c      	str	r3, [sp, #48]	; 0x30
 8010640:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010642:	f7f9 fdcd 	bl	800a1e0 <GUI_MEMDEV_GetDataPtr>
 8010646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	ab0f      	add	r3, sp, #60	; 0x3c
 801064c:	eb00 020b 	add.w	r2, r0, fp
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	4630      	mov	r0, r6
 8010654:	4621      	mov	r1, r4
 8010656:	462b      	mov	r3, r5
 8010658:	f7fc fcd4 	bl	800d004 <GUI__DoAlphaBlending>
 801065c:	4681      	mov	r9, r0
 801065e:	2800      	cmp	r0, #0
 8010660:	d03f      	beq.n	80106e2 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010662:	4b23      	ldr	r3, [pc, #140]	; (80106f0 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8010664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010666:	4299      	cmp	r1, r3
 8010668:	d01e      	beq.n	80106a8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801066a:	4629      	mov	r1, r5
 801066c:	9a08      	ldr	r2, [sp, #32]
 801066e:	4643      	mov	r3, r8
 8010670:	f001 fc50 	bl	8011f14 <GUI__CompactPixelIndicesEx>
 8010674:	b9c0      	cbnz	r0, 80106a8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010676:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801067a:	f1bc 0f00 	cmp.w	ip, #0
 801067e:	d006      	beq.n	801068e <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8010680:	4648      	mov	r0, r9
 8010682:	4649      	mov	r1, r9
 8010684:	fa0f f28a 	sxth.w	r2, sl
 8010688:	2304      	movs	r3, #4
 801068a:	47e0      	blx	ip
 801068c:	e00c      	b.n	80106a8 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 801068e:	464a      	mov	r2, r9
 8010690:	463b      	mov	r3, r7
 8010692:	6810      	ldr	r0, [r2, #0]
 8010694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010696:	9206      	str	r2, [sp, #24]
 8010698:	9307      	str	r3, [sp, #28]
 801069a:	4788      	blx	r1
 801069c:	9b07      	ldr	r3, [sp, #28]
 801069e:	9a06      	ldr	r2, [sp, #24]
 80106a0:	3b01      	subs	r3, #1
 80106a2:	f842 0b04 	str.w	r0, [r2], #4
 80106a6:	d1f4      	bne.n	8010692 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 80106a8:	9a08      	ldr	r2, [sp, #32]
 80106aa:	9202      	str	r2, [sp, #8]
 80106ac:	2301      	movs	r3, #1
 80106ae:	2200      	movs	r2, #0
 80106b0:	f104 0c01 	add.w	ip, r4, #1
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	9301      	str	r3, [sp, #4]
 80106b8:	9203      	str	r2, [sp, #12]
 80106ba:	9205      	str	r2, [sp, #20]
 80106bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80106c0:	4630      	mov	r0, r6
 80106c2:	4621      	mov	r1, r4
 80106c4:	462a      	mov	r2, r5
 80106c6:	f8cd c01c 	str.w	ip, [sp, #28]
 80106ca:	f7fc f859 	bl	800c780 <LCD_DrawBitmap>
 80106ce:	2304      	movs	r3, #4
 80106d0:	fb1a bb03 	smlabb	fp, sl, r3, fp
 80106d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80106d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106da:	459c      	cmp	ip, r3
 80106dc:	d001      	beq.n	80106e2 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80106de:	4664      	mov	r4, ip
 80106e0:	e7ae      	b.n	8010640 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 80106e2:	b011      	add	sp, #68	; 0x44
 80106e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e8:	20000084 	.word	0x20000084
 80106ec:	200056dc 	.word	0x200056dc
 80106f0:	0800f5a3 	.word	0x0800f5a3

080106f4 <GUI_MEMDEV_WriteAt>:
 80106f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80106f6:	460c      	mov	r4, r1
 80106f8:	4615      	mov	r5, r2
 80106fa:	4606      	mov	r6, r0
 80106fc:	b330      	cbz	r0, 801074c <GUI_MEMDEV_WriteAt+0x58>
 80106fe:	f7fe fd4d 	bl	800f19c <GUI_ALLOC_LockH>
 8010702:	4a13      	ldr	r2, [pc, #76]	; (8010750 <GUI_MEMDEV_WriteAt+0x5c>)
 8010704:	8943      	ldrh	r3, [r0, #10]
 8010706:	9001      	str	r0, [sp, #4]
 8010708:	4294      	cmp	r4, r2
 801070a:	8902      	ldrh	r2, [r0, #8]
 801070c:	bf04      	itt	eq
 801070e:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8010712:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8010716:	f8ad 4008 	strh.w	r4, [sp, #8]
 801071a:	3a01      	subs	r2, #1
 801071c:	3b01      	subs	r3, #1
 801071e:	4422      	add	r2, r4
 8010720:	442b      	add	r3, r5
 8010722:	a801      	add	r0, sp, #4
 8010724:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010728:	f8ad 500a 	strh.w	r5, [sp, #10]
 801072c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010730:	f7fe fd42 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010734:	a802      	add	r0, sp, #8
 8010736:	f7f9 f9c5 	bl	8009ac4 <WM__InitIVRSearch>
 801073a:	b138      	cbz	r0, 801074c <GUI_MEMDEV_WriteAt+0x58>
 801073c:	4630      	mov	r0, r6
 801073e:	4621      	mov	r1, r4
 8010740:	462a      	mov	r2, r5
 8010742:	f7fa fb17 	bl	800ad74 <GUI_MEMDEV__WriteToActiveAt>
 8010746:	f7f9 f8fb 	bl	8009940 <WM__GetNextIVR>
 801074a:	e7f6      	b.n	801073a <GUI_MEMDEV_WriteAt+0x46>
 801074c:	b004      	add	sp, #16
 801074e:	bd70      	pop	{r4, r5, r6, pc}
 8010750:	fffff001 	.word	0xfffff001

08010754 <GUI_MEMDEV_Write>:
 8010754:	4901      	ldr	r1, [pc, #4]	; (801075c <GUI_MEMDEV_Write+0x8>)
 8010756:	460a      	mov	r2, r1
 8010758:	f7ff bfcc 	b.w	80106f4 <GUI_MEMDEV_WriteAt>
 801075c:	fffff001 	.word	0xfffff001

08010760 <GUI_USAGE_BM_AddPixel>:
 8010760:	4603      	mov	r3, r0
 8010762:	b510      	push	{r4, lr}
 8010764:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8010768:	1b09      	subs	r1, r1, r4
 801076a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801076e:	6900      	ldr	r0, [r0, #16]
 8010770:	1b12      	subs	r2, r2, r4
 8010772:	fb00 3302 	mla	r3, r0, r2, r3
 8010776:	10c8      	asrs	r0, r1, #3
 8010778:	2280      	movs	r2, #128	; 0x80
 801077a:	f001 0107 	and.w	r1, r1, #7
 801077e:	fa42 f101 	asr.w	r1, r2, r1
 8010782:	5c1a      	ldrb	r2, [r3, r0]
 8010784:	4311      	orrs	r1, r2
 8010786:	5419      	strb	r1, [r3, r0]
 8010788:	bd10      	pop	{r4, pc}

0801078a <GUI_USAGE_BM_GetNextDirty>:
 801078a:	b570      	push	{r4, r5, r6, lr}
 801078c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8010790:	680b      	ldr	r3, [r1, #0]
 8010792:	8886      	ldrh	r6, [r0, #4]
 8010794:	42a2      	cmp	r2, r4
 8010796:	da41      	bge.n	801081c <GUI_USAGE_BM_GetNextDirty+0x92>
 8010798:	b236      	sxth	r6, r6
 801079a:	42b3      	cmp	r3, r6
 801079c:	6904      	ldr	r4, [r0, #16]
 801079e:	da3d      	bge.n	801081c <GUI_USAGE_BM_GetNextDirty+0x92>
 80107a0:	3014      	adds	r0, #20
 80107a2:	fb04 0202 	mla	r2, r4, r2, r0
 80107a6:	10dd      	asrs	r5, r3, #3
 80107a8:	1e70      	subs	r0, r6, #1
 80107aa:	1954      	adds	r4, r2, r5
 80107ac:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 80107b0:	5d55      	ldrb	r5, [r2, r5]
 80107b2:	f003 0207 	and.w	r2, r3, #7
 80107b6:	fa05 f202 	lsl.w	r2, r5, r2
 80107ba:	3401      	adds	r4, #1
 80107bc:	b2d2      	uxtb	r2, r2
 80107be:	b93a      	cbnz	r2, 80107d0 <GUI_USAGE_BM_GetNextDirty+0x46>
 80107c0:	b368      	cbz	r0, 801081e <GUI_USAGE_BM_GetNextDirty+0x94>
 80107c2:	3308      	adds	r3, #8
 80107c4:	f814 2b01 	ldrb.w	r2, [r4], #1
 80107c8:	3801      	subs	r0, #1
 80107ca:	f023 0307 	bic.w	r3, r3, #7
 80107ce:	e7f6      	b.n	80107be <GUI_USAGE_BM_GetNextDirty+0x34>
 80107d0:	0615      	lsls	r5, r2, #24
 80107d2:	d403      	bmi.n	80107dc <GUI_USAGE_BM_GetNextDirty+0x52>
 80107d4:	0052      	lsls	r2, r2, #1
 80107d6:	b2d2      	uxtb	r2, r2
 80107d8:	3301      	adds	r3, #1
 80107da:	e7f9      	b.n	80107d0 <GUI_USAGE_BM_GetNextDirty+0x46>
 80107dc:	2aff      	cmp	r2, #255	; 0xff
 80107de:	461d      	mov	r5, r3
 80107e0:	d005      	beq.n	80107ee <GUI_USAGE_BM_GetNextDirty+0x64>
 80107e2:	0656      	lsls	r6, r2, #25
 80107e4:	d504      	bpl.n	80107f0 <GUI_USAGE_BM_GetNextDirty+0x66>
 80107e6:	0052      	lsls	r2, r2, #1
 80107e8:	b2d2      	uxtb	r2, r2
 80107ea:	3301      	adds	r3, #1
 80107ec:	e7f9      	b.n	80107e2 <GUI_USAGE_BM_GetNextDirty+0x58>
 80107ee:	3307      	adds	r3, #7
 80107f0:	f003 0207 	and.w	r2, r3, #7
 80107f4:	2a07      	cmp	r2, #7
 80107f6:	d10d      	bne.n	8010814 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80107f8:	3801      	subs	r0, #1
 80107fa:	d40b      	bmi.n	8010814 <GUI_USAGE_BM_GetNextDirty+0x8a>
 80107fc:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010800:	2aff      	cmp	r2, #255	; 0xff
 8010802:	d101      	bne.n	8010808 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010804:	3308      	adds	r3, #8
 8010806:	e7f7      	b.n	80107f8 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8010808:	0610      	lsls	r0, r2, #24
 801080a:	d503      	bpl.n	8010814 <GUI_USAGE_BM_GetNextDirty+0x8a>
 801080c:	0052      	lsls	r2, r2, #1
 801080e:	b2d2      	uxtb	r2, r2
 8010810:	3301      	adds	r3, #1
 8010812:	e7f9      	b.n	8010808 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010814:	1b58      	subs	r0, r3, r5
 8010816:	600d      	str	r5, [r1, #0]
 8010818:	3001      	adds	r0, #1
 801081a:	bd70      	pop	{r4, r5, r6, pc}
 801081c:	2000      	movs	r0, #0
 801081e:	bd70      	pop	{r4, r5, r6, pc}

08010820 <_GUI_USAGE_BM_Delete>:
 8010820:	f7fe bcf6 	b.w	800f210 <GUI_ALLOC_Free>

08010824 <GUI_USAGE_BM_Clear>:
 8010824:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010828:	6902      	ldr	r2, [r0, #16]
 801082a:	2100      	movs	r1, #0
 801082c:	3014      	adds	r0, #20
 801082e:	435a      	muls	r2, r3
 8010830:	f001 be70 	b.w	8012514 <memset>

08010834 <GUI_USAGE_BM_AddHLine>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	f9b0 4000 	ldrsh.w	r4, [r0]
 801083a:	1b09      	subs	r1, r1, r4
 801083c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010840:	42a1      	cmp	r1, r4
 8010842:	da2f      	bge.n	80108a4 <GUI_USAGE_BM_AddHLine+0x70>
 8010844:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8010848:	440b      	add	r3, r1
 801084a:	f100 0414 	add.w	r4, r0, #20
 801084e:	3b01      	subs	r3, #1
 8010850:	6900      	ldr	r0, [r0, #16]
 8010852:	1b52      	subs	r2, r2, r5
 8010854:	43de      	mvns	r6, r3
 8010856:	fb00 4202 	mla	r2, r0, r2, r4
 801085a:	f001 0707 	and.w	r7, r1, #7
 801085e:	10cc      	asrs	r4, r1, #3
 8010860:	f006 0607 	and.w	r6, r6, #7
 8010864:	21ff      	movs	r1, #255	; 0xff
 8010866:	fa41 f707 	asr.w	r7, r1, r7
 801086a:	fa01 f606 	lsl.w	r6, r1, r6
 801086e:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 8010872:	eb02 0504 	add.w	r5, r2, r4
 8010876:	b2ff      	uxtb	r7, r7
 8010878:	b2f6      	uxtb	r6, r6
 801087a:	5d10      	ldrb	r0, [r2, r4]
 801087c:	d103      	bne.n	8010886 <GUI_USAGE_BM_AddHLine+0x52>
 801087e:	403e      	ands	r6, r7
 8010880:	4330      	orrs	r0, r6
 8010882:	5510      	strb	r0, [r2, r4]
 8010884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010886:	4338      	orrs	r0, r7
 8010888:	5510      	strb	r0, [r2, r4]
 801088a:	1e5c      	subs	r4, r3, #1
 801088c:	2c00      	cmp	r4, #0
 801088e:	f105 0501 	add.w	r5, r5, #1
 8010892:	dd04      	ble.n	801089e <GUI_USAGE_BM_AddHLine+0x6a>
 8010894:	4628      	mov	r0, r5
 8010896:	4622      	mov	r2, r4
 8010898:	f001 fe3c 	bl	8012514 <memset>
 801089c:	4425      	add	r5, r4
 801089e:	782b      	ldrb	r3, [r5, #0]
 80108a0:	431e      	orrs	r6, r3
 80108a2:	702e      	strb	r6, [r5, #0]
 80108a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108a8 <GUI_USAGE_BM_Create>:
 80108a8:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	f102 060f 	add.w	r6, r2, #15
 80108b0:	1136      	asrs	r6, r6, #4
 80108b2:	0076      	lsls	r6, r6, #1
 80108b4:	4682      	mov	sl, r0
 80108b6:	fb06 f003 	mul.w	r0, r6, r3
 80108ba:	3014      	adds	r0, #20
 80108bc:	4689      	mov	r9, r1
 80108be:	4690      	mov	r8, r2
 80108c0:	461f      	mov	r7, r3
 80108c2:	f7fe fe43 	bl	800f54c <GUI_ALLOC_AllocZero>
 80108c6:	4683      	mov	fp, r0
 80108c8:	b198      	cbz	r0, 80108f2 <GUI_USAGE_BM_Create+0x4a>
 80108ca:	f7fe fc67 	bl	800f19c <GUI_ALLOC_LockH>
 80108ce:	4604      	mov	r4, r0
 80108d0:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <GUI_USAGE_BM_Create+0x54>)
 80108d2:	60a3      	str	r3, [r4, #8]
 80108d4:	a802      	add	r0, sp, #8
 80108d6:	2301      	movs	r3, #1
 80108d8:	f840 4d04 	str.w	r4, [r0, #-4]!
 80108dc:	f8a4 8004 	strh.w	r8, [r4, #4]
 80108e0:	f8a4 a000 	strh.w	sl, [r4]
 80108e4:	f8a4 9002 	strh.w	r9, [r4, #2]
 80108e8:	80e7      	strh	r7, [r4, #6]
 80108ea:	81a3      	strh	r3, [r4, #12]
 80108ec:	6126      	str	r6, [r4, #16]
 80108ee:	f7fe fc63 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80108f2:	4658      	mov	r0, fp
 80108f4:	b002      	add	sp, #8
 80108f6:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80108fa:	bf00      	nop
 80108fc:	0801520c 	.word	0x0801520c

08010900 <GUI_USAGE_DecUseCnt>:
 8010900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010902:	4605      	mov	r5, r0
 8010904:	f7fe fc4a 	bl	800f19c <GUI_ALLOC_LockH>
 8010908:	4602      	mov	r2, r0
 801090a:	a802      	add	r0, sp, #8
 801090c:	8994      	ldrh	r4, [r2, #12]
 801090e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8010912:	3c01      	subs	r4, #1
 8010914:	b2a4      	uxth	r4, r4
 8010916:	8194      	strh	r4, [r2, #12]
 8010918:	f7fe fc4e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 801091c:	b914      	cbnz	r4, 8010924 <GUI_USAGE_DecUseCnt+0x24>
 801091e:	4628      	mov	r0, r5
 8010920:	f7fe fc76 	bl	800f210 <GUI_ALLOC_Free>
 8010924:	b003      	add	sp, #12
 8010926:	bd30      	pop	{r4, r5, pc}

08010928 <GUI_USAGE_AddRect>:
 8010928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801092c:	4605      	mov	r5, r0
 801092e:	4688      	mov	r8, r1
 8010930:	4617      	mov	r7, r2
 8010932:	4699      	mov	r9, r3
 8010934:	68a8      	ldr	r0, [r5, #8]
 8010936:	464b      	mov	r3, r9
 8010938:	6846      	ldr	r6, [r0, #4]
 801093a:	4641      	mov	r1, r8
 801093c:	4628      	mov	r0, r5
 801093e:	1c54      	adds	r4, r2, #1
 8010940:	47b0      	blx	r6
 8010942:	9b08      	ldr	r3, [sp, #32]
 8010944:	443b      	add	r3, r7
 8010946:	42a3      	cmp	r3, r4
 8010948:	d001      	beq.n	801094e <GUI_USAGE_AddRect+0x26>
 801094a:	4622      	mov	r2, r4
 801094c:	e7f2      	b.n	8010934 <GUI_USAGE_AddRect+0xc>
 801094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08010954 <GUI_MEMDEV_ReduceYSize>:
 8010954:	b513      	push	{r0, r1, r4, lr}
 8010956:	460c      	mov	r4, r1
 8010958:	b918      	cbnz	r0, 8010962 <GUI_MEMDEV_ReduceYSize+0xe>
 801095a:	4b08      	ldr	r3, [pc, #32]	; (801097c <GUI_MEMDEV_ReduceYSize+0x28>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010960:	b150      	cbz	r0, 8010978 <GUI_MEMDEV_ReduceYSize+0x24>
 8010962:	f7fe fc1b 	bl	800f19c <GUI_ALLOC_LockH>
 8010966:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801096a:	9001      	str	r0, [sp, #4]
 801096c:	429c      	cmp	r4, r3
 801096e:	bfb8      	it	lt
 8010970:	8144      	strhlt	r4, [r0, #10]
 8010972:	a801      	add	r0, sp, #4
 8010974:	f7fe fc20 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010978:	b002      	add	sp, #8
 801097a:	bd10      	pop	{r4, pc}
 801097c:	20000084 	.word	0x20000084

08010980 <GUI_MEMDEV_Clear>:
 8010980:	b513      	push	{r0, r1, r4, lr}
 8010982:	b918      	cbnz	r0, 801098c <GUI_MEMDEV_Clear+0xc>
 8010984:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <GUI_MEMDEV_Clear+0x3c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801098a:	b1a8      	cbz	r0, 80109b8 <GUI_MEMDEV_Clear+0x38>
 801098c:	f7fe fc06 	bl	800f19c <GUI_ALLOC_LockH>
 8010990:	ab02      	add	r3, sp, #8
 8010992:	6944      	ldr	r4, [r0, #20]
 8010994:	f843 0d08 	str.w	r0, [r3, #-8]!
 8010998:	4668      	mov	r0, sp
 801099a:	f7fe fc0d 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 801099e:	b15c      	cbz	r4, 80109b8 <GUI_MEMDEV_Clear+0x38>
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7fe fbfb 	bl	800f19c <GUI_ALLOC_LockH>
 80109a6:	ac02      	add	r4, sp, #8
 80109a8:	6883      	ldr	r3, [r0, #8]
 80109aa:	f844 0d04 	str.w	r0, [r4, #-4]!
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	4798      	blx	r3
 80109b2:	4620      	mov	r0, r4
 80109b4:	f7fe fc00 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80109b8:	b002      	add	sp, #8
 80109ba:	bd10      	pop	{r4, pc}
 80109bc:	20000084 	.word	0x20000084

080109c0 <_GetDevData>:
 80109c0:	4802      	ldr	r0, [pc, #8]	; (80109cc <_GetDevData+0xc>)
 80109c2:	2901      	cmp	r1, #1
 80109c4:	bf18      	it	ne
 80109c6:	2000      	movne	r0, #0
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	08015264 	.word	0x08015264

080109d0 <_GetDevFunc>:
 80109d0:	4802      	ldr	r0, [pc, #8]	; (80109dc <_GetDevFunc+0xc>)
 80109d2:	2916      	cmp	r1, #22
 80109d4:	bf18      	it	ne
 80109d6:	2000      	movne	r0, #0
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	0800fe41 	.word	0x0800fe41

080109e0 <_SetOrg>:
 80109e0:	6800      	ldr	r0, [r0, #0]
 80109e2:	b508      	push	{r3, lr}
 80109e4:	b110      	cbz	r0, 80109ec <_SetOrg+0xc>
 80109e6:	68c3      	ldr	r3, [r0, #12]
 80109e8:	6a1b      	ldr	r3, [r3, #32]
 80109ea:	4798      	blx	r3
 80109ec:	bd08      	pop	{r3, pc}

080109ee <_GetRect>:
 80109ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109f0:	6880      	ldr	r0, [r0, #8]
 80109f2:	460c      	mov	r4, r1
 80109f4:	f7fe fbd2 	bl	800f19c <GUI_ALLOC_LockH>
 80109f8:	4603      	mov	r3, r0
 80109fa:	a802      	add	r0, sp, #8
 80109fc:	8899      	ldrh	r1, [r3, #4]
 80109fe:	88da      	ldrh	r2, [r3, #6]
 8010a00:	891d      	ldrh	r5, [r3, #8]
 8010a02:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010a06:	895b      	ldrh	r3, [r3, #10]
 8010a08:	8021      	strh	r1, [r4, #0]
 8010a0a:	8062      	strh	r2, [r4, #2]
 8010a0c:	4429      	add	r1, r5
 8010a0e:	441a      	add	r2, r3
 8010a10:	3901      	subs	r1, #1
 8010a12:	3a01      	subs	r2, #1
 8010a14:	80a1      	strh	r1, [r4, #4]
 8010a16:	80e2      	strh	r2, [r4, #6]
 8010a18:	f7fe fbce 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010a1c:	b003      	add	sp, #12
 8010a1e:	bd30      	pop	{r4, r5, pc}

08010a20 <_XY2PTR>:
 8010a20:	4b0e      	ldr	r3, [pc, #56]	; (8010a5c <_XY2PTR+0x3c>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a26:	4605      	mov	r5, r0
 8010a28:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010a2a:	460e      	mov	r6, r1
 8010a2c:	f7fe fbb6 	bl	800f19c <GUI_ALLOC_LockH>
 8010a30:	4603      	mov	r3, r0
 8010a32:	a802      	add	r0, sp, #8
 8010a34:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010a38:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010a3c:	f103 0118 	add.w	r1, r3, #24
 8010a40:	1b36      	subs	r6, r6, r4
 8010a42:	68dc      	ldr	r4, [r3, #12]
 8010a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a48:	fb04 1406 	mla	r4, r4, r6, r1
 8010a4c:	1aed      	subs	r5, r5, r3
 8010a4e:	f7fe fbb3 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010a52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8010a56:	4620      	mov	r0, r4
 8010a58:	b002      	add	sp, #8
 8010a5a:	bd70      	pop	{r4, r5, r6, pc}
 8010a5c:	20000084 	.word	0x20000084

08010a60 <_GetPixelIndex>:
 8010a60:	b508      	push	{r3, lr}
 8010a62:	4608      	mov	r0, r1
 8010a64:	4611      	mov	r1, r2
 8010a66:	f7ff ffdb 	bl	8010a20 <_XY2PTR>
 8010a6a:	8800      	ldrh	r0, [r0, #0]
 8010a6c:	bd08      	pop	{r3, pc}
	...

08010a70 <_XorPixel>:
 8010a70:	4b14      	ldr	r3, [pc, #80]	; (8010ac4 <_XorPixel+0x54>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a76:	4607      	mov	r7, r0
 8010a78:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010a7a:	4615      	mov	r5, r2
 8010a7c:	460e      	mov	r6, r1
 8010a7e:	f7fe fb8d 	bl	800f19c <GUI_ALLOC_LockH>
 8010a82:	4629      	mov	r1, r5
 8010a84:	9000      	str	r0, [sp, #0]
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ff ffca 	bl	8010a20 <_XY2PTR>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	4604      	mov	r4, r0
 8010a90:	689b      	ldr	r3, [r3, #8]
 8010a92:	4798      	blx	r3
 8010a94:	8823      	ldrh	r3, [r4, #0]
 8010a96:	4058      	eors	r0, r3
 8010a98:	9b00      	ldr	r3, [sp, #0]
 8010a9a:	8020      	strh	r0, [r4, #0]
 8010a9c:	6958      	ldr	r0, [r3, #20]
 8010a9e:	b160      	cbz	r0, 8010aba <_XorPixel+0x4a>
 8010aa0:	f7fe fb7c 	bl	800f19c <GUI_ALLOC_LockH>
 8010aa4:	ac02      	add	r4, sp, #8
 8010aa6:	6883      	ldr	r3, [r0, #8]
 8010aa8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4631      	mov	r1, r6
 8010ab0:	462a      	mov	r2, r5
 8010ab2:	4798      	blx	r3
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f7fe fb7f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010aba:	4668      	mov	r0, sp
 8010abc:	f7fe fb7c 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010ac0:	b003      	add	sp, #12
 8010ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ac4:	20000084 	.word	0x20000084

08010ac8 <_SetPixelIndex>:
 8010ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010aca:	461c      	mov	r4, r3
 8010acc:	4b10      	ldr	r3, [pc, #64]	; (8010b10 <_SetPixelIndex+0x48>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010ad2:	460e      	mov	r6, r1
 8010ad4:	4615      	mov	r5, r2
 8010ad6:	f7fe fb61 	bl	800f19c <GUI_ALLOC_LockH>
 8010ada:	4629      	mov	r1, r5
 8010adc:	9000      	str	r0, [sp, #0]
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f7ff ff9e 	bl	8010a20 <_XY2PTR>
 8010ae4:	9b00      	ldr	r3, [sp, #0]
 8010ae6:	8004      	strh	r4, [r0, #0]
 8010ae8:	6958      	ldr	r0, [r3, #20]
 8010aea:	b160      	cbz	r0, 8010b06 <_SetPixelIndex+0x3e>
 8010aec:	f7fe fb56 	bl	800f19c <GUI_ALLOC_LockH>
 8010af0:	ac02      	add	r4, sp, #8
 8010af2:	6883      	ldr	r3, [r0, #8]
 8010af4:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4631      	mov	r1, r6
 8010afc:	462a      	mov	r2, r5
 8010afe:	4798      	blx	r3
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7fe fb59 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010b06:	4668      	mov	r0, sp
 8010b08:	f7fe fb56 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010b0c:	b002      	add	sp, #8
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	20000084 	.word	0x20000084

08010b14 <_DrawVLine>:
 8010b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b18:	4d2c      	ldr	r5, [pc, #176]	; (8010bcc <_DrawVLine+0xb8>)
 8010b1a:	461e      	mov	r6, r3
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	4681      	mov	r9, r0
 8010b20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010b22:	460f      	mov	r7, r1
 8010b24:	4614      	mov	r4, r2
 8010b26:	f7fe fb39 	bl	800f19c <GUI_ALLOC_LockH>
 8010b2a:	9000      	str	r0, [sp, #0]
 8010b2c:	6940      	ldr	r0, [r0, #20]
 8010b2e:	46aa      	mov	sl, r5
 8010b30:	b108      	cbz	r0, 8010b36 <_DrawVLine+0x22>
 8010b32:	f7fe fb33 	bl	800f19c <GUI_ALLOC_LockH>
 8010b36:	9001      	str	r0, [sp, #4]
 8010b38:	4621      	mov	r1, r4
 8010b3a:	4638      	mov	r0, r7
 8010b3c:	f7ff ff70 	bl	8010a20 <_XY2PTR>
 8010b40:	9b00      	ldr	r3, [sp, #0]
 8010b42:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010b46:	f8da 3000 	ldr.w	r3, [sl]
 8010b4a:	7c1a      	ldrb	r2, [r3, #16]
 8010b4c:	07d2      	lsls	r2, r2, #31
 8010b4e:	4605      	mov	r5, r0
 8010b50:	d51f      	bpl.n	8010b92 <_DrawVLine+0x7e>
 8010b52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b56:	689b      	ldr	r3, [r3, #8]
 8010b58:	4798      	blx	r3
 8010b5a:	fa1f f880 	uxth.w	r8, r0
 8010b5e:	9801      	ldr	r0, [sp, #4]
 8010b60:	b120      	cbz	r0, 8010b6c <_DrawVLine+0x58>
 8010b62:	6883      	ldr	r3, [r0, #8]
 8010b64:	4639      	mov	r1, r7
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4622      	mov	r2, r4
 8010b6a:	4798      	blx	r3
 8010b6c:	882b      	ldrh	r3, [r5, #0]
 8010b6e:	ea88 0303 	eor.w	r3, r8, r3
 8010b72:	802b      	strh	r3, [r5, #0]
 8010b74:	9b00      	ldr	r3, [sp, #0]
 8010b76:	3401      	adds	r4, #1
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	42b4      	cmp	r4, r6
 8010b7c:	441d      	add	r5, r3
 8010b7e:	ddee      	ble.n	8010b5e <_DrawVLine+0x4a>
 8010b80:	4668      	mov	r0, sp
 8010b82:	f7fe fb19 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010b86:	9b01      	ldr	r3, [sp, #4]
 8010b88:	b1eb      	cbz	r3, 8010bc6 <_DrawVLine+0xb2>
 8010b8a:	a801      	add	r0, sp, #4
 8010b8c:	f7fe fb14 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010b90:	e019      	b.n	8010bc6 <_DrawVLine+0xb2>
 8010b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b94:	f8d3 9000 	ldr.w	r9, [r3]
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	b163      	cbz	r3, 8010bb6 <_DrawVLine+0xa2>
 8010b9c:	9801      	ldr	r0, [sp, #4]
 8010b9e:	6883      	ldr	r3, [r0, #8]
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	3401      	adds	r4, #1
 8010ba8:	4798      	blx	r3
 8010baa:	42b4      	cmp	r4, r6
 8010bac:	f8a5 9000 	strh.w	r9, [r5]
 8010bb0:	4445      	add	r5, r8
 8010bb2:	ddf3      	ble.n	8010b9c <_DrawVLine+0x88>
 8010bb4:	e7e4      	b.n	8010b80 <_DrawVLine+0x6c>
 8010bb6:	1b34      	subs	r4, r6, r4
 8010bb8:	3401      	adds	r4, #1
 8010bba:	3c01      	subs	r4, #1
 8010bbc:	f8a5 9000 	strh.w	r9, [r5]
 8010bc0:	4445      	add	r5, r8
 8010bc2:	d1fa      	bne.n	8010bba <_DrawVLine+0xa6>
 8010bc4:	e7dc      	b.n	8010b80 <_DrawVLine+0x6c>
 8010bc6:	b002      	add	sp, #8
 8010bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bcc:	20000084 	.word	0x20000084

08010bd0 <_FillRect>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	4f2a      	ldr	r7, [pc, #168]	; (8010c80 <_FillRect+0xb0>)
 8010bd6:	4614      	mov	r4, r2
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	4698      	mov	r8, r3
 8010bdc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8010bde:	b087      	sub	sp, #28
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	9302      	str	r3, [sp, #8]
 8010be4:	4682      	mov	sl, r0
 8010be6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8010be8:	460e      	mov	r6, r1
 8010bea:	f7fe fad7 	bl	800f19c <GUI_ALLOC_LockH>
 8010bee:	4621      	mov	r1, r4
 8010bf0:	9004      	str	r0, [sp, #16]
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ff ff14 	bl	8010a20 <_XY2PTR>
 8010bf8:	9a04      	ldr	r2, [sp, #16]
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	6950      	ldr	r0, [r2, #20]
 8010bfe:	68d3      	ldr	r3, [r2, #12]
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	ebc6 0908 	rsb	r9, r6, r8
 8010c06:	f109 0801 	add.w	r8, r9, #1
 8010c0a:	46bb      	mov	fp, r7
 8010c0c:	b180      	cbz	r0, 8010c30 <_FillRect+0x60>
 8010c0e:	f7fe fac5 	bl	800f19c <GUI_ALLOC_LockH>
 8010c12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010c14:	af06      	add	r7, sp, #24
 8010c16:	1b13      	subs	r3, r2, r4
 8010c18:	f847 0d04 	str.w	r0, [r7, #-4]!
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	4631      	mov	r1, r6
 8010c22:	4622      	mov	r2, r4
 8010c24:	4643      	mov	r3, r8
 8010c26:	f7ff fe7f 	bl	8010928 <GUI_USAGE_AddRect>
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f7fe fac4 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010c30:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8010c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c36:	429c      	cmp	r4, r3
 8010c38:	dc1c      	bgt.n	8010c74 <_FillRect+0xa4>
 8010c3a:	f8db 3000 	ldr.w	r3, [fp]
 8010c3e:	7c1b      	ldrb	r3, [r3, #16]
 8010c40:	07db      	lsls	r3, r3, #31
 8010c42:	d50d      	bpl.n	8010c60 <_FillRect+0x90>
 8010c44:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	4798      	blx	r3
 8010c4c:	19aa      	adds	r2, r5, r6
 8010c4e:	b280      	uxth	r0, r0
 8010c50:	1eab      	subs	r3, r5, #2
 8010c52:	8859      	ldrh	r1, [r3, #2]
 8010c54:	4041      	eors	r1, r0
 8010c56:	f823 1f02 	strh.w	r1, [r3, #2]!
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d1f9      	bne.n	8010c52 <_FillRect+0x82>
 8010c5e:	e005      	b.n	8010c6c <_FillRect+0x9c>
 8010c60:	9b02      	ldr	r3, [sp, #8]
 8010c62:	4628      	mov	r0, r5
 8010c64:	b299      	uxth	r1, r3
 8010c66:	4642      	mov	r2, r8
 8010c68:	f7fb ffc6 	bl	800cbf8 <GUI__memset16>
 8010c6c:	9a03      	ldr	r2, [sp, #12]
 8010c6e:	3401      	adds	r4, #1
 8010c70:	4415      	add	r5, r2
 8010c72:	e7df      	b.n	8010c34 <_FillRect+0x64>
 8010c74:	a804      	add	r0, sp, #16
 8010c76:	f7fe fa9f 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010c7a:	b007      	add	sp, #28
 8010c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	20000084 	.word	0x20000084

08010c84 <_DrawHLine>:
 8010c84:	b507      	push	{r0, r1, r2, lr}
 8010c86:	9200      	str	r2, [sp, #0]
 8010c88:	f7ff ffa2 	bl	8010bd0 <_FillRect>
 8010c8c:	b003      	add	sp, #12
 8010c8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c94 <_DrawBitmap>:
 8010c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	4c8b      	ldr	r4, [pc, #556]	; (8010ec8 <_DrawBitmap+0x234>)
 8010c9a:	b093      	sub	sp, #76	; 0x4c
 8010c9c:	469b      	mov	fp, r3
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	900d      	str	r0, [sp, #52]	; 0x34
 8010ca2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010ca4:	9207      	str	r2, [sp, #28]
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8010cac:	f7fe fa76 	bl	800f19c <GUI_ALLOC_LockH>
 8010cb0:	9010      	str	r0, [sp, #64]	; 0x40
 8010cb2:	6940      	ldr	r0, [r0, #20]
 8010cb4:	b108      	cbz	r0, 8010cba <_DrawBitmap+0x26>
 8010cb6:	f7fe fa71 	bl	800f19c <GUI_ALLOC_LockH>
 8010cba:	9011      	str	r0, [sp, #68]	; 0x44
 8010cbc:	a812      	add	r0, sp, #72	; 0x48
 8010cbe:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	9308      	str	r3, [sp, #32]
 8010cc6:	f7fe fa77 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 8010cca:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010ccc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010cce:	442e      	add	r6, r5
 8010cd0:	9604      	str	r6, [sp, #16]
 8010cd2:	b150      	cbz	r0, 8010cea <_DrawBitmap+0x56>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	7c1b      	ldrb	r3, [r3, #16]
 8010cd8:	0799      	lsls	r1, r3, #30
 8010cda:	d106      	bne.n	8010cea <_DrawBitmap+0x56>
 8010cdc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010cde:	9700      	str	r7, [sp, #0]
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	9a07      	ldr	r2, [sp, #28]
 8010ce4:	465b      	mov	r3, fp
 8010ce6:	f7ff fe1f 	bl	8010928 <GUI_USAGE_AddRect>
 8010cea:	9804      	ldr	r0, [sp, #16]
 8010cec:	9907      	ldr	r1, [sp, #28]
 8010cee:	f7ff fe97 	bl	8010a20 <_XY2PTR>
 8010cf2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010cf4:	2e10      	cmp	r6, #16
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	d13a      	bne.n	8010d70 <_DrawBitmap+0xdc>
 8010cfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cfc:	b11b      	cbz	r3, 8010d06 <_DrawBitmap+0x72>
 8010cfe:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8010d02:	2500      	movs	r5, #0
 8010d04:	e014      	b.n	8010d30 <_DrawBitmap+0x9c>
 8010d06:	4b71      	ldr	r3, [pc, #452]	; (8010ecc <_DrawBitmap+0x238>)
 8010d08:	681d      	ldr	r5, [r3, #0]
 8010d0a:	2d00      	cmp	r5, #0
 8010d0c:	d0f7      	beq.n	8010cfe <_DrawBitmap+0x6a>
 8010d0e:	9e08      	ldr	r6, [sp, #32]
 8010d10:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010d12:	9600      	str	r6, [sp, #0]
 8010d14:	9701      	str	r7, [sp, #4]
 8010d16:	4651      	mov	r1, sl
 8010d18:	465a      	mov	r2, fp
 8010d1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010d1c:	47a8      	blx	r5
 8010d1e:	e349      	b.n	80113b4 <_DrawBitmap+0x720>
 8010d20:	f1ba 0f00 	cmp.w	sl, #0
 8010d24:	d10a      	bne.n	8010d3c <_DrawBitmap+0xa8>
 8010d26:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010d28:	44ba      	add	sl, r7
 8010d2a:	9f08      	ldr	r7, [sp, #32]
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	443c      	add	r4, r7
 8010d30:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010d32:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8010d36:	42bd      	cmp	r5, r7
 8010d38:	dbf2      	blt.n	8010d20 <_DrawBitmap+0x8c>
 8010d3a:	e014      	b.n	8010d66 <_DrawBitmap+0xd2>
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d0f2      	beq.n	8010d26 <_DrawBitmap+0x92>
 8010d40:	4b63      	ldr	r3, [pc, #396]	; (8010ed0 <_DrawBitmap+0x23c>)
 8010d42:	4620      	mov	r0, r4
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4651      	mov	r1, sl
 8010d48:	4632      	mov	r2, r6
 8010d4a:	4798      	blx	r3
 8010d4c:	f1b8 0f00 	cmp.w	r8, #0
 8010d50:	d0e9      	beq.n	8010d26 <_DrawBitmap+0x92>
 8010d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d56:	9a07      	ldr	r2, [sp, #28]
 8010d58:	685f      	ldr	r7, [r3, #4]
 8010d5a:	9904      	ldr	r1, [sp, #16]
 8010d5c:	4640      	mov	r0, r8
 8010d5e:	442a      	add	r2, r5
 8010d60:	465b      	mov	r3, fp
 8010d62:	47b8      	blx	r7
 8010d64:	e7df      	b.n	8010d26 <_DrawBitmap+0x92>
 8010d66:	f1b8 0f00 	cmp.w	r8, #0
 8010d6a:	f040 8320 	bne.w	80113ae <_DrawBitmap+0x71a>
 8010d6e:	e321      	b.n	80113b4 <_DrawBitmap+0x720>
 8010d70:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010d72:	2e17      	cmp	r6, #23
 8010d74:	dd38      	ble.n	8010de8 <_DrawBitmap+0x154>
 8010d76:	2600      	movs	r6, #0
 8010d78:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010d7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010d7c:	42be      	cmp	r6, r7
 8010d7e:	f280 809e 	bge.w	8010ebe <_DrawBitmap+0x22a>
 8010d82:	9f07      	ldr	r7, [sp, #28]
 8010d84:	4437      	add	r7, r6
 8010d86:	f1ba 0f00 	cmp.w	sl, #0
 8010d8a:	d027      	beq.n	8010ddc <_DrawBitmap+0x148>
 8010d8c:	b334      	cbz	r4, 8010ddc <_DrawBitmap+0x148>
 8010d8e:	b13d      	cbz	r5, 8010da0 <_DrawBitmap+0x10c>
 8010d90:	68ab      	ldr	r3, [r5, #8]
 8010d92:	9904      	ldr	r1, [sp, #16]
 8010d94:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8010d98:	4628      	mov	r0, r5
 8010d9a:	463a      	mov	r2, r7
 8010d9c:	465b      	mov	r3, fp
 8010d9e:	47e0      	blx	ip
 8010da0:	1ea3      	subs	r3, r4, #2
 8010da2:	f1aa 0904 	sub.w	r9, sl, #4
 8010da6:	9303      	str	r3, [sp, #12]
 8010da8:	46d8      	mov	r8, fp
 8010daa:	9b04      	ldr	r3, [sp, #16]
 8010dac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010dae:	445b      	add	r3, fp
 8010db0:	ebc8 0103 	rsb	r1, r8, r3
 8010db4:	6903      	ldr	r3, [r0, #16]
 8010db6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	9102      	str	r1, [sp, #8]
 8010dbe:	4798      	blx	r3
 8010dc0:	9b03      	ldr	r3, [sp, #12]
 8010dc2:	9902      	ldr	r1, [sp, #8]
 8010dc4:	f823 0f02 	strh.w	r0, [r3, #2]!
 8010dc8:	9303      	str	r3, [sp, #12]
 8010dca:	b125      	cbz	r5, 8010dd6 <_DrawBitmap+0x142>
 8010dcc:	68ab      	ldr	r3, [r5, #8]
 8010dce:	4628      	mov	r0, r5
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	463a      	mov	r2, r7
 8010dd4:	4798      	blx	r3
 8010dd6:	f1b8 0801 	subs.w	r8, r8, #1
 8010dda:	d1e6      	bne.n	8010daa <_DrawBitmap+0x116>
 8010ddc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010dde:	44ba      	add	sl, r7
 8010de0:	9f08      	ldr	r7, [sp, #32]
 8010de2:	3601      	adds	r6, #1
 8010de4:	443c      	add	r4, r7
 8010de6:	e7c7      	b.n	8010d78 <_DrawBitmap+0xe4>
 8010de8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010dea:	2e08      	cmp	r6, #8
 8010dec:	f100 0402 	add.w	r4, r0, #2
 8010df0:	d170      	bne.n	8010ed4 <_DrawBitmap+0x240>
 8010df2:	9e07      	ldr	r6, [sp, #28]
 8010df4:	9f07      	ldr	r7, [sp, #28]
 8010df6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010df8:	1bf3      	subs	r3, r6, r7
 8010dfa:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8010dfc:	42bb      	cmp	r3, r7
 8010dfe:	f1a4 0002 	sub.w	r0, r4, #2
 8010e02:	da5c      	bge.n	8010ebe <_DrawBitmap+0x22a>
 8010e04:	4b30      	ldr	r3, [pc, #192]	; (8010ec8 <_DrawBitmap+0x234>)
 8010e06:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	7c1b      	ldrb	r3, [r3, #16]
 8010e0c:	b367      	cbz	r7, 8010e68 <_DrawBitmap+0x1d4>
 8010e0e:	f013 0303 	ands.w	r3, r3, #3
 8010e12:	d004      	beq.n	8010e1e <_DrawBitmap+0x18a>
 8010e14:	2b02      	cmp	r3, #2
 8010e16:	d14c      	bne.n	8010eb2 <_DrawBitmap+0x21e>
 8010e18:	46a0      	mov	r8, r4
 8010e1a:	9f04      	ldr	r7, [sp, #16]
 8010e1c:	e01d      	b.n	8010e5a <_DrawBitmap+0x1c6>
 8010e1e:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010e22:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010e24:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8010e28:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	455b      	cmp	r3, fp
 8010e30:	d1f5      	bne.n	8010e1e <_DrawBitmap+0x18a>
 8010e32:	e03e      	b.n	8010eb2 <_DrawBitmap+0x21e>
 8010e34:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010e36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010e3a:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010e3e:	b12d      	cbz	r5, 8010e4c <_DrawBitmap+0x1b8>
 8010e40:	68ab      	ldr	r3, [r5, #8]
 8010e42:	4628      	mov	r0, r5
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4639      	mov	r1, r7
 8010e48:	4632      	mov	r2, r6
 8010e4a:	4798      	blx	r3
 8010e4c:	9b04      	ldr	r3, [sp, #16]
 8010e4e:	3701      	adds	r7, #1
 8010e50:	445b      	add	r3, fp
 8010e52:	42bb      	cmp	r3, r7
 8010e54:	f108 0802 	add.w	r8, r8, #2
 8010e58:	d02b      	beq.n	8010eb2 <_DrawBitmap+0x21e>
 8010e5a:	9804      	ldr	r0, [sp, #16]
 8010e5c:	ebc0 030a 	rsb	r3, r0, sl
 8010e60:	5ddb      	ldrb	r3, [r3, r7]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d0f2      	beq.n	8010e4c <_DrawBitmap+0x1b8>
 8010e66:	e7e5      	b.n	8010e34 <_DrawBitmap+0x1a0>
 8010e68:	f013 0303 	ands.w	r3, r3, #3
 8010e6c:	d004      	beq.n	8010e78 <_DrawBitmap+0x1e4>
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d11f      	bne.n	8010eb2 <_DrawBitmap+0x21e>
 8010e72:	46a0      	mov	r8, r4
 8010e74:	9f04      	ldr	r7, [sp, #16]
 8010e76:	e015      	b.n	8010ea4 <_DrawBitmap+0x210>
 8010e78:	4b15      	ldr	r3, [pc, #84]	; (8010ed0 <_DrawBitmap+0x23c>)
 8010e7a:	4651      	mov	r1, sl
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	465a      	mov	r2, fp
 8010e80:	4798      	blx	r3
 8010e82:	e016      	b.n	8010eb2 <_DrawBitmap+0x21e>
 8010e84:	f828 3c02 	strh.w	r3, [r8, #-2]
 8010e88:	b12d      	cbz	r5, 8010e96 <_DrawBitmap+0x202>
 8010e8a:	68ab      	ldr	r3, [r5, #8]
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4639      	mov	r1, r7
 8010e92:	4632      	mov	r2, r6
 8010e94:	4798      	blx	r3
 8010e96:	9b04      	ldr	r3, [sp, #16]
 8010e98:	3701      	adds	r7, #1
 8010e9a:	445b      	add	r3, fp
 8010e9c:	42bb      	cmp	r3, r7
 8010e9e:	f108 0802 	add.w	r8, r8, #2
 8010ea2:	d006      	beq.n	8010eb2 <_DrawBitmap+0x21e>
 8010ea4:	9a04      	ldr	r2, [sp, #16]
 8010ea6:	ebc2 030a 	rsb	r3, r2, sl
 8010eaa:	5ddb      	ldrb	r3, [r3, r7]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0f2      	beq.n	8010e96 <_DrawBitmap+0x202>
 8010eb0:	e7e8      	b.n	8010e84 <_DrawBitmap+0x1f0>
 8010eb2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8010eb4:	44ba      	add	sl, r7
 8010eb6:	9f08      	ldr	r7, [sp, #32]
 8010eb8:	3601      	adds	r6, #1
 8010eba:	443c      	add	r4, r7
 8010ebc:	e79a      	b.n	8010df4 <_DrawBitmap+0x160>
 8010ebe:	2d00      	cmp	r5, #0
 8010ec0:	f040 8275 	bne.w	80113ae <_DrawBitmap+0x71a>
 8010ec4:	e276      	b.n	80113b4 <_DrawBitmap+0x720>
 8010ec6:	bf00      	nop
 8010ec8:	20000084 	.word	0x20000084
 8010ecc:	200055fc 	.word	0x200055fc
 8010ed0:	20000074 	.word	0x20000074
 8010ed4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010ed6:	4bab      	ldr	r3, [pc, #684]	; (8011184 <_DrawBitmap+0x4f0>)
 8010ed8:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8010eda:	9409      	str	r4, [sp, #36]	; 0x24
 8010edc:	2e00      	cmp	r6, #0
 8010ede:	bf08      	it	eq
 8010ee0:	461e      	moveq	r6, r3
 8010ee2:	9621      	str	r6, [sp, #132]	; 0x84
 8010ee4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8010ee6:	0076      	lsls	r6, r6, #1
 8010ee8:	960e      	str	r6, [sp, #56]	; 0x38
 8010eea:	00bf      	lsls	r7, r7, #2
 8010eec:	9e07      	ldr	r6, [sp, #28]
 8010eee:	970f      	str	r7, [sp, #60]	; 0x3c
 8010ef0:	9605      	str	r6, [sp, #20]
 8010ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ef4:	9e05      	ldr	r6, [sp, #20]
 8010ef6:	9f07      	ldr	r7, [sp, #28]
 8010ef8:	1e9c      	subs	r4, r3, #2
 8010efa:	1bf3      	subs	r3, r6, r7
 8010efc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010efe:	42b3      	cmp	r3, r6
 8010f00:	f280 8253 	bge.w	80113aa <_DrawBitmap+0x716>
 8010f04:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8010f06:	2f02      	cmp	r7, #2
 8010f08:	f000 80d9 	beq.w	80110be <_DrawBitmap+0x42a>
 8010f0c:	2f04      	cmp	r7, #4
 8010f0e:	f000 8178 	beq.w	8011202 <_DrawBitmap+0x56e>
 8010f12:	2f01      	cmp	r7, #1
 8010f14:	f040 823f 	bne.w	8011396 <_DrawBitmap+0x702>
 8010f18:	f8df 9270 	ldr.w	r9, [pc, #624]	; 801118c <_DrawBitmap+0x4f8>
 8010f1c:	f8d9 3000 	ldr.w	r3, [r9]
 8010f20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010f22:	f7fe f93b 	bl	800f19c <GUI_ALLOC_LockH>
 8010f26:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2a:	4a97      	ldr	r2, [pc, #604]	; (8011188 <_DrawBitmap+0x4f4>)
 8010f2c:	9010      	str	r0, [sp, #64]	; 0x40
 8010f2e:	5cd5      	ldrb	r5, [r2, r3]
 8010f30:	f8d9 3000 	ldr.w	r3, [r9]
 8010f34:	9820      	ldr	r0, [sp, #128]	; 0x80
 8010f36:	7c1b      	ldrb	r3, [r3, #16]
 8010f38:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010f3a:	f003 0303 	and.w	r3, r3, #3
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	465e      	mov	r6, fp
 8010f42:	f1c0 0808 	rsb	r8, r0, #8
 8010f46:	fa45 f500 	asr.w	r5, r5, r0
 8010f4a:	d022      	beq.n	8010f92 <_DrawBitmap+0x2fe>
 8010f4c:	2b03      	cmp	r3, #3
 8010f4e:	d062      	beq.n	8011016 <_DrawBitmap+0x382>
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d060      	beq.n	8011016 <_DrawBitmap+0x382>
 8010f54:	4652      	mov	r2, sl
 8010f56:	4546      	cmp	r6, r8
 8010f58:	bf38      	it	cc
 8010f5a:	46b0      	movcc	r8, r6
 8010f5c:	ebc8 0606 	rsb	r6, r8, r6
 8010f60:	4643      	mov	r3, r8
 8010f62:	4621      	mov	r1, r4
 8010f64:	f005 0001 	and.w	r0, r5, #1
 8010f68:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8010f70:	f821 0b02 	strh.w	r0, [r1], #2
 8010f74:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8010f78:	d1f4      	bne.n	8010f64 <_DrawBitmap+0x2d0>
 8010f7a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010f7e:	2e00      	cmp	r6, #0
 8010f80:	f000 8099 	beq.w	80110b6 <_DrawBitmap+0x422>
 8010f84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010f88:	497f      	ldr	r1, [pc, #508]	; (8011188 <_DrawBitmap+0x4f4>)
 8010f8a:	f04f 0808 	mov.w	r8, #8
 8010f8e:	5ccd      	ldrb	r5, [r1, r3]
 8010f90:	e7e1      	b.n	8010f56 <_DrawBitmap+0x2c2>
 8010f92:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010f94:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010f98:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8010f9c:	f8cd a018 	str.w	sl, [sp, #24]
 8010fa0:	4546      	cmp	r6, r8
 8010fa2:	bf38      	it	cc
 8010fa4:	46b0      	movcc	r8, r6
 8010fa6:	ebc8 0606 	rsb	r6, r8, r6
 8010faa:	b32f      	cbz	r7, 8010ff8 <_DrawBitmap+0x364>
 8010fac:	b91d      	cbnz	r5, 8010fb6 <_DrawBitmap+0x322>
 8010fae:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8010fb2:	44c1      	add	r9, r8
 8010fb4:	e024      	b.n	8011000 <_DrawBitmap+0x36c>
 8010fb6:	07ea      	lsls	r2, r5, #31
 8010fb8:	d50b      	bpl.n	8010fd2 <_DrawBitmap+0x33e>
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	9a05      	ldr	r2, [sp, #20]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f8cd c008 	str.w	ip, [sp, #8]
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	4649      	mov	r1, r9
 8010fc8:	4798      	blx	r3
 8010fca:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010fce:	f8a4 c000 	strh.w	ip, [r4]
 8010fd2:	f1b8 0801 	subs.w	r8, r8, #1
 8010fd6:	f109 0901 	add.w	r9, r9, #1
 8010fda:	f104 0402 	add.w	r4, r4, #2
 8010fde:	d00f      	beq.n	8011000 <_DrawBitmap+0x36c>
 8010fe0:	086d      	lsrs	r5, r5, #1
 8010fe2:	e7e3      	b.n	8010fac <_DrawBitmap+0x318>
 8010fe4:	07eb      	lsls	r3, r5, #31
 8010fe6:	bf48      	it	mi
 8010fe8:	f8a4 c000 	strhmi.w	ip, [r4]
 8010fec:	f1b8 0801 	subs.w	r8, r8, #1
 8010ff0:	f104 0402 	add.w	r4, r4, #2
 8010ff4:	d004      	beq.n	8011000 <_DrawBitmap+0x36c>
 8010ff6:	086d      	lsrs	r5, r5, #1
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	d1f3      	bne.n	8010fe4 <_DrawBitmap+0x350>
 8010ffc:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011000:	2e00      	cmp	r6, #0
 8011002:	d058      	beq.n	80110b6 <_DrawBitmap+0x422>
 8011004:	9906      	ldr	r1, [sp, #24]
 8011006:	4a60      	ldr	r2, [pc, #384]	; (8011188 <_DrawBitmap+0x4f4>)
 8011008:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801100c:	9106      	str	r1, [sp, #24]
 801100e:	5cd5      	ldrb	r5, [r2, r3]
 8011010:	f04f 0808 	mov.w	r8, #8
 8011014:	e7c4      	b.n	8010fa0 <_DrawBitmap+0x30c>
 8011016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011018:	6913      	ldr	r3, [r2, #16]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	4798      	blx	r3
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	930b      	str	r3, [sp, #44]	; 0x2c
 8011022:	b280      	uxth	r0, r0
 8011024:	900a      	str	r0, [sp, #40]	; 0x28
 8011026:	f10a 0901 	add.w	r9, sl, #1
 801102a:	4546      	cmp	r6, r8
 801102c:	bf38      	it	cc
 801102e:	46b0      	movcc	r8, r6
 8011030:	ebc8 0606 	rsb	r6, r8, r6
 8011034:	1ca3      	adds	r3, r4, #2
 8011036:	b31f      	cbz	r7, 8011080 <_DrawBitmap+0x3ec>
 8011038:	f8cd 8018 	str.w	r8, [sp, #24]
 801103c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801103e:	9a06      	ldr	r2, [sp, #24]
 8011040:	4440      	add	r0, r8
 8011042:	900c      	str	r0, [sp, #48]	; 0x30
 8011044:	1a81      	subs	r1, r0, r2
 8011046:	07e8      	lsls	r0, r5, #31
 8011048:	d50d      	bpl.n	8011066 <_DrawBitmap+0x3d2>
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	4638      	mov	r0, r7
 801104e:	f8d2 c000 	ldr.w	ip, [r2]
 8011052:	9a05      	ldr	r2, [sp, #20]
 8011054:	9302      	str	r3, [sp, #8]
 8011056:	47e0      	blx	ip
 8011058:	9b02      	ldr	r3, [sp, #8]
 801105a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801105c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8011060:	4042      	eors	r2, r0
 8011062:	f823 2c02 	strh.w	r2, [r3, #-2]
 8011066:	9906      	ldr	r1, [sp, #24]
 8011068:	3901      	subs	r1, #1
 801106a:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801106e:	f103 0302 	add.w	r3, r3, #2
 8011072:	9106      	str	r1, [sp, #24]
 8011074:	d1e2      	bne.n	801103c <_DrawBitmap+0x3a8>
 8011076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011078:	930b      	str	r3, [sp, #44]	; 0x2c
 801107a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801107e:	e010      	b.n	80110a2 <_DrawBitmap+0x40e>
 8011080:	4642      	mov	r2, r8
 8011082:	07e9      	lsls	r1, r5, #31
 8011084:	d505      	bpl.n	8011092 <_DrawBitmap+0x3fe>
 8011086:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 801108a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801108c:	4041      	eors	r1, r0
 801108e:	f823 1c02 	strh.w	r1, [r3, #-2]
 8011092:	3a01      	subs	r2, #1
 8011094:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8011098:	f103 0302 	add.w	r3, r3, #2
 801109c:	d1f1      	bne.n	8011082 <_DrawBitmap+0x3ee>
 801109e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80110a2:	b146      	cbz	r6, 80110b6 <_DrawBitmap+0x422>
 80110a4:	f899 3000 	ldrb.w	r3, [r9]
 80110a8:	4a37      	ldr	r2, [pc, #220]	; (8011188 <_DrawBitmap+0x4f4>)
 80110aa:	f109 0901 	add.w	r9, r9, #1
 80110ae:	5cd5      	ldrb	r5, [r2, r3]
 80110b0:	f04f 0808 	mov.w	r8, #8
 80110b4:	e7b9      	b.n	801102a <_DrawBitmap+0x396>
 80110b6:	a810      	add	r0, sp, #64	; 0x40
 80110b8:	f7fe f87e 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80110bc:	e16b      	b.n	8011396 <_DrawBitmap+0x702>
 80110be:	4b33      	ldr	r3, [pc, #204]	; (801118c <_DrawBitmap+0x4f8>)
 80110c0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80110c6:	7c1b      	ldrb	r3, [r3, #16]
 80110c8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 80110cc:	f1c6 0504 	rsb	r5, r6, #4
 80110d0:	f89a 6000 	ldrb.w	r6, [sl]
 80110d4:	f003 0303 	and.w	r3, r3, #3
 80110d8:	40be      	lsls	r6, r7
 80110da:	2b01      	cmp	r3, #1
 80110dc:	b2ed      	uxtb	r5, r5
 80110de:	b2f6      	uxtb	r6, r6
 80110e0:	d06a      	beq.n	80111b8 <_DrawBitmap+0x524>
 80110e2:	d308      	bcc.n	80110f6 <_DrawBitmap+0x462>
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	f040 8156 	bne.w	8011396 <_DrawBitmap+0x702>
 80110ea:	f8cd a018 	str.w	sl, [sp, #24]
 80110ee:	465f      	mov	r7, fp
 80110f0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80110f4:	e03e      	b.n	8011174 <_DrawBitmap+0x4e0>
 80110f6:	4652      	mov	r2, sl
 80110f8:	465b      	mov	r3, fp
 80110fa:	429d      	cmp	r5, r3
 80110fc:	bfc8      	it	gt
 80110fe:	b2dd      	uxtbgt	r5, r3
 8011100:	1b5b      	subs	r3, r3, r5
 8011102:	4629      	mov	r1, r5
 8011104:	4620      	mov	r0, r4
 8011106:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 801110a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801110c:	3901      	subs	r1, #1
 801110e:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 8011112:	f820 cb02 	strh.w	ip, [r0], #2
 8011116:	00b6      	lsls	r6, r6, #2
 8011118:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801111c:	b2f6      	uxtb	r6, r6
 801111e:	d1f2      	bne.n	8011106 <_DrawBitmap+0x472>
 8011120:	3d01      	subs	r5, #1
 8011122:	b2ed      	uxtb	r5, r5
 8011124:	3501      	adds	r5, #1
 8011126:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801112a:	2b00      	cmp	r3, #0
 801112c:	f000 8133 	beq.w	8011396 <_DrawBitmap+0x702>
 8011130:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8011134:	2504      	movs	r5, #4
 8011136:	e7e0      	b.n	80110fa <_DrawBitmap+0x466>
 8011138:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 801113c:	eb08 010c 	add.w	r1, r8, ip
 8011140:	d126      	bne.n	8011190 <_DrawBitmap+0x4fc>
 8011142:	f108 0801 	add.w	r8, r8, #1
 8011146:	fa5f f388 	uxtb.w	r3, r8
 801114a:	00b6      	lsls	r6, r6, #2
 801114c:	429d      	cmp	r5, r3
 801114e:	b2f6      	uxtb	r6, r6
 8011150:	d1f2      	bne.n	8011138 <_DrawBitmap+0x4a4>
 8011152:	3d01      	subs	r5, #1
 8011154:	b2ed      	uxtb	r5, r5
 8011156:	1c6b      	adds	r3, r5, #1
 8011158:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801115c:	f10c 0301 	add.w	r3, ip, #1
 8011160:	eb03 0c05 	add.w	ip, r3, r5
 8011164:	2f00      	cmp	r7, #0
 8011166:	f000 8116 	beq.w	8011396 <_DrawBitmap+0x702>
 801116a:	9b06      	ldr	r3, [sp, #24]
 801116c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8011170:	9306      	str	r3, [sp, #24]
 8011172:	2504      	movs	r5, #4
 8011174:	42bd      	cmp	r5, r7
 8011176:	bfc8      	it	gt
 8011178:	b2fd      	uxtbgt	r5, r7
 801117a:	1b7f      	subs	r7, r7, r5
 801117c:	f04f 0800 	mov.w	r8, #0
 8011180:	e7da      	b.n	8011138 <_DrawBitmap+0x4a4>
 8011182:	bf00      	nop
 8011184:	08015224 	.word	0x08015224
 8011188:	080150c8 	.word	0x080150c8
 801118c:	20000084 	.word	0x20000084
 8011190:	09b3      	lsrs	r3, r6, #6
 8011192:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011194:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011198:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 801119c:	f1b9 0f00 	cmp.w	r9, #0
 80111a0:	d0cf      	beq.n	8011142 <_DrawBitmap+0x4ae>
 80111a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80111a6:	9a05      	ldr	r2, [sp, #20]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f8cd c008 	str.w	ip, [sp, #8]
 80111ae:	4648      	mov	r0, r9
 80111b0:	4798      	blx	r3
 80111b2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80111b6:	e7c4      	b.n	8011142 <_DrawBitmap+0x4ae>
 80111b8:	4651      	mov	r1, sl
 80111ba:	465b      	mov	r3, fp
 80111bc:	429d      	cmp	r5, r3
 80111be:	bfc8      	it	gt
 80111c0:	b2dd      	uxtbgt	r5, r3
 80111c2:	1b5b      	subs	r3, r3, r5
 80111c4:	1ca2      	adds	r2, r4, #2
 80111c6:	4628      	mov	r0, r5
 80111c8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80111cc:	d005      	beq.n	80111da <_DrawBitmap+0x546>
 80111ce:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 80111d2:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 80111d6:	f822 7c02 	strh.w	r7, [r2, #-2]
 80111da:	3801      	subs	r0, #1
 80111dc:	00b6      	lsls	r6, r6, #2
 80111de:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80111e2:	b2f6      	uxtb	r6, r6
 80111e4:	f102 0202 	add.w	r2, r2, #2
 80111e8:	d1ee      	bne.n	80111c8 <_DrawBitmap+0x534>
 80111ea:	3d01      	subs	r5, #1
 80111ec:	b2ed      	uxtb	r5, r5
 80111ee:	3501      	adds	r5, #1
 80111f0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 80ce 	beq.w	8011396 <_DrawBitmap+0x702>
 80111fa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80111fe:	2504      	movs	r5, #4
 8011200:	e7dc      	b.n	80111bc <_DrawBitmap+0x528>
 8011202:	4a6e      	ldr	r2, [pc, #440]	; (80113bc <_DrawBitmap+0x728>)
 8011204:	f89a 3000 	ldrb.w	r3, [sl]
 8011208:	6812      	ldr	r2, [r2, #0]
 801120a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801120c:	7c12      	ldrb	r2, [r2, #16]
 801120e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011210:	f002 0203 	and.w	r2, r2, #3
 8011214:	40bb      	lsls	r3, r7
 8011216:	2a01      	cmp	r2, #1
 8011218:	b2dd      	uxtb	r5, r3
 801121a:	f000 8095 	beq.w	8011348 <_DrawBitmap+0x6b4>
 801121e:	d302      	bcc.n	8011226 <_DrawBitmap+0x592>
 8011220:	2a02      	cmp	r2, #2
 8011222:	d036      	beq.n	8011292 <_DrawBitmap+0x5fe>
 8011224:	e0b7      	b.n	8011396 <_DrawBitmap+0x702>
 8011226:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011228:	b166      	cbz	r6, 8011244 <_DrawBitmap+0x5b0>
 801122a:	092d      	lsrs	r5, r5, #4
 801122c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801122e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8011232:	8023      	strh	r3, [r4, #0]
 8011234:	f10a 0201 	add.w	r2, sl, #1
 8011238:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801123a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801123e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011242:	e001      	b.n	8011248 <_DrawBitmap+0x5b4>
 8011244:	465b      	mov	r3, fp
 8011246:	4652      	mov	r2, sl
 8011248:	2b01      	cmp	r3, #1
 801124a:	dd19      	ble.n	8011280 <_DrawBitmap+0x5ec>
 801124c:	1058      	asrs	r0, r3, #1
 801124e:	1d21      	adds	r1, r4, #4
 8011250:	f003 0301 	and.w	r3, r3, #1
 8011254:	eb02 0c00 	add.w	ip, r2, r0
 8011258:	092f      	lsrs	r7, r5, #4
 801125a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801125c:	f005 050f 	and.w	r5, r5, #15
 8011260:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8011264:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8011268:	f821 7c04 	strh.w	r7, [r1, #-4]
 801126c:	f821 5c02 	strh.w	r5, [r1, #-2]
 8011270:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011274:	4562      	cmp	r2, ip
 8011276:	f101 0104 	add.w	r1, r1, #4
 801127a:	d1ed      	bne.n	8011258 <_DrawBitmap+0x5c4>
 801127c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 8088 	beq.w	8011396 <_DrawBitmap+0x702>
 8011286:	092d      	lsrs	r5, r5, #4
 8011288:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801128a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 801128e:	8023      	strh	r3, [r4, #0]
 8011290:	e081      	b.n	8011396 <_DrawBitmap+0x702>
 8011292:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8011294:	b1c7      	cbz	r7, 80112c8 <_DrawBitmap+0x634>
 8011296:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801129a:	d00b      	beq.n	80112b4 <_DrawBitmap+0x620>
 801129c:	092d      	lsrs	r5, r5, #4
 801129e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80112a0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80112a4:	8023      	strh	r3, [r4, #0]
 80112a6:	b12e      	cbz	r6, 80112b4 <_DrawBitmap+0x620>
 80112a8:	68b3      	ldr	r3, [r6, #8]
 80112aa:	9904      	ldr	r1, [sp, #16]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	9a05      	ldr	r2, [sp, #20]
 80112b0:	4630      	mov	r0, r6
 80112b2:	4798      	blx	r3
 80112b4:	9804      	ldr	r0, [sp, #16]
 80112b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80112b8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80112bc:	1c47      	adds	r7, r0, #1
 80112be:	f10b 39ff 	add.w	r9, fp, #4294967295
 80112c2:	f10a 0801 	add.w	r8, sl, #1
 80112c6:	e00f      	b.n	80112e8 <_DrawBitmap+0x654>
 80112c8:	46d9      	mov	r9, fp
 80112ca:	46d0      	mov	r8, sl
 80112cc:	9f04      	ldr	r7, [sp, #16]
 80112ce:	e00b      	b.n	80112e8 <_DrawBitmap+0x654>
 80112d0:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 80112d4:	d10c      	bne.n	80112f0 <_DrawBitmap+0x65c>
 80112d6:	f015 050f 	ands.w	r5, r5, #15
 80112da:	d117      	bne.n	801130c <_DrawBitmap+0x678>
 80112dc:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 80112e0:	3404      	adds	r4, #4
 80112e2:	3702      	adds	r7, #2
 80112e4:	f1a9 0902 	sub.w	r9, r9, #2
 80112e8:	f1b9 0f01 	cmp.w	r9, #1
 80112ec:	dcf0      	bgt.n	80112d0 <_DrawBitmap+0x63c>
 80112ee:	e01a      	b.n	8011326 <_DrawBitmap+0x692>
 80112f0:	092b      	lsrs	r3, r5, #4
 80112f2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80112f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80112f8:	8023      	strh	r3, [r4, #0]
 80112fa:	2e00      	cmp	r6, #0
 80112fc:	d0eb      	beq.n	80112d6 <_DrawBitmap+0x642>
 80112fe:	68b3      	ldr	r3, [r6, #8]
 8011300:	9a05      	ldr	r2, [sp, #20]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4630      	mov	r0, r6
 8011306:	4639      	mov	r1, r7
 8011308:	4798      	blx	r3
 801130a:	e7e4      	b.n	80112d6 <_DrawBitmap+0x642>
 801130c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801130e:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8011312:	8063      	strh	r3, [r4, #2]
 8011314:	2e00      	cmp	r6, #0
 8011316:	d0e1      	beq.n	80112dc <_DrawBitmap+0x648>
 8011318:	68b3      	ldr	r3, [r6, #8]
 801131a:	9a05      	ldr	r2, [sp, #20]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4630      	mov	r0, r6
 8011320:	1c79      	adds	r1, r7, #1
 8011322:	4798      	blx	r3
 8011324:	e7da      	b.n	80112dc <_DrawBitmap+0x648>
 8011326:	f1b9 0f00 	cmp.w	r9, #0
 801132a:	d034      	beq.n	8011396 <_DrawBitmap+0x702>
 801132c:	092d      	lsrs	r5, r5, #4
 801132e:	d032      	beq.n	8011396 <_DrawBitmap+0x702>
 8011330:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011332:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8011336:	8023      	strh	r3, [r4, #0]
 8011338:	b36e      	cbz	r6, 8011396 <_DrawBitmap+0x702>
 801133a:	68b3      	ldr	r3, [r6, #8]
 801133c:	9a05      	ldr	r2, [sp, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4630      	mov	r0, r6
 8011342:	4639      	mov	r1, r7
 8011344:	4798      	blx	r3
 8011346:	e026      	b.n	8011396 <_DrawBitmap+0x702>
 8011348:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801134a:	f1c6 0302 	rsb	r3, r6, #2
 801134e:	b2db      	uxtb	r3, r3
 8011350:	4650      	mov	r0, sl
 8011352:	465a      	mov	r2, fp
 8011354:	4293      	cmp	r3, r2
 8011356:	bfc8      	it	gt
 8011358:	b2d3      	uxtbgt	r3, r2
 801135a:	1ad2      	subs	r2, r2, r3
 801135c:	1ca1      	adds	r1, r4, #2
 801135e:	461e      	mov	r6, r3
 8011360:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8011364:	d005      	beq.n	8011372 <_DrawBitmap+0x6de>
 8011366:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 801136a:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 801136e:	f821 7c02 	strh.w	r7, [r1, #-2]
 8011372:	3e01      	subs	r6, #1
 8011374:	012d      	lsls	r5, r5, #4
 8011376:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801137a:	b2ed      	uxtb	r5, r5
 801137c:	f101 0102 	add.w	r1, r1, #2
 8011380:	d1ee      	bne.n	8011360 <_DrawBitmap+0x6cc>
 8011382:	3b01      	subs	r3, #1
 8011384:	b2db      	uxtb	r3, r3
 8011386:	3301      	adds	r3, #1
 8011388:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801138c:	b11a      	cbz	r2, 8011396 <_DrawBitmap+0x702>
 801138e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011392:	2302      	movs	r3, #2
 8011394:	e7de      	b.n	8011354 <_DrawBitmap+0x6c0>
 8011396:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8011398:	9b05      	ldr	r3, [sp, #20]
 801139a:	9e08      	ldr	r6, [sp, #32]
 801139c:	44ba      	add	sl, r7
 801139e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80113a0:	3301      	adds	r3, #1
 80113a2:	4437      	add	r7, r6
 80113a4:	9305      	str	r3, [sp, #20]
 80113a6:	9709      	str	r7, [sp, #36]	; 0x24
 80113a8:	e5a3      	b.n	8010ef2 <_DrawBitmap+0x25e>
 80113aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113ac:	b113      	cbz	r3, 80113b4 <_DrawBitmap+0x720>
 80113ae:	a811      	add	r0, sp, #68	; 0x44
 80113b0:	f7fd ff02 	bl	800f1b8 <GUI_ALLOC_UnlockH>
 80113b4:	b013      	add	sp, #76	; 0x4c
 80113b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ba:	bf00      	nop
 80113bc:	20000084 	.word	0x20000084

080113c0 <_GetDevProp>:
 80113c0:	2908      	cmp	r1, #8
 80113c2:	b508      	push	{r3, lr}
 80113c4:	d008      	beq.n	80113d8 <_GetDevProp+0x18>
 80113c6:	6800      	ldr	r0, [r0, #0]
 80113c8:	b118      	cbz	r0, 80113d2 <_GetDevProp+0x12>
 80113ca:	68c3      	ldr	r3, [r0, #12]
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	4798      	blx	r3
 80113d0:	bd08      	pop	{r3, pc}
 80113d2:	f04f 30ff 	mov.w	r0, #4294967295
 80113d6:	bd08      	pop	{r3, pc}
 80113d8:	2010      	movs	r0, #16
 80113da:	bd08      	pop	{r3, pc}

080113dc <LCD_SelectLCD>:
 80113dc:	b510      	push	{r4, lr}
 80113de:	4b0d      	ldr	r3, [pc, #52]	; (8011414 <LCD_SelectLCD+0x38>)
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	7c51      	ldrb	r1, [r2, #17]
 80113e4:	4a0c      	ldr	r2, [pc, #48]	; (8011418 <LCD_SelectLCD+0x3c>)
 80113e6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80113ea:	461c      	mov	r4, r3
 80113ec:	b140      	cbz	r0, 8011400 <LCD_SelectLCD+0x24>
 80113ee:	68c3      	ldr	r3, [r0, #12]
 80113f0:	b113      	cbz	r3, 80113f8 <LCD_SelectLCD+0x1c>
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b04      	cmp	r3, #4
 80113f6:	d001      	beq.n	80113fc <LCD_SelectLCD+0x20>
 80113f8:	6800      	ldr	r0, [r0, #0]
 80113fa:	e7f7      	b.n	80113ec <LCD_SelectLCD+0x10>
 80113fc:	f7fc f9cc 	bl	800d798 <GUI_DEVICE_Unlink>
 8011400:	6823      	ldr	r3, [r4, #0]
 8011402:	2200      	movs	r2, #0
 8011404:	661a      	str	r2, [r3, #96]	; 0x60
 8011406:	f103 0208 	add.w	r2, r3, #8
 801140a:	615a      	str	r2, [r3, #20]
 801140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011410:	f7fb bac2 	b.w	800c998 <LCD_SetClipRectMax>
 8011414:	20000084 	.word	0x20000084
 8011418:	200056dc 	.word	0x200056dc

0801141c <LCD_ReadRectEx>:
 801141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011420:	b087      	sub	sp, #28
 8011422:	4617      	mov	r7, r2
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011428:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801142a:	68da      	ldr	r2, [r3, #12]
 801142c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801142e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8011432:	4606      	mov	r6, r0
 8011434:	460d      	mov	r5, r1
 8011436:	b973      	cbnz	r3, 8011456 <LCD_ReadRectEx+0x3a>
 8011438:	4b71      	ldr	r3, [pc, #452]	; (8011600 <LCD_ReadRectEx+0x1e4>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	7c58      	ldrb	r0, [r3, #17]
 801143e:	f7fa ff55 	bl	800c2ec <GUI_GetBitsPerPixelEx>
 8011442:	2808      	cmp	r0, #8
 8011444:	4682      	mov	sl, r0
 8011446:	dd15      	ble.n	8011474 <LCD_ReadRectEx+0x58>
 8011448:	2810      	cmp	r0, #16
 801144a:	bfcc      	ite	gt
 801144c:	f04f 0904 	movgt.w	r9, #4
 8011450:	f04f 0902 	movle.w	r9, #2
 8011454:	e010      	b.n	8011478 <LCD_ReadRectEx+0x5c>
 8011456:	a811      	add	r0, sp, #68	; 0x44
 8011458:	2101      	movs	r1, #1
 801145a:	4798      	blx	r3
 801145c:	4684      	mov	ip, r0
 801145e:	2800      	cmp	r0, #0
 8011460:	d0ea      	beq.n	8011438 <LCD_ReadRectEx+0x1c>
 8011462:	9b04      	ldr	r3, [sp, #16]
 8011464:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011466:	e88d 0018 	stmia.w	sp, {r3, r4}
 801146a:	4631      	mov	r1, r6
 801146c:	462a      	mov	r2, r5
 801146e:	463b      	mov	r3, r7
 8011470:	47e0      	blx	ip
 8011472:	e0c1      	b.n	80115f8 <LCD_ReadRectEx+0x1dc>
 8011474:	f04f 0901 	mov.w	r9, #1
 8011478:	f04f 0b00 	mov.w	fp, #0
 801147c:	9b04      	ldr	r3, [sp, #16]
 801147e:	429d      	cmp	r5, r3
 8011480:	f300 80ba 	bgt.w	80115f8 <LCD_ReadRectEx+0x1dc>
 8011484:	f1b9 0f02 	cmp.w	r9, #2
 8011488:	d009      	beq.n	801149e <LCD_ReadRectEx+0x82>
 801148a:	f1b9 0f04 	cmp.w	r9, #4
 801148e:	d004      	beq.n	801149a <LCD_ReadRectEx+0x7e>
 8011490:	f1b9 0f01 	cmp.w	r9, #1
 8011494:	f040 80ae 	bne.w	80115f4 <LCD_ReadRectEx+0x1d8>
 8011498:	e003      	b.n	80114a2 <LCD_ReadRectEx+0x86>
 801149a:	46b4      	mov	ip, r6
 801149c:	e09b      	b.n	80115d6 <LCD_ReadRectEx+0x1ba>
 801149e:	46b4      	mov	ip, r6
 80114a0:	e08a      	b.n	80115b8 <LCD_ReadRectEx+0x19c>
 80114a2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80114a6:	2a07      	cmp	r2, #7
 80114a8:	f200 80a4 	bhi.w	80115f4 <LCD_ReadRectEx+0x1d8>
 80114ac:	e8df f002 	tbb	[pc, r2]
 80114b0:	0606080a 	.word	0x0606080a
 80114b4:	04040404 	.word	0x04040404
 80114b8:	46b4      	mov	ip, r6
 80114ba:	e066      	b.n	801158a <LCD_ReadRectEx+0x16e>
 80114bc:	46b4      	mov	ip, r6
 80114be:	e047      	b.n	8011550 <LCD_ReadRectEx+0x134>
 80114c0:	46b4      	mov	ip, r6
 80114c2:	e022      	b.n	801150a <LCD_ReadRectEx+0xee>
 80114c4:	46b4      	mov	ip, r6
 80114c6:	45bc      	cmp	ip, r7
 80114c8:	f300 8094 	bgt.w	80115f4 <LCD_ReadRectEx+0x1d8>
 80114cc:	4661      	mov	r1, ip
 80114ce:	462a      	mov	r2, r5
 80114d0:	f8cd c00c 	str.w	ip, [sp, #12]
 80114d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80114d6:	47c0      	blx	r8
 80114d8:	f1cb 0207 	rsb	r2, fp, #7
 80114dc:	fa00 f202 	lsl.w	r2, r0, r2
 80114e0:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80114e4:	7820      	ldrb	r0, [r4, #0]
 80114e6:	fa41 f10b 	asr.w	r1, r1, fp
 80114ea:	4001      	ands	r1, r0
 80114ec:	430a      	orrs	r2, r1
 80114ee:	7022      	strb	r2, [r4, #0]
 80114f0:	f10b 0301 	add.w	r3, fp, #1
 80114f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80114f8:	f023 0207 	bic.w	r2, r3, #7
 80114fc:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8011500:	fa43 fb02 	asr.w	fp, r3, r2
 8011504:	f10c 0c01 	add.w	ip, ip, #1
 8011508:	e7dd      	b.n	80114c6 <LCD_ReadRectEx+0xaa>
 801150a:	45bc      	cmp	ip, r7
 801150c:	dc72      	bgt.n	80115f4 <LCD_ReadRectEx+0x1d8>
 801150e:	4661      	mov	r1, ip
 8011510:	462a      	mov	r2, r5
 8011512:	f8cd c00c 	str.w	ip, [sp, #12]
 8011516:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011518:	47c0      	blx	r8
 801151a:	ea4f 024b 	mov.w	r2, fp, lsl #1
 801151e:	f1c2 0106 	rsb	r1, r2, #6
 8011522:	fa00 f101 	lsl.w	r1, r0, r1
 8011526:	f64f 703f 	movw	r0, #65343	; 0xff3f
 801152a:	fa40 f202 	asr.w	r2, r0, r2
 801152e:	7820      	ldrb	r0, [r4, #0]
 8011530:	4002      	ands	r2, r0
 8011532:	4311      	orrs	r1, r2
 8011534:	7021      	strb	r1, [r4, #0]
 8011536:	f10b 0301 	add.w	r3, fp, #1
 801153a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801153e:	f023 0203 	bic.w	r2, r3, #3
 8011542:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8011546:	fa43 fb02 	asr.w	fp, r3, r2
 801154a:	f10c 0c01 	add.w	ip, ip, #1
 801154e:	e7dc      	b.n	801150a <LCD_ReadRectEx+0xee>
 8011550:	45bc      	cmp	ip, r7
 8011552:	dc4f      	bgt.n	80115f4 <LCD_ReadRectEx+0x1d8>
 8011554:	4661      	mov	r1, ip
 8011556:	462a      	mov	r2, r5
 8011558:	f8cd c00c 	str.w	ip, [sp, #12]
 801155c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801155e:	47c0      	blx	r8
 8011560:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8011564:	f1c2 0104 	rsb	r1, r2, #4
 8011568:	fa00 f101 	lsl.w	r1, r0, r1
 801156c:	200f      	movs	r0, #15
 801156e:	fa00 f202 	lsl.w	r2, r0, r2
 8011572:	7820      	ldrb	r0, [r4, #0]
 8011574:	4002      	ands	r2, r0
 8011576:	4311      	orrs	r1, r2
 8011578:	7021      	strb	r1, [r4, #0]
 801157a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801157e:	445c      	add	r4, fp
 8011580:	f10c 0c01 	add.w	ip, ip, #1
 8011584:	f08b 0b01 	eor.w	fp, fp, #1
 8011588:	e7e2      	b.n	8011550 <LCD_ReadRectEx+0x134>
 801158a:	4273      	negs	r3, r6
 801158c:	1ba2      	subs	r2, r4, r6
 801158e:	45bc      	cmp	ip, r7
 8011590:	9305      	str	r3, [sp, #20]
 8011592:	4462      	add	r2, ip
 8011594:	dc0e      	bgt.n	80115b4 <LCD_ReadRectEx+0x198>
 8011596:	4661      	mov	r1, ip
 8011598:	462a      	mov	r2, r5
 801159a:	f8cd c00c 	str.w	ip, [sp, #12]
 801159e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80115a0:	47c0      	blx	r8
 80115a2:	9a05      	ldr	r2, [sp, #20]
 80115a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80115a8:	4422      	add	r2, r4
 80115aa:	f802 000c 	strb.w	r0, [r2, ip]
 80115ae:	f10c 0c01 	add.w	ip, ip, #1
 80115b2:	e7ea      	b.n	801158a <LCD_ReadRectEx+0x16e>
 80115b4:	4614      	mov	r4, r2
 80115b6:	e01d      	b.n	80115f4 <LCD_ReadRectEx+0x1d8>
 80115b8:	45bc      	cmp	ip, r7
 80115ba:	dc1b      	bgt.n	80115f4 <LCD_ReadRectEx+0x1d8>
 80115bc:	4661      	mov	r1, ip
 80115be:	f8cd c00c 	str.w	ip, [sp, #12]
 80115c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80115c4:	462a      	mov	r2, r5
 80115c6:	47c0      	blx	r8
 80115c8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80115cc:	f824 0b02 	strh.w	r0, [r4], #2
 80115d0:	f10c 0c01 	add.w	ip, ip, #1
 80115d4:	e7f0      	b.n	80115b8 <LCD_ReadRectEx+0x19c>
 80115d6:	45bc      	cmp	ip, r7
 80115d8:	dc0c      	bgt.n	80115f4 <LCD_ReadRectEx+0x1d8>
 80115da:	4661      	mov	r1, ip
 80115dc:	f8cd c00c 	str.w	ip, [sp, #12]
 80115e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80115e2:	462a      	mov	r2, r5
 80115e4:	47c0      	blx	r8
 80115e6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80115ea:	f844 0b04 	str.w	r0, [r4], #4
 80115ee:	f10c 0c01 	add.w	ip, ip, #1
 80115f2:	e7f0      	b.n	80115d6 <LCD_ReadRectEx+0x1ba>
 80115f4:	3501      	adds	r5, #1
 80115f6:	e741      	b.n	801147c <LCD_ReadRectEx+0x60>
 80115f8:	b007      	add	sp, #28
 80115fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fe:	bf00      	nop
 8011600:	20000084 	.word	0x20000084

08011604 <GUI_ReadRectEx>:
 8011604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011606:	4d16      	ldr	r5, [pc, #88]	; (8011660 <GUI_ReadRectEx+0x5c>)
 8011608:	9e05      	ldr	r6, [sp, #20]
 801160a:	682d      	ldr	r5, [r5, #0]
 801160c:	9c06      	ldr	r4, [sp, #24]
 801160e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8011612:	42b8      	cmp	r0, r7
 8011614:	bfb8      	it	lt
 8011616:	4638      	movlt	r0, r7
 8011618:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 801161c:	42ba      	cmp	r2, r7
 801161e:	bfa8      	it	ge
 8011620:	463a      	movge	r2, r7
 8011622:	4282      	cmp	r2, r0
 8011624:	db1b      	blt.n	801165e <GUI_ReadRectEx+0x5a>
 8011626:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 801162a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801162e:	42b9      	cmp	r1, r7
 8011630:	bfb8      	it	lt
 8011632:	4639      	movlt	r1, r7
 8011634:	42ab      	cmp	r3, r5
 8011636:	bfa8      	it	ge
 8011638:	462b      	movge	r3, r5
 801163a:	428b      	cmp	r3, r1
 801163c:	db0f      	blt.n	801165e <GUI_ReadRectEx+0x5a>
 801163e:	68e5      	ldr	r5, [r4, #12]
 8011640:	682d      	ldr	r5, [r5, #0]
 8011642:	f035 0704 	bics.w	r7, r5, #4
 8011646:	d105      	bne.n	8011654 <GUI_ReadRectEx+0x50>
 8011648:	9605      	str	r6, [sp, #20]
 801164a:	9406      	str	r4, [sp, #24]
 801164c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011650:	f7ff bee4 	b.w	801141c <LCD_ReadRectEx>
 8011654:	6825      	ldr	r5, [r4, #0]
 8011656:	2d00      	cmp	r5, #0
 8011658:	d0f6      	beq.n	8011648 <GUI_ReadRectEx+0x44>
 801165a:	462c      	mov	r4, r5
 801165c:	e7ef      	b.n	801163e <GUI_ReadRectEx+0x3a>
 801165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011660:	20000084 	.word	0x20000084

08011664 <LCD_GetBkColorIndex>:
 8011664:	4b02      	ldr	r3, [pc, #8]	; (8011670 <LCD_GetBkColorIndex+0xc>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801166a:	6818      	ldr	r0, [r3, #0]
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop
 8011670:	20000084 	.word	0x20000084

08011674 <LCD_GetColorIndex>:
 8011674:	4b02      	ldr	r3, [pc, #8]	; (8011680 <LCD_GetColorIndex+0xc>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801167a:	6818      	ldr	r0, [r3, #0]
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	20000084 	.word	0x20000084

08011684 <_OnExit>:
 8011684:	b510      	push	{r4, lr}
 8011686:	4c04      	ldr	r4, [pc, #16]	; (8011698 <_OnExit+0x14>)
 8011688:	6820      	ldr	r0, [r4, #0]
 801168a:	f7fd fd73 	bl	800f174 <GUI_ALLOC_FreeFixedBlock>
 801168e:	4a03      	ldr	r2, [pc, #12]	; (801169c <_OnExit+0x18>)
 8011690:	2300      	movs	r3, #0
 8011692:	6023      	str	r3, [r4, #0]
 8011694:	6013      	str	r3, [r2, #0]
 8011696:	bd10      	pop	{r4, pc}
 8011698:	200057dc 	.word	0x200057dc
 801169c:	20005600 	.word	0x20005600

080116a0 <LCD_InitColors>:
 80116a0:	b538      	push	{r3, r4, r5, lr}
 80116a2:	4d09      	ldr	r5, [pc, #36]	; (80116c8 <LCD_InitColors+0x28>)
 80116a4:	682c      	ldr	r4, [r5, #0]
 80116a6:	b95c      	cbnz	r4, 80116c0 <LCD_InitColors+0x20>
 80116a8:	4b08      	ldr	r3, [pc, #32]	; (80116cc <LCD_InitColors+0x2c>)
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	0080      	lsls	r0, r0, #2
 80116ae:	f7fd fe45 	bl	800f33c <GUI_ALLOC_GetFixedBlock>
 80116b2:	6028      	str	r0, [r5, #0]
 80116b4:	b130      	cbz	r0, 80116c4 <LCD_InitColors+0x24>
 80116b6:	4806      	ldr	r0, [pc, #24]	; (80116d0 <LCD_InitColors+0x30>)
 80116b8:	4b06      	ldr	r3, [pc, #24]	; (80116d4 <LCD_InitColors+0x34>)
 80116ba:	6003      	str	r3, [r0, #0]
 80116bc:	f7fc f98e 	bl	800d9dc <GUI__RegisterExit>
 80116c0:	2000      	movs	r0, #0
 80116c2:	bd38      	pop	{r3, r4, r5, pc}
 80116c4:	2001      	movs	r0, #1
 80116c6:	bd38      	pop	{r3, r4, r5, pc}
 80116c8:	200057dc 	.word	0x200057dc
 80116cc:	20000118 	.word	0x20000118
 80116d0:	20005604 	.word	0x20005604
 80116d4:	08011685 	.word	0x08011685

080116d8 <LCD_InitLUT>:
 80116d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116dc:	f000 febe 	bl	801245c <LCD_GetNumLayers>
 80116e0:	2400      	movs	r4, #0
 80116e2:	4680      	mov	r8, r0
 80116e4:	4544      	cmp	r4, r8
 80116e6:	da2c      	bge.n	8011742 <LCD_InitLUT+0x6a>
 80116e8:	4620      	mov	r0, r4
 80116ea:	f7fc f81d 	bl	800d728 <GUI_DEVICE__GetpDriver>
 80116ee:	b330      	cbz	r0, 801173e <LCD_InitLUT+0x66>
 80116f0:	4e15      	ldr	r6, [pc, #84]	; (8011748 <LCD_InitLUT+0x70>)
 80116f2:	6833      	ldr	r3, [r6, #0]
 80116f4:	4620      	mov	r0, r4
 80116f6:	f893 9011 	ldrb.w	r9, [r3, #17]
 80116fa:	745c      	strb	r4, [r3, #17]
 80116fc:	f7fa fdd8 	bl	800c2b0 <LCD_GetBitsPerPixelEx>
 8011700:	2808      	cmp	r0, #8
 8011702:	dd03      	ble.n	801170c <LCD_InitLUT+0x34>
 8011704:	6833      	ldr	r3, [r6, #0]
 8011706:	f883 9011 	strb.w	r9, [r3, #17]
 801170a:	e018      	b.n	801173e <LCD_InitLUT+0x66>
 801170c:	4b0f      	ldr	r3, [pc, #60]	; (801174c <LCD_InitLUT+0x74>)
 801170e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011712:	691a      	ldr	r2, [r3, #16]
 8011714:	4b0e      	ldr	r3, [pc, #56]	; (8011750 <LCD_InitLUT+0x78>)
 8011716:	429a      	cmp	r2, r3
 8011718:	d0f4      	beq.n	8011704 <LCD_InitLUT+0x2c>
 801171a:	4620      	mov	r0, r4
 801171c:	f7fa fdcb 	bl	800c2b6 <LCD_GetNumColorsEx>
 8011720:	2500      	movs	r5, #0
 8011722:	4682      	mov	sl, r0
 8011724:	4555      	cmp	r5, sl
 8011726:	daed      	bge.n	8011704 <LCD_InitLUT+0x2c>
 8011728:	b2ef      	uxtb	r7, r5
 801172a:	4638      	mov	r0, r7
 801172c:	f7fb f9a8 	bl	800ca80 <LCD_Index2Color>
 8011730:	4639      	mov	r1, r7
 8011732:	4602      	mov	r2, r0
 8011734:	4620      	mov	r0, r4
 8011736:	f7fa fd77 	bl	800c228 <LCD_SetLUTEntryEx>
 801173a:	3501      	adds	r5, #1
 801173c:	e7f2      	b.n	8011724 <LCD_InitLUT+0x4c>
 801173e:	3401      	adds	r4, #1
 8011740:	e7d0      	b.n	80116e4 <LCD_InitLUT+0xc>
 8011742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011746:	bf00      	nop
 8011748:	20000084 	.word	0x20000084
 801174c:	200056dc 	.word	0x200056dc
 8011750:	08015d0c 	.word	0x08015d0c

08011754 <LCD_AA_SetAndMask>:
 8011754:	4b02      	ldr	r3, [pc, #8]	; (8011760 <LCD_AA_SetAndMask+0xc>)
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	6018      	str	r0, [r3, #0]
 801175a:	4610      	mov	r0, r2
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	2000011c 	.word	0x2000011c

08011764 <_GetWordWrap>:
 8011764:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011768:	2500      	movs	r5, #0
 801176a:	9001      	str	r0, [sp, #4]
 801176c:	4689      	mov	r9, r1
 801176e:	4690      	mov	r8, r2
 8011770:	46aa      	mov	sl, r5
 8011772:	462e      	mov	r6, r5
 8011774:	462c      	mov	r4, r5
 8011776:	462f      	mov	r7, r5
 8011778:	a801      	add	r0, sp, #4
 801177a:	f7fb fd43 	bl	800d204 <GUI_UC__GetCharCodeInc>
 801177e:	2d00      	cmp	r5, #0
 8011780:	bf08      	it	eq
 8011782:	4605      	moveq	r5, r0
 8011784:	b108      	cbz	r0, 801178a <_GetWordWrap+0x26>
 8011786:	280a      	cmp	r0, #10
 8011788:	d10b      	bne.n	80117a2 <_GetWordWrap+0x3e>
 801178a:	4626      	mov	r6, r4
 801178c:	2e00      	cmp	r6, #0
 801178e:	bf18      	it	ne
 8011790:	4634      	movne	r4, r6
 8011792:	f1b8 0f00 	cmp.w	r8, #0
 8011796:	d025      	beq.n	80117e4 <_GetWordWrap+0x80>
 8011798:	ebca 0707 	rsb	r7, sl, r7
 801179c:	f8c8 7000 	str.w	r7, [r8]
 80117a0:	e020      	b.n	80117e4 <_GetWordWrap+0x80>
 80117a2:	2820      	cmp	r0, #32
 80117a4:	d01c      	beq.n	80117e0 <_GetWordWrap+0x7c>
 80117a6:	2d20      	cmp	r5, #32
 80117a8:	d00e      	beq.n	80117c8 <_GetWordWrap+0x64>
 80117aa:	4b10      	ldr	r3, [pc, #64]	; (80117ec <_GetWordWrap+0x88>)
 80117ac:	6819      	ldr	r1, [r3, #0]
 80117ae:	4b10      	ldr	r3, [pc, #64]	; (80117f0 <_GetWordWrap+0x8c>)
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	2300      	movs	r3, #0
 80117b4:	4293      	cmp	r3, r2
 80117b6:	da09      	bge.n	80117cc <_GetWordWrap+0x68>
 80117b8:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
 80117bc:	4586      	cmp	lr, r0
 80117be:	d101      	bne.n	80117c4 <_GetWordWrap+0x60>
 80117c0:	1c66      	adds	r6, r4, #1
 80117c2:	e003      	b.n	80117cc <_GetWordWrap+0x68>
 80117c4:	3301      	adds	r3, #1
 80117c6:	e7f5      	b.n	80117b4 <_GetWordWrap+0x50>
 80117c8:	4626      	mov	r6, r4
 80117ca:	2500      	movs	r5, #0
 80117cc:	f7fc fd80 	bl	800e2d0 <GUI_GetCharDistX>
 80117d0:	4407      	add	r7, r0
 80117d2:	454f      	cmp	r7, r9
 80117d4:	4682      	mov	sl, r0
 80117d6:	dd01      	ble.n	80117dc <_GetWordWrap+0x78>
 80117d8:	2c00      	cmp	r4, #0
 80117da:	d1d7      	bne.n	801178c <_GetWordWrap+0x28>
 80117dc:	3401      	adds	r4, #1
 80117de:	e7cb      	b.n	8011778 <_GetWordWrap+0x14>
 80117e0:	4626      	mov	r6, r4
 80117e2:	e7f3      	b.n	80117cc <_GetWordWrap+0x68>
 80117e4:	4620      	mov	r0, r4
 80117e6:	b002      	add	sp, #8
 80117e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ec:	2000560c 	.word	0x2000560c
 80117f0:	20005610 	.word	0x20005610

080117f4 <_GetCharWrap>:
 80117f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117f6:	2400      	movs	r4, #0
 80117f8:	9001      	str	r0, [sp, #4]
 80117fa:	460e      	mov	r6, r1
 80117fc:	4625      	mov	r5, r4
 80117fe:	a801      	add	r0, sp, #4
 8011800:	f7fb fd00 	bl	800d204 <GUI_UC__GetCharCodeInc>
 8011804:	4607      	mov	r7, r0
 8011806:	b148      	cbz	r0, 801181c <_GetCharWrap+0x28>
 8011808:	f7fc fd62 	bl	800e2d0 <GUI_GetCharDistX>
 801180c:	4405      	add	r5, r0
 801180e:	b10c      	cbz	r4, 8011814 <_GetCharWrap+0x20>
 8011810:	42b5      	cmp	r5, r6
 8011812:	dc03      	bgt.n	801181c <_GetCharWrap+0x28>
 8011814:	2f0a      	cmp	r7, #10
 8011816:	d001      	beq.n	801181c <_GetCharWrap+0x28>
 8011818:	3401      	adds	r4, #1
 801181a:	e7f0      	b.n	80117fe <_GetCharWrap+0xa>
 801181c:	4620      	mov	r0, r4
 801181e:	b003      	add	sp, #12
 8011820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011824 <_WrapGetNumCharsDisp>:
 8011824:	2a01      	cmp	r2, #1
 8011826:	b510      	push	{r4, lr}
 8011828:	d005      	beq.n	8011836 <_WrapGetNumCharsDisp+0x12>
 801182a:	2a02      	cmp	r2, #2
 801182c:	d108      	bne.n	8011840 <_WrapGetNumCharsDisp+0x1c>
 801182e:	4b07      	ldr	r3, [pc, #28]	; (801184c <_WrapGetNumCharsDisp+0x28>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4798      	blx	r3
 8011834:	bd10      	pop	{r4, pc}
 8011836:	4a06      	ldr	r2, [pc, #24]	; (8011850 <_WrapGetNumCharsDisp+0x2c>)
 8011838:	6814      	ldr	r4, [r2, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	47a0      	blx	r4
 801183e:	bd10      	pop	{r4, pc}
 8011840:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011848:	f7fc bc88 	b.w	800e15c <GUI__GetLineNumChars>
 801184c:	20000120 	.word	0x20000120
 8011850:	20000124 	.word	0x20000124

08011854 <GUI__WrapGetNumCharsDisp>:
 8011854:	2300      	movs	r3, #0
 8011856:	f7ff bfe5 	b.w	8011824 <_WrapGetNumCharsDisp>

0801185a <GUI__WrapGetNumCharsToNextLine>:
 801185a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801185c:	b085      	sub	sp, #20
 801185e:	ab03      	add	r3, sp, #12
 8011860:	4617      	mov	r7, r2
 8011862:	460e      	mov	r6, r1
 8011864:	9001      	str	r0, [sp, #4]
 8011866:	f7ff ffdd 	bl	8011824 <_WrapGetNumCharsDisp>
 801186a:	9d01      	ldr	r5, [sp, #4]
 801186c:	4604      	mov	r4, r0
 801186e:	4621      	mov	r1, r4
 8011870:	4628      	mov	r0, r5
 8011872:	f7fb fcdb 	bl	800d22c <GUI_UC__NumChars2NumBytes>
 8011876:	4428      	add	r0, r5
 8011878:	ad04      	add	r5, sp, #16
 801187a:	f845 0d0c 	str.w	r0, [r5, #-12]!
 801187e:	4628      	mov	r0, r5
 8011880:	f7fb fcc0 	bl	800d204 <GUI_UC__GetCharCodeInc>
 8011884:	280a      	cmp	r0, #10
 8011886:	d101      	bne.n	801188c <GUI__WrapGetNumCharsToNextLine+0x32>
 8011888:	3401      	adds	r4, #1
 801188a:	e012      	b.n	80118b2 <GUI__WrapGetNumCharsToNextLine+0x58>
 801188c:	2f01      	cmp	r7, #1
 801188e:	d110      	bne.n	80118b2 <GUI__WrapGetNumCharsToNextLine+0x58>
 8011890:	2820      	cmp	r0, #32
 8011892:	d10e      	bne.n	80118b2 <GUI__WrapGetNumCharsToNextLine+0x58>
 8011894:	f7fc fd1c 	bl	800e2d0 <GUI_GetCharDistX>
 8011898:	4607      	mov	r7, r0
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	429e      	cmp	r6, r3
 801189e:	db08      	blt.n	80118b2 <GUI__WrapGetNumCharsToNextLine+0x58>
 80118a0:	443b      	add	r3, r7
 80118a2:	4628      	mov	r0, r5
 80118a4:	9303      	str	r3, [sp, #12]
 80118a6:	f7fb fcad 	bl	800d204 <GUI_UC__GetCharCodeInc>
 80118aa:	2820      	cmp	r0, #32
 80118ac:	f104 0401 	add.w	r4, r4, #1
 80118b0:	d0f3      	beq.n	801189a <GUI__WrapGetNumCharsToNextLine+0x40>
 80118b2:	4620      	mov	r0, r4
 80118b4:	b005      	add	sp, #20
 80118b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118b8 <GUI__WrapGetNumBytesToNextLine>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	4604      	mov	r4, r0
 80118bc:	f7ff ffcd 	bl	801185a <GUI__WrapGetNumCharsToNextLine>
 80118c0:	4601      	mov	r1, r0
 80118c2:	4620      	mov	r0, r4
 80118c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c8:	f7fb bcb0 	b.w	800d22c <GUI_UC__NumChars2NumBytes>

080118cc <GUI__ExpandPixelIndicesEx>:
 80118cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d0:	1e0c      	subs	r4, r1, #0
 80118d2:	4605      	mov	r5, r0
 80118d4:	f340 80b3 	ble.w	8011a3e <GUI__ExpandPixelIndicesEx+0x172>
 80118d8:	2a08      	cmp	r2, #8
 80118da:	685f      	ldr	r7, [r3, #4]
 80118dc:	dd04      	ble.n	80118e8 <GUI__ExpandPixelIndicesEx+0x1c>
 80118de:	2a10      	cmp	r2, #16
 80118e0:	f340 8098 	ble.w	8011a14 <GUI__ExpandPixelIndicesEx+0x148>
 80118e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e8:	3a01      	subs	r2, #1
 80118ea:	2a07      	cmp	r2, #7
 80118ec:	f200 80a7 	bhi.w	8011a3e <GUI__ExpandPixelIndicesEx+0x172>
 80118f0:	e8df f002 	tbb	[pc, r2]
 80118f4:	58a52d04 	.word	0x58a52d04
 80118f8:	83a5a5a5 	.word	0x83a5a5a5
 80118fc:	1e66      	subs	r6, r4, #1
 80118fe:	10f2      	asrs	r2, r6, #3
 8011900:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011904:	3b01      	subs	r3, #1
 8011906:	eb05 0802 	add.w	r8, r5, r2
 801190a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801190e:	f006 0607 	and.w	r6, r6, #7
 8011912:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011916:	2580      	movs	r5, #128	; 0x80
 8011918:	4135      	asrs	r5, r6
 801191a:	f108 38ff 	add.w	r8, r8, #4294967295
 801191e:	b2ed      	uxtb	r5, r5
 8011920:	f1c6 0307 	rsb	r3, r6, #7
 8011924:	ea0a 0005 	and.w	r0, sl, r5
 8011928:	4118      	asrs	r0, r3
 801192a:	47b8      	blx	r7
 801192c:	f849 0904 	str.w	r0, [r9], #-4
 8011930:	b936      	cbnz	r6, 8011940 <GUI__ExpandPixelIndicesEx+0x74>
 8011932:	f898 a000 	ldrb.w	sl, [r8]
 8011936:	2501      	movs	r5, #1
 8011938:	f108 38ff 	add.w	r8, r8, #4294967295
 801193c:	2607      	movs	r6, #7
 801193e:	e002      	b.n	8011946 <GUI__ExpandPixelIndicesEx+0x7a>
 8011940:	006d      	lsls	r5, r5, #1
 8011942:	3e01      	subs	r6, #1
 8011944:	b2ed      	uxtb	r5, r5
 8011946:	3c01      	subs	r4, #1
 8011948:	d1ea      	bne.n	8011920 <GUI__ExpandPixelIndicesEx+0x54>
 801194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194e:	1e66      	subs	r6, r4, #1
 8011950:	10b2      	asrs	r2, r6, #2
 8011952:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011956:	3b01      	subs	r3, #1
 8011958:	f006 0603 	and.w	r6, r6, #3
 801195c:	eb05 0802 	add.w	r8, r5, r2
 8011960:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011964:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011968:	0073      	lsls	r3, r6, #1
 801196a:	25c0      	movs	r5, #192	; 0xc0
 801196c:	411d      	asrs	r5, r3
 801196e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011972:	b2ed      	uxtb	r5, r5
 8011974:	0073      	lsls	r3, r6, #1
 8011976:	f1c3 0306 	rsb	r3, r3, #6
 801197a:	ea0a 0005 	and.w	r0, sl, r5
 801197e:	4118      	asrs	r0, r3
 8011980:	47b8      	blx	r7
 8011982:	f849 0904 	str.w	r0, [r9], #-4
 8011986:	b936      	cbnz	r6, 8011996 <GUI__ExpandPixelIndicesEx+0xca>
 8011988:	2503      	movs	r5, #3
 801198a:	f898 a000 	ldrb.w	sl, [r8]
 801198e:	462e      	mov	r6, r5
 8011990:	f108 38ff 	add.w	r8, r8, #4294967295
 8011994:	e002      	b.n	801199c <GUI__ExpandPixelIndicesEx+0xd0>
 8011996:	00ad      	lsls	r5, r5, #2
 8011998:	3e01      	subs	r6, #1
 801199a:	b2ed      	uxtb	r5, r5
 801199c:	3c01      	subs	r4, #1
 801199e:	d1e9      	bne.n	8011974 <GUI__ExpandPixelIndicesEx+0xa8>
 80119a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a4:	1e66      	subs	r6, r4, #1
 80119a6:	1072      	asrs	r2, r6, #1
 80119a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80119ac:	3b01      	subs	r3, #1
 80119ae:	f006 0601 	and.w	r6, r6, #1
 80119b2:	eb05 0802 	add.w	r8, r5, r2
 80119b6:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80119ba:	f815 a002 	ldrb.w	sl, [r5, r2]
 80119be:	00b3      	lsls	r3, r6, #2
 80119c0:	25f0      	movs	r5, #240	; 0xf0
 80119c2:	411d      	asrs	r5, r3
 80119c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80119c8:	b2ed      	uxtb	r5, r5
 80119ca:	00b3      	lsls	r3, r6, #2
 80119cc:	f1c3 0304 	rsb	r3, r3, #4
 80119d0:	ea0a 0005 	and.w	r0, sl, r5
 80119d4:	4118      	asrs	r0, r3
 80119d6:	47b8      	blx	r7
 80119d8:	f849 0904 	str.w	r0, [r9], #-4
 80119dc:	b936      	cbnz	r6, 80119ec <GUI__ExpandPixelIndicesEx+0x120>
 80119de:	f898 a000 	ldrb.w	sl, [r8]
 80119e2:	250f      	movs	r5, #15
 80119e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80119e8:	2601      	movs	r6, #1
 80119ea:	e002      	b.n	80119f2 <GUI__ExpandPixelIndicesEx+0x126>
 80119ec:	012d      	lsls	r5, r5, #4
 80119ee:	b2ed      	uxtb	r5, r5
 80119f0:	2600      	movs	r6, #0
 80119f2:	3c01      	subs	r4, #1
 80119f4:	d1e9      	bne.n	80119ca <GUI__ExpandPixelIndicesEx+0xfe>
 80119f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fa:	192e      	adds	r6, r5, r4
 80119fc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8011a00:	1b34      	subs	r4, r6, r4
 8011a02:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8011a06:	47b8      	blx	r7
 8011a08:	42a6      	cmp	r6, r4
 8011a0a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011a0e:	d1f8      	bne.n	8011a02 <GUI__ExpandPixelIndicesEx+0x136>
 8011a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a14:	695e      	ldr	r6, [r3, #20]
 8011a16:	b12e      	cbz	r6, 8011a24 <GUI__ExpandPixelIndicesEx+0x158>
 8011a18:	4629      	mov	r1, r5
 8011a1a:	4622      	mov	r2, r4
 8011a1c:	2302      	movs	r3, #2
 8011a1e:	47b0      	blx	r6
 8011a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a24:	0064      	lsls	r4, r4, #1
 8011a26:	4425      	add	r5, r4
 8011a28:	192e      	adds	r6, r5, r4
 8011a2a:	1b2c      	subs	r4, r5, r4
 8011a2c:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8011a30:	47b8      	blx	r7
 8011a32:	42a5      	cmp	r5, r4
 8011a34:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011a38:	d1f8      	bne.n	8011a2c <GUI__ExpandPixelIndicesEx+0x160>
 8011a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011a42 <_GetTwinArcPara>:
 8011a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a46:	fb01 f901 	mul.w	r9, r1, r1
 8011a4a:	1e47      	subs	r7, r0, #1
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	4340      	muls	r0, r0
 8011a50:	ebc9 0000 	rsb	r0, r9, r0
 8011a54:	460d      	mov	r5, r1
 8011a56:	4692      	mov	sl, r2
 8011a58:	4698      	mov	r8, r3
 8011a5a:	9e08      	ldr	r6, [sp, #32]
 8011a5c:	f7fb f91f 	bl	800cc9e <GUI__sqrt32>
 8011a60:	42bd      	cmp	r5, r7
 8011a62:	f8ca 0000 	str.w	r0, [sl]
 8011a66:	da10      	bge.n	8011a8a <_GetTwinArcPara+0x48>
 8011a68:	fb07 f007 	mul.w	r0, r7, r7
 8011a6c:	ebc9 0000 	rsb	r0, r9, r0
 8011a70:	f7fb f915 	bl	800cc9e <GUI__sqrt32>
 8011a74:	3c02      	subs	r4, #2
 8011a76:	42a5      	cmp	r5, r4
 8011a78:	f8c8 0000 	str.w	r0, [r8]
 8011a7c:	da03      	bge.n	8011a86 <_GetTwinArcPara+0x44>
 8011a7e:	3801      	subs	r0, #1
 8011a80:	6030      	str	r0, [r6, #0]
 8011a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a86:	2300      	movs	r3, #0
 8011a88:	e002      	b.n	8011a90 <_GetTwinArcPara+0x4e>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	f8c8 3000 	str.w	r3, [r8]
 8011a90:	6033      	str	r3, [r6, #0]
 8011a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08011a98 <GUI__DrawTwinArc2>:
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	461c      	mov	r4, r3
 8011a9e:	4b57      	ldr	r3, [pc, #348]	; (8011bfc <GUI__DrawTwinArc2+0x164>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011aa4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8011aa6:	b08b      	sub	sp, #44	; 0x2c
 8011aa8:	4415      	add	r5, r2
 8011aaa:	1e63      	subs	r3, r4, #1
 8011aac:	19c6      	adds	r6, r0, r7
 8011aae:	442b      	add	r3, r5
 8011ab0:	440f      	add	r7, r1
 8011ab2:	a808      	add	r0, sp, #32
 8011ab4:	f8ad 6020 	strh.w	r6, [sp, #32]
 8011ab8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8011abc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8011ac0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011ac4:	f7f7 fffe 	bl	8009ac4 <WM__InitIVRSearch>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	f000 8094 	beq.w	8011bf6 <GUI__DrawTwinArc2+0x15e>
 8011ace:	2c00      	cmp	r4, #0
 8011ad0:	dc02      	bgt.n	8011ad8 <GUI__DrawTwinArc2+0x40>
 8011ad2:	f7f7 ff35 	bl	8009940 <WM__GetNextIVR>
 8011ad6:	e7f7      	b.n	8011ac8 <GUI__DrawTwinArc2+0x30>
 8011ad8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011ada:	f7fc f90a 	bl	800dcf2 <GUI_SetColor>
 8011ade:	f104 38ff 	add.w	r8, r4, #4294967295
 8011ae2:	4641      	mov	r1, r8
 8011ae4:	f118 38ff 	adds.w	r8, r8, #4294967295
 8011ae8:	d324      	bcc.n	8011b34 <GUI__DrawTwinArc2+0x9c>
 8011aea:	ab07      	add	r3, sp, #28
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	4620      	mov	r0, r4
 8011af0:	aa05      	add	r2, sp, #20
 8011af2:	ab06      	add	r3, sp, #24
 8011af4:	f7ff ffa5 	bl	8011a42 <_GetTwinArcPara>
 8011af8:	f104 39ff 	add.w	r9, r4, #4294967295
 8011afc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011b00:	9905      	ldr	r1, [sp, #20]
 8011b02:	1930      	adds	r0, r6, r4
 8011b04:	44a9      	add	r9, r5
 8011b06:	ebc8 0909 	rsb	r9, r8, r9
 8011b0a:	ebc4 0b07 	rsb	fp, r4, r7
 8011b0e:	ebca 0200 	rsb	r2, sl, r0
 8011b12:	eb0b 0301 	add.w	r3, fp, r1
 8011b16:	1a40      	subs	r0, r0, r1
 8011b18:	3a01      	subs	r2, #1
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	9302      	str	r3, [sp, #8]
 8011b1e:	f7fa fcdb 	bl	800c4d8 <LCD_DrawHLine>
 8011b22:	9b02      	ldr	r3, [sp, #8]
 8011b24:	eb0b 000a 	add.w	r0, fp, sl
 8011b28:	3001      	adds	r0, #1
 8011b2a:	4649      	mov	r1, r9
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	f7fa fcd3 	bl	800c4d8 <LCD_DrawHLine>
 8011b32:	e7d6      	b.n	8011ae2 <GUI__DrawTwinArc2+0x4a>
 8011b34:	2c01      	cmp	r4, #1
 8011b36:	d0cc      	beq.n	8011ad2 <GUI__DrawTwinArc2+0x3a>
 8011b38:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011b3a:	f7fc f8da 	bl	800dcf2 <GUI_SetColor>
 8011b3e:	f1a4 0902 	sub.w	r9, r4, #2
 8011b42:	eb05 0b04 	add.w	fp, r5, r4
 8011b46:	f105 0802 	add.w	r8, r5, #2
 8011b4a:	f1b9 0f00 	cmp.w	r9, #0
 8011b4e:	d027      	beq.n	8011ba0 <GUI__DrawTwinArc2+0x108>
 8011b50:	ab07      	add	r3, sp, #28
 8011b52:	4649      	mov	r1, r9
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	4620      	mov	r0, r4
 8011b58:	aa05      	add	r2, sp, #20
 8011b5a:	ab06      	add	r3, sp, #24
 8011b5c:	f7ff ff71 	bl	8011a42 <_GetTwinArcPara>
 8011b60:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011b64:	9906      	ldr	r1, [sp, #24]
 8011b66:	1930      	adds	r0, r6, r4
 8011b68:	1b3b      	subs	r3, r7, r4
 8011b6a:	ebca 0200 	rsb	r2, sl, r0
 8011b6e:	eb03 0c01 	add.w	ip, r3, r1
 8011b72:	1a40      	subs	r0, r0, r1
 8011b74:	3a01      	subs	r2, #1
 8011b76:	4641      	mov	r1, r8
 8011b78:	9302      	str	r3, [sp, #8]
 8011b7a:	f8cd c00c 	str.w	ip, [sp, #12]
 8011b7e:	f7fa fcab 	bl	800c4d8 <LCD_DrawHLine>
 8011b82:	9b02      	ldr	r3, [sp, #8]
 8011b84:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011b88:	eb03 000a 	add.w	r0, r3, sl
 8011b8c:	4641      	mov	r1, r8
 8011b8e:	3001      	adds	r0, #1
 8011b90:	4662      	mov	r2, ip
 8011b92:	f7fa fca1 	bl	800c4d8 <LCD_DrawHLine>
 8011b96:	f109 39ff 	add.w	r9, r9, #4294967295
 8011b9a:	f108 0801 	add.w	r8, r8, #1
 8011b9e:	e7d4      	b.n	8011b4a <GUI__DrawTwinArc2+0xb2>
 8011ba0:	2c02      	cmp	r4, #2
 8011ba2:	d096      	beq.n	8011ad2 <GUI__DrawTwinArc2+0x3a>
 8011ba4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011ba6:	f7fc f8a4 	bl	800dcf2 <GUI_SetColor>
 8011baa:	f1c4 0303 	rsb	r3, r4, #3
 8011bae:	f1a4 0803 	sub.w	r8, r4, #3
 8011bb2:	449b      	add	fp, r3
 8011bb4:	f1b8 0f00 	cmp.w	r8, #0
 8011bb8:	d08b      	beq.n	8011ad2 <GUI__DrawTwinArc2+0x3a>
 8011bba:	ab07      	add	r3, sp, #28
 8011bbc:	4641      	mov	r1, r8
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	ab06      	add	r3, sp, #24
 8011bc4:	aa05      	add	r2, sp, #20
 8011bc6:	f7ff ff3c 	bl	8011a42 <_GetTwinArcPara>
 8011bca:	9807      	ldr	r0, [sp, #28]
 8011bcc:	1932      	adds	r2, r6, r4
 8011bce:	ebc4 0907 	rsb	r9, r4, r7
 8011bd2:	4659      	mov	r1, fp
 8011bd4:	eb09 0a00 	add.w	sl, r9, r0
 8011bd8:	1a10      	subs	r0, r2, r0
 8011bda:	3a01      	subs	r2, #1
 8011bdc:	f7fa fc7c 	bl	800c4d8 <LCD_DrawHLine>
 8011be0:	4659      	mov	r1, fp
 8011be2:	f109 0001 	add.w	r0, r9, #1
 8011be6:	4652      	mov	r2, sl
 8011be8:	f7fa fc76 	bl	800c4d8 <LCD_DrawHLine>
 8011bec:	f108 38ff 	add.w	r8, r8, #4294967295
 8011bf0:	f10b 0b01 	add.w	fp, fp, #1
 8011bf4:	e7de      	b.n	8011bb4 <GUI__DrawTwinArc2+0x11c>
 8011bf6:	b00b      	add	sp, #44	; 0x2c
 8011bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfc:	20000084 	.word	0x20000084

08011c00 <GUI__CompactPixelIndices>:
 8011c00:	2a08      	cmp	r2, #8
 8011c02:	b510      	push	{r4, lr}
 8011c04:	dd0e      	ble.n	8011c24 <GUI__CompactPixelIndices+0x24>
 8011c06:	2a10      	cmp	r2, #16
 8011c08:	dc0a      	bgt.n	8011c20 <GUI__CompactPixelIndices+0x20>
 8011c0a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011c0e:	4603      	mov	r3, r0
 8011c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8011c14:	f823 2b02 	strh.w	r2, [r3], #2
 8011c18:	428b      	cmp	r3, r1
 8011c1a:	d1f9      	bne.n	8011c10 <GUI__CompactPixelIndices+0x10>
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	bd10      	pop	{r4, pc}
 8011c20:	2000      	movs	r0, #0
 8011c22:	bd10      	pop	{r4, pc}
 8011c24:	2a02      	cmp	r2, #2
 8011c26:	d06d      	beq.n	8011d04 <GUI__CompactPixelIndices+0x104>
 8011c28:	2a04      	cmp	r2, #4
 8011c2a:	d054      	beq.n	8011cd6 <GUI__CompactPixelIndices+0xd6>
 8011c2c:	2a01      	cmp	r2, #1
 8011c2e:	f040 8095 	bne.w	8011d5c <GUI__CompactPixelIndices+0x15c>
 8011c32:	4604      	mov	r4, r0
 8011c34:	6803      	ldr	r3, [r0, #0]
 8011c36:	2901      	cmp	r1, #1
 8011c38:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	d047      	beq.n	8011cd0 <GUI__CompactPixelIndices+0xd0>
 8011c40:	6842      	ldr	r2, [r0, #4]
 8011c42:	2902      	cmp	r1, #2
 8011c44:	f002 0201 	and.w	r2, r2, #1
 8011c48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011c4c:	d102      	bne.n	8011c54 <GUI__CompactPixelIndices+0x54>
 8011c4e:	f100 0208 	add.w	r2, r0, #8
 8011c52:	e03e      	b.n	8011cd2 <GUI__CompactPixelIndices+0xd2>
 8011c54:	6882      	ldr	r2, [r0, #8]
 8011c56:	2903      	cmp	r1, #3
 8011c58:	f002 0201 	and.w	r2, r2, #1
 8011c5c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8011c60:	d102      	bne.n	8011c68 <GUI__CompactPixelIndices+0x68>
 8011c62:	f100 020c 	add.w	r2, r0, #12
 8011c66:	e034      	b.n	8011cd2 <GUI__CompactPixelIndices+0xd2>
 8011c68:	68c2      	ldr	r2, [r0, #12]
 8011c6a:	2904      	cmp	r1, #4
 8011c6c:	f002 0201 	and.w	r2, r2, #1
 8011c70:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011c74:	d102      	bne.n	8011c7c <GUI__CompactPixelIndices+0x7c>
 8011c76:	f100 0210 	add.w	r2, r0, #16
 8011c7a:	e02a      	b.n	8011cd2 <GUI__CompactPixelIndices+0xd2>
 8011c7c:	6902      	ldr	r2, [r0, #16]
 8011c7e:	2905      	cmp	r1, #5
 8011c80:	f002 0201 	and.w	r2, r2, #1
 8011c84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011c88:	d102      	bne.n	8011c90 <GUI__CompactPixelIndices+0x90>
 8011c8a:	f100 0214 	add.w	r2, r0, #20
 8011c8e:	e020      	b.n	8011cd2 <GUI__CompactPixelIndices+0xd2>
 8011c90:	6942      	ldr	r2, [r0, #20]
 8011c92:	2906      	cmp	r1, #6
 8011c94:	f002 0201 	and.w	r2, r2, #1
 8011c98:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011c9c:	d102      	bne.n	8011ca4 <GUI__CompactPixelIndices+0xa4>
 8011c9e:	f100 0218 	add.w	r2, r0, #24
 8011ca2:	e016      	b.n	8011cd2 <GUI__CompactPixelIndices+0xd2>
 8011ca4:	6982      	ldr	r2, [r0, #24]
 8011ca6:	3907      	subs	r1, #7
 8011ca8:	f002 0201 	and.w	r2, r2, #1
 8011cac:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8011cb0:	d102      	bne.n	8011cb8 <GUI__CompactPixelIndices+0xb8>
 8011cb2:	f100 021c 	add.w	r2, r0, #28
 8011cb6:	e005      	b.n	8011cc4 <GUI__CompactPixelIndices+0xc4>
 8011cb8:	f100 0220 	add.w	r2, r0, #32
 8011cbc:	69c0      	ldr	r0, [r0, #28]
 8011cbe:	f000 0001 	and.w	r0, r0, #1
 8011cc2:	4303      	orrs	r3, r0
 8011cc4:	f804 3b01 	strb.w	r3, [r4], #1
 8011cc8:	2900      	cmp	r1, #0
 8011cca:	d0a7      	beq.n	8011c1c <GUI__CompactPixelIndices+0x1c>
 8011ccc:	4610      	mov	r0, r2
 8011cce:	e7b1      	b.n	8011c34 <GUI__CompactPixelIndices+0x34>
 8011cd0:	1d02      	adds	r2, r0, #4
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	e7f6      	b.n	8011cc4 <GUI__CompactPixelIndices+0xc4>
 8011cd6:	4602      	mov	r2, r0
 8011cd8:	6803      	ldr	r3, [r0, #0]
 8011cda:	2901      	cmp	r1, #1
 8011cdc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	d102      	bne.n	8011cea <GUI__CompactPixelIndices+0xea>
 8011ce4:	1d04      	adds	r4, r0, #4
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	e006      	b.n	8011cf8 <GUI__CompactPixelIndices+0xf8>
 8011cea:	f100 0408 	add.w	r4, r0, #8
 8011cee:	6840      	ldr	r0, [r0, #4]
 8011cf0:	f000 000f 	and.w	r0, r0, #15
 8011cf4:	4303      	orrs	r3, r0
 8011cf6:	3902      	subs	r1, #2
 8011cf8:	f802 3b01 	strb.w	r3, [r2], #1
 8011cfc:	2900      	cmp	r1, #0
 8011cfe:	d08d      	beq.n	8011c1c <GUI__CompactPixelIndices+0x1c>
 8011d00:	4620      	mov	r0, r4
 8011d02:	e7e9      	b.n	8011cd8 <GUI__CompactPixelIndices+0xd8>
 8011d04:	4604      	mov	r4, r0
 8011d06:	6803      	ldr	r3, [r0, #0]
 8011d08:	2901      	cmp	r1, #1
 8011d0a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	d021      	beq.n	8011d56 <GUI__CompactPixelIndices+0x156>
 8011d12:	6842      	ldr	r2, [r0, #4]
 8011d14:	2902      	cmp	r1, #2
 8011d16:	f002 0203 	and.w	r2, r2, #3
 8011d1a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011d1e:	d102      	bne.n	8011d26 <GUI__CompactPixelIndices+0x126>
 8011d20:	f100 0208 	add.w	r2, r0, #8
 8011d24:	e018      	b.n	8011d58 <GUI__CompactPixelIndices+0x158>
 8011d26:	6882      	ldr	r2, [r0, #8]
 8011d28:	2903      	cmp	r1, #3
 8011d2a:	f002 0203 	and.w	r2, r2, #3
 8011d2e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011d32:	d102      	bne.n	8011d3a <GUI__CompactPixelIndices+0x13a>
 8011d34:	f100 020c 	add.w	r2, r0, #12
 8011d38:	e00e      	b.n	8011d58 <GUI__CompactPixelIndices+0x158>
 8011d3a:	f100 0210 	add.w	r2, r0, #16
 8011d3e:	68c0      	ldr	r0, [r0, #12]
 8011d40:	f000 0003 	and.w	r0, r0, #3
 8011d44:	4303      	orrs	r3, r0
 8011d46:	3904      	subs	r1, #4
 8011d48:	f804 3b01 	strb.w	r3, [r4], #1
 8011d4c:	2900      	cmp	r1, #0
 8011d4e:	f43f af65 	beq.w	8011c1c <GUI__CompactPixelIndices+0x1c>
 8011d52:	4610      	mov	r0, r2
 8011d54:	e7d7      	b.n	8011d06 <GUI__CompactPixelIndices+0x106>
 8011d56:	1d02      	adds	r2, r0, #4
 8011d58:	2100      	movs	r1, #0
 8011d5a:	e7f5      	b.n	8011d48 <GUI__CompactPixelIndices+0x148>
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8011d62:	54c2      	strb	r2, [r0, r3]
 8011d64:	3301      	adds	r3, #1
 8011d66:	428b      	cmp	r3, r1
 8011d68:	d1f9      	bne.n	8011d5e <GUI__CompactPixelIndices+0x15e>
 8011d6a:	e757      	b.n	8011c1c <GUI__CompactPixelIndices+0x1c>

08011d6c <GUI__ConvertColor2Index>:
 8011d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d74:	681e      	ldr	r6, [r3, #0]
 8011d76:	f1b8 0f00 	cmp.w	r8, #0
 8011d7a:	bf08      	it	eq
 8011d7c:	4680      	moveq	r8, r0
 8011d7e:	2a08      	cmp	r2, #8
 8011d80:	4604      	mov	r4, r0
 8011d82:	460d      	mov	r5, r1
 8011d84:	dd05      	ble.n	8011d92 <GUI__ConvertColor2Index+0x26>
 8011d86:	2a10      	cmp	r2, #16
 8011d88:	f340 80b6 	ble.w	8011ef8 <GUI__ConvertColor2Index+0x18c>
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d92:	3a01      	subs	r2, #1
 8011d94:	2a07      	cmp	r2, #7
 8011d96:	f200 80a4 	bhi.w	8011ee2 <GUI__ConvertColor2Index+0x176>
 8011d9a:	e8df f002 	tbb	[pc, r2]
 8011d9e:	6111      	.short	0x6111
 8011da0:	a2a287a2 	.word	0xa2a287a2
 8011da4:	92a2      	.short	0x92a2
 8011da6:	69e0      	ldr	r0, [r4, #28]
 8011da8:	47b0      	blx	r6
 8011daa:	4338      	orrs	r0, r7
 8011dac:	f104 0920 	add.w	r9, r4, #32
 8011db0:	b2c7      	uxtb	r7, r0
 8011db2:	3d08      	subs	r5, #8
 8011db4:	f808 7b01 	strb.w	r7, [r8], #1
 8011db8:	2d00      	cmp	r5, #0
 8011dba:	f000 8092 	beq.w	8011ee2 <GUI__ConvertColor2Index+0x176>
 8011dbe:	464c      	mov	r4, r9
 8011dc0:	6820      	ldr	r0, [r4, #0]
 8011dc2:	47b0      	blx	r6
 8011dc4:	2d01      	cmp	r5, #1
 8011dc6:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011dca:	b2c7      	uxtb	r7, r0
 8011dcc:	f000 808c 	beq.w	8011ee8 <GUI__ConvertColor2Index+0x17c>
 8011dd0:	6860      	ldr	r0, [r4, #4]
 8011dd2:	47b0      	blx	r6
 8011dd4:	2d02      	cmp	r5, #2
 8011dd6:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8011dda:	b2c7      	uxtb	r7, r0
 8011ddc:	d102      	bne.n	8011de4 <GUI__ConvertColor2Index+0x78>
 8011dde:	f104 0908 	add.w	r9, r4, #8
 8011de2:	e083      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011de4:	68a0      	ldr	r0, [r4, #8]
 8011de6:	47b0      	blx	r6
 8011de8:	2d03      	cmp	r5, #3
 8011dea:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8011dee:	b2c7      	uxtb	r7, r0
 8011df0:	d102      	bne.n	8011df8 <GUI__ConvertColor2Index+0x8c>
 8011df2:	f104 090c 	add.w	r9, r4, #12
 8011df6:	e079      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011df8:	68e0      	ldr	r0, [r4, #12]
 8011dfa:	47b0      	blx	r6
 8011dfc:	2d04      	cmp	r5, #4
 8011dfe:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011e02:	b2c7      	uxtb	r7, r0
 8011e04:	d102      	bne.n	8011e0c <GUI__ConvertColor2Index+0xa0>
 8011e06:	f104 0910 	add.w	r9, r4, #16
 8011e0a:	e06f      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011e0c:	6920      	ldr	r0, [r4, #16]
 8011e0e:	47b0      	blx	r6
 8011e10:	2d05      	cmp	r5, #5
 8011e12:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8011e16:	b2c7      	uxtb	r7, r0
 8011e18:	d102      	bne.n	8011e20 <GUI__ConvertColor2Index+0xb4>
 8011e1a:	f104 0914 	add.w	r9, r4, #20
 8011e1e:	e065      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011e20:	6960      	ldr	r0, [r4, #20]
 8011e22:	47b0      	blx	r6
 8011e24:	2d06      	cmp	r5, #6
 8011e26:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011e2a:	b2c7      	uxtb	r7, r0
 8011e2c:	d102      	bne.n	8011e34 <GUI__ConvertColor2Index+0xc8>
 8011e2e:	f104 0918 	add.w	r9, r4, #24
 8011e32:	e05b      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011e34:	69a0      	ldr	r0, [r4, #24]
 8011e36:	47b0      	blx	r6
 8011e38:	2d07      	cmp	r5, #7
 8011e3a:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8011e3e:	b2c7      	uxtb	r7, r0
 8011e40:	d1b1      	bne.n	8011da6 <GUI__ConvertColor2Index+0x3a>
 8011e42:	f104 091c 	add.w	r9, r4, #28
 8011e46:	e051      	b.n	8011eec <GUI__ConvertColor2Index+0x180>
 8011e48:	68e0      	ldr	r0, [r4, #12]
 8011e4a:	47b0      	blx	r6
 8011e4c:	4338      	orrs	r0, r7
 8011e4e:	f104 0910 	add.w	r9, r4, #16
 8011e52:	b2c7      	uxtb	r7, r0
 8011e54:	3d04      	subs	r5, #4
 8011e56:	f808 7b01 	strb.w	r7, [r8], #1
 8011e5a:	2d00      	cmp	r5, #0
 8011e5c:	d041      	beq.n	8011ee2 <GUI__ConvertColor2Index+0x176>
 8011e5e:	464c      	mov	r4, r9
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	47b0      	blx	r6
 8011e64:	2d01      	cmp	r5, #1
 8011e66:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011e6a:	b2c7      	uxtb	r7, r0
 8011e6c:	d040      	beq.n	8011ef0 <GUI__ConvertColor2Index+0x184>
 8011e6e:	6860      	ldr	r0, [r4, #4]
 8011e70:	47b0      	blx	r6
 8011e72:	2d02      	cmp	r5, #2
 8011e74:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011e78:	b2c7      	uxtb	r7, r0
 8011e7a:	d102      	bne.n	8011e82 <GUI__ConvertColor2Index+0x116>
 8011e7c:	f104 0908 	add.w	r9, r4, #8
 8011e80:	e038      	b.n	8011ef4 <GUI__ConvertColor2Index+0x188>
 8011e82:	68a0      	ldr	r0, [r4, #8]
 8011e84:	47b0      	blx	r6
 8011e86:	2d03      	cmp	r5, #3
 8011e88:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011e8c:	b2c7      	uxtb	r7, r0
 8011e8e:	d1db      	bne.n	8011e48 <GUI__ConvertColor2Index+0xdc>
 8011e90:	f104 090c 	add.w	r9, r4, #12
 8011e94:	e02e      	b.n	8011ef4 <GUI__ConvertColor2Index+0x188>
 8011e96:	6860      	ldr	r0, [r4, #4]
 8011e98:	47b0      	blx	r6
 8011e9a:	4338      	orrs	r0, r7
 8011e9c:	f104 0908 	add.w	r9, r4, #8
 8011ea0:	b2c7      	uxtb	r7, r0
 8011ea2:	3d02      	subs	r5, #2
 8011ea4:	f808 7b01 	strb.w	r7, [r8], #1
 8011ea8:	b1dd      	cbz	r5, 8011ee2 <GUI__ConvertColor2Index+0x176>
 8011eaa:	464c      	mov	r4, r9
 8011eac:	6820      	ldr	r0, [r4, #0]
 8011eae:	47b0      	blx	r6
 8011eb0:	2d01      	cmp	r5, #1
 8011eb2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011eb6:	b2c7      	uxtb	r7, r0
 8011eb8:	d1ed      	bne.n	8011e96 <GUI__ConvertColor2Index+0x12a>
 8011eba:	f104 0904 	add.w	r9, r4, #4
 8011ebe:	2500      	movs	r5, #0
 8011ec0:	e7f0      	b.n	8011ea4 <GUI__ConvertColor2Index+0x138>
 8011ec2:	691f      	ldr	r7, [r3, #16]
 8011ec4:	b12f      	cbz	r7, 8011ed2 <GUI__ConvertColor2Index+0x166>
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	4641      	mov	r1, r8
 8011eca:	462a      	mov	r2, r5
 8011ecc:	2301      	movs	r3, #1
 8011ece:	47b8      	blx	r7
 8011ed0:	e007      	b.n	8011ee2 <GUI__ConvertColor2Index+0x176>
 8011ed2:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8011ed6:	47b0      	blx	r6
 8011ed8:	f808 0007 	strb.w	r0, [r8, r7]
 8011edc:	3701      	adds	r7, #1
 8011ede:	42bd      	cmp	r5, r7
 8011ee0:	d1f7      	bne.n	8011ed2 <GUI__ConvertColor2Index+0x166>
 8011ee2:	2001      	movs	r0, #1
 8011ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee8:	f104 0904 	add.w	r9, r4, #4
 8011eec:	2500      	movs	r5, #0
 8011eee:	e761      	b.n	8011db4 <GUI__ConvertColor2Index+0x48>
 8011ef0:	f104 0904 	add.w	r9, r4, #4
 8011ef4:	2500      	movs	r5, #0
 8011ef6:	e7ae      	b.n	8011e56 <GUI__ConvertColor2Index+0xea>
 8011ef8:	691f      	ldr	r7, [r3, #16]
 8011efa:	b11f      	cbz	r7, 8011f04 <GUI__ConvertColor2Index+0x198>
 8011efc:	4641      	mov	r1, r8
 8011efe:	462a      	mov	r2, r5
 8011f00:	2302      	movs	r3, #2
 8011f02:	e7e4      	b.n	8011ece <GUI__ConvertColor2Index+0x162>
 8011f04:	f854 0b04 	ldr.w	r0, [r4], #4
 8011f08:	47b0      	blx	r6
 8011f0a:	3d01      	subs	r5, #1
 8011f0c:	f828 0b02 	strh.w	r0, [r8], #2
 8011f10:	d1f8      	bne.n	8011f04 <GUI__ConvertColor2Index+0x198>
 8011f12:	e7e6      	b.n	8011ee2 <GUI__ConvertColor2Index+0x176>

08011f14 <GUI__CompactPixelIndicesEx>:
 8011f14:	b513      	push	{r0, r1, r4, lr}
 8011f16:	2400      	movs	r4, #0
 8011f18:	9400      	str	r4, [sp, #0]
 8011f1a:	f7ff ff27 	bl	8011d6c <GUI__ConvertColor2Index>
 8011f1e:	b002      	add	sp, #8
 8011f20:	bd10      	pop	{r4, pc}

08011f22 <_GetCharCode>:
 8011f22:	7800      	ldrb	r0, [r0, #0]
 8011f24:	4770      	bx	lr

08011f26 <_GetCharSize>:
 8011f26:	2001      	movs	r0, #1
 8011f28:	4770      	bx	lr

08011f2a <_CalcSizeOfChar>:
 8011f2a:	2001      	movs	r0, #1
 8011f2c:	4770      	bx	lr

08011f2e <_Encode>:
 8011f2e:	7001      	strb	r1, [r0, #0]
 8011f30:	2001      	movs	r0, #1
 8011f32:	4770      	bx	lr

08011f34 <GUI_DrawHLine>:
 8011f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f36:	4f10      	ldr	r7, [pc, #64]	; (8011f78 <GUI_DrawHLine+0x44>)
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011f3c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011f3e:	4405      	add	r5, r0
 8011f40:	190e      	adds	r6, r1, r4
 8011f42:	b2ab      	uxth	r3, r5
 8011f44:	4414      	add	r4, r2
 8011f46:	4668      	mov	r0, sp
 8011f48:	f8ad 6000 	strh.w	r6, [sp]
 8011f4c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8011f50:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011f58:	f7f7 fdb4 	bl	8009ac4 <WM__InitIVRSearch>
 8011f5c:	b148      	cbz	r0, 8011f72 <GUI_DrawHLine+0x3e>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f62:	4630      	mov	r0, r6
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4629      	mov	r1, r5
 8011f68:	4622      	mov	r2, r4
 8011f6a:	4798      	blx	r3
 8011f6c:	f7f7 fce8 	bl	8009940 <WM__GetNextIVR>
 8011f70:	e7f4      	b.n	8011f5c <GUI_DrawHLine+0x28>
 8011f72:	b003      	add	sp, #12
 8011f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f76:	bf00      	nop
 8011f78:	20000084 	.word	0x20000084

08011f7c <GUI_DrawPixel>:
 8011f7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f7e:	4e0f      	ldr	r6, [pc, #60]	; (8011fbc <GUI_DrawPixel+0x40>)
 8011f80:	6833      	ldr	r3, [r6, #0]
 8011f82:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8011f84:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011f86:	4405      	add	r5, r0
 8011f88:	b2ab      	uxth	r3, r5
 8011f8a:	440c      	add	r4, r1
 8011f8c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011f90:	f8ad 3000 	strh.w	r3, [sp]
 8011f94:	4668      	mov	r0, sp
 8011f96:	b2a3      	uxth	r3, r4
 8011f98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011f9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011fa0:	f7f7 fd90 	bl	8009ac4 <WM__InitIVRSearch>
 8011fa4:	b140      	cbz	r0, 8011fb8 <GUI_DrawPixel+0x3c>
 8011fa6:	6833      	ldr	r3, [r6, #0]
 8011fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011faa:	4628      	mov	r0, r5
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	4621      	mov	r1, r4
 8011fb0:	4798      	blx	r3
 8011fb2:	f7f7 fcc5 	bl	8009940 <WM__GetNextIVR>
 8011fb6:	e7f5      	b.n	8011fa4 <GUI_DrawPixel+0x28>
 8011fb8:	b002      	add	sp, #8
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	20000084 	.word	0x20000084

08011fc0 <GUI_DrawVLine>:
 8011fc0:	4b0f      	ldr	r3, [pc, #60]	; (8012000 <GUI_DrawVLine+0x40>)
 8011fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8011fc8:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8011fca:	4406      	add	r6, r0
 8011fcc:	190d      	adds	r5, r1, r4
 8011fce:	b2b3      	uxth	r3, r6
 8011fd0:	4414      	add	r4, r2
 8011fd2:	4668      	mov	r0, sp
 8011fd4:	f8ad 3000 	strh.w	r3, [sp]
 8011fd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011fdc:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011fe0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011fe4:	f7f7 fd6e 	bl	8009ac4 <WM__InitIVRSearch>
 8011fe8:	b138      	cbz	r0, 8011ffa <GUI_DrawVLine+0x3a>
 8011fea:	4630      	mov	r0, r6
 8011fec:	4629      	mov	r1, r5
 8011fee:	4622      	mov	r2, r4
 8011ff0:	f7fa fa98 	bl	800c524 <LCD_DrawVLine>
 8011ff4:	f7f7 fca4 	bl	8009940 <WM__GetNextIVR>
 8011ff8:	e7f6      	b.n	8011fe8 <GUI_DrawVLine+0x28>
 8011ffa:	b002      	add	sp, #8
 8011ffc:	bd70      	pop	{r4, r5, r6, pc}
 8011ffe:	bf00      	nop
 8012000:	20000084 	.word	0x20000084

08012004 <GUI_FillRect>:
 8012004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012006:	4c0f      	ldr	r4, [pc, #60]	; (8012044 <GUI_FillRect+0x40>)
 8012008:	6824      	ldr	r4, [r4, #0]
 801200a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801200c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801200e:	1947      	adds	r7, r0, r5
 8012010:	190e      	adds	r6, r1, r4
 8012012:	4415      	add	r5, r2
 8012014:	441c      	add	r4, r3
 8012016:	4668      	mov	r0, sp
 8012018:	f8ad 7000 	strh.w	r7, [sp]
 801201c:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012020:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012024:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012028:	f7f7 fd4c 	bl	8009ac4 <WM__InitIVRSearch>
 801202c:	b140      	cbz	r0, 8012040 <GUI_FillRect+0x3c>
 801202e:	4638      	mov	r0, r7
 8012030:	4631      	mov	r1, r6
 8012032:	462a      	mov	r2, r5
 8012034:	4623      	mov	r3, r4
 8012036:	f7fa fa9b 	bl	800c570 <LCD_FillRect>
 801203a:	f7f7 fc81 	bl	8009940 <WM__GetNextIVR>
 801203e:	e7f5      	b.n	801202c <GUI_FillRect+0x28>
 8012040:	b003      	add	sp, #12
 8012042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012044:	20000084 	.word	0x20000084

08012048 <GUI_FillRectEx>:
 8012048:	4603      	mov	r3, r0
 801204a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801204e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8012052:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012056:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801205a:	f7ff bfd3 	b.w	8012004 <GUI_FillRect>

0801205e <_DrawGradient>:
 801205e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012062:	b08f      	sub	sp, #60	; 0x3c
 8012064:	4688      	mov	r8, r1
 8012066:	4614      	mov	r4, r2
 8012068:	991a      	ldr	r1, [sp, #104]	; 0x68
 801206a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801206c:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8012070:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8012074:	9104      	str	r1, [sp, #16]
 8012076:	4605      	mov	r5, r0
 8012078:	461e      	mov	r6, r3
 801207a:	9203      	str	r2, [sp, #12]
 801207c:	f7fb fd6d 	bl	800db5a <GUI_GetColor>
 8012080:	45da      	cmp	sl, fp
 8012082:	9009      	str	r0, [sp, #36]	; 0x24
 8012084:	d109      	bne.n	801209a <_DrawGradient+0x3c>
 8012086:	4650      	mov	r0, sl
 8012088:	f7fa fd4a 	bl	800cb20 <LCD_SetColor>
 801208c:	9b03      	ldr	r3, [sp, #12]
 801208e:	b113      	cbz	r3, 8012096 <_DrawGradient+0x38>
 8012090:	4628      	mov	r0, r5
 8012092:	4641      	mov	r1, r8
 8012094:	e09d      	b.n	80121d2 <_DrawGradient+0x174>
 8012096:	4640      	mov	r0, r8
 8012098:	e0a1      	b.n	80121de <_DrawGradient+0x180>
 801209a:	ebb6 0708 	subs.w	r7, r6, r8
 801209e:	f000 80b2 	beq.w	8012206 <_DrawGradient+0x1a8>
 80120a2:	fa5f f28a 	uxtb.w	r2, sl
 80120a6:	fa5f f38b 	uxtb.w	r3, fp
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	930a      	str	r3, [sp, #40]	; 0x28
 80120ae:	2302      	movs	r3, #2
 80120b0:	fb97 f3f3 	sdiv	r3, r7, r3
 80120b4:	fb02 3207 	mla	r2, r2, r7, r3
 80120b8:	f3cb 2107 	ubfx	r1, fp, #8, #8
 80120bc:	9205      	str	r2, [sp, #20]
 80120be:	f3ca 2207 	ubfx	r2, sl, #8, #8
 80120c2:	1a89      	subs	r1, r1, r2
 80120c4:	fb02 3207 	mla	r2, r2, r7, r3
 80120c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80120ca:	9206      	str	r2, [sp, #24]
 80120cc:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80120d0:	f3ca 4207 	ubfx	r2, sl, #16, #8
 80120d4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80120d8:	1a89      	subs	r1, r1, r2
 80120da:	ebca 6b1b 	rsb	fp, sl, fp, lsr #24
 80120de:	fb02 3207 	mla	r2, r2, r7, r3
 80120e2:	fb0a 3a07 	mla	sl, sl, r7, r3
 80120e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120e8:	910c      	str	r1, [sp, #48]	; 0x30
 80120ea:	9207      	str	r2, [sp, #28]
 80120ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80120f0:	f8cd a020 	str.w	sl, [sp, #32]
 80120f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80120f8:	f04f 0901 	mov.w	r9, #1
 80120fc:	f103 0a01 	add.w	sl, r3, #1
 8012100:	45b2      	cmp	sl, r6
 8012102:	dc5b      	bgt.n	80121bc <_DrawGradient+0x15e>
 8012104:	f8dd c014 	ldr.w	ip, [sp, #20]
 8012108:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 801210c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801210e:	fb9c fcf7 	sdiv	ip, ip, r7
 8012112:	f8cd c004 	str.w	ip, [sp, #4]
 8012116:	f8dd c014 	ldr.w	ip, [sp, #20]
 801211a:	44f4      	add	ip, lr
 801211c:	f8cd c014 	str.w	ip, [sp, #20]
 8012120:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8012124:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012128:	fb9c f1f7 	sdiv	r1, ip, r7
 801212c:	44f4      	add	ip, lr
 801212e:	f8cd c018 	str.w	ip, [sp, #24]
 8012132:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8012136:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801213a:	fb9c fbf7 	sdiv	fp, ip, r7
 801213e:	44f4      	add	ip, lr
 8012140:	f8cd c01c 	str.w	ip, [sp, #28]
 8012144:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012148:	fb9c fef7 	sdiv	lr, ip, r7
 801214c:	4494      	add	ip, r2
 801214e:	f8cd c020 	str.w	ip, [sp, #32]
 8012152:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012156:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 801215a:	ea4b 6b0e 	orr.w	fp, fp, lr, lsl #24
 801215e:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8012162:	45c2      	cmp	sl, r8
 8012164:	ea4b 0b02 	orr.w	fp, fp, r2
 8012168:	dd25      	ble.n	80121b6 <_DrawGradient+0x158>
 801216a:	4583      	cmp	fp, r0
 801216c:	d102      	bne.n	8012174 <_DrawGradient+0x116>
 801216e:	f109 0901 	add.w	r9, r9, #1
 8012172:	e020      	b.n	80121b6 <_DrawGradient+0x158>
 8012174:	9302      	str	r3, [sp, #8]
 8012176:	f7fa fcd3 	bl	800cb20 <LCD_SetColor>
 801217a:	f1b9 0f01 	cmp.w	r9, #1
 801217e:	9b02      	ldr	r3, [sp, #8]
 8012180:	d00f      	beq.n	80121a2 <_DrawGradient+0x144>
 8012182:	9a03      	ldr	r2, [sp, #12]
 8012184:	ebc9 010a 	rsb	r1, r9, sl
 8012188:	b112      	cbz	r2, 8012190 <_DrawGradient+0x132>
 801218a:	4628      	mov	r0, r5
 801218c:	4622      	mov	r2, r4
 801218e:	e003      	b.n	8012198 <_DrawGradient+0x13a>
 8012190:	4608      	mov	r0, r1
 8012192:	461a      	mov	r2, r3
 8012194:	4629      	mov	r1, r5
 8012196:	4623      	mov	r3, r4
 8012198:	f7fa f9ea 	bl	800c570 <LCD_FillRect>
 801219c:	f04f 0901 	mov.w	r9, #1
 80121a0:	e009      	b.n	80121b6 <_DrawGradient+0x158>
 80121a2:	9903      	ldr	r1, [sp, #12]
 80121a4:	b111      	cbz	r1, 80121ac <_DrawGradient+0x14e>
 80121a6:	4628      	mov	r0, r5
 80121a8:	4619      	mov	r1, r3
 80121aa:	e001      	b.n	80121b0 <_DrawGradient+0x152>
 80121ac:	4618      	mov	r0, r3
 80121ae:	4629      	mov	r1, r5
 80121b0:	4622      	mov	r2, r4
 80121b2:	9b04      	ldr	r3, [sp, #16]
 80121b4:	4798      	blx	r3
 80121b6:	4653      	mov	r3, sl
 80121b8:	4658      	mov	r0, fp
 80121ba:	e79f      	b.n	80120fc <_DrawGradient+0x9e>
 80121bc:	f7fa fcb0 	bl	800cb20 <LCD_SetColor>
 80121c0:	f1b9 0f01 	cmp.w	r9, #1
 80121c4:	d00f      	beq.n	80121e6 <_DrawGradient+0x188>
 80121c6:	9a03      	ldr	r2, [sp, #12]
 80121c8:	ebc9 0106 	rsb	r1, r9, r6
 80121cc:	b132      	cbz	r2, 80121dc <_DrawGradient+0x17e>
 80121ce:	4628      	mov	r0, r5
 80121d0:	3101      	adds	r1, #1
 80121d2:	4622      	mov	r2, r4
 80121d4:	4633      	mov	r3, r6
 80121d6:	f7fa f9cb 	bl	800c570 <LCD_FillRect>
 80121da:	e00e      	b.n	80121fa <_DrawGradient+0x19c>
 80121dc:	1c48      	adds	r0, r1, #1
 80121de:	4629      	mov	r1, r5
 80121e0:	4632      	mov	r2, r6
 80121e2:	4623      	mov	r3, r4
 80121e4:	e7f7      	b.n	80121d6 <_DrawGradient+0x178>
 80121e6:	9b03      	ldr	r3, [sp, #12]
 80121e8:	b113      	cbz	r3, 80121f0 <_DrawGradient+0x192>
 80121ea:	4628      	mov	r0, r5
 80121ec:	4631      	mov	r1, r6
 80121ee:	e001      	b.n	80121f4 <_DrawGradient+0x196>
 80121f0:	4630      	mov	r0, r6
 80121f2:	4629      	mov	r1, r5
 80121f4:	4622      	mov	r2, r4
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	4798      	blx	r3
 80121fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121fc:	b00f      	add	sp, #60	; 0x3c
 80121fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012202:	f7fa bc8d 	b.w	800cb20 <LCD_SetColor>
 8012206:	b00f      	add	sp, #60	; 0x3c
 8012208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801220c <GUI_DrawGradientV>:
 801220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012210:	4c15      	ldr	r4, [pc, #84]	; (8012268 <GUI_DrawGradientV+0x5c>)
 8012212:	6824      	ldr	r4, [r4, #0]
 8012214:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012216:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8012218:	b087      	sub	sp, #28
 801221a:	eb00 0905 	add.w	r9, r0, r5
 801221e:	eb01 0804 	add.w	r8, r1, r4
 8012222:	4415      	add	r5, r2
 8012224:	441c      	add	r4, r3
 8012226:	a804      	add	r0, sp, #16
 8012228:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801222a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801222c:	f8ad 9010 	strh.w	r9, [sp, #16]
 8012230:	f8ad 5014 	strh.w	r5, [sp, #20]
 8012234:	f8ad 8012 	strh.w	r8, [sp, #18]
 8012238:	f8ad 4016 	strh.w	r4, [sp, #22]
 801223c:	f7f7 fc42 	bl	8009ac4 <WM__InitIVRSearch>
 8012240:	b170      	cbz	r0, 8012260 <GUI_DrawGradientV+0x54>
 8012242:	4b0a      	ldr	r3, [pc, #40]	; (801226c <GUI_DrawGradientV+0x60>)
 8012244:	9302      	str	r3, [sp, #8]
 8012246:	2301      	movs	r3, #1
 8012248:	9303      	str	r3, [sp, #12]
 801224a:	4648      	mov	r0, r9
 801224c:	4641      	mov	r1, r8
 801224e:	462a      	mov	r2, r5
 8012250:	4623      	mov	r3, r4
 8012252:	9700      	str	r7, [sp, #0]
 8012254:	9601      	str	r6, [sp, #4]
 8012256:	f7ff ff02 	bl	801205e <_DrawGradient>
 801225a:	f7f7 fb71 	bl	8009940 <WM__GetNextIVR>
 801225e:	e7ef      	b.n	8012240 <GUI_DrawGradientV+0x34>
 8012260:	b007      	add	sp, #28
 8012262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012266:	bf00      	nop
 8012268:	20000084 	.word	0x20000084
 801226c:	0800c4d9 	.word	0x0800c4d9

08012270 <GUI_DrawRect>:
 8012270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012274:	4c1e      	ldr	r4, [pc, #120]	; (80122f0 <GUI_DrawRect+0x80>)
 8012276:	f8d4 e000 	ldr.w	lr, [r4]
 801227a:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 801227e:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8012282:	1905      	adds	r5, r0, r4
 8012284:	4414      	add	r4, r2
 8012286:	f89e 2018 	ldrb.w	r2, [lr, #24]
 801228a:	3a01      	subs	r2, #1
 801228c:	b292      	uxth	r2, r2
 801228e:	198f      	adds	r7, r1, r6
 8012290:	441e      	add	r6, r3
 8012292:	1aab      	subs	r3, r5, r2
 8012294:	f8ad 3000 	strh.w	r3, [sp]
 8012298:	1913      	adds	r3, r2, r4
 801229a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801229e:	4668      	mov	r0, sp
 80122a0:	1abb      	subs	r3, r7, r2
 80122a2:	4432      	add	r2, r6
 80122a4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80122a8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80122ac:	f7f7 fc0a 	bl	8009ac4 <WM__InitIVRSearch>
 80122b0:	b1d0      	cbz	r0, 80122e8 <GUI_DrawRect+0x78>
 80122b2:	4628      	mov	r0, r5
 80122b4:	4639      	mov	r1, r7
 80122b6:	4622      	mov	r2, r4
 80122b8:	f7fa f90e 	bl	800c4d8 <LCD_DrawHLine>
 80122bc:	f107 0901 	add.w	r9, r7, #1
 80122c0:	4628      	mov	r0, r5
 80122c2:	4631      	mov	r1, r6
 80122c4:	4622      	mov	r2, r4
 80122c6:	f106 38ff 	add.w	r8, r6, #4294967295
 80122ca:	f7fa f905 	bl	800c4d8 <LCD_DrawHLine>
 80122ce:	4628      	mov	r0, r5
 80122d0:	4649      	mov	r1, r9
 80122d2:	4642      	mov	r2, r8
 80122d4:	f7fa f926 	bl	800c524 <LCD_DrawVLine>
 80122d8:	4620      	mov	r0, r4
 80122da:	4649      	mov	r1, r9
 80122dc:	4642      	mov	r2, r8
 80122de:	f7fa f921 	bl	800c524 <LCD_DrawVLine>
 80122e2:	f7f7 fb2d 	bl	8009940 <WM__GetNextIVR>
 80122e6:	e7e3      	b.n	80122b0 <GUI_DrawRect+0x40>
 80122e8:	b003      	add	sp, #12
 80122ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ee:	bf00      	nop
 80122f0:	20000084 	.word	0x20000084

080122f4 <_GetIndexMask_0>:
 80122f4:	b508      	push	{r3, lr}
 80122f6:	f7f9 fff1 	bl	800c2dc <LCD_GetNumColors>
 80122fa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80122fe:	d010      	beq.n	8012322 <_GetIndexMask_0+0x2e>
 8012300:	287f      	cmp	r0, #127	; 0x7f
 8012302:	d810      	bhi.n	8012326 <_GetIndexMask_0+0x32>
 8012304:	283f      	cmp	r0, #63	; 0x3f
 8012306:	d810      	bhi.n	801232a <_GetIndexMask_0+0x36>
 8012308:	281f      	cmp	r0, #31
 801230a:	d810      	bhi.n	801232e <_GetIndexMask_0+0x3a>
 801230c:	280f      	cmp	r0, #15
 801230e:	d810      	bhi.n	8012332 <_GetIndexMask_0+0x3e>
 8012310:	2807      	cmp	r0, #7
 8012312:	d810      	bhi.n	8012336 <_GetIndexMask_0+0x42>
 8012314:	2803      	cmp	r0, #3
 8012316:	d810      	bhi.n	801233a <_GetIndexMask_0+0x46>
 8012318:	2801      	cmp	r0, #1
 801231a:	bf94      	ite	ls
 801231c:	2000      	movls	r0, #0
 801231e:	2001      	movhi	r0, #1
 8012320:	e00c      	b.n	801233c <_GetIndexMask_0+0x48>
 8012322:	2008      	movs	r0, #8
 8012324:	e00a      	b.n	801233c <_GetIndexMask_0+0x48>
 8012326:	2007      	movs	r0, #7
 8012328:	e008      	b.n	801233c <_GetIndexMask_0+0x48>
 801232a:	2006      	movs	r0, #6
 801232c:	e006      	b.n	801233c <_GetIndexMask_0+0x48>
 801232e:	2005      	movs	r0, #5
 8012330:	e004      	b.n	801233c <_GetIndexMask_0+0x48>
 8012332:	2004      	movs	r0, #4
 8012334:	e002      	b.n	801233c <_GetIndexMask_0+0x48>
 8012336:	2003      	movs	r0, #3
 8012338:	e000      	b.n	801233c <_GetIndexMask_0+0x48>
 801233a:	2002      	movs	r0, #2
 801233c:	2301      	movs	r3, #1
 801233e:	fa03 f000 	lsl.w	r0, r3, r0
 8012342:	3801      	subs	r0, #1
 8012344:	bd08      	pop	{r3, pc}

08012346 <_Index2Color_0>:
 8012346:	b538      	push	{r3, r4, r5, lr}
 8012348:	4604      	mov	r4, r0
 801234a:	f7f9 ffc7 	bl	800c2dc <LCD_GetNumColors>
 801234e:	4605      	mov	r5, r0
 8012350:	f7f9 ffe2 	bl	800c318 <LCD_GetPalette>
 8012354:	42ac      	cmp	r4, r5
 8012356:	d203      	bcs.n	8012360 <_Index2Color_0+0x1a>
 8012358:	b118      	cbz	r0, 8012362 <_Index2Color_0+0x1c>
 801235a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	2000      	movs	r0, #0
 8012362:	bd38      	pop	{r3, r4, r5, pc}

08012364 <_Color2Index_0>:
 8012364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012368:	4682      	mov	sl, r0
 801236a:	f7f9 ffb7 	bl	800c2dc <LCD_GetNumColors>
 801236e:	4681      	mov	r9, r0
 8012370:	f7f9 ffd2 	bl	800c318 <LCD_GetPalette>
 8012374:	4605      	mov	r5, r0
 8012376:	b1e0      	cbz	r0, 80123b2 <_Color2Index_0+0x4e>
 8012378:	2300      	movs	r3, #0
 801237a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 801237e:	4592      	cmp	sl, r2
 8012380:	d019      	beq.n	80123b6 <_Color2Index_0+0x52>
 8012382:	3301      	adds	r3, #1
 8012384:	454b      	cmp	r3, r9
 8012386:	dbf8      	blt.n	801237a <_Color2Index_0+0x16>
 8012388:	2700      	movs	r7, #0
 801238a:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801238e:	463c      	mov	r4, r7
 8012390:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8012394:	4650      	mov	r0, sl
 8012396:	f7fb fbad 	bl	800daf4 <GUI_CalcColorDist>
 801239a:	4626      	mov	r6, r4
 801239c:	4540      	cmp	r0, r8
 801239e:	f104 0401 	add.w	r4, r4, #1
 80123a2:	bf24      	itt	cs
 80123a4:	4640      	movcs	r0, r8
 80123a6:	463e      	movcs	r6, r7
 80123a8:	454c      	cmp	r4, r9
 80123aa:	da07      	bge.n	80123bc <_Color2Index_0+0x58>
 80123ac:	4680      	mov	r8, r0
 80123ae:	4637      	mov	r7, r6
 80123b0:	e7ee      	b.n	8012390 <_Color2Index_0+0x2c>
 80123b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123b6:	4618      	mov	r0, r3
 80123b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123bc:	4630      	mov	r0, r6
 80123be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080123c4 <_DrawDownRect>:
 80123c4:	b510      	push	{r4, lr}
 80123c6:	b09c      	sub	sp, #112	; 0x70
 80123c8:	4604      	mov	r4, r0
 80123ca:	4668      	mov	r0, sp
 80123cc:	f7fb fc72 	bl	800dcb4 <GUI_SaveContext_W>
 80123d0:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <_DrawDownRect+0x34>)
 80123d2:	6818      	ldr	r0, [r3, #0]
 80123d4:	f7fa fba4 	bl	800cb20 <LCD_SetColor>
 80123d8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80123dc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80123e0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80123e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80123e8:	f7ff ff42 	bl	8012270 <GUI_DrawRect>
 80123ec:	4668      	mov	r0, sp
 80123ee:	f7fb fc6b 	bl	800dcc8 <GUI_RestoreContext>
 80123f2:	b01c      	add	sp, #112	; 0x70
 80123f4:	bd10      	pop	{r4, pc}
 80123f6:	bf00      	nop
 80123f8:	20005614 	.word	0x20005614

080123fc <_DrawUpRect>:
 80123fc:	b510      	push	{r4, lr}
 80123fe:	b09c      	sub	sp, #112	; 0x70
 8012400:	4604      	mov	r4, r0
 8012402:	4668      	mov	r0, sp
 8012404:	f7fb fc56 	bl	800dcb4 <GUI_SaveContext_W>
 8012408:	4b09      	ldr	r3, [pc, #36]	; (8012430 <_DrawUpRect+0x34>)
 801240a:	6818      	ldr	r0, [r3, #0]
 801240c:	f7fa fb88 	bl	800cb20 <LCD_SetColor>
 8012410:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012414:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012418:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801241c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012420:	f7ff ff26 	bl	8012270 <GUI_DrawRect>
 8012424:	4668      	mov	r0, sp
 8012426:	f7fb fc4f 	bl	800dcc8 <GUI_RestoreContext>
 801242a:	b01c      	add	sp, #112	; 0x70
 801242c:	bd10      	pop	{r4, pc}
 801242e:	bf00      	nop
 8012430:	20005614 	.word	0x20005614

08012434 <_DrawDown>:
 8012434:	b507      	push	{r0, r1, r2, lr}
 8012436:	4668      	mov	r0, sp
 8012438:	f7f6 f8e0 	bl	80085fc <WM_GetClientRect>
 801243c:	4668      	mov	r0, sp
 801243e:	f7ff ffc1 	bl	80123c4 <_DrawDownRect>
 8012442:	b003      	add	sp, #12
 8012444:	f85d fb04 	ldr.w	pc, [sp], #4

08012448 <_DrawUp>:
 8012448:	b507      	push	{r0, r1, r2, lr}
 801244a:	4668      	mov	r0, sp
 801244c:	f7f6 f8d6 	bl	80085fc <WM_GetClientRect>
 8012450:	4668      	mov	r0, sp
 8012452:	f7ff ffd3 	bl	80123fc <_DrawUpRect>
 8012456:	b003      	add	sp, #12
 8012458:	f85d fb04 	ldr.w	pc, [sp], #4

0801245c <LCD_GetNumLayers>:
 801245c:	b510      	push	{r4, lr}
 801245e:	2000      	movs	r0, #0
 8012460:	f7fb f962 	bl	800d728 <GUI_DEVICE__GetpDriver>
 8012464:	1c04      	adds	r4, r0, #0
 8012466:	f04f 0001 	mov.w	r0, #1
 801246a:	bf18      	it	ne
 801246c:	2401      	movne	r4, #1
 801246e:	f7fb f95b 	bl	800d728 <GUI_DEVICE__GetpDriver>
 8012472:	b100      	cbz	r0, 8012476 <LCD_GetNumLayers+0x1a>
 8012474:	3401      	adds	r4, #1
 8012476:	4620      	mov	r0, r4
 8012478:	bd10      	pop	{r4, pc}
	...

0801247c <__libc_init_array>:
 801247c:	b570      	push	{r4, r5, r6, lr}
 801247e:	4d0d      	ldr	r5, [pc, #52]	; (80124b4 <__libc_init_array+0x38>)
 8012480:	4c0d      	ldr	r4, [pc, #52]	; (80124b8 <__libc_init_array+0x3c>)
 8012482:	1b64      	subs	r4, r4, r5
 8012484:	10a4      	asrs	r4, r4, #2
 8012486:	2600      	movs	r6, #0
 8012488:	42a6      	cmp	r6, r4
 801248a:	d109      	bne.n	80124a0 <__libc_init_array+0x24>
 801248c:	4d0b      	ldr	r5, [pc, #44]	; (80124bc <__libc_init_array+0x40>)
 801248e:	4c0c      	ldr	r4, [pc, #48]	; (80124c0 <__libc_init_array+0x44>)
 8012490:	f001 face 	bl	8013a30 <_init>
 8012494:	1b64      	subs	r4, r4, r5
 8012496:	10a4      	asrs	r4, r4, #2
 8012498:	2600      	movs	r6, #0
 801249a:	42a6      	cmp	r6, r4
 801249c:	d105      	bne.n	80124aa <__libc_init_array+0x2e>
 801249e:	bd70      	pop	{r4, r5, r6, pc}
 80124a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80124a4:	4798      	blx	r3
 80124a6:	3601      	adds	r6, #1
 80124a8:	e7ee      	b.n	8012488 <__libc_init_array+0xc>
 80124aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80124ae:	4798      	blx	r3
 80124b0:	3601      	adds	r6, #1
 80124b2:	e7f2      	b.n	801249a <__libc_init_array+0x1e>
 80124b4:	08015e90 	.word	0x08015e90
 80124b8:	08015e90 	.word	0x08015e90
 80124bc:	08015e90 	.word	0x08015e90
 80124c0:	08015e94 	.word	0x08015e94

080124c4 <memcpy>:
 80124c4:	440a      	add	r2, r1
 80124c6:	4291      	cmp	r1, r2
 80124c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80124cc:	d100      	bne.n	80124d0 <memcpy+0xc>
 80124ce:	4770      	bx	lr
 80124d0:	b510      	push	{r4, lr}
 80124d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124da:	4291      	cmp	r1, r2
 80124dc:	d1f9      	bne.n	80124d2 <memcpy+0xe>
 80124de:	bd10      	pop	{r4, pc}

080124e0 <memmove>:
 80124e0:	4288      	cmp	r0, r1
 80124e2:	b510      	push	{r4, lr}
 80124e4:	eb01 0402 	add.w	r4, r1, r2
 80124e8:	d902      	bls.n	80124f0 <memmove+0x10>
 80124ea:	4284      	cmp	r4, r0
 80124ec:	4623      	mov	r3, r4
 80124ee:	d807      	bhi.n	8012500 <memmove+0x20>
 80124f0:	1e43      	subs	r3, r0, #1
 80124f2:	42a1      	cmp	r1, r4
 80124f4:	d008      	beq.n	8012508 <memmove+0x28>
 80124f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124fe:	e7f8      	b.n	80124f2 <memmove+0x12>
 8012500:	4402      	add	r2, r0
 8012502:	4601      	mov	r1, r0
 8012504:	428a      	cmp	r2, r1
 8012506:	d100      	bne.n	801250a <memmove+0x2a>
 8012508:	bd10      	pop	{r4, pc}
 801250a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801250e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012512:	e7f7      	b.n	8012504 <memmove+0x24>

08012514 <memset>:
 8012514:	4402      	add	r2, r0
 8012516:	4603      	mov	r3, r0
 8012518:	4293      	cmp	r3, r2
 801251a:	d100      	bne.n	801251e <memset+0xa>
 801251c:	4770      	bx	lr
 801251e:	f803 1b01 	strb.w	r1, [r3], #1
 8012522:	e7f9      	b.n	8012518 <memset+0x4>

08012524 <siprintf>:
 8012524:	b40e      	push	{r1, r2, r3}
 8012526:	b500      	push	{lr}
 8012528:	b09c      	sub	sp, #112	; 0x70
 801252a:	ab1d      	add	r3, sp, #116	; 0x74
 801252c:	9002      	str	r0, [sp, #8]
 801252e:	9006      	str	r0, [sp, #24]
 8012530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012534:	4809      	ldr	r0, [pc, #36]	; (801255c <siprintf+0x38>)
 8012536:	9107      	str	r1, [sp, #28]
 8012538:	9104      	str	r1, [sp, #16]
 801253a:	4909      	ldr	r1, [pc, #36]	; (8012560 <siprintf+0x3c>)
 801253c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012540:	9105      	str	r1, [sp, #20]
 8012542:	6800      	ldr	r0, [r0, #0]
 8012544:	9301      	str	r3, [sp, #4]
 8012546:	a902      	add	r1, sp, #8
 8012548:	f000 fa08 	bl	801295c <_svfiprintf_r>
 801254c:	9b02      	ldr	r3, [sp, #8]
 801254e:	2200      	movs	r2, #0
 8012550:	701a      	strb	r2, [r3, #0]
 8012552:	b01c      	add	sp, #112	; 0x70
 8012554:	f85d eb04 	ldr.w	lr, [sp], #4
 8012558:	b003      	add	sp, #12
 801255a:	4770      	bx	lr
 801255c:	20000128 	.word	0x20000128
 8012560:	ffff0208 	.word	0xffff0208

08012564 <strchr>:
 8012564:	b2c9      	uxtb	r1, r1
 8012566:	4603      	mov	r3, r0
 8012568:	f810 2b01 	ldrb.w	r2, [r0], #1
 801256c:	b11a      	cbz	r2, 8012576 <strchr+0x12>
 801256e:	428a      	cmp	r2, r1
 8012570:	d1f9      	bne.n	8012566 <strchr+0x2>
 8012572:	4618      	mov	r0, r3
 8012574:	4770      	bx	lr
 8012576:	2900      	cmp	r1, #0
 8012578:	bf18      	it	ne
 801257a:	2300      	movne	r3, #0
 801257c:	e7f9      	b.n	8012572 <strchr+0xe>

0801257e <strcpy>:
 801257e:	4603      	mov	r3, r0
 8012580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012584:	f803 2b01 	strb.w	r2, [r3], #1
 8012588:	2a00      	cmp	r2, #0
 801258a:	d1f9      	bne.n	8012580 <strcpy+0x2>
 801258c:	4770      	bx	lr

0801258e <strstr>:
 801258e:	780a      	ldrb	r2, [r1, #0]
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	b96a      	cbnz	r2, 80125b0 <strstr+0x22>
 8012594:	bd70      	pop	{r4, r5, r6, pc}
 8012596:	429a      	cmp	r2, r3
 8012598:	d109      	bne.n	80125ae <strstr+0x20>
 801259a:	460c      	mov	r4, r1
 801259c:	4605      	mov	r5, r0
 801259e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d0f6      	beq.n	8012594 <strstr+0x6>
 80125a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80125aa:	429e      	cmp	r6, r3
 80125ac:	d0f7      	beq.n	801259e <strstr+0x10>
 80125ae:	3001      	adds	r0, #1
 80125b0:	7803      	ldrb	r3, [r0, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d1ef      	bne.n	8012596 <strstr+0x8>
 80125b6:	4618      	mov	r0, r3
 80125b8:	e7ec      	b.n	8012594 <strstr+0x6>
	...

080125bc <strtok>:
 80125bc:	4b16      	ldr	r3, [pc, #88]	; (8012618 <strtok+0x5c>)
 80125be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80125c0:	681e      	ldr	r6, [r3, #0]
 80125c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80125c4:	4605      	mov	r5, r0
 80125c6:	b9fc      	cbnz	r4, 8012608 <strtok+0x4c>
 80125c8:	2050      	movs	r0, #80	; 0x50
 80125ca:	9101      	str	r1, [sp, #4]
 80125cc:	f000 f882 	bl	80126d4 <malloc>
 80125d0:	9901      	ldr	r1, [sp, #4]
 80125d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80125d4:	4602      	mov	r2, r0
 80125d6:	b920      	cbnz	r0, 80125e2 <strtok+0x26>
 80125d8:	4b10      	ldr	r3, [pc, #64]	; (801261c <strtok+0x60>)
 80125da:	4811      	ldr	r0, [pc, #68]	; (8012620 <strtok+0x64>)
 80125dc:	2157      	movs	r1, #87	; 0x57
 80125de:	f000 f849 	bl	8012674 <__assert_func>
 80125e2:	e9c0 4400 	strd	r4, r4, [r0]
 80125e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80125ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80125ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80125f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80125f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80125fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80125fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012602:	6184      	str	r4, [r0, #24]
 8012604:	7704      	strb	r4, [r0, #28]
 8012606:	6244      	str	r4, [r0, #36]	; 0x24
 8012608:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801260a:	2301      	movs	r3, #1
 801260c:	4628      	mov	r0, r5
 801260e:	b002      	add	sp, #8
 8012610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012614:	f000 b806 	b.w	8012624 <__strtok_r>
 8012618:	20000128 	.word	0x20000128
 801261c:	08015d44 	.word	0x08015d44
 8012620:	08015d5b 	.word	0x08015d5b

08012624 <__strtok_r>:
 8012624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012626:	b908      	cbnz	r0, 801262c <__strtok_r+0x8>
 8012628:	6810      	ldr	r0, [r2, #0]
 801262a:	b188      	cbz	r0, 8012650 <__strtok_r+0x2c>
 801262c:	4604      	mov	r4, r0
 801262e:	4620      	mov	r0, r4
 8012630:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012634:	460f      	mov	r7, r1
 8012636:	f817 6b01 	ldrb.w	r6, [r7], #1
 801263a:	b91e      	cbnz	r6, 8012644 <__strtok_r+0x20>
 801263c:	b965      	cbnz	r5, 8012658 <__strtok_r+0x34>
 801263e:	6015      	str	r5, [r2, #0]
 8012640:	4628      	mov	r0, r5
 8012642:	e005      	b.n	8012650 <__strtok_r+0x2c>
 8012644:	42b5      	cmp	r5, r6
 8012646:	d1f6      	bne.n	8012636 <__strtok_r+0x12>
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1f0      	bne.n	801262e <__strtok_r+0xa>
 801264c:	6014      	str	r4, [r2, #0]
 801264e:	7003      	strb	r3, [r0, #0]
 8012650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012652:	461c      	mov	r4, r3
 8012654:	e00c      	b.n	8012670 <__strtok_r+0x4c>
 8012656:	b915      	cbnz	r5, 801265e <__strtok_r+0x3a>
 8012658:	f814 3b01 	ldrb.w	r3, [r4], #1
 801265c:	460e      	mov	r6, r1
 801265e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012662:	42ab      	cmp	r3, r5
 8012664:	d1f7      	bne.n	8012656 <__strtok_r+0x32>
 8012666:	2b00      	cmp	r3, #0
 8012668:	d0f3      	beq.n	8012652 <__strtok_r+0x2e>
 801266a:	2300      	movs	r3, #0
 801266c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012670:	6014      	str	r4, [r2, #0]
 8012672:	e7ed      	b.n	8012650 <__strtok_r+0x2c>

08012674 <__assert_func>:
 8012674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012676:	4614      	mov	r4, r2
 8012678:	461a      	mov	r2, r3
 801267a:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <__assert_func+0x2c>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4605      	mov	r5, r0
 8012680:	68d8      	ldr	r0, [r3, #12]
 8012682:	b14c      	cbz	r4, 8012698 <__assert_func+0x24>
 8012684:	4b07      	ldr	r3, [pc, #28]	; (80126a4 <__assert_func+0x30>)
 8012686:	9100      	str	r1, [sp, #0]
 8012688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801268c:	4906      	ldr	r1, [pc, #24]	; (80126a8 <__assert_func+0x34>)
 801268e:	462b      	mov	r3, r5
 8012690:	f000 f80e 	bl	80126b0 <fiprintf>
 8012694:	f000 fe20 	bl	80132d8 <abort>
 8012698:	4b04      	ldr	r3, [pc, #16]	; (80126ac <__assert_func+0x38>)
 801269a:	461c      	mov	r4, r3
 801269c:	e7f3      	b.n	8012686 <__assert_func+0x12>
 801269e:	bf00      	nop
 80126a0:	20000128 	.word	0x20000128
 80126a4:	08015db8 	.word	0x08015db8
 80126a8:	08015dc5 	.word	0x08015dc5
 80126ac:	08015df3 	.word	0x08015df3

080126b0 <fiprintf>:
 80126b0:	b40e      	push	{r1, r2, r3}
 80126b2:	b503      	push	{r0, r1, lr}
 80126b4:	4601      	mov	r1, r0
 80126b6:	ab03      	add	r3, sp, #12
 80126b8:	4805      	ldr	r0, [pc, #20]	; (80126d0 <fiprintf+0x20>)
 80126ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80126be:	6800      	ldr	r0, [r0, #0]
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	f000 fa75 	bl	8012bb0 <_vfiprintf_r>
 80126c6:	b002      	add	sp, #8
 80126c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126cc:	b003      	add	sp, #12
 80126ce:	4770      	bx	lr
 80126d0:	20000128 	.word	0x20000128

080126d4 <malloc>:
 80126d4:	4b02      	ldr	r3, [pc, #8]	; (80126e0 <malloc+0xc>)
 80126d6:	4601      	mov	r1, r0
 80126d8:	6818      	ldr	r0, [r3, #0]
 80126da:	f000 b86f 	b.w	80127bc <_malloc_r>
 80126de:	bf00      	nop
 80126e0:	20000128 	.word	0x20000128

080126e4 <_free_r>:
 80126e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126e6:	2900      	cmp	r1, #0
 80126e8:	d044      	beq.n	8012774 <_free_r+0x90>
 80126ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126ee:	9001      	str	r0, [sp, #4]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f1a1 0404 	sub.w	r4, r1, #4
 80126f6:	bfb8      	it	lt
 80126f8:	18e4      	addlt	r4, r4, r3
 80126fa:	f001 f815 	bl	8013728 <__malloc_lock>
 80126fe:	4a1e      	ldr	r2, [pc, #120]	; (8012778 <_free_r+0x94>)
 8012700:	9801      	ldr	r0, [sp, #4]
 8012702:	6813      	ldr	r3, [r2, #0]
 8012704:	b933      	cbnz	r3, 8012714 <_free_r+0x30>
 8012706:	6063      	str	r3, [r4, #4]
 8012708:	6014      	str	r4, [r2, #0]
 801270a:	b003      	add	sp, #12
 801270c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012710:	f001 b810 	b.w	8013734 <__malloc_unlock>
 8012714:	42a3      	cmp	r3, r4
 8012716:	d908      	bls.n	801272a <_free_r+0x46>
 8012718:	6825      	ldr	r5, [r4, #0]
 801271a:	1961      	adds	r1, r4, r5
 801271c:	428b      	cmp	r3, r1
 801271e:	bf01      	itttt	eq
 8012720:	6819      	ldreq	r1, [r3, #0]
 8012722:	685b      	ldreq	r3, [r3, #4]
 8012724:	1949      	addeq	r1, r1, r5
 8012726:	6021      	streq	r1, [r4, #0]
 8012728:	e7ed      	b.n	8012706 <_free_r+0x22>
 801272a:	461a      	mov	r2, r3
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	b10b      	cbz	r3, 8012734 <_free_r+0x50>
 8012730:	42a3      	cmp	r3, r4
 8012732:	d9fa      	bls.n	801272a <_free_r+0x46>
 8012734:	6811      	ldr	r1, [r2, #0]
 8012736:	1855      	adds	r5, r2, r1
 8012738:	42a5      	cmp	r5, r4
 801273a:	d10b      	bne.n	8012754 <_free_r+0x70>
 801273c:	6824      	ldr	r4, [r4, #0]
 801273e:	4421      	add	r1, r4
 8012740:	1854      	adds	r4, r2, r1
 8012742:	42a3      	cmp	r3, r4
 8012744:	6011      	str	r1, [r2, #0]
 8012746:	d1e0      	bne.n	801270a <_free_r+0x26>
 8012748:	681c      	ldr	r4, [r3, #0]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	6053      	str	r3, [r2, #4]
 801274e:	4421      	add	r1, r4
 8012750:	6011      	str	r1, [r2, #0]
 8012752:	e7da      	b.n	801270a <_free_r+0x26>
 8012754:	d902      	bls.n	801275c <_free_r+0x78>
 8012756:	230c      	movs	r3, #12
 8012758:	6003      	str	r3, [r0, #0]
 801275a:	e7d6      	b.n	801270a <_free_r+0x26>
 801275c:	6825      	ldr	r5, [r4, #0]
 801275e:	1961      	adds	r1, r4, r5
 8012760:	428b      	cmp	r3, r1
 8012762:	bf04      	itt	eq
 8012764:	6819      	ldreq	r1, [r3, #0]
 8012766:	685b      	ldreq	r3, [r3, #4]
 8012768:	6063      	str	r3, [r4, #4]
 801276a:	bf04      	itt	eq
 801276c:	1949      	addeq	r1, r1, r5
 801276e:	6021      	streq	r1, [r4, #0]
 8012770:	6054      	str	r4, [r2, #4]
 8012772:	e7ca      	b.n	801270a <_free_r+0x26>
 8012774:	b003      	add	sp, #12
 8012776:	bd30      	pop	{r4, r5, pc}
 8012778:	20005618 	.word	0x20005618

0801277c <sbrk_aligned>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	4e0e      	ldr	r6, [pc, #56]	; (80127b8 <sbrk_aligned+0x3c>)
 8012780:	460c      	mov	r4, r1
 8012782:	6831      	ldr	r1, [r6, #0]
 8012784:	4605      	mov	r5, r0
 8012786:	b911      	cbnz	r1, 801278e <sbrk_aligned+0x12>
 8012788:	f000 fcd6 	bl	8013138 <_sbrk_r>
 801278c:	6030      	str	r0, [r6, #0]
 801278e:	4621      	mov	r1, r4
 8012790:	4628      	mov	r0, r5
 8012792:	f000 fcd1 	bl	8013138 <_sbrk_r>
 8012796:	1c43      	adds	r3, r0, #1
 8012798:	d00a      	beq.n	80127b0 <sbrk_aligned+0x34>
 801279a:	1cc4      	adds	r4, r0, #3
 801279c:	f024 0403 	bic.w	r4, r4, #3
 80127a0:	42a0      	cmp	r0, r4
 80127a2:	d007      	beq.n	80127b4 <sbrk_aligned+0x38>
 80127a4:	1a21      	subs	r1, r4, r0
 80127a6:	4628      	mov	r0, r5
 80127a8:	f000 fcc6 	bl	8013138 <_sbrk_r>
 80127ac:	3001      	adds	r0, #1
 80127ae:	d101      	bne.n	80127b4 <sbrk_aligned+0x38>
 80127b0:	f04f 34ff 	mov.w	r4, #4294967295
 80127b4:	4620      	mov	r0, r4
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	2000561c 	.word	0x2000561c

080127bc <_malloc_r>:
 80127bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c0:	1ccd      	adds	r5, r1, #3
 80127c2:	f025 0503 	bic.w	r5, r5, #3
 80127c6:	3508      	adds	r5, #8
 80127c8:	2d0c      	cmp	r5, #12
 80127ca:	bf38      	it	cc
 80127cc:	250c      	movcc	r5, #12
 80127ce:	2d00      	cmp	r5, #0
 80127d0:	4607      	mov	r7, r0
 80127d2:	db01      	blt.n	80127d8 <_malloc_r+0x1c>
 80127d4:	42a9      	cmp	r1, r5
 80127d6:	d905      	bls.n	80127e4 <_malloc_r+0x28>
 80127d8:	230c      	movs	r3, #12
 80127da:	603b      	str	r3, [r7, #0]
 80127dc:	2600      	movs	r6, #0
 80127de:	4630      	mov	r0, r6
 80127e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e4:	4e2e      	ldr	r6, [pc, #184]	; (80128a0 <_malloc_r+0xe4>)
 80127e6:	f000 ff9f 	bl	8013728 <__malloc_lock>
 80127ea:	6833      	ldr	r3, [r6, #0]
 80127ec:	461c      	mov	r4, r3
 80127ee:	bb34      	cbnz	r4, 801283e <_malloc_r+0x82>
 80127f0:	4629      	mov	r1, r5
 80127f2:	4638      	mov	r0, r7
 80127f4:	f7ff ffc2 	bl	801277c <sbrk_aligned>
 80127f8:	1c43      	adds	r3, r0, #1
 80127fa:	4604      	mov	r4, r0
 80127fc:	d14d      	bne.n	801289a <_malloc_r+0xde>
 80127fe:	6834      	ldr	r4, [r6, #0]
 8012800:	4626      	mov	r6, r4
 8012802:	2e00      	cmp	r6, #0
 8012804:	d140      	bne.n	8012888 <_malloc_r+0xcc>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	4631      	mov	r1, r6
 801280a:	4638      	mov	r0, r7
 801280c:	eb04 0803 	add.w	r8, r4, r3
 8012810:	f000 fc92 	bl	8013138 <_sbrk_r>
 8012814:	4580      	cmp	r8, r0
 8012816:	d13a      	bne.n	801288e <_malloc_r+0xd2>
 8012818:	6821      	ldr	r1, [r4, #0]
 801281a:	3503      	adds	r5, #3
 801281c:	1a6d      	subs	r5, r5, r1
 801281e:	f025 0503 	bic.w	r5, r5, #3
 8012822:	3508      	adds	r5, #8
 8012824:	2d0c      	cmp	r5, #12
 8012826:	bf38      	it	cc
 8012828:	250c      	movcc	r5, #12
 801282a:	4629      	mov	r1, r5
 801282c:	4638      	mov	r0, r7
 801282e:	f7ff ffa5 	bl	801277c <sbrk_aligned>
 8012832:	3001      	adds	r0, #1
 8012834:	d02b      	beq.n	801288e <_malloc_r+0xd2>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	442b      	add	r3, r5
 801283a:	6023      	str	r3, [r4, #0]
 801283c:	e00e      	b.n	801285c <_malloc_r+0xa0>
 801283e:	6822      	ldr	r2, [r4, #0]
 8012840:	1b52      	subs	r2, r2, r5
 8012842:	d41e      	bmi.n	8012882 <_malloc_r+0xc6>
 8012844:	2a0b      	cmp	r2, #11
 8012846:	d916      	bls.n	8012876 <_malloc_r+0xba>
 8012848:	1961      	adds	r1, r4, r5
 801284a:	42a3      	cmp	r3, r4
 801284c:	6025      	str	r5, [r4, #0]
 801284e:	bf18      	it	ne
 8012850:	6059      	strne	r1, [r3, #4]
 8012852:	6863      	ldr	r3, [r4, #4]
 8012854:	bf08      	it	eq
 8012856:	6031      	streq	r1, [r6, #0]
 8012858:	5162      	str	r2, [r4, r5]
 801285a:	604b      	str	r3, [r1, #4]
 801285c:	4638      	mov	r0, r7
 801285e:	f104 060b 	add.w	r6, r4, #11
 8012862:	f000 ff67 	bl	8013734 <__malloc_unlock>
 8012866:	f026 0607 	bic.w	r6, r6, #7
 801286a:	1d23      	adds	r3, r4, #4
 801286c:	1af2      	subs	r2, r6, r3
 801286e:	d0b6      	beq.n	80127de <_malloc_r+0x22>
 8012870:	1b9b      	subs	r3, r3, r6
 8012872:	50a3      	str	r3, [r4, r2]
 8012874:	e7b3      	b.n	80127de <_malloc_r+0x22>
 8012876:	6862      	ldr	r2, [r4, #4]
 8012878:	42a3      	cmp	r3, r4
 801287a:	bf0c      	ite	eq
 801287c:	6032      	streq	r2, [r6, #0]
 801287e:	605a      	strne	r2, [r3, #4]
 8012880:	e7ec      	b.n	801285c <_malloc_r+0xa0>
 8012882:	4623      	mov	r3, r4
 8012884:	6864      	ldr	r4, [r4, #4]
 8012886:	e7b2      	b.n	80127ee <_malloc_r+0x32>
 8012888:	4634      	mov	r4, r6
 801288a:	6876      	ldr	r6, [r6, #4]
 801288c:	e7b9      	b.n	8012802 <_malloc_r+0x46>
 801288e:	230c      	movs	r3, #12
 8012890:	603b      	str	r3, [r7, #0]
 8012892:	4638      	mov	r0, r7
 8012894:	f000 ff4e 	bl	8013734 <__malloc_unlock>
 8012898:	e7a1      	b.n	80127de <_malloc_r+0x22>
 801289a:	6025      	str	r5, [r4, #0]
 801289c:	e7de      	b.n	801285c <_malloc_r+0xa0>
 801289e:	bf00      	nop
 80128a0:	20005618 	.word	0x20005618

080128a4 <__ssputs_r>:
 80128a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128a8:	688e      	ldr	r6, [r1, #8]
 80128aa:	429e      	cmp	r6, r3
 80128ac:	4682      	mov	sl, r0
 80128ae:	460c      	mov	r4, r1
 80128b0:	4690      	mov	r8, r2
 80128b2:	461f      	mov	r7, r3
 80128b4:	d838      	bhi.n	8012928 <__ssputs_r+0x84>
 80128b6:	898a      	ldrh	r2, [r1, #12]
 80128b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128bc:	d032      	beq.n	8012924 <__ssputs_r+0x80>
 80128be:	6825      	ldr	r5, [r4, #0]
 80128c0:	6909      	ldr	r1, [r1, #16]
 80128c2:	eba5 0901 	sub.w	r9, r5, r1
 80128c6:	6965      	ldr	r5, [r4, #20]
 80128c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128d0:	3301      	adds	r3, #1
 80128d2:	444b      	add	r3, r9
 80128d4:	106d      	asrs	r5, r5, #1
 80128d6:	429d      	cmp	r5, r3
 80128d8:	bf38      	it	cc
 80128da:	461d      	movcc	r5, r3
 80128dc:	0553      	lsls	r3, r2, #21
 80128de:	d531      	bpl.n	8012944 <__ssputs_r+0xa0>
 80128e0:	4629      	mov	r1, r5
 80128e2:	f7ff ff6b 	bl	80127bc <_malloc_r>
 80128e6:	4606      	mov	r6, r0
 80128e8:	b950      	cbnz	r0, 8012900 <__ssputs_r+0x5c>
 80128ea:	230c      	movs	r3, #12
 80128ec:	f8ca 3000 	str.w	r3, [sl]
 80128f0:	89a3      	ldrh	r3, [r4, #12]
 80128f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128f6:	81a3      	strh	r3, [r4, #12]
 80128f8:	f04f 30ff 	mov.w	r0, #4294967295
 80128fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012900:	6921      	ldr	r1, [r4, #16]
 8012902:	464a      	mov	r2, r9
 8012904:	f7ff fdde 	bl	80124c4 <memcpy>
 8012908:	89a3      	ldrh	r3, [r4, #12]
 801290a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012912:	81a3      	strh	r3, [r4, #12]
 8012914:	6126      	str	r6, [r4, #16]
 8012916:	6165      	str	r5, [r4, #20]
 8012918:	444e      	add	r6, r9
 801291a:	eba5 0509 	sub.w	r5, r5, r9
 801291e:	6026      	str	r6, [r4, #0]
 8012920:	60a5      	str	r5, [r4, #8]
 8012922:	463e      	mov	r6, r7
 8012924:	42be      	cmp	r6, r7
 8012926:	d900      	bls.n	801292a <__ssputs_r+0x86>
 8012928:	463e      	mov	r6, r7
 801292a:	6820      	ldr	r0, [r4, #0]
 801292c:	4632      	mov	r2, r6
 801292e:	4641      	mov	r1, r8
 8012930:	f7ff fdd6 	bl	80124e0 <memmove>
 8012934:	68a3      	ldr	r3, [r4, #8]
 8012936:	1b9b      	subs	r3, r3, r6
 8012938:	60a3      	str	r3, [r4, #8]
 801293a:	6823      	ldr	r3, [r4, #0]
 801293c:	4433      	add	r3, r6
 801293e:	6023      	str	r3, [r4, #0]
 8012940:	2000      	movs	r0, #0
 8012942:	e7db      	b.n	80128fc <__ssputs_r+0x58>
 8012944:	462a      	mov	r2, r5
 8012946:	f000 fefb 	bl	8013740 <_realloc_r>
 801294a:	4606      	mov	r6, r0
 801294c:	2800      	cmp	r0, #0
 801294e:	d1e1      	bne.n	8012914 <__ssputs_r+0x70>
 8012950:	6921      	ldr	r1, [r4, #16]
 8012952:	4650      	mov	r0, sl
 8012954:	f7ff fec6 	bl	80126e4 <_free_r>
 8012958:	e7c7      	b.n	80128ea <__ssputs_r+0x46>
	...

0801295c <_svfiprintf_r>:
 801295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012960:	4698      	mov	r8, r3
 8012962:	898b      	ldrh	r3, [r1, #12]
 8012964:	061b      	lsls	r3, r3, #24
 8012966:	b09d      	sub	sp, #116	; 0x74
 8012968:	4607      	mov	r7, r0
 801296a:	460d      	mov	r5, r1
 801296c:	4614      	mov	r4, r2
 801296e:	d50e      	bpl.n	801298e <_svfiprintf_r+0x32>
 8012970:	690b      	ldr	r3, [r1, #16]
 8012972:	b963      	cbnz	r3, 801298e <_svfiprintf_r+0x32>
 8012974:	2140      	movs	r1, #64	; 0x40
 8012976:	f7ff ff21 	bl	80127bc <_malloc_r>
 801297a:	6028      	str	r0, [r5, #0]
 801297c:	6128      	str	r0, [r5, #16]
 801297e:	b920      	cbnz	r0, 801298a <_svfiprintf_r+0x2e>
 8012980:	230c      	movs	r3, #12
 8012982:	603b      	str	r3, [r7, #0]
 8012984:	f04f 30ff 	mov.w	r0, #4294967295
 8012988:	e0d1      	b.n	8012b2e <_svfiprintf_r+0x1d2>
 801298a:	2340      	movs	r3, #64	; 0x40
 801298c:	616b      	str	r3, [r5, #20]
 801298e:	2300      	movs	r3, #0
 8012990:	9309      	str	r3, [sp, #36]	; 0x24
 8012992:	2320      	movs	r3, #32
 8012994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012998:	f8cd 800c 	str.w	r8, [sp, #12]
 801299c:	2330      	movs	r3, #48	; 0x30
 801299e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b48 <_svfiprintf_r+0x1ec>
 80129a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129a6:	f04f 0901 	mov.w	r9, #1
 80129aa:	4623      	mov	r3, r4
 80129ac:	469a      	mov	sl, r3
 80129ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129b2:	b10a      	cbz	r2, 80129b8 <_svfiprintf_r+0x5c>
 80129b4:	2a25      	cmp	r2, #37	; 0x25
 80129b6:	d1f9      	bne.n	80129ac <_svfiprintf_r+0x50>
 80129b8:	ebba 0b04 	subs.w	fp, sl, r4
 80129bc:	d00b      	beq.n	80129d6 <_svfiprintf_r+0x7a>
 80129be:	465b      	mov	r3, fp
 80129c0:	4622      	mov	r2, r4
 80129c2:	4629      	mov	r1, r5
 80129c4:	4638      	mov	r0, r7
 80129c6:	f7ff ff6d 	bl	80128a4 <__ssputs_r>
 80129ca:	3001      	adds	r0, #1
 80129cc:	f000 80aa 	beq.w	8012b24 <_svfiprintf_r+0x1c8>
 80129d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129d2:	445a      	add	r2, fp
 80129d4:	9209      	str	r2, [sp, #36]	; 0x24
 80129d6:	f89a 3000 	ldrb.w	r3, [sl]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 80a2 	beq.w	8012b24 <_svfiprintf_r+0x1c8>
 80129e0:	2300      	movs	r3, #0
 80129e2:	f04f 32ff 	mov.w	r2, #4294967295
 80129e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129ea:	f10a 0a01 	add.w	sl, sl, #1
 80129ee:	9304      	str	r3, [sp, #16]
 80129f0:	9307      	str	r3, [sp, #28]
 80129f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129f6:	931a      	str	r3, [sp, #104]	; 0x68
 80129f8:	4654      	mov	r4, sl
 80129fa:	2205      	movs	r2, #5
 80129fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a00:	4851      	ldr	r0, [pc, #324]	; (8012b48 <_svfiprintf_r+0x1ec>)
 8012a02:	f7ed fbed 	bl	80001e0 <memchr>
 8012a06:	9a04      	ldr	r2, [sp, #16]
 8012a08:	b9d8      	cbnz	r0, 8012a42 <_svfiprintf_r+0xe6>
 8012a0a:	06d0      	lsls	r0, r2, #27
 8012a0c:	bf44      	itt	mi
 8012a0e:	2320      	movmi	r3, #32
 8012a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a14:	0711      	lsls	r1, r2, #28
 8012a16:	bf44      	itt	mi
 8012a18:	232b      	movmi	r3, #43	; 0x2b
 8012a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8012a22:	2b2a      	cmp	r3, #42	; 0x2a
 8012a24:	d015      	beq.n	8012a52 <_svfiprintf_r+0xf6>
 8012a26:	9a07      	ldr	r2, [sp, #28]
 8012a28:	4654      	mov	r4, sl
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	f04f 0c0a 	mov.w	ip, #10
 8012a30:	4621      	mov	r1, r4
 8012a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a36:	3b30      	subs	r3, #48	; 0x30
 8012a38:	2b09      	cmp	r3, #9
 8012a3a:	d94e      	bls.n	8012ada <_svfiprintf_r+0x17e>
 8012a3c:	b1b0      	cbz	r0, 8012a6c <_svfiprintf_r+0x110>
 8012a3e:	9207      	str	r2, [sp, #28]
 8012a40:	e014      	b.n	8012a6c <_svfiprintf_r+0x110>
 8012a42:	eba0 0308 	sub.w	r3, r0, r8
 8012a46:	fa09 f303 	lsl.w	r3, r9, r3
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	9304      	str	r3, [sp, #16]
 8012a4e:	46a2      	mov	sl, r4
 8012a50:	e7d2      	b.n	80129f8 <_svfiprintf_r+0x9c>
 8012a52:	9b03      	ldr	r3, [sp, #12]
 8012a54:	1d19      	adds	r1, r3, #4
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	9103      	str	r1, [sp, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	bfbb      	ittet	lt
 8012a5e:	425b      	neglt	r3, r3
 8012a60:	f042 0202 	orrlt.w	r2, r2, #2
 8012a64:	9307      	strge	r3, [sp, #28]
 8012a66:	9307      	strlt	r3, [sp, #28]
 8012a68:	bfb8      	it	lt
 8012a6a:	9204      	strlt	r2, [sp, #16]
 8012a6c:	7823      	ldrb	r3, [r4, #0]
 8012a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8012a70:	d10c      	bne.n	8012a8c <_svfiprintf_r+0x130>
 8012a72:	7863      	ldrb	r3, [r4, #1]
 8012a74:	2b2a      	cmp	r3, #42	; 0x2a
 8012a76:	d135      	bne.n	8012ae4 <_svfiprintf_r+0x188>
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	1d1a      	adds	r2, r3, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	9203      	str	r2, [sp, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	bfb8      	it	lt
 8012a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a88:	3402      	adds	r4, #2
 8012a8a:	9305      	str	r3, [sp, #20]
 8012a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b58 <_svfiprintf_r+0x1fc>
 8012a90:	7821      	ldrb	r1, [r4, #0]
 8012a92:	2203      	movs	r2, #3
 8012a94:	4650      	mov	r0, sl
 8012a96:	f7ed fba3 	bl	80001e0 <memchr>
 8012a9a:	b140      	cbz	r0, 8012aae <_svfiprintf_r+0x152>
 8012a9c:	2340      	movs	r3, #64	; 0x40
 8012a9e:	eba0 000a 	sub.w	r0, r0, sl
 8012aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8012aa6:	9b04      	ldr	r3, [sp, #16]
 8012aa8:	4303      	orrs	r3, r0
 8012aaa:	3401      	adds	r4, #1
 8012aac:	9304      	str	r3, [sp, #16]
 8012aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab2:	4826      	ldr	r0, [pc, #152]	; (8012b4c <_svfiprintf_r+0x1f0>)
 8012ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ab8:	2206      	movs	r2, #6
 8012aba:	f7ed fb91 	bl	80001e0 <memchr>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d038      	beq.n	8012b34 <_svfiprintf_r+0x1d8>
 8012ac2:	4b23      	ldr	r3, [pc, #140]	; (8012b50 <_svfiprintf_r+0x1f4>)
 8012ac4:	bb1b      	cbnz	r3, 8012b0e <_svfiprintf_r+0x1b2>
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	3307      	adds	r3, #7
 8012aca:	f023 0307 	bic.w	r3, r3, #7
 8012ace:	3308      	adds	r3, #8
 8012ad0:	9303      	str	r3, [sp, #12]
 8012ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ad4:	4433      	add	r3, r6
 8012ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ad8:	e767      	b.n	80129aa <_svfiprintf_r+0x4e>
 8012ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ade:	460c      	mov	r4, r1
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	e7a5      	b.n	8012a30 <_svfiprintf_r+0xd4>
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	3401      	adds	r4, #1
 8012ae8:	9305      	str	r3, [sp, #20]
 8012aea:	4619      	mov	r1, r3
 8012aec:	f04f 0c0a 	mov.w	ip, #10
 8012af0:	4620      	mov	r0, r4
 8012af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012af6:	3a30      	subs	r2, #48	; 0x30
 8012af8:	2a09      	cmp	r2, #9
 8012afa:	d903      	bls.n	8012b04 <_svfiprintf_r+0x1a8>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d0c5      	beq.n	8012a8c <_svfiprintf_r+0x130>
 8012b00:	9105      	str	r1, [sp, #20]
 8012b02:	e7c3      	b.n	8012a8c <_svfiprintf_r+0x130>
 8012b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b08:	4604      	mov	r4, r0
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e7f0      	b.n	8012af0 <_svfiprintf_r+0x194>
 8012b0e:	ab03      	add	r3, sp, #12
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	462a      	mov	r2, r5
 8012b14:	4b0f      	ldr	r3, [pc, #60]	; (8012b54 <_svfiprintf_r+0x1f8>)
 8012b16:	a904      	add	r1, sp, #16
 8012b18:	4638      	mov	r0, r7
 8012b1a:	f3af 8000 	nop.w
 8012b1e:	1c42      	adds	r2, r0, #1
 8012b20:	4606      	mov	r6, r0
 8012b22:	d1d6      	bne.n	8012ad2 <_svfiprintf_r+0x176>
 8012b24:	89ab      	ldrh	r3, [r5, #12]
 8012b26:	065b      	lsls	r3, r3, #25
 8012b28:	f53f af2c 	bmi.w	8012984 <_svfiprintf_r+0x28>
 8012b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b2e:	b01d      	add	sp, #116	; 0x74
 8012b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b34:	ab03      	add	r3, sp, #12
 8012b36:	9300      	str	r3, [sp, #0]
 8012b38:	462a      	mov	r2, r5
 8012b3a:	4b06      	ldr	r3, [pc, #24]	; (8012b54 <_svfiprintf_r+0x1f8>)
 8012b3c:	a904      	add	r1, sp, #16
 8012b3e:	4638      	mov	r0, r7
 8012b40:	f000 f9d4 	bl	8012eec <_printf_i>
 8012b44:	e7eb      	b.n	8012b1e <_svfiprintf_r+0x1c2>
 8012b46:	bf00      	nop
 8012b48:	08015df4 	.word	0x08015df4
 8012b4c:	08015dfe 	.word	0x08015dfe
 8012b50:	00000000 	.word	0x00000000
 8012b54:	080128a5 	.word	0x080128a5
 8012b58:	08015dfa 	.word	0x08015dfa

08012b5c <__sfputc_r>:
 8012b5c:	6893      	ldr	r3, [r2, #8]
 8012b5e:	3b01      	subs	r3, #1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	b410      	push	{r4}
 8012b64:	6093      	str	r3, [r2, #8]
 8012b66:	da08      	bge.n	8012b7a <__sfputc_r+0x1e>
 8012b68:	6994      	ldr	r4, [r2, #24]
 8012b6a:	42a3      	cmp	r3, r4
 8012b6c:	db01      	blt.n	8012b72 <__sfputc_r+0x16>
 8012b6e:	290a      	cmp	r1, #10
 8012b70:	d103      	bne.n	8012b7a <__sfputc_r+0x1e>
 8012b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b76:	f000 baef 	b.w	8013158 <__swbuf_r>
 8012b7a:	6813      	ldr	r3, [r2, #0]
 8012b7c:	1c58      	adds	r0, r3, #1
 8012b7e:	6010      	str	r0, [r2, #0]
 8012b80:	7019      	strb	r1, [r3, #0]
 8012b82:	4608      	mov	r0, r1
 8012b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b88:	4770      	bx	lr

08012b8a <__sfputs_r>:
 8012b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8c:	4606      	mov	r6, r0
 8012b8e:	460f      	mov	r7, r1
 8012b90:	4614      	mov	r4, r2
 8012b92:	18d5      	adds	r5, r2, r3
 8012b94:	42ac      	cmp	r4, r5
 8012b96:	d101      	bne.n	8012b9c <__sfputs_r+0x12>
 8012b98:	2000      	movs	r0, #0
 8012b9a:	e007      	b.n	8012bac <__sfputs_r+0x22>
 8012b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ba0:	463a      	mov	r2, r7
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f7ff ffda 	bl	8012b5c <__sfputc_r>
 8012ba8:	1c43      	adds	r3, r0, #1
 8012baa:	d1f3      	bne.n	8012b94 <__sfputs_r+0xa>
 8012bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bb0 <_vfiprintf_r>:
 8012bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	b09d      	sub	sp, #116	; 0x74
 8012bb8:	4614      	mov	r4, r2
 8012bba:	4698      	mov	r8, r3
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	b118      	cbz	r0, 8012bc8 <_vfiprintf_r+0x18>
 8012bc0:	6983      	ldr	r3, [r0, #24]
 8012bc2:	b90b      	cbnz	r3, 8012bc8 <_vfiprintf_r+0x18>
 8012bc4:	f000 fcaa 	bl	801351c <__sinit>
 8012bc8:	4b89      	ldr	r3, [pc, #548]	; (8012df0 <_vfiprintf_r+0x240>)
 8012bca:	429d      	cmp	r5, r3
 8012bcc:	d11b      	bne.n	8012c06 <_vfiprintf_r+0x56>
 8012bce:	6875      	ldr	r5, [r6, #4]
 8012bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bd2:	07d9      	lsls	r1, r3, #31
 8012bd4:	d405      	bmi.n	8012be2 <_vfiprintf_r+0x32>
 8012bd6:	89ab      	ldrh	r3, [r5, #12]
 8012bd8:	059a      	lsls	r2, r3, #22
 8012bda:	d402      	bmi.n	8012be2 <_vfiprintf_r+0x32>
 8012bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bde:	f000 fd3b 	bl	8013658 <__retarget_lock_acquire_recursive>
 8012be2:	89ab      	ldrh	r3, [r5, #12]
 8012be4:	071b      	lsls	r3, r3, #28
 8012be6:	d501      	bpl.n	8012bec <_vfiprintf_r+0x3c>
 8012be8:	692b      	ldr	r3, [r5, #16]
 8012bea:	b9eb      	cbnz	r3, 8012c28 <_vfiprintf_r+0x78>
 8012bec:	4629      	mov	r1, r5
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f000 fb04 	bl	80131fc <__swsetup_r>
 8012bf4:	b1c0      	cbz	r0, 8012c28 <_vfiprintf_r+0x78>
 8012bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bf8:	07dc      	lsls	r4, r3, #31
 8012bfa:	d50e      	bpl.n	8012c1a <_vfiprintf_r+0x6a>
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	b01d      	add	sp, #116	; 0x74
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	4b7b      	ldr	r3, [pc, #492]	; (8012df4 <_vfiprintf_r+0x244>)
 8012c08:	429d      	cmp	r5, r3
 8012c0a:	d101      	bne.n	8012c10 <_vfiprintf_r+0x60>
 8012c0c:	68b5      	ldr	r5, [r6, #8]
 8012c0e:	e7df      	b.n	8012bd0 <_vfiprintf_r+0x20>
 8012c10:	4b79      	ldr	r3, [pc, #484]	; (8012df8 <_vfiprintf_r+0x248>)
 8012c12:	429d      	cmp	r5, r3
 8012c14:	bf08      	it	eq
 8012c16:	68f5      	ldreq	r5, [r6, #12]
 8012c18:	e7da      	b.n	8012bd0 <_vfiprintf_r+0x20>
 8012c1a:	89ab      	ldrh	r3, [r5, #12]
 8012c1c:	0598      	lsls	r0, r3, #22
 8012c1e:	d4ed      	bmi.n	8012bfc <_vfiprintf_r+0x4c>
 8012c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c22:	f000 fd1a 	bl	801365a <__retarget_lock_release_recursive>
 8012c26:	e7e9      	b.n	8012bfc <_vfiprintf_r+0x4c>
 8012c28:	2300      	movs	r3, #0
 8012c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c2c:	2320      	movs	r3, #32
 8012c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c36:	2330      	movs	r3, #48	; 0x30
 8012c38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012dfc <_vfiprintf_r+0x24c>
 8012c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c40:	f04f 0901 	mov.w	r9, #1
 8012c44:	4623      	mov	r3, r4
 8012c46:	469a      	mov	sl, r3
 8012c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c4c:	b10a      	cbz	r2, 8012c52 <_vfiprintf_r+0xa2>
 8012c4e:	2a25      	cmp	r2, #37	; 0x25
 8012c50:	d1f9      	bne.n	8012c46 <_vfiprintf_r+0x96>
 8012c52:	ebba 0b04 	subs.w	fp, sl, r4
 8012c56:	d00b      	beq.n	8012c70 <_vfiprintf_r+0xc0>
 8012c58:	465b      	mov	r3, fp
 8012c5a:	4622      	mov	r2, r4
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f7ff ff93 	bl	8012b8a <__sfputs_r>
 8012c64:	3001      	adds	r0, #1
 8012c66:	f000 80aa 	beq.w	8012dbe <_vfiprintf_r+0x20e>
 8012c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c6c:	445a      	add	r2, fp
 8012c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c70:	f89a 3000 	ldrb.w	r3, [sl]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f000 80a2 	beq.w	8012dbe <_vfiprintf_r+0x20e>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c84:	f10a 0a01 	add.w	sl, sl, #1
 8012c88:	9304      	str	r3, [sp, #16]
 8012c8a:	9307      	str	r3, [sp, #28]
 8012c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c90:	931a      	str	r3, [sp, #104]	; 0x68
 8012c92:	4654      	mov	r4, sl
 8012c94:	2205      	movs	r2, #5
 8012c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c9a:	4858      	ldr	r0, [pc, #352]	; (8012dfc <_vfiprintf_r+0x24c>)
 8012c9c:	f7ed faa0 	bl	80001e0 <memchr>
 8012ca0:	9a04      	ldr	r2, [sp, #16]
 8012ca2:	b9d8      	cbnz	r0, 8012cdc <_vfiprintf_r+0x12c>
 8012ca4:	06d1      	lsls	r1, r2, #27
 8012ca6:	bf44      	itt	mi
 8012ca8:	2320      	movmi	r3, #32
 8012caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cae:	0713      	lsls	r3, r2, #28
 8012cb0:	bf44      	itt	mi
 8012cb2:	232b      	movmi	r3, #43	; 0x2b
 8012cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8012cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8012cbe:	d015      	beq.n	8012cec <_vfiprintf_r+0x13c>
 8012cc0:	9a07      	ldr	r2, [sp, #28]
 8012cc2:	4654      	mov	r4, sl
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	f04f 0c0a 	mov.w	ip, #10
 8012cca:	4621      	mov	r1, r4
 8012ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd0:	3b30      	subs	r3, #48	; 0x30
 8012cd2:	2b09      	cmp	r3, #9
 8012cd4:	d94e      	bls.n	8012d74 <_vfiprintf_r+0x1c4>
 8012cd6:	b1b0      	cbz	r0, 8012d06 <_vfiprintf_r+0x156>
 8012cd8:	9207      	str	r2, [sp, #28]
 8012cda:	e014      	b.n	8012d06 <_vfiprintf_r+0x156>
 8012cdc:	eba0 0308 	sub.w	r3, r0, r8
 8012ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	9304      	str	r3, [sp, #16]
 8012ce8:	46a2      	mov	sl, r4
 8012cea:	e7d2      	b.n	8012c92 <_vfiprintf_r+0xe2>
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	1d19      	adds	r1, r3, #4
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	9103      	str	r1, [sp, #12]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	bfbb      	ittet	lt
 8012cf8:	425b      	neglt	r3, r3
 8012cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8012cfe:	9307      	strge	r3, [sp, #28]
 8012d00:	9307      	strlt	r3, [sp, #28]
 8012d02:	bfb8      	it	lt
 8012d04:	9204      	strlt	r2, [sp, #16]
 8012d06:	7823      	ldrb	r3, [r4, #0]
 8012d08:	2b2e      	cmp	r3, #46	; 0x2e
 8012d0a:	d10c      	bne.n	8012d26 <_vfiprintf_r+0x176>
 8012d0c:	7863      	ldrb	r3, [r4, #1]
 8012d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8012d10:	d135      	bne.n	8012d7e <_vfiprintf_r+0x1ce>
 8012d12:	9b03      	ldr	r3, [sp, #12]
 8012d14:	1d1a      	adds	r2, r3, #4
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	9203      	str	r2, [sp, #12]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	bfb8      	it	lt
 8012d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d22:	3402      	adds	r4, #2
 8012d24:	9305      	str	r3, [sp, #20]
 8012d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e0c <_vfiprintf_r+0x25c>
 8012d2a:	7821      	ldrb	r1, [r4, #0]
 8012d2c:	2203      	movs	r2, #3
 8012d2e:	4650      	mov	r0, sl
 8012d30:	f7ed fa56 	bl	80001e0 <memchr>
 8012d34:	b140      	cbz	r0, 8012d48 <_vfiprintf_r+0x198>
 8012d36:	2340      	movs	r3, #64	; 0x40
 8012d38:	eba0 000a 	sub.w	r0, r0, sl
 8012d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8012d40:	9b04      	ldr	r3, [sp, #16]
 8012d42:	4303      	orrs	r3, r0
 8012d44:	3401      	adds	r4, #1
 8012d46:	9304      	str	r3, [sp, #16]
 8012d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d4c:	482c      	ldr	r0, [pc, #176]	; (8012e00 <_vfiprintf_r+0x250>)
 8012d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d52:	2206      	movs	r2, #6
 8012d54:	f7ed fa44 	bl	80001e0 <memchr>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d03f      	beq.n	8012ddc <_vfiprintf_r+0x22c>
 8012d5c:	4b29      	ldr	r3, [pc, #164]	; (8012e04 <_vfiprintf_r+0x254>)
 8012d5e:	bb1b      	cbnz	r3, 8012da8 <_vfiprintf_r+0x1f8>
 8012d60:	9b03      	ldr	r3, [sp, #12]
 8012d62:	3307      	adds	r3, #7
 8012d64:	f023 0307 	bic.w	r3, r3, #7
 8012d68:	3308      	adds	r3, #8
 8012d6a:	9303      	str	r3, [sp, #12]
 8012d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d6e:	443b      	add	r3, r7
 8012d70:	9309      	str	r3, [sp, #36]	; 0x24
 8012d72:	e767      	b.n	8012c44 <_vfiprintf_r+0x94>
 8012d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d78:	460c      	mov	r4, r1
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	e7a5      	b.n	8012cca <_vfiprintf_r+0x11a>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	3401      	adds	r4, #1
 8012d82:	9305      	str	r3, [sp, #20]
 8012d84:	4619      	mov	r1, r3
 8012d86:	f04f 0c0a 	mov.w	ip, #10
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d90:	3a30      	subs	r2, #48	; 0x30
 8012d92:	2a09      	cmp	r2, #9
 8012d94:	d903      	bls.n	8012d9e <_vfiprintf_r+0x1ee>
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d0c5      	beq.n	8012d26 <_vfiprintf_r+0x176>
 8012d9a:	9105      	str	r1, [sp, #20]
 8012d9c:	e7c3      	b.n	8012d26 <_vfiprintf_r+0x176>
 8012d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012da2:	4604      	mov	r4, r0
 8012da4:	2301      	movs	r3, #1
 8012da6:	e7f0      	b.n	8012d8a <_vfiprintf_r+0x1da>
 8012da8:	ab03      	add	r3, sp, #12
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	462a      	mov	r2, r5
 8012dae:	4b16      	ldr	r3, [pc, #88]	; (8012e08 <_vfiprintf_r+0x258>)
 8012db0:	a904      	add	r1, sp, #16
 8012db2:	4630      	mov	r0, r6
 8012db4:	f3af 8000 	nop.w
 8012db8:	4607      	mov	r7, r0
 8012dba:	1c78      	adds	r0, r7, #1
 8012dbc:	d1d6      	bne.n	8012d6c <_vfiprintf_r+0x1bc>
 8012dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dc0:	07d9      	lsls	r1, r3, #31
 8012dc2:	d405      	bmi.n	8012dd0 <_vfiprintf_r+0x220>
 8012dc4:	89ab      	ldrh	r3, [r5, #12]
 8012dc6:	059a      	lsls	r2, r3, #22
 8012dc8:	d402      	bmi.n	8012dd0 <_vfiprintf_r+0x220>
 8012dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dcc:	f000 fc45 	bl	801365a <__retarget_lock_release_recursive>
 8012dd0:	89ab      	ldrh	r3, [r5, #12]
 8012dd2:	065b      	lsls	r3, r3, #25
 8012dd4:	f53f af12 	bmi.w	8012bfc <_vfiprintf_r+0x4c>
 8012dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dda:	e711      	b.n	8012c00 <_vfiprintf_r+0x50>
 8012ddc:	ab03      	add	r3, sp, #12
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	462a      	mov	r2, r5
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <_vfiprintf_r+0x258>)
 8012de4:	a904      	add	r1, sp, #16
 8012de6:	4630      	mov	r0, r6
 8012de8:	f000 f880 	bl	8012eec <_printf_i>
 8012dec:	e7e4      	b.n	8012db8 <_vfiprintf_r+0x208>
 8012dee:	bf00      	nop
 8012df0:	08015e48 	.word	0x08015e48
 8012df4:	08015e68 	.word	0x08015e68
 8012df8:	08015e28 	.word	0x08015e28
 8012dfc:	08015df4 	.word	0x08015df4
 8012e00:	08015dfe 	.word	0x08015dfe
 8012e04:	00000000 	.word	0x00000000
 8012e08:	08012b8b 	.word	0x08012b8b
 8012e0c:	08015dfa 	.word	0x08015dfa

08012e10 <_printf_common>:
 8012e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e14:	4616      	mov	r6, r2
 8012e16:	4699      	mov	r9, r3
 8012e18:	688a      	ldr	r2, [r1, #8]
 8012e1a:	690b      	ldr	r3, [r1, #16]
 8012e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e20:	4293      	cmp	r3, r2
 8012e22:	bfb8      	it	lt
 8012e24:	4613      	movlt	r3, r2
 8012e26:	6033      	str	r3, [r6, #0]
 8012e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e2c:	4607      	mov	r7, r0
 8012e2e:	460c      	mov	r4, r1
 8012e30:	b10a      	cbz	r2, 8012e36 <_printf_common+0x26>
 8012e32:	3301      	adds	r3, #1
 8012e34:	6033      	str	r3, [r6, #0]
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	0699      	lsls	r1, r3, #26
 8012e3a:	bf42      	ittt	mi
 8012e3c:	6833      	ldrmi	r3, [r6, #0]
 8012e3e:	3302      	addmi	r3, #2
 8012e40:	6033      	strmi	r3, [r6, #0]
 8012e42:	6825      	ldr	r5, [r4, #0]
 8012e44:	f015 0506 	ands.w	r5, r5, #6
 8012e48:	d106      	bne.n	8012e58 <_printf_common+0x48>
 8012e4a:	f104 0a19 	add.w	sl, r4, #25
 8012e4e:	68e3      	ldr	r3, [r4, #12]
 8012e50:	6832      	ldr	r2, [r6, #0]
 8012e52:	1a9b      	subs	r3, r3, r2
 8012e54:	42ab      	cmp	r3, r5
 8012e56:	dc26      	bgt.n	8012ea6 <_printf_common+0x96>
 8012e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e5c:	1e13      	subs	r3, r2, #0
 8012e5e:	6822      	ldr	r2, [r4, #0]
 8012e60:	bf18      	it	ne
 8012e62:	2301      	movne	r3, #1
 8012e64:	0692      	lsls	r2, r2, #26
 8012e66:	d42b      	bmi.n	8012ec0 <_printf_common+0xb0>
 8012e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	4638      	mov	r0, r7
 8012e70:	47c0      	blx	r8
 8012e72:	3001      	adds	r0, #1
 8012e74:	d01e      	beq.n	8012eb4 <_printf_common+0xa4>
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	68e5      	ldr	r5, [r4, #12]
 8012e7a:	6832      	ldr	r2, [r6, #0]
 8012e7c:	f003 0306 	and.w	r3, r3, #6
 8012e80:	2b04      	cmp	r3, #4
 8012e82:	bf08      	it	eq
 8012e84:	1aad      	subeq	r5, r5, r2
 8012e86:	68a3      	ldr	r3, [r4, #8]
 8012e88:	6922      	ldr	r2, [r4, #16]
 8012e8a:	bf0c      	ite	eq
 8012e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e90:	2500      	movne	r5, #0
 8012e92:	4293      	cmp	r3, r2
 8012e94:	bfc4      	itt	gt
 8012e96:	1a9b      	subgt	r3, r3, r2
 8012e98:	18ed      	addgt	r5, r5, r3
 8012e9a:	2600      	movs	r6, #0
 8012e9c:	341a      	adds	r4, #26
 8012e9e:	42b5      	cmp	r5, r6
 8012ea0:	d11a      	bne.n	8012ed8 <_printf_common+0xc8>
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	e008      	b.n	8012eb8 <_printf_common+0xa8>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	4652      	mov	r2, sl
 8012eaa:	4649      	mov	r1, r9
 8012eac:	4638      	mov	r0, r7
 8012eae:	47c0      	blx	r8
 8012eb0:	3001      	adds	r0, #1
 8012eb2:	d103      	bne.n	8012ebc <_printf_common+0xac>
 8012eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ebc:	3501      	adds	r5, #1
 8012ebe:	e7c6      	b.n	8012e4e <_printf_common+0x3e>
 8012ec0:	18e1      	adds	r1, r4, r3
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	2030      	movs	r0, #48	; 0x30
 8012ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012eca:	4422      	add	r2, r4
 8012ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ed4:	3302      	adds	r3, #2
 8012ed6:	e7c7      	b.n	8012e68 <_printf_common+0x58>
 8012ed8:	2301      	movs	r3, #1
 8012eda:	4622      	mov	r2, r4
 8012edc:	4649      	mov	r1, r9
 8012ede:	4638      	mov	r0, r7
 8012ee0:	47c0      	blx	r8
 8012ee2:	3001      	adds	r0, #1
 8012ee4:	d0e6      	beq.n	8012eb4 <_printf_common+0xa4>
 8012ee6:	3601      	adds	r6, #1
 8012ee8:	e7d9      	b.n	8012e9e <_printf_common+0x8e>
	...

08012eec <_printf_i>:
 8012eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef0:	7e0f      	ldrb	r7, [r1, #24]
 8012ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ef4:	2f78      	cmp	r7, #120	; 0x78
 8012ef6:	4691      	mov	r9, r2
 8012ef8:	4680      	mov	r8, r0
 8012efa:	460c      	mov	r4, r1
 8012efc:	469a      	mov	sl, r3
 8012efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f02:	d807      	bhi.n	8012f14 <_printf_i+0x28>
 8012f04:	2f62      	cmp	r7, #98	; 0x62
 8012f06:	d80a      	bhi.n	8012f1e <_printf_i+0x32>
 8012f08:	2f00      	cmp	r7, #0
 8012f0a:	f000 80d8 	beq.w	80130be <_printf_i+0x1d2>
 8012f0e:	2f58      	cmp	r7, #88	; 0x58
 8012f10:	f000 80a3 	beq.w	801305a <_printf_i+0x16e>
 8012f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f1c:	e03a      	b.n	8012f94 <_printf_i+0xa8>
 8012f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f22:	2b15      	cmp	r3, #21
 8012f24:	d8f6      	bhi.n	8012f14 <_printf_i+0x28>
 8012f26:	a101      	add	r1, pc, #4	; (adr r1, 8012f2c <_printf_i+0x40>)
 8012f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f2c:	08012f85 	.word	0x08012f85
 8012f30:	08012f99 	.word	0x08012f99
 8012f34:	08012f15 	.word	0x08012f15
 8012f38:	08012f15 	.word	0x08012f15
 8012f3c:	08012f15 	.word	0x08012f15
 8012f40:	08012f15 	.word	0x08012f15
 8012f44:	08012f99 	.word	0x08012f99
 8012f48:	08012f15 	.word	0x08012f15
 8012f4c:	08012f15 	.word	0x08012f15
 8012f50:	08012f15 	.word	0x08012f15
 8012f54:	08012f15 	.word	0x08012f15
 8012f58:	080130a5 	.word	0x080130a5
 8012f5c:	08012fc9 	.word	0x08012fc9
 8012f60:	08013087 	.word	0x08013087
 8012f64:	08012f15 	.word	0x08012f15
 8012f68:	08012f15 	.word	0x08012f15
 8012f6c:	080130c7 	.word	0x080130c7
 8012f70:	08012f15 	.word	0x08012f15
 8012f74:	08012fc9 	.word	0x08012fc9
 8012f78:	08012f15 	.word	0x08012f15
 8012f7c:	08012f15 	.word	0x08012f15
 8012f80:	0801308f 	.word	0x0801308f
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	1d1a      	adds	r2, r3, #4
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	602a      	str	r2, [r5, #0]
 8012f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f94:	2301      	movs	r3, #1
 8012f96:	e0a3      	b.n	80130e0 <_printf_i+0x1f4>
 8012f98:	6820      	ldr	r0, [r4, #0]
 8012f9a:	6829      	ldr	r1, [r5, #0]
 8012f9c:	0606      	lsls	r6, r0, #24
 8012f9e:	f101 0304 	add.w	r3, r1, #4
 8012fa2:	d50a      	bpl.n	8012fba <_printf_i+0xce>
 8012fa4:	680e      	ldr	r6, [r1, #0]
 8012fa6:	602b      	str	r3, [r5, #0]
 8012fa8:	2e00      	cmp	r6, #0
 8012faa:	da03      	bge.n	8012fb4 <_printf_i+0xc8>
 8012fac:	232d      	movs	r3, #45	; 0x2d
 8012fae:	4276      	negs	r6, r6
 8012fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fb4:	485e      	ldr	r0, [pc, #376]	; (8013130 <_printf_i+0x244>)
 8012fb6:	230a      	movs	r3, #10
 8012fb8:	e019      	b.n	8012fee <_printf_i+0x102>
 8012fba:	680e      	ldr	r6, [r1, #0]
 8012fbc:	602b      	str	r3, [r5, #0]
 8012fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fc2:	bf18      	it	ne
 8012fc4:	b236      	sxthne	r6, r6
 8012fc6:	e7ef      	b.n	8012fa8 <_printf_i+0xbc>
 8012fc8:	682b      	ldr	r3, [r5, #0]
 8012fca:	6820      	ldr	r0, [r4, #0]
 8012fcc:	1d19      	adds	r1, r3, #4
 8012fce:	6029      	str	r1, [r5, #0]
 8012fd0:	0601      	lsls	r1, r0, #24
 8012fd2:	d501      	bpl.n	8012fd8 <_printf_i+0xec>
 8012fd4:	681e      	ldr	r6, [r3, #0]
 8012fd6:	e002      	b.n	8012fde <_printf_i+0xf2>
 8012fd8:	0646      	lsls	r6, r0, #25
 8012fda:	d5fb      	bpl.n	8012fd4 <_printf_i+0xe8>
 8012fdc:	881e      	ldrh	r6, [r3, #0]
 8012fde:	4854      	ldr	r0, [pc, #336]	; (8013130 <_printf_i+0x244>)
 8012fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8012fe2:	bf0c      	ite	eq
 8012fe4:	2308      	moveq	r3, #8
 8012fe6:	230a      	movne	r3, #10
 8012fe8:	2100      	movs	r1, #0
 8012fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fee:	6865      	ldr	r5, [r4, #4]
 8012ff0:	60a5      	str	r5, [r4, #8]
 8012ff2:	2d00      	cmp	r5, #0
 8012ff4:	bfa2      	ittt	ge
 8012ff6:	6821      	ldrge	r1, [r4, #0]
 8012ff8:	f021 0104 	bicge.w	r1, r1, #4
 8012ffc:	6021      	strge	r1, [r4, #0]
 8012ffe:	b90e      	cbnz	r6, 8013004 <_printf_i+0x118>
 8013000:	2d00      	cmp	r5, #0
 8013002:	d04d      	beq.n	80130a0 <_printf_i+0x1b4>
 8013004:	4615      	mov	r5, r2
 8013006:	fbb6 f1f3 	udiv	r1, r6, r3
 801300a:	fb03 6711 	mls	r7, r3, r1, r6
 801300e:	5dc7      	ldrb	r7, [r0, r7]
 8013010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013014:	4637      	mov	r7, r6
 8013016:	42bb      	cmp	r3, r7
 8013018:	460e      	mov	r6, r1
 801301a:	d9f4      	bls.n	8013006 <_printf_i+0x11a>
 801301c:	2b08      	cmp	r3, #8
 801301e:	d10b      	bne.n	8013038 <_printf_i+0x14c>
 8013020:	6823      	ldr	r3, [r4, #0]
 8013022:	07de      	lsls	r6, r3, #31
 8013024:	d508      	bpl.n	8013038 <_printf_i+0x14c>
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	6861      	ldr	r1, [r4, #4]
 801302a:	4299      	cmp	r1, r3
 801302c:	bfde      	ittt	le
 801302e:	2330      	movle	r3, #48	; 0x30
 8013030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013038:	1b52      	subs	r2, r2, r5
 801303a:	6122      	str	r2, [r4, #16]
 801303c:	f8cd a000 	str.w	sl, [sp]
 8013040:	464b      	mov	r3, r9
 8013042:	aa03      	add	r2, sp, #12
 8013044:	4621      	mov	r1, r4
 8013046:	4640      	mov	r0, r8
 8013048:	f7ff fee2 	bl	8012e10 <_printf_common>
 801304c:	3001      	adds	r0, #1
 801304e:	d14c      	bne.n	80130ea <_printf_i+0x1fe>
 8013050:	f04f 30ff 	mov.w	r0, #4294967295
 8013054:	b004      	add	sp, #16
 8013056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801305a:	4835      	ldr	r0, [pc, #212]	; (8013130 <_printf_i+0x244>)
 801305c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013060:	6829      	ldr	r1, [r5, #0]
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	f851 6b04 	ldr.w	r6, [r1], #4
 8013068:	6029      	str	r1, [r5, #0]
 801306a:	061d      	lsls	r5, r3, #24
 801306c:	d514      	bpl.n	8013098 <_printf_i+0x1ac>
 801306e:	07df      	lsls	r7, r3, #31
 8013070:	bf44      	itt	mi
 8013072:	f043 0320 	orrmi.w	r3, r3, #32
 8013076:	6023      	strmi	r3, [r4, #0]
 8013078:	b91e      	cbnz	r6, 8013082 <_printf_i+0x196>
 801307a:	6823      	ldr	r3, [r4, #0]
 801307c:	f023 0320 	bic.w	r3, r3, #32
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	2310      	movs	r3, #16
 8013084:	e7b0      	b.n	8012fe8 <_printf_i+0xfc>
 8013086:	6823      	ldr	r3, [r4, #0]
 8013088:	f043 0320 	orr.w	r3, r3, #32
 801308c:	6023      	str	r3, [r4, #0]
 801308e:	2378      	movs	r3, #120	; 0x78
 8013090:	4828      	ldr	r0, [pc, #160]	; (8013134 <_printf_i+0x248>)
 8013092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013096:	e7e3      	b.n	8013060 <_printf_i+0x174>
 8013098:	0659      	lsls	r1, r3, #25
 801309a:	bf48      	it	mi
 801309c:	b2b6      	uxthmi	r6, r6
 801309e:	e7e6      	b.n	801306e <_printf_i+0x182>
 80130a0:	4615      	mov	r5, r2
 80130a2:	e7bb      	b.n	801301c <_printf_i+0x130>
 80130a4:	682b      	ldr	r3, [r5, #0]
 80130a6:	6826      	ldr	r6, [r4, #0]
 80130a8:	6961      	ldr	r1, [r4, #20]
 80130aa:	1d18      	adds	r0, r3, #4
 80130ac:	6028      	str	r0, [r5, #0]
 80130ae:	0635      	lsls	r5, r6, #24
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	d501      	bpl.n	80130b8 <_printf_i+0x1cc>
 80130b4:	6019      	str	r1, [r3, #0]
 80130b6:	e002      	b.n	80130be <_printf_i+0x1d2>
 80130b8:	0670      	lsls	r0, r6, #25
 80130ba:	d5fb      	bpl.n	80130b4 <_printf_i+0x1c8>
 80130bc:	8019      	strh	r1, [r3, #0]
 80130be:	2300      	movs	r3, #0
 80130c0:	6123      	str	r3, [r4, #16]
 80130c2:	4615      	mov	r5, r2
 80130c4:	e7ba      	b.n	801303c <_printf_i+0x150>
 80130c6:	682b      	ldr	r3, [r5, #0]
 80130c8:	1d1a      	adds	r2, r3, #4
 80130ca:	602a      	str	r2, [r5, #0]
 80130cc:	681d      	ldr	r5, [r3, #0]
 80130ce:	6862      	ldr	r2, [r4, #4]
 80130d0:	2100      	movs	r1, #0
 80130d2:	4628      	mov	r0, r5
 80130d4:	f7ed f884 	bl	80001e0 <memchr>
 80130d8:	b108      	cbz	r0, 80130de <_printf_i+0x1f2>
 80130da:	1b40      	subs	r0, r0, r5
 80130dc:	6060      	str	r0, [r4, #4]
 80130de:	6863      	ldr	r3, [r4, #4]
 80130e0:	6123      	str	r3, [r4, #16]
 80130e2:	2300      	movs	r3, #0
 80130e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130e8:	e7a8      	b.n	801303c <_printf_i+0x150>
 80130ea:	6923      	ldr	r3, [r4, #16]
 80130ec:	462a      	mov	r2, r5
 80130ee:	4649      	mov	r1, r9
 80130f0:	4640      	mov	r0, r8
 80130f2:	47d0      	blx	sl
 80130f4:	3001      	adds	r0, #1
 80130f6:	d0ab      	beq.n	8013050 <_printf_i+0x164>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	079b      	lsls	r3, r3, #30
 80130fc:	d413      	bmi.n	8013126 <_printf_i+0x23a>
 80130fe:	68e0      	ldr	r0, [r4, #12]
 8013100:	9b03      	ldr	r3, [sp, #12]
 8013102:	4298      	cmp	r0, r3
 8013104:	bfb8      	it	lt
 8013106:	4618      	movlt	r0, r3
 8013108:	e7a4      	b.n	8013054 <_printf_i+0x168>
 801310a:	2301      	movs	r3, #1
 801310c:	4632      	mov	r2, r6
 801310e:	4649      	mov	r1, r9
 8013110:	4640      	mov	r0, r8
 8013112:	47d0      	blx	sl
 8013114:	3001      	adds	r0, #1
 8013116:	d09b      	beq.n	8013050 <_printf_i+0x164>
 8013118:	3501      	adds	r5, #1
 801311a:	68e3      	ldr	r3, [r4, #12]
 801311c:	9903      	ldr	r1, [sp, #12]
 801311e:	1a5b      	subs	r3, r3, r1
 8013120:	42ab      	cmp	r3, r5
 8013122:	dcf2      	bgt.n	801310a <_printf_i+0x21e>
 8013124:	e7eb      	b.n	80130fe <_printf_i+0x212>
 8013126:	2500      	movs	r5, #0
 8013128:	f104 0619 	add.w	r6, r4, #25
 801312c:	e7f5      	b.n	801311a <_printf_i+0x22e>
 801312e:	bf00      	nop
 8013130:	08015e05 	.word	0x08015e05
 8013134:	08015e16 	.word	0x08015e16

08013138 <_sbrk_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4d06      	ldr	r5, [pc, #24]	; (8013154 <_sbrk_r+0x1c>)
 801313c:	2300      	movs	r3, #0
 801313e:	4604      	mov	r4, r0
 8013140:	4608      	mov	r0, r1
 8013142:	602b      	str	r3, [r5, #0]
 8013144:	f000 fc5c 	bl	8013a00 <_sbrk>
 8013148:	1c43      	adds	r3, r0, #1
 801314a:	d102      	bne.n	8013152 <_sbrk_r+0x1a>
 801314c:	682b      	ldr	r3, [r5, #0]
 801314e:	b103      	cbz	r3, 8013152 <_sbrk_r+0x1a>
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	bd38      	pop	{r3, r4, r5, pc}
 8013154:	20005624 	.word	0x20005624

08013158 <__swbuf_r>:
 8013158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315a:	460e      	mov	r6, r1
 801315c:	4614      	mov	r4, r2
 801315e:	4605      	mov	r5, r0
 8013160:	b118      	cbz	r0, 801316a <__swbuf_r+0x12>
 8013162:	6983      	ldr	r3, [r0, #24]
 8013164:	b90b      	cbnz	r3, 801316a <__swbuf_r+0x12>
 8013166:	f000 f9d9 	bl	801351c <__sinit>
 801316a:	4b21      	ldr	r3, [pc, #132]	; (80131f0 <__swbuf_r+0x98>)
 801316c:	429c      	cmp	r4, r3
 801316e:	d12b      	bne.n	80131c8 <__swbuf_r+0x70>
 8013170:	686c      	ldr	r4, [r5, #4]
 8013172:	69a3      	ldr	r3, [r4, #24]
 8013174:	60a3      	str	r3, [r4, #8]
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	071a      	lsls	r2, r3, #28
 801317a:	d52f      	bpl.n	80131dc <__swbuf_r+0x84>
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	b36b      	cbz	r3, 80131dc <__swbuf_r+0x84>
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	6820      	ldr	r0, [r4, #0]
 8013184:	1ac0      	subs	r0, r0, r3
 8013186:	6963      	ldr	r3, [r4, #20]
 8013188:	b2f6      	uxtb	r6, r6
 801318a:	4283      	cmp	r3, r0
 801318c:	4637      	mov	r7, r6
 801318e:	dc04      	bgt.n	801319a <__swbuf_r+0x42>
 8013190:	4621      	mov	r1, r4
 8013192:	4628      	mov	r0, r5
 8013194:	f000 f92e 	bl	80133f4 <_fflush_r>
 8013198:	bb30      	cbnz	r0, 80131e8 <__swbuf_r+0x90>
 801319a:	68a3      	ldr	r3, [r4, #8]
 801319c:	3b01      	subs	r3, #1
 801319e:	60a3      	str	r3, [r4, #8]
 80131a0:	6823      	ldr	r3, [r4, #0]
 80131a2:	1c5a      	adds	r2, r3, #1
 80131a4:	6022      	str	r2, [r4, #0]
 80131a6:	701e      	strb	r6, [r3, #0]
 80131a8:	6963      	ldr	r3, [r4, #20]
 80131aa:	3001      	adds	r0, #1
 80131ac:	4283      	cmp	r3, r0
 80131ae:	d004      	beq.n	80131ba <__swbuf_r+0x62>
 80131b0:	89a3      	ldrh	r3, [r4, #12]
 80131b2:	07db      	lsls	r3, r3, #31
 80131b4:	d506      	bpl.n	80131c4 <__swbuf_r+0x6c>
 80131b6:	2e0a      	cmp	r6, #10
 80131b8:	d104      	bne.n	80131c4 <__swbuf_r+0x6c>
 80131ba:	4621      	mov	r1, r4
 80131bc:	4628      	mov	r0, r5
 80131be:	f000 f919 	bl	80133f4 <_fflush_r>
 80131c2:	b988      	cbnz	r0, 80131e8 <__swbuf_r+0x90>
 80131c4:	4638      	mov	r0, r7
 80131c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c8:	4b0a      	ldr	r3, [pc, #40]	; (80131f4 <__swbuf_r+0x9c>)
 80131ca:	429c      	cmp	r4, r3
 80131cc:	d101      	bne.n	80131d2 <__swbuf_r+0x7a>
 80131ce:	68ac      	ldr	r4, [r5, #8]
 80131d0:	e7cf      	b.n	8013172 <__swbuf_r+0x1a>
 80131d2:	4b09      	ldr	r3, [pc, #36]	; (80131f8 <__swbuf_r+0xa0>)
 80131d4:	429c      	cmp	r4, r3
 80131d6:	bf08      	it	eq
 80131d8:	68ec      	ldreq	r4, [r5, #12]
 80131da:	e7ca      	b.n	8013172 <__swbuf_r+0x1a>
 80131dc:	4621      	mov	r1, r4
 80131de:	4628      	mov	r0, r5
 80131e0:	f000 f80c 	bl	80131fc <__swsetup_r>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d0cb      	beq.n	8013180 <__swbuf_r+0x28>
 80131e8:	f04f 37ff 	mov.w	r7, #4294967295
 80131ec:	e7ea      	b.n	80131c4 <__swbuf_r+0x6c>
 80131ee:	bf00      	nop
 80131f0:	08015e48 	.word	0x08015e48
 80131f4:	08015e68 	.word	0x08015e68
 80131f8:	08015e28 	.word	0x08015e28

080131fc <__swsetup_r>:
 80131fc:	4b32      	ldr	r3, [pc, #200]	; (80132c8 <__swsetup_r+0xcc>)
 80131fe:	b570      	push	{r4, r5, r6, lr}
 8013200:	681d      	ldr	r5, [r3, #0]
 8013202:	4606      	mov	r6, r0
 8013204:	460c      	mov	r4, r1
 8013206:	b125      	cbz	r5, 8013212 <__swsetup_r+0x16>
 8013208:	69ab      	ldr	r3, [r5, #24]
 801320a:	b913      	cbnz	r3, 8013212 <__swsetup_r+0x16>
 801320c:	4628      	mov	r0, r5
 801320e:	f000 f985 	bl	801351c <__sinit>
 8013212:	4b2e      	ldr	r3, [pc, #184]	; (80132cc <__swsetup_r+0xd0>)
 8013214:	429c      	cmp	r4, r3
 8013216:	d10f      	bne.n	8013238 <__swsetup_r+0x3c>
 8013218:	686c      	ldr	r4, [r5, #4]
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013220:	0719      	lsls	r1, r3, #28
 8013222:	d42c      	bmi.n	801327e <__swsetup_r+0x82>
 8013224:	06dd      	lsls	r5, r3, #27
 8013226:	d411      	bmi.n	801324c <__swsetup_r+0x50>
 8013228:	2309      	movs	r3, #9
 801322a:	6033      	str	r3, [r6, #0]
 801322c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013230:	81a3      	strh	r3, [r4, #12]
 8013232:	f04f 30ff 	mov.w	r0, #4294967295
 8013236:	e03e      	b.n	80132b6 <__swsetup_r+0xba>
 8013238:	4b25      	ldr	r3, [pc, #148]	; (80132d0 <__swsetup_r+0xd4>)
 801323a:	429c      	cmp	r4, r3
 801323c:	d101      	bne.n	8013242 <__swsetup_r+0x46>
 801323e:	68ac      	ldr	r4, [r5, #8]
 8013240:	e7eb      	b.n	801321a <__swsetup_r+0x1e>
 8013242:	4b24      	ldr	r3, [pc, #144]	; (80132d4 <__swsetup_r+0xd8>)
 8013244:	429c      	cmp	r4, r3
 8013246:	bf08      	it	eq
 8013248:	68ec      	ldreq	r4, [r5, #12]
 801324a:	e7e6      	b.n	801321a <__swsetup_r+0x1e>
 801324c:	0758      	lsls	r0, r3, #29
 801324e:	d512      	bpl.n	8013276 <__swsetup_r+0x7a>
 8013250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013252:	b141      	cbz	r1, 8013266 <__swsetup_r+0x6a>
 8013254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013258:	4299      	cmp	r1, r3
 801325a:	d002      	beq.n	8013262 <__swsetup_r+0x66>
 801325c:	4630      	mov	r0, r6
 801325e:	f7ff fa41 	bl	80126e4 <_free_r>
 8013262:	2300      	movs	r3, #0
 8013264:	6363      	str	r3, [r4, #52]	; 0x34
 8013266:	89a3      	ldrh	r3, [r4, #12]
 8013268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801326c:	81a3      	strh	r3, [r4, #12]
 801326e:	2300      	movs	r3, #0
 8013270:	6063      	str	r3, [r4, #4]
 8013272:	6923      	ldr	r3, [r4, #16]
 8013274:	6023      	str	r3, [r4, #0]
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	f043 0308 	orr.w	r3, r3, #8
 801327c:	81a3      	strh	r3, [r4, #12]
 801327e:	6923      	ldr	r3, [r4, #16]
 8013280:	b94b      	cbnz	r3, 8013296 <__swsetup_r+0x9a>
 8013282:	89a3      	ldrh	r3, [r4, #12]
 8013284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801328c:	d003      	beq.n	8013296 <__swsetup_r+0x9a>
 801328e:	4621      	mov	r1, r4
 8013290:	4630      	mov	r0, r6
 8013292:	f000 fa09 	bl	80136a8 <__smakebuf_r>
 8013296:	89a0      	ldrh	r0, [r4, #12]
 8013298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801329c:	f010 0301 	ands.w	r3, r0, #1
 80132a0:	d00a      	beq.n	80132b8 <__swsetup_r+0xbc>
 80132a2:	2300      	movs	r3, #0
 80132a4:	60a3      	str	r3, [r4, #8]
 80132a6:	6963      	ldr	r3, [r4, #20]
 80132a8:	425b      	negs	r3, r3
 80132aa:	61a3      	str	r3, [r4, #24]
 80132ac:	6923      	ldr	r3, [r4, #16]
 80132ae:	b943      	cbnz	r3, 80132c2 <__swsetup_r+0xc6>
 80132b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132b4:	d1ba      	bne.n	801322c <__swsetup_r+0x30>
 80132b6:	bd70      	pop	{r4, r5, r6, pc}
 80132b8:	0781      	lsls	r1, r0, #30
 80132ba:	bf58      	it	pl
 80132bc:	6963      	ldrpl	r3, [r4, #20]
 80132be:	60a3      	str	r3, [r4, #8]
 80132c0:	e7f4      	b.n	80132ac <__swsetup_r+0xb0>
 80132c2:	2000      	movs	r0, #0
 80132c4:	e7f7      	b.n	80132b6 <__swsetup_r+0xba>
 80132c6:	bf00      	nop
 80132c8:	20000128 	.word	0x20000128
 80132cc:	08015e48 	.word	0x08015e48
 80132d0:	08015e68 	.word	0x08015e68
 80132d4:	08015e28 	.word	0x08015e28

080132d8 <abort>:
 80132d8:	b508      	push	{r3, lr}
 80132da:	2006      	movs	r0, #6
 80132dc:	f000 fa88 	bl	80137f0 <raise>
 80132e0:	2001      	movs	r0, #1
 80132e2:	f000 fba3 	bl	8013a2c <_exit>
	...

080132e8 <__sflush_r>:
 80132e8:	898a      	ldrh	r2, [r1, #12]
 80132ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ee:	4605      	mov	r5, r0
 80132f0:	0710      	lsls	r0, r2, #28
 80132f2:	460c      	mov	r4, r1
 80132f4:	d458      	bmi.n	80133a8 <__sflush_r+0xc0>
 80132f6:	684b      	ldr	r3, [r1, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	dc05      	bgt.n	8013308 <__sflush_r+0x20>
 80132fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80132fe:	2b00      	cmp	r3, #0
 8013300:	dc02      	bgt.n	8013308 <__sflush_r+0x20>
 8013302:	2000      	movs	r0, #0
 8013304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801330a:	2e00      	cmp	r6, #0
 801330c:	d0f9      	beq.n	8013302 <__sflush_r+0x1a>
 801330e:	2300      	movs	r3, #0
 8013310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013314:	682f      	ldr	r7, [r5, #0]
 8013316:	602b      	str	r3, [r5, #0]
 8013318:	d032      	beq.n	8013380 <__sflush_r+0x98>
 801331a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801331c:	89a3      	ldrh	r3, [r4, #12]
 801331e:	075a      	lsls	r2, r3, #29
 8013320:	d505      	bpl.n	801332e <__sflush_r+0x46>
 8013322:	6863      	ldr	r3, [r4, #4]
 8013324:	1ac0      	subs	r0, r0, r3
 8013326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013328:	b10b      	cbz	r3, 801332e <__sflush_r+0x46>
 801332a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801332c:	1ac0      	subs	r0, r0, r3
 801332e:	2300      	movs	r3, #0
 8013330:	4602      	mov	r2, r0
 8013332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013334:	6a21      	ldr	r1, [r4, #32]
 8013336:	4628      	mov	r0, r5
 8013338:	47b0      	blx	r6
 801333a:	1c43      	adds	r3, r0, #1
 801333c:	89a3      	ldrh	r3, [r4, #12]
 801333e:	d106      	bne.n	801334e <__sflush_r+0x66>
 8013340:	6829      	ldr	r1, [r5, #0]
 8013342:	291d      	cmp	r1, #29
 8013344:	d82c      	bhi.n	80133a0 <__sflush_r+0xb8>
 8013346:	4a2a      	ldr	r2, [pc, #168]	; (80133f0 <__sflush_r+0x108>)
 8013348:	40ca      	lsrs	r2, r1
 801334a:	07d6      	lsls	r6, r2, #31
 801334c:	d528      	bpl.n	80133a0 <__sflush_r+0xb8>
 801334e:	2200      	movs	r2, #0
 8013350:	6062      	str	r2, [r4, #4]
 8013352:	04d9      	lsls	r1, r3, #19
 8013354:	6922      	ldr	r2, [r4, #16]
 8013356:	6022      	str	r2, [r4, #0]
 8013358:	d504      	bpl.n	8013364 <__sflush_r+0x7c>
 801335a:	1c42      	adds	r2, r0, #1
 801335c:	d101      	bne.n	8013362 <__sflush_r+0x7a>
 801335e:	682b      	ldr	r3, [r5, #0]
 8013360:	b903      	cbnz	r3, 8013364 <__sflush_r+0x7c>
 8013362:	6560      	str	r0, [r4, #84]	; 0x54
 8013364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013366:	602f      	str	r7, [r5, #0]
 8013368:	2900      	cmp	r1, #0
 801336a:	d0ca      	beq.n	8013302 <__sflush_r+0x1a>
 801336c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013370:	4299      	cmp	r1, r3
 8013372:	d002      	beq.n	801337a <__sflush_r+0x92>
 8013374:	4628      	mov	r0, r5
 8013376:	f7ff f9b5 	bl	80126e4 <_free_r>
 801337a:	2000      	movs	r0, #0
 801337c:	6360      	str	r0, [r4, #52]	; 0x34
 801337e:	e7c1      	b.n	8013304 <__sflush_r+0x1c>
 8013380:	6a21      	ldr	r1, [r4, #32]
 8013382:	2301      	movs	r3, #1
 8013384:	4628      	mov	r0, r5
 8013386:	47b0      	blx	r6
 8013388:	1c41      	adds	r1, r0, #1
 801338a:	d1c7      	bne.n	801331c <__sflush_r+0x34>
 801338c:	682b      	ldr	r3, [r5, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d0c4      	beq.n	801331c <__sflush_r+0x34>
 8013392:	2b1d      	cmp	r3, #29
 8013394:	d001      	beq.n	801339a <__sflush_r+0xb2>
 8013396:	2b16      	cmp	r3, #22
 8013398:	d101      	bne.n	801339e <__sflush_r+0xb6>
 801339a:	602f      	str	r7, [r5, #0]
 801339c:	e7b1      	b.n	8013302 <__sflush_r+0x1a>
 801339e:	89a3      	ldrh	r3, [r4, #12]
 80133a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a4:	81a3      	strh	r3, [r4, #12]
 80133a6:	e7ad      	b.n	8013304 <__sflush_r+0x1c>
 80133a8:	690f      	ldr	r7, [r1, #16]
 80133aa:	2f00      	cmp	r7, #0
 80133ac:	d0a9      	beq.n	8013302 <__sflush_r+0x1a>
 80133ae:	0793      	lsls	r3, r2, #30
 80133b0:	680e      	ldr	r6, [r1, #0]
 80133b2:	bf08      	it	eq
 80133b4:	694b      	ldreq	r3, [r1, #20]
 80133b6:	600f      	str	r7, [r1, #0]
 80133b8:	bf18      	it	ne
 80133ba:	2300      	movne	r3, #0
 80133bc:	eba6 0807 	sub.w	r8, r6, r7
 80133c0:	608b      	str	r3, [r1, #8]
 80133c2:	f1b8 0f00 	cmp.w	r8, #0
 80133c6:	dd9c      	ble.n	8013302 <__sflush_r+0x1a>
 80133c8:	6a21      	ldr	r1, [r4, #32]
 80133ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80133cc:	4643      	mov	r3, r8
 80133ce:	463a      	mov	r2, r7
 80133d0:	4628      	mov	r0, r5
 80133d2:	47b0      	blx	r6
 80133d4:	2800      	cmp	r0, #0
 80133d6:	dc06      	bgt.n	80133e6 <__sflush_r+0xfe>
 80133d8:	89a3      	ldrh	r3, [r4, #12]
 80133da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133de:	81a3      	strh	r3, [r4, #12]
 80133e0:	f04f 30ff 	mov.w	r0, #4294967295
 80133e4:	e78e      	b.n	8013304 <__sflush_r+0x1c>
 80133e6:	4407      	add	r7, r0
 80133e8:	eba8 0800 	sub.w	r8, r8, r0
 80133ec:	e7e9      	b.n	80133c2 <__sflush_r+0xda>
 80133ee:	bf00      	nop
 80133f0:	20400001 	.word	0x20400001

080133f4 <_fflush_r>:
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	690b      	ldr	r3, [r1, #16]
 80133f8:	4605      	mov	r5, r0
 80133fa:	460c      	mov	r4, r1
 80133fc:	b913      	cbnz	r3, 8013404 <_fflush_r+0x10>
 80133fe:	2500      	movs	r5, #0
 8013400:	4628      	mov	r0, r5
 8013402:	bd38      	pop	{r3, r4, r5, pc}
 8013404:	b118      	cbz	r0, 801340e <_fflush_r+0x1a>
 8013406:	6983      	ldr	r3, [r0, #24]
 8013408:	b90b      	cbnz	r3, 801340e <_fflush_r+0x1a>
 801340a:	f000 f887 	bl	801351c <__sinit>
 801340e:	4b14      	ldr	r3, [pc, #80]	; (8013460 <_fflush_r+0x6c>)
 8013410:	429c      	cmp	r4, r3
 8013412:	d11b      	bne.n	801344c <_fflush_r+0x58>
 8013414:	686c      	ldr	r4, [r5, #4]
 8013416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d0ef      	beq.n	80133fe <_fflush_r+0xa>
 801341e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013420:	07d0      	lsls	r0, r2, #31
 8013422:	d404      	bmi.n	801342e <_fflush_r+0x3a>
 8013424:	0599      	lsls	r1, r3, #22
 8013426:	d402      	bmi.n	801342e <_fflush_r+0x3a>
 8013428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801342a:	f000 f915 	bl	8013658 <__retarget_lock_acquire_recursive>
 801342e:	4628      	mov	r0, r5
 8013430:	4621      	mov	r1, r4
 8013432:	f7ff ff59 	bl	80132e8 <__sflush_r>
 8013436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013438:	07da      	lsls	r2, r3, #31
 801343a:	4605      	mov	r5, r0
 801343c:	d4e0      	bmi.n	8013400 <_fflush_r+0xc>
 801343e:	89a3      	ldrh	r3, [r4, #12]
 8013440:	059b      	lsls	r3, r3, #22
 8013442:	d4dd      	bmi.n	8013400 <_fflush_r+0xc>
 8013444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013446:	f000 f908 	bl	801365a <__retarget_lock_release_recursive>
 801344a:	e7d9      	b.n	8013400 <_fflush_r+0xc>
 801344c:	4b05      	ldr	r3, [pc, #20]	; (8013464 <_fflush_r+0x70>)
 801344e:	429c      	cmp	r4, r3
 8013450:	d101      	bne.n	8013456 <_fflush_r+0x62>
 8013452:	68ac      	ldr	r4, [r5, #8]
 8013454:	e7df      	b.n	8013416 <_fflush_r+0x22>
 8013456:	4b04      	ldr	r3, [pc, #16]	; (8013468 <_fflush_r+0x74>)
 8013458:	429c      	cmp	r4, r3
 801345a:	bf08      	it	eq
 801345c:	68ec      	ldreq	r4, [r5, #12]
 801345e:	e7da      	b.n	8013416 <_fflush_r+0x22>
 8013460:	08015e48 	.word	0x08015e48
 8013464:	08015e68 	.word	0x08015e68
 8013468:	08015e28 	.word	0x08015e28

0801346c <std>:
 801346c:	2300      	movs	r3, #0
 801346e:	b510      	push	{r4, lr}
 8013470:	4604      	mov	r4, r0
 8013472:	e9c0 3300 	strd	r3, r3, [r0]
 8013476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801347a:	6083      	str	r3, [r0, #8]
 801347c:	8181      	strh	r1, [r0, #12]
 801347e:	6643      	str	r3, [r0, #100]	; 0x64
 8013480:	81c2      	strh	r2, [r0, #14]
 8013482:	6183      	str	r3, [r0, #24]
 8013484:	4619      	mov	r1, r3
 8013486:	2208      	movs	r2, #8
 8013488:	305c      	adds	r0, #92	; 0x5c
 801348a:	f7ff f843 	bl	8012514 <memset>
 801348e:	4b05      	ldr	r3, [pc, #20]	; (80134a4 <std+0x38>)
 8013490:	6263      	str	r3, [r4, #36]	; 0x24
 8013492:	4b05      	ldr	r3, [pc, #20]	; (80134a8 <std+0x3c>)
 8013494:	62a3      	str	r3, [r4, #40]	; 0x28
 8013496:	4b05      	ldr	r3, [pc, #20]	; (80134ac <std+0x40>)
 8013498:	62e3      	str	r3, [r4, #44]	; 0x2c
 801349a:	4b05      	ldr	r3, [pc, #20]	; (80134b0 <std+0x44>)
 801349c:	6224      	str	r4, [r4, #32]
 801349e:	6323      	str	r3, [r4, #48]	; 0x30
 80134a0:	bd10      	pop	{r4, pc}
 80134a2:	bf00      	nop
 80134a4:	08013829 	.word	0x08013829
 80134a8:	0801384b 	.word	0x0801384b
 80134ac:	08013883 	.word	0x08013883
 80134b0:	080138a7 	.word	0x080138a7

080134b4 <_cleanup_r>:
 80134b4:	4901      	ldr	r1, [pc, #4]	; (80134bc <_cleanup_r+0x8>)
 80134b6:	f000 b8af 	b.w	8013618 <_fwalk_reent>
 80134ba:	bf00      	nop
 80134bc:	080133f5 	.word	0x080133f5

080134c0 <__sfmoreglue>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	2268      	movs	r2, #104	; 0x68
 80134c4:	1e4d      	subs	r5, r1, #1
 80134c6:	4355      	muls	r5, r2
 80134c8:	460e      	mov	r6, r1
 80134ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80134ce:	f7ff f975 	bl	80127bc <_malloc_r>
 80134d2:	4604      	mov	r4, r0
 80134d4:	b140      	cbz	r0, 80134e8 <__sfmoreglue+0x28>
 80134d6:	2100      	movs	r1, #0
 80134d8:	e9c0 1600 	strd	r1, r6, [r0]
 80134dc:	300c      	adds	r0, #12
 80134de:	60a0      	str	r0, [r4, #8]
 80134e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80134e4:	f7ff f816 	bl	8012514 <memset>
 80134e8:	4620      	mov	r0, r4
 80134ea:	bd70      	pop	{r4, r5, r6, pc}

080134ec <__sfp_lock_acquire>:
 80134ec:	4801      	ldr	r0, [pc, #4]	; (80134f4 <__sfp_lock_acquire+0x8>)
 80134ee:	f000 b8b3 	b.w	8013658 <__retarget_lock_acquire_recursive>
 80134f2:	bf00      	nop
 80134f4:	20005621 	.word	0x20005621

080134f8 <__sfp_lock_release>:
 80134f8:	4801      	ldr	r0, [pc, #4]	; (8013500 <__sfp_lock_release+0x8>)
 80134fa:	f000 b8ae 	b.w	801365a <__retarget_lock_release_recursive>
 80134fe:	bf00      	nop
 8013500:	20005621 	.word	0x20005621

08013504 <__sinit_lock_acquire>:
 8013504:	4801      	ldr	r0, [pc, #4]	; (801350c <__sinit_lock_acquire+0x8>)
 8013506:	f000 b8a7 	b.w	8013658 <__retarget_lock_acquire_recursive>
 801350a:	bf00      	nop
 801350c:	20005622 	.word	0x20005622

08013510 <__sinit_lock_release>:
 8013510:	4801      	ldr	r0, [pc, #4]	; (8013518 <__sinit_lock_release+0x8>)
 8013512:	f000 b8a2 	b.w	801365a <__retarget_lock_release_recursive>
 8013516:	bf00      	nop
 8013518:	20005622 	.word	0x20005622

0801351c <__sinit>:
 801351c:	b510      	push	{r4, lr}
 801351e:	4604      	mov	r4, r0
 8013520:	f7ff fff0 	bl	8013504 <__sinit_lock_acquire>
 8013524:	69a3      	ldr	r3, [r4, #24]
 8013526:	b11b      	cbz	r3, 8013530 <__sinit+0x14>
 8013528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801352c:	f7ff bff0 	b.w	8013510 <__sinit_lock_release>
 8013530:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013534:	6523      	str	r3, [r4, #80]	; 0x50
 8013536:	4b13      	ldr	r3, [pc, #76]	; (8013584 <__sinit+0x68>)
 8013538:	4a13      	ldr	r2, [pc, #76]	; (8013588 <__sinit+0x6c>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	62a2      	str	r2, [r4, #40]	; 0x28
 801353e:	42a3      	cmp	r3, r4
 8013540:	bf04      	itt	eq
 8013542:	2301      	moveq	r3, #1
 8013544:	61a3      	streq	r3, [r4, #24]
 8013546:	4620      	mov	r0, r4
 8013548:	f000 f820 	bl	801358c <__sfp>
 801354c:	6060      	str	r0, [r4, #4]
 801354e:	4620      	mov	r0, r4
 8013550:	f000 f81c 	bl	801358c <__sfp>
 8013554:	60a0      	str	r0, [r4, #8]
 8013556:	4620      	mov	r0, r4
 8013558:	f000 f818 	bl	801358c <__sfp>
 801355c:	2200      	movs	r2, #0
 801355e:	60e0      	str	r0, [r4, #12]
 8013560:	2104      	movs	r1, #4
 8013562:	6860      	ldr	r0, [r4, #4]
 8013564:	f7ff ff82 	bl	801346c <std>
 8013568:	68a0      	ldr	r0, [r4, #8]
 801356a:	2201      	movs	r2, #1
 801356c:	2109      	movs	r1, #9
 801356e:	f7ff ff7d 	bl	801346c <std>
 8013572:	68e0      	ldr	r0, [r4, #12]
 8013574:	2202      	movs	r2, #2
 8013576:	2112      	movs	r1, #18
 8013578:	f7ff ff78 	bl	801346c <std>
 801357c:	2301      	movs	r3, #1
 801357e:	61a3      	str	r3, [r4, #24]
 8013580:	e7d2      	b.n	8013528 <__sinit+0xc>
 8013582:	bf00      	nop
 8013584:	08015d40 	.word	0x08015d40
 8013588:	080134b5 	.word	0x080134b5

0801358c <__sfp>:
 801358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358e:	4607      	mov	r7, r0
 8013590:	f7ff ffac 	bl	80134ec <__sfp_lock_acquire>
 8013594:	4b1e      	ldr	r3, [pc, #120]	; (8013610 <__sfp+0x84>)
 8013596:	681e      	ldr	r6, [r3, #0]
 8013598:	69b3      	ldr	r3, [r6, #24]
 801359a:	b913      	cbnz	r3, 80135a2 <__sfp+0x16>
 801359c:	4630      	mov	r0, r6
 801359e:	f7ff ffbd 	bl	801351c <__sinit>
 80135a2:	3648      	adds	r6, #72	; 0x48
 80135a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80135a8:	3b01      	subs	r3, #1
 80135aa:	d503      	bpl.n	80135b4 <__sfp+0x28>
 80135ac:	6833      	ldr	r3, [r6, #0]
 80135ae:	b30b      	cbz	r3, 80135f4 <__sfp+0x68>
 80135b0:	6836      	ldr	r6, [r6, #0]
 80135b2:	e7f7      	b.n	80135a4 <__sfp+0x18>
 80135b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80135b8:	b9d5      	cbnz	r5, 80135f0 <__sfp+0x64>
 80135ba:	4b16      	ldr	r3, [pc, #88]	; (8013614 <__sfp+0x88>)
 80135bc:	60e3      	str	r3, [r4, #12]
 80135be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80135c2:	6665      	str	r5, [r4, #100]	; 0x64
 80135c4:	f000 f847 	bl	8013656 <__retarget_lock_init_recursive>
 80135c8:	f7ff ff96 	bl	80134f8 <__sfp_lock_release>
 80135cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80135d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80135d4:	6025      	str	r5, [r4, #0]
 80135d6:	61a5      	str	r5, [r4, #24]
 80135d8:	2208      	movs	r2, #8
 80135da:	4629      	mov	r1, r5
 80135dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80135e0:	f7fe ff98 	bl	8012514 <memset>
 80135e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80135e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80135ec:	4620      	mov	r0, r4
 80135ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135f0:	3468      	adds	r4, #104	; 0x68
 80135f2:	e7d9      	b.n	80135a8 <__sfp+0x1c>
 80135f4:	2104      	movs	r1, #4
 80135f6:	4638      	mov	r0, r7
 80135f8:	f7ff ff62 	bl	80134c0 <__sfmoreglue>
 80135fc:	4604      	mov	r4, r0
 80135fe:	6030      	str	r0, [r6, #0]
 8013600:	2800      	cmp	r0, #0
 8013602:	d1d5      	bne.n	80135b0 <__sfp+0x24>
 8013604:	f7ff ff78 	bl	80134f8 <__sfp_lock_release>
 8013608:	230c      	movs	r3, #12
 801360a:	603b      	str	r3, [r7, #0]
 801360c:	e7ee      	b.n	80135ec <__sfp+0x60>
 801360e:	bf00      	nop
 8013610:	08015d40 	.word	0x08015d40
 8013614:	ffff0001 	.word	0xffff0001

08013618 <_fwalk_reent>:
 8013618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801361c:	4606      	mov	r6, r0
 801361e:	4688      	mov	r8, r1
 8013620:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013624:	2700      	movs	r7, #0
 8013626:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801362a:	f1b9 0901 	subs.w	r9, r9, #1
 801362e:	d505      	bpl.n	801363c <_fwalk_reent+0x24>
 8013630:	6824      	ldr	r4, [r4, #0]
 8013632:	2c00      	cmp	r4, #0
 8013634:	d1f7      	bne.n	8013626 <_fwalk_reent+0xe>
 8013636:	4638      	mov	r0, r7
 8013638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801363c:	89ab      	ldrh	r3, [r5, #12]
 801363e:	2b01      	cmp	r3, #1
 8013640:	d907      	bls.n	8013652 <_fwalk_reent+0x3a>
 8013642:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013646:	3301      	adds	r3, #1
 8013648:	d003      	beq.n	8013652 <_fwalk_reent+0x3a>
 801364a:	4629      	mov	r1, r5
 801364c:	4630      	mov	r0, r6
 801364e:	47c0      	blx	r8
 8013650:	4307      	orrs	r7, r0
 8013652:	3568      	adds	r5, #104	; 0x68
 8013654:	e7e9      	b.n	801362a <_fwalk_reent+0x12>

08013656 <__retarget_lock_init_recursive>:
 8013656:	4770      	bx	lr

08013658 <__retarget_lock_acquire_recursive>:
 8013658:	4770      	bx	lr

0801365a <__retarget_lock_release_recursive>:
 801365a:	4770      	bx	lr

0801365c <__swhatbuf_r>:
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	460e      	mov	r6, r1
 8013660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013664:	2900      	cmp	r1, #0
 8013666:	b096      	sub	sp, #88	; 0x58
 8013668:	4614      	mov	r4, r2
 801366a:	461d      	mov	r5, r3
 801366c:	da08      	bge.n	8013680 <__swhatbuf_r+0x24>
 801366e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013672:	2200      	movs	r2, #0
 8013674:	602a      	str	r2, [r5, #0]
 8013676:	061a      	lsls	r2, r3, #24
 8013678:	d410      	bmi.n	801369c <__swhatbuf_r+0x40>
 801367a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801367e:	e00e      	b.n	801369e <__swhatbuf_r+0x42>
 8013680:	466a      	mov	r2, sp
 8013682:	f000 f937 	bl	80138f4 <_fstat_r>
 8013686:	2800      	cmp	r0, #0
 8013688:	dbf1      	blt.n	801366e <__swhatbuf_r+0x12>
 801368a:	9a01      	ldr	r2, [sp, #4]
 801368c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013690:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013694:	425a      	negs	r2, r3
 8013696:	415a      	adcs	r2, r3
 8013698:	602a      	str	r2, [r5, #0]
 801369a:	e7ee      	b.n	801367a <__swhatbuf_r+0x1e>
 801369c:	2340      	movs	r3, #64	; 0x40
 801369e:	2000      	movs	r0, #0
 80136a0:	6023      	str	r3, [r4, #0]
 80136a2:	b016      	add	sp, #88	; 0x58
 80136a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080136a8 <__smakebuf_r>:
 80136a8:	898b      	ldrh	r3, [r1, #12]
 80136aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136ac:	079d      	lsls	r5, r3, #30
 80136ae:	4606      	mov	r6, r0
 80136b0:	460c      	mov	r4, r1
 80136b2:	d507      	bpl.n	80136c4 <__smakebuf_r+0x1c>
 80136b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80136b8:	6023      	str	r3, [r4, #0]
 80136ba:	6123      	str	r3, [r4, #16]
 80136bc:	2301      	movs	r3, #1
 80136be:	6163      	str	r3, [r4, #20]
 80136c0:	b002      	add	sp, #8
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	ab01      	add	r3, sp, #4
 80136c6:	466a      	mov	r2, sp
 80136c8:	f7ff ffc8 	bl	801365c <__swhatbuf_r>
 80136cc:	9900      	ldr	r1, [sp, #0]
 80136ce:	4605      	mov	r5, r0
 80136d0:	4630      	mov	r0, r6
 80136d2:	f7ff f873 	bl	80127bc <_malloc_r>
 80136d6:	b948      	cbnz	r0, 80136ec <__smakebuf_r+0x44>
 80136d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136dc:	059a      	lsls	r2, r3, #22
 80136de:	d4ef      	bmi.n	80136c0 <__smakebuf_r+0x18>
 80136e0:	f023 0303 	bic.w	r3, r3, #3
 80136e4:	f043 0302 	orr.w	r3, r3, #2
 80136e8:	81a3      	strh	r3, [r4, #12]
 80136ea:	e7e3      	b.n	80136b4 <__smakebuf_r+0xc>
 80136ec:	4b0d      	ldr	r3, [pc, #52]	; (8013724 <__smakebuf_r+0x7c>)
 80136ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80136f0:	89a3      	ldrh	r3, [r4, #12]
 80136f2:	6020      	str	r0, [r4, #0]
 80136f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136f8:	81a3      	strh	r3, [r4, #12]
 80136fa:	9b00      	ldr	r3, [sp, #0]
 80136fc:	6163      	str	r3, [r4, #20]
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	6120      	str	r0, [r4, #16]
 8013702:	b15b      	cbz	r3, 801371c <__smakebuf_r+0x74>
 8013704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013708:	4630      	mov	r0, r6
 801370a:	f000 f905 	bl	8013918 <_isatty_r>
 801370e:	b128      	cbz	r0, 801371c <__smakebuf_r+0x74>
 8013710:	89a3      	ldrh	r3, [r4, #12]
 8013712:	f023 0303 	bic.w	r3, r3, #3
 8013716:	f043 0301 	orr.w	r3, r3, #1
 801371a:	81a3      	strh	r3, [r4, #12]
 801371c:	89a0      	ldrh	r0, [r4, #12]
 801371e:	4305      	orrs	r5, r0
 8013720:	81a5      	strh	r5, [r4, #12]
 8013722:	e7cd      	b.n	80136c0 <__smakebuf_r+0x18>
 8013724:	080134b5 	.word	0x080134b5

08013728 <__malloc_lock>:
 8013728:	4801      	ldr	r0, [pc, #4]	; (8013730 <__malloc_lock+0x8>)
 801372a:	f7ff bf95 	b.w	8013658 <__retarget_lock_acquire_recursive>
 801372e:	bf00      	nop
 8013730:	20005620 	.word	0x20005620

08013734 <__malloc_unlock>:
 8013734:	4801      	ldr	r0, [pc, #4]	; (801373c <__malloc_unlock+0x8>)
 8013736:	f7ff bf90 	b.w	801365a <__retarget_lock_release_recursive>
 801373a:	bf00      	nop
 801373c:	20005620 	.word	0x20005620

08013740 <_realloc_r>:
 8013740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	4680      	mov	r8, r0
 8013746:	4614      	mov	r4, r2
 8013748:	460e      	mov	r6, r1
 801374a:	b921      	cbnz	r1, 8013756 <_realloc_r+0x16>
 801374c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013750:	4611      	mov	r1, r2
 8013752:	f7ff b833 	b.w	80127bc <_malloc_r>
 8013756:	b92a      	cbnz	r2, 8013764 <_realloc_r+0x24>
 8013758:	f7fe ffc4 	bl	80126e4 <_free_r>
 801375c:	4625      	mov	r5, r4
 801375e:	4628      	mov	r0, r5
 8013760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013764:	f000 f8fa 	bl	801395c <_malloc_usable_size_r>
 8013768:	4284      	cmp	r4, r0
 801376a:	4607      	mov	r7, r0
 801376c:	d802      	bhi.n	8013774 <_realloc_r+0x34>
 801376e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013772:	d812      	bhi.n	801379a <_realloc_r+0x5a>
 8013774:	4621      	mov	r1, r4
 8013776:	4640      	mov	r0, r8
 8013778:	f7ff f820 	bl	80127bc <_malloc_r>
 801377c:	4605      	mov	r5, r0
 801377e:	2800      	cmp	r0, #0
 8013780:	d0ed      	beq.n	801375e <_realloc_r+0x1e>
 8013782:	42bc      	cmp	r4, r7
 8013784:	4622      	mov	r2, r4
 8013786:	4631      	mov	r1, r6
 8013788:	bf28      	it	cs
 801378a:	463a      	movcs	r2, r7
 801378c:	f7fe fe9a 	bl	80124c4 <memcpy>
 8013790:	4631      	mov	r1, r6
 8013792:	4640      	mov	r0, r8
 8013794:	f7fe ffa6 	bl	80126e4 <_free_r>
 8013798:	e7e1      	b.n	801375e <_realloc_r+0x1e>
 801379a:	4635      	mov	r5, r6
 801379c:	e7df      	b.n	801375e <_realloc_r+0x1e>

0801379e <_raise_r>:
 801379e:	291f      	cmp	r1, #31
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	4604      	mov	r4, r0
 80137a4:	460d      	mov	r5, r1
 80137a6:	d904      	bls.n	80137b2 <_raise_r+0x14>
 80137a8:	2316      	movs	r3, #22
 80137aa:	6003      	str	r3, [r0, #0]
 80137ac:	f04f 30ff 	mov.w	r0, #4294967295
 80137b0:	bd38      	pop	{r3, r4, r5, pc}
 80137b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80137b4:	b112      	cbz	r2, 80137bc <_raise_r+0x1e>
 80137b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137ba:	b94b      	cbnz	r3, 80137d0 <_raise_r+0x32>
 80137bc:	4620      	mov	r0, r4
 80137be:	f000 f831 	bl	8013824 <_getpid_r>
 80137c2:	462a      	mov	r2, r5
 80137c4:	4601      	mov	r1, r0
 80137c6:	4620      	mov	r0, r4
 80137c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137cc:	f000 b818 	b.w	8013800 <_kill_r>
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d00a      	beq.n	80137ea <_raise_r+0x4c>
 80137d4:	1c59      	adds	r1, r3, #1
 80137d6:	d103      	bne.n	80137e0 <_raise_r+0x42>
 80137d8:	2316      	movs	r3, #22
 80137da:	6003      	str	r3, [r0, #0]
 80137dc:	2001      	movs	r0, #1
 80137de:	e7e7      	b.n	80137b0 <_raise_r+0x12>
 80137e0:	2400      	movs	r4, #0
 80137e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80137e6:	4628      	mov	r0, r5
 80137e8:	4798      	blx	r3
 80137ea:	2000      	movs	r0, #0
 80137ec:	e7e0      	b.n	80137b0 <_raise_r+0x12>
	...

080137f0 <raise>:
 80137f0:	4b02      	ldr	r3, [pc, #8]	; (80137fc <raise+0xc>)
 80137f2:	4601      	mov	r1, r0
 80137f4:	6818      	ldr	r0, [r3, #0]
 80137f6:	f7ff bfd2 	b.w	801379e <_raise_r>
 80137fa:	bf00      	nop
 80137fc:	20000128 	.word	0x20000128

08013800 <_kill_r>:
 8013800:	b538      	push	{r3, r4, r5, lr}
 8013802:	4d07      	ldr	r5, [pc, #28]	; (8013820 <_kill_r+0x20>)
 8013804:	2300      	movs	r3, #0
 8013806:	4604      	mov	r4, r0
 8013808:	4608      	mov	r0, r1
 801380a:	4611      	mov	r1, r2
 801380c:	602b      	str	r3, [r5, #0]
 801380e:	f000 f8df 	bl	80139d0 <_kill>
 8013812:	1c43      	adds	r3, r0, #1
 8013814:	d102      	bne.n	801381c <_kill_r+0x1c>
 8013816:	682b      	ldr	r3, [r5, #0]
 8013818:	b103      	cbz	r3, 801381c <_kill_r+0x1c>
 801381a:	6023      	str	r3, [r4, #0]
 801381c:	bd38      	pop	{r3, r4, r5, pc}
 801381e:	bf00      	nop
 8013820:	20005624 	.word	0x20005624

08013824 <_getpid_r>:
 8013824:	f000 b8c4 	b.w	80139b0 <_getpid>

08013828 <__sread>:
 8013828:	b510      	push	{r4, lr}
 801382a:	460c      	mov	r4, r1
 801382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013830:	f000 f89c 	bl	801396c <_read_r>
 8013834:	2800      	cmp	r0, #0
 8013836:	bfab      	itete	ge
 8013838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801383a:	89a3      	ldrhlt	r3, [r4, #12]
 801383c:	181b      	addge	r3, r3, r0
 801383e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013842:	bfac      	ite	ge
 8013844:	6563      	strge	r3, [r4, #84]	; 0x54
 8013846:	81a3      	strhlt	r3, [r4, #12]
 8013848:	bd10      	pop	{r4, pc}

0801384a <__swrite>:
 801384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801384e:	461f      	mov	r7, r3
 8013850:	898b      	ldrh	r3, [r1, #12]
 8013852:	05db      	lsls	r3, r3, #23
 8013854:	4605      	mov	r5, r0
 8013856:	460c      	mov	r4, r1
 8013858:	4616      	mov	r6, r2
 801385a:	d505      	bpl.n	8013868 <__swrite+0x1e>
 801385c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013860:	2302      	movs	r3, #2
 8013862:	2200      	movs	r2, #0
 8013864:	f000 f868 	bl	8013938 <_lseek_r>
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801386e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013872:	81a3      	strh	r3, [r4, #12]
 8013874:	4632      	mov	r2, r6
 8013876:	463b      	mov	r3, r7
 8013878:	4628      	mov	r0, r5
 801387a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801387e:	f000 b817 	b.w	80138b0 <_write_r>

08013882 <__sseek>:
 8013882:	b510      	push	{r4, lr}
 8013884:	460c      	mov	r4, r1
 8013886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801388a:	f000 f855 	bl	8013938 <_lseek_r>
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	89a3      	ldrh	r3, [r4, #12]
 8013892:	bf15      	itete	ne
 8013894:	6560      	strne	r0, [r4, #84]	; 0x54
 8013896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801389a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801389e:	81a3      	strheq	r3, [r4, #12]
 80138a0:	bf18      	it	ne
 80138a2:	81a3      	strhne	r3, [r4, #12]
 80138a4:	bd10      	pop	{r4, pc}

080138a6 <__sclose>:
 80138a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138aa:	f000 b813 	b.w	80138d4 <_close_r>
	...

080138b0 <_write_r>:
 80138b0:	b538      	push	{r3, r4, r5, lr}
 80138b2:	4d07      	ldr	r5, [pc, #28]	; (80138d0 <_write_r+0x20>)
 80138b4:	4604      	mov	r4, r0
 80138b6:	4608      	mov	r0, r1
 80138b8:	4611      	mov	r1, r2
 80138ba:	2200      	movs	r2, #0
 80138bc:	602a      	str	r2, [r5, #0]
 80138be:	461a      	mov	r2, r3
 80138c0:	f000 f8ac 	bl	8013a1c <_write>
 80138c4:	1c43      	adds	r3, r0, #1
 80138c6:	d102      	bne.n	80138ce <_write_r+0x1e>
 80138c8:	682b      	ldr	r3, [r5, #0]
 80138ca:	b103      	cbz	r3, 80138ce <_write_r+0x1e>
 80138cc:	6023      	str	r3, [r4, #0]
 80138ce:	bd38      	pop	{r3, r4, r5, pc}
 80138d0:	20005624 	.word	0x20005624

080138d4 <_close_r>:
 80138d4:	b538      	push	{r3, r4, r5, lr}
 80138d6:	4d06      	ldr	r5, [pc, #24]	; (80138f0 <_close_r+0x1c>)
 80138d8:	2300      	movs	r3, #0
 80138da:	4604      	mov	r4, r0
 80138dc:	4608      	mov	r0, r1
 80138de:	602b      	str	r3, [r5, #0]
 80138e0:	f000 f856 	bl	8013990 <_close>
 80138e4:	1c43      	adds	r3, r0, #1
 80138e6:	d102      	bne.n	80138ee <_close_r+0x1a>
 80138e8:	682b      	ldr	r3, [r5, #0]
 80138ea:	b103      	cbz	r3, 80138ee <_close_r+0x1a>
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	bd38      	pop	{r3, r4, r5, pc}
 80138f0:	20005624 	.word	0x20005624

080138f4 <_fstat_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	4d07      	ldr	r5, [pc, #28]	; (8013914 <_fstat_r+0x20>)
 80138f8:	2300      	movs	r3, #0
 80138fa:	4604      	mov	r4, r0
 80138fc:	4608      	mov	r0, r1
 80138fe:	4611      	mov	r1, r2
 8013900:	602b      	str	r3, [r5, #0]
 8013902:	f000 f84d 	bl	80139a0 <_fstat>
 8013906:	1c43      	adds	r3, r0, #1
 8013908:	d102      	bne.n	8013910 <_fstat_r+0x1c>
 801390a:	682b      	ldr	r3, [r5, #0]
 801390c:	b103      	cbz	r3, 8013910 <_fstat_r+0x1c>
 801390e:	6023      	str	r3, [r4, #0]
 8013910:	bd38      	pop	{r3, r4, r5, pc}
 8013912:	bf00      	nop
 8013914:	20005624 	.word	0x20005624

08013918 <_isatty_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4d06      	ldr	r5, [pc, #24]	; (8013934 <_isatty_r+0x1c>)
 801391c:	2300      	movs	r3, #0
 801391e:	4604      	mov	r4, r0
 8013920:	4608      	mov	r0, r1
 8013922:	602b      	str	r3, [r5, #0]
 8013924:	f000 f84c 	bl	80139c0 <_isatty>
 8013928:	1c43      	adds	r3, r0, #1
 801392a:	d102      	bne.n	8013932 <_isatty_r+0x1a>
 801392c:	682b      	ldr	r3, [r5, #0]
 801392e:	b103      	cbz	r3, 8013932 <_isatty_r+0x1a>
 8013930:	6023      	str	r3, [r4, #0]
 8013932:	bd38      	pop	{r3, r4, r5, pc}
 8013934:	20005624 	.word	0x20005624

08013938 <_lseek_r>:
 8013938:	b538      	push	{r3, r4, r5, lr}
 801393a:	4d07      	ldr	r5, [pc, #28]	; (8013958 <_lseek_r+0x20>)
 801393c:	4604      	mov	r4, r0
 801393e:	4608      	mov	r0, r1
 8013940:	4611      	mov	r1, r2
 8013942:	2200      	movs	r2, #0
 8013944:	602a      	str	r2, [r5, #0]
 8013946:	461a      	mov	r2, r3
 8013948:	f000 f84a 	bl	80139e0 <_lseek>
 801394c:	1c43      	adds	r3, r0, #1
 801394e:	d102      	bne.n	8013956 <_lseek_r+0x1e>
 8013950:	682b      	ldr	r3, [r5, #0]
 8013952:	b103      	cbz	r3, 8013956 <_lseek_r+0x1e>
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	20005624 	.word	0x20005624

0801395c <_malloc_usable_size_r>:
 801395c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013960:	1f18      	subs	r0, r3, #4
 8013962:	2b00      	cmp	r3, #0
 8013964:	bfbc      	itt	lt
 8013966:	580b      	ldrlt	r3, [r1, r0]
 8013968:	18c0      	addlt	r0, r0, r3
 801396a:	4770      	bx	lr

0801396c <_read_r>:
 801396c:	b538      	push	{r3, r4, r5, lr}
 801396e:	4d07      	ldr	r5, [pc, #28]	; (801398c <_read_r+0x20>)
 8013970:	4604      	mov	r4, r0
 8013972:	4608      	mov	r0, r1
 8013974:	4611      	mov	r1, r2
 8013976:	2200      	movs	r2, #0
 8013978:	602a      	str	r2, [r5, #0]
 801397a:	461a      	mov	r2, r3
 801397c:	f000 f838 	bl	80139f0 <_read>
 8013980:	1c43      	adds	r3, r0, #1
 8013982:	d102      	bne.n	801398a <_read_r+0x1e>
 8013984:	682b      	ldr	r3, [r5, #0]
 8013986:	b103      	cbz	r3, 801398a <_read_r+0x1e>
 8013988:	6023      	str	r3, [r4, #0]
 801398a:	bd38      	pop	{r3, r4, r5, pc}
 801398c:	20005624 	.word	0x20005624

08013990 <_close>:
 8013990:	4b02      	ldr	r3, [pc, #8]	; (801399c <_close+0xc>)
 8013992:	2258      	movs	r2, #88	; 0x58
 8013994:	601a      	str	r2, [r3, #0]
 8013996:	f04f 30ff 	mov.w	r0, #4294967295
 801399a:	4770      	bx	lr
 801399c:	20005624 	.word	0x20005624

080139a0 <_fstat>:
 80139a0:	4b02      	ldr	r3, [pc, #8]	; (80139ac <_fstat+0xc>)
 80139a2:	2258      	movs	r2, #88	; 0x58
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	f04f 30ff 	mov.w	r0, #4294967295
 80139aa:	4770      	bx	lr
 80139ac:	20005624 	.word	0x20005624

080139b0 <_getpid>:
 80139b0:	4b02      	ldr	r3, [pc, #8]	; (80139bc <_getpid+0xc>)
 80139b2:	2258      	movs	r2, #88	; 0x58
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	f04f 30ff 	mov.w	r0, #4294967295
 80139ba:	4770      	bx	lr
 80139bc:	20005624 	.word	0x20005624

080139c0 <_isatty>:
 80139c0:	4b02      	ldr	r3, [pc, #8]	; (80139cc <_isatty+0xc>)
 80139c2:	2258      	movs	r2, #88	; 0x58
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	2000      	movs	r0, #0
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	20005624 	.word	0x20005624

080139d0 <_kill>:
 80139d0:	4b02      	ldr	r3, [pc, #8]	; (80139dc <_kill+0xc>)
 80139d2:	2258      	movs	r2, #88	; 0x58
 80139d4:	601a      	str	r2, [r3, #0]
 80139d6:	f04f 30ff 	mov.w	r0, #4294967295
 80139da:	4770      	bx	lr
 80139dc:	20005624 	.word	0x20005624

080139e0 <_lseek>:
 80139e0:	4b02      	ldr	r3, [pc, #8]	; (80139ec <_lseek+0xc>)
 80139e2:	2258      	movs	r2, #88	; 0x58
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	f04f 30ff 	mov.w	r0, #4294967295
 80139ea:	4770      	bx	lr
 80139ec:	20005624 	.word	0x20005624

080139f0 <_read>:
 80139f0:	4b02      	ldr	r3, [pc, #8]	; (80139fc <_read+0xc>)
 80139f2:	2258      	movs	r2, #88	; 0x58
 80139f4:	601a      	str	r2, [r3, #0]
 80139f6:	f04f 30ff 	mov.w	r0, #4294967295
 80139fa:	4770      	bx	lr
 80139fc:	20005624 	.word	0x20005624

08013a00 <_sbrk>:
 8013a00:	4a04      	ldr	r2, [pc, #16]	; (8013a14 <_sbrk+0x14>)
 8013a02:	6811      	ldr	r1, [r2, #0]
 8013a04:	4603      	mov	r3, r0
 8013a06:	b909      	cbnz	r1, 8013a0c <_sbrk+0xc>
 8013a08:	4903      	ldr	r1, [pc, #12]	; (8013a18 <_sbrk+0x18>)
 8013a0a:	6011      	str	r1, [r2, #0]
 8013a0c:	6810      	ldr	r0, [r2, #0]
 8013a0e:	4403      	add	r3, r0
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	4770      	bx	lr
 8013a14:	20005628 	.word	0x20005628
 8013a18:	200057e0 	.word	0x200057e0

08013a1c <_write>:
 8013a1c:	4b02      	ldr	r3, [pc, #8]	; (8013a28 <_write+0xc>)
 8013a1e:	2258      	movs	r2, #88	; 0x58
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	f04f 30ff 	mov.w	r0, #4294967295
 8013a26:	4770      	bx	lr
 8013a28:	20005624 	.word	0x20005624

08013a2c <_exit>:
 8013a2c:	e7fe      	b.n	8013a2c <_exit>
	...

08013a30 <_init>:
 8013a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a32:	bf00      	nop
 8013a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a36:	bc08      	pop	{r3}
 8013a38:	469e      	mov	lr, r3
 8013a3a:	4770      	bx	lr

08013a3c <_fini>:
 8013a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3e:	bf00      	nop
 8013a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a42:	bc08      	pop	{r3}
 8013a44:	469e      	mov	lr, r3
 8013a46:	4770      	bx	lr
